0	Fast path ordered emit.
1	Wraps an ObservableSource into an Observable.
2	Returns an observable sequence that contains the elements of this observable sequence sorted according to the specified sort
3	Construct a ConnectableObservable that will be emitted by the given ConnectableObservable.
4	Create a new UnicastProcessor with the specified capacity hint.
5	Create a processor that unicasts to the target address.
6	Try to subscribe using a scalar map.
7	Construct a Flowable that maps the value using the provided function.
8	Reset all handlers.
9	Creates an Maybe from a CompletableSource.
10	Construct an Maybe from a SingleSource.
11	Retry the Maybe.
12	Throws a NullPointerException if the object is null.
13	Returns an identity function.
14	Just a Callable
15	Returns a Function that just returns the given value.
16	Cast to a class
17	Create a new unicast subject.
18	Create a UnicastSubject with the given capacity hint.
19	Create a subject that will be unicasted to the given destination.
20	Create a subject that is unicastable.
21	Wait for the operation to complete.
22	Wait for the next operation to complete.
23	Await for the operation to complete.
24	Drains the queue and emits the value of the queue.
25	Request a prefetch of the given number of times.
26	Post complete.
27	Completes the computation.
28	Returns the notification s value.
29	Returns the error of the notification.
30	Validates that upstream and next disposable are disposed.
31	Sets the given observable observable observable to the given observable observable object.
32	Validates that upstream and next subscription are both non - null and has a non - null upstream
33	Sets the given upstream subscription to the given next subscription.
34	Add two long values.
35	multiply a by b and return the result.
36	Add n to requested.
37	Convert an exception to a NullPointerException.
38	Add an object to the tail of the list.
39	Shutdown the pool.
40	Creates a new ScheduledExecutorService with the given ThreadFactory.
41	Sets the subscription.
42	Emit the queue.
43	Wraps an error or throw it if it is an Error or RuntimeException.
44	Flattens the Throwable into a list of all CompositeExceptions.
45	Throw an exception if it is not an exception.
46	Clear the disposable.
47	Returns the number of resources in the set.
48	Try to subscribe to the source observable.
49	Construct an observable sequence that maps the observable sequence with the result of applying the given function to
50	Accept all objects in the queue.
51	Accept an observer.
52	Start the queue.
53	Start unbounded.
54	Inserts the specified object into the queue.
55	Get the disposable object.
56	Completes this observable.
57	This method is called when the source is ready to consume.
58	Completes the future.
59	Returns a Flowable that emits the results of applying the supplied function to each item in the source
60	Returns a Flowable that emits the results of applying the provided function to each item in the source
61	Returns a flowable that emits the elements of the source observable.
62	Wait for the specified number of times.
63	Request a number of milliseconds.
64	Add a PublishDisposable to the list of subscribers.
65	Remove a PublishDisposable from the list of subscribers.
66	Construct a ConnectableFlowable that will be observable by the given Publisher.
67	Parse the annotations on the given method.
68	Sets the delay in milliseconds.
69	Create an error response.
70	Calculates the delay in milliseconds.
71	Create the sample data.
72	Returns the HttpMethod object for the given method.
73	Search for a user in the directory.
74	Encodes the given password using the given salt generator.
75	Checks if the rawPassword matches the encodedPassword.
76	Perform version checks.
77	Checks to see if the checks should be disabled.
78	Get the version of Spring.
79	Configures the attribute exchange.
80	OAuth2 client.
81	The OAuth2 resource server.
82	Returns a ChannelRequestMatcherRegistry that can be used to configure the HttpSecurity channel.
83	Compares the specified attribute with the specified value.
84	Retrieve an entry from the directory.
85	Search for multiple attribute values.
86	Search for multiple attribute values.
87	Internal method to search for a single entry.
88	Build the search controls.
89	This method will lookup the primary keys.
90	Build the details for the J2EE user.
91	Creates a root bean definition for the embedded server.
92	Servlet API filter.
93	Create JAAS API filter.
94	Create a WhitelistedDefaultTyping builder.
95	Insert a Spring Security FilterChain.
96	Get the token for a given series.
97	Get the list of grants for the given attributes.
98	Creates a new Cipher instance with the given algorithm.
99	Overrides the super method to catch ServletException and throw a RuntimeException.
100	Checks if the request requires authentication. If the request requires authentication then the response will be sent
101	Check if the pre - authenticated principal has changed and will be reauthenticated.
102	Perform the actual authentication.
103	Check the content length.
104	Maps authorities to their respective names.
105	Set the login processing URL.
106	Update the default values for the authentication.
107	Update access defaults.
108	Map the password.
109	Extract the remember me cookie from the request.
110	Encodes the cookie tokens.
111	Set the cookie.
112	Resolve the argument.
113	Extract the query string from the request.
114	Get the port from the service URL.
115	Returns the principal of the current authentication.
116	Logout the user.
117	Authenticate the user.
118	Builds the provider URL.
119	Sets the context environment properties.
120	Get the redirect URL.
121	This method is called when the end tag is reached.
122	Initializes the UserDetailsService.
123	Get the UserDetailsService.
124	Add Pkce parameters to the attributes.
125	Checks if the request requires authentication.
126	Check if the request requires authentication.
127	Proxy ticket request.
128	Checks if the current user is authenticated.
129	Checks if the request matches the proxy receptor matcher.
130	Create a security expression root.
131	Gets the JWKSet.
132	URL - encode a string.
133	Get the list of groups that the current user is a member of.
134	Load user details from the database.
135	Get the pre - authenticated principal.
136	Concatenate multiple byte arrays.
137	Creates a subarray of the specified range.
138	Get the list of grants for the given attributes.
139	Preprocess the attributes2grantedAuthoritiesMap.
140	Get the collection of grants for the given value.
141	Add the collection of grants to the result.
142	Get the pre - authenticated principal.
143	Get the shared object.
144	Build a redirect URL for https.
145	Invokes the advisor.
146	Adds ROLE_ to the role name.
147	Add ROLE_XXX to roles array
148	Process the cookie.
149	Create a persistent login for the user.
150	Attempt to switch to a user.
151	This method is called when the user is about to switch to another user.
152	Sets the URL of the URL to redirect the user to when the user exits.
153	Display a random contact
154	The SpringSecurityFilterChain is a filter that can be applied to the web application.
155	Decodes a JWT.
156	Returns true if the current user has the access to this resource.
157	Check if the current user is allowed to access this resource.
158	Convert the given JWT into a collection of Granted Authorities.
159	Generate a CSRF token for the given request.
160	Display the contact administration page
161	Display a page to add permission to a contact
162	Adds a permission to a contact.
163	Deletes a permission from a contact.
164	If the role is null or empty then return the role. If the role is prefixed with
165	Creates a UserDetailsResourceFactoryBean from a string.
166	Get the attribute values for the given attribute name.
167	Get the first attribute value.
168	Encodes the given string into a byte array.
169	Decodes a byte array into a String.
170	Lookup the parameter names of the given object.
171	Add a contact
172	Find attributes that are specified for the given method and target class.
173	Adds a secure method to the methodMap.
174	Returns a collection of all ConfigAttributes in this method.
175	Check if the method name is matched by the mapped name.
176	Any request matcher.
177	Handle bind exception.
178	Get a random contact
179	Clear authentication attributes.
180	Get a Field from a Class or a super - class.
181	Create service url.
182	Create redirect url.
183	Extract SHA prefix from SHA prefix.
184	Reject the request.
185	Checks for duplicate filters.
186	Returns the registered types.
187	Extract the cause of the throwable.
188	Register the access manager.
189	Converts a collection of authorities to a Set of authorities.
190	Compares two byte arrays and returns true if they match.
191	Sets the default failure URL.
192	Sets the resolve hidden inputs function.
193	Build the request URL.
194	Checks if the given URL is an absolute URL.
195	Returns the list of OpenID attributes for the given identifier.
196	Convert identifier to a String type if possible.
197	Create entries.
198	Creates or updates an object identity.
199	Update ObjectIdentity.
200	Save the request in the session.
201	Create a matcher that matches the given path patterns.
202	Any exchange matches.
203	Deluxes the given password and salt.
204	Text encryptor.
205	Queryable text encryptor.
206	Write the X - Frame - Options headers to the HttpServletResponse.
207	Determine the target URL.
208	Determine the target URL.
209	Sets the target URL parameter.
210	Get the directory with the specified parent.
211	Build a DN from the given username.
212	Create shared objects.
213	Configure JAAS using a loop.
214	Get current date.
215	Internal method to parse a date from a string.
216	Update the cache.
217	Set the authentication details for the given request.
218	Get security name for the given subject.
219	Get the groups for a given securityName.
220	Changes the password of the current user.
221	Build a DistinguishedName for the group.
222	This method is called when allowable sessions are exceeded.
223	Copy details from source to dest if it is not already there.
224	Get the filters for the given request.
225	Get filters for a given URL
226	Get the application context.
227	Get the full DN.
228	Sets session attributes for the mock request.
229	Creates a basic authentication scheme.
230	Adds a list of filters to the RestAssured. filters list.
231	Adds a filter to the RestAssured. filters list.
232	Creates a basic authentication scheme.
233	Creates an NTLM AuthenticationScheme.
234	Form Authentication Scheme.
235	Proxy the given URI.
236	Print the response body and response headers.
237	Configure the RESTful interface for the redirect.
238	Sets the charset for the query parameter.
239	Sets the default object mapper type.
240	Set the JAXBObjectMapperFactory for the JacksonObjectMapperFactory.
241	Log config.
242	Session config.
243	Object mapper config.
244	Specifies that the JSON configuration will be used for the REST call.
245	The XML configuration.
246	The configuration for the encoder.
247	The configuration for the header.
248	Apply configuration for asynchronous processing.
249	Sets the mockMvcConfig.
250	Sets the configuration for multi - part rest requests.
251	The configuration for the parameter.
252	Sets the matcher configuration.
253	Allow all hostnames in the certificate.
254	Declare the namespaces for the XMLPath.
255	Sets the namespace declaration for the given prefix and namespaceURI.
256	Perform a HTTP request.
257	Sets the headers to be sent to the client.
258	Set the default proxy for the connection.
259	Set the control name.
260	Add a header to the message.
261	Set basic auth.
262	Set NTLM credentials.
263	Creates a Headers object with the given header.
264	Reset all the internal variables.
265	Sets the response headers.
266	Build the response.
267	Matches a cookie value.
268	Matches a cookie comment.
269	Matches a cookie expiry date.
270	Matches a cookie domain.
271	Matches a cookie path.
272	Matches a cookie if it is secured.
273	Matches a cookie with HTTP - Only enabled.
274	Matches a cookie s version field.
275	Matches cookie s maxAge attribute.
276	Expect the response header with the given name to match the given matcher.
277	Expect that the response header has the given name and value.
278	Sets a cookie with the given name and expected value.
279	Sets the host to use for proxying.
280	Specifies the return type of the number operation.
281	Sets the default parser type.
282	Set the default stream to use.
283	Enable logging of request and response if validation fails.
284	Create a new HttpRequestBase instance.
285	Set the default boundary.
286	Add an attribute to the request.
287	Add a header to the request.
288	Add a multipart part to the request.
289	Adds additional result handlers to the request.
290	Sets a parameter to be used in the request.
291	Add the given HTTP client parameters to this HttpClientConfig.
292	Sets the HttpClientFactory to use.
293	Set the multipart mode.
294	Gets a JSON object.
295	Get the value at the given path as an integer.
296	Get a byte.
297	Get the value at the given path as a short.
298	Get a Float.
299	Get a double property.
300	Get a property as a long.
301	Get a list of objects from the JSON at path.
302	Get a Map.
303	Get object from path.
304	Set the body of the request.
305	Add a cookie to the request.
306	Add a parameter to the request.
307	Add a parameter to the request.
308	Sets the update strategy for the queryParams update strategy requestParameter update strategy attribute and session update strategies
309	Log the response to the given stream if the matcher matches.
310	Creates a new Cookies object with the given cookies.
311	Remove the sources from the backing map and remove the keys.
312	Index the explicit bindings.
313	Get the binding for the given key.
314	Find a constant string binding.
315	Recursively cleanup the binding.
316	Remove a failed JIT binding.
317	Returns the internal dependencies of the given binding.
318	Create an UninitializedBinding.
319	Returns an array of objects containing the values of the parameterInjectors.
320	Binds the injector to the state.
321	Binds a logger to the injector.
322	Checks for misplaced binding annotations on a member.
323	Checks if a overrides b.
324	Initializes the delegate.
325	The type of the provider.
326	Resolve all the given types.
327	Canonicalizes a key.
328	Configure built - in converters.
329	Canonicalizes the given class loader.
330	Checks if the class loader has the same version of cglib.
331	Checks if the given member is publicly callable.
332	Fixes the annotations of a key.
333	Request injection.
334	Validates the pending injections.
335	Creates a new instance of this class.
336	Wraps the given servlet request with a wrapper around the given servletPipeline.
337	Creates a scoped factory.
338	Makes a Scoping injectable.
339	Normalize the given path.
340	Generate an annotation.
341	Checks if retention is at runtime.
342	Find the scope annotation.
343	Returns a Key object for the given type member and annotations.
344	Returns the name of the key.
345	Initializes the delegate provider.
346	Add a direct type binding to the bindingSelection.
347	Get a ConstructorInjector.
348	Checks if interceptor class has scope annotation.
349	Construct a real map with the given key and value types.
350	Creates a new key for the new value.
351	Provisions a new instance of the type.
352	Replace message.
353	Creates a module that can be used to install methods from a module.
354	Get the assist methods.
355	Checks if the TypeLiteral is not specified in the ConfigurationException.
356	Checks if the constructor has matching parameters.
357	Returns the set of dependencies for the given ctor point and implementation.
358	Remove Assisted dependencies.
359	Checks if the dependency graph is valid for optimizing Assisted - based injections.
360	Create a binding from the given method and arguments.
361	Invoke a method on the proxy.
362	Checks for missing implementation.
363	Create a new RealMultibinder for the given key.
364	Create a new multibinder element.
365	Find the next filter that matches the request.
366	Checks if the constructor has at - inject annotation.
367	Returns the constructor injection point.
368	Returns the set of dependencies that are internal to this factory.
369	Returns a Module instance for the given module.
370	Returns the annotation on the given method.
371	Returns the line number of the given member.
372	Initializes the injector.
373	Wraps a callable with a seed map.
374	Wrap the callable in a transfer request.
375	Validates that the given value is compatible with the given key.
376	Get the MembersInjectorImpl for the given key.
377	Create a MembersInjectorImpl instance with the given type and listeners.
378	Returns an immutable list of InjectedProcedures.
379	Get a Key instance.
380	Creates a strategy for an annotation.
381	Creates an annotation strategy for the given annotation type.
382	Prune the stack trace of the throwable.
383	Gets the binding source.
384	Format the given messages.
385	Creates a new message with the given format and arguments.
386	Creates a new message with the specified cause.
387	Creates a new message with the given cause.
388	Convert an object to another object.
389	Returns true if the class should be skipped.
390	Get the source code for the given module classes.
391	Entry point for the jconsole program.
392	Pushes a dependency onto the stack.
393	Pushes the given source object onto the stack.
394	Creates an initializable instance that can be used to initialize the instance.
395	Provisions a provider into a non - null value.
396	Process connection event.
397	Add a connection event processor.
398	Get the result of the future task.
399	Throw a Throwable.
400	Register a processor for the given command.
401	Registers a default processor.
402	Get the RemotingProcessor for the given command code.
403	Try to get a Url object from the parsed urls.
404	Decodes the protocol code.
405	Get all connections from all pools.
406	Scan the pool.
407	Get and create a connection pool.
408	create a new connection pool and heal if need.
409	Remove a connection pool from the run - state.
410	heal if need.
411	create connection in pool
412	Close a connection.
413	Called when the connection is closed.
414	Closes the connection.
415	Set an attribute.
416	Register a user processor.
417	Register processor with rpc server.
418	Dispatch to user processor.
419	Deserialize a RpcRequestCommand.
420	Pre - process RemotingContext.
421	Log the timeout.
422	Debug Log
423	Process the message.
424	Invoke a remote method with a callback.
425	Sends a remoting request to the remote peer.
426	Convert a bit set to a byte.
427	Convert an integer into a BitSet.
428	Add a reconnect task.
429	Stops the healing thread.
430	Creates a RemotingCommand from the given request object.
431	Filter the connections.
432	Monitor connection pool changes.
433	close fresh select connections
434	Get a system property as a boolean.
435	Log info.
436	Check if the request timeout has passed.
437	Get the user processor for the given class.
438	Get a random connection from the given list.
439	Get a value from the context.
440	Get the property.
441	Resolve the response object.
442	Converts a ResponseCommand to a Response Object.
443	Converts the given response command to an exception.
444	detailErrMsg - detail error message
445	Create a server exception.
446	Print connection trace log.
447	Creates a new EventLoopGroup.
448	Parse the remote address of the given channel.
449	Parse the local address of the channel.
450	Parse the remote IP address of the given channel.
451	Parse the hostname of the remote host.
452	Parse the local IP address of the given channel.
453	Get the remote port from the given channel.
454	Parse the local port of the given channel.
455	Parse a SocketAddress to get the host IP address.
456	Add a connection to the pool.
457	Remove a connection and try to close it.
458	Get a connection.
459	Register a custom serializer for a class.
460	Get custom serializer for a class.
461	Registers a custom serializer for the given command code.
462	Get custom serializer for a command.
463	Start the connection monitor thread.
464	Check if the remote address is connected to the server.
465	Init WriteBufferWaterMark.
466	Returns a FramedataImpl1 object for the given opcode.
467	Write all buffered data to the socket.
468	Set the code of the close frame.
469	Validate UTF - 8 payload.
470	Update the payload.
471	Checks if the protocol is accepted by the protocol that is provided by the client.
472	Check that the length of a single frame is within the allowed limits.
473	Check that real packet size is not larger than maxpacketsize.
474	Generate the final key.
475	Process a continuous frame and a non - fin frame.
476	Process a binary frame.
477	Log the exception during onWebsocketMessage.
478	Process a single frame of text.
479	Process the next continuous frame.
480	Process a frame that is not fin.
481	Process a closing frame.
482	Check if the buffer limit is reached.
483	Get the payload from the byte buffer list.
484	Returns the total size of the byte buffer list.
485	Translate the handshake from the HTTP server to the CLIENT.
486	Translate the HTTP handshake from the HTTP client to the SERVER.
487	Decode the socket buffer.
488	Close the connection due to an invalid handshake.
489	Sends a 500 error response.
490	Generates a response buffer that indicates that the error occured.
491	Sends text to the client.
492	Reset the connection.
493	Connect to the WebSocket server.
494	Get the port number.
495	Sends the handshake.
496	Set the timeout for when a connection is lost.
497	Stop the connection lost timer.
498	Start the connection lost timer.
499	Restart the connection lost timer.
500	Execute a connection lost detection.
501	Cancels the connection lost timer.
502	This method is called when a websocket handshake is received as a server.
503	Sends a PING frame to the client.
504	Stop the selector thread.
505	Get the port number.
506	Read additional data from the input queue.
507	Accept a new connection.
508	Read data from the socket.
509	Write the data to the socket.
510	Setup selector and server thread.
511	Ensures that only one thread can be started.
512	Shutdowns the server.
513	Get the socket.
514	Broadcast data to all clients in the clients collection.
515	Broadcast text to all clients.
516	Broadcast data to all clients in the clients collection.
517	Fill the draft s frames with frames from the draft s data and buffers.
518	Transfer a byte buffer from source to dest.
519	Start the JPA API.
520	Get an EntityManager by name.
521	With transaction.
522	Convert the given arguments to a scala buffer.
523	Wraps the given arguments into a List if necessary.
524	Get a message from the messages.
525	Get a translation string from the messages.
526	Returns true if the message is defined at the given key in the given language.
527	Return a new Messages object with the preferred language.
528	Return the preferred messages for this language.
529	Set the language of the result.
530	The bindings of this builder.
531	The bindings of the receiver.
532	The bindings of the receiver.
533	Overrides the delegate with the given modules.
534	Overrides the receiver with the given modules.
535	Set the bindings to override.
536	Disable the given modules.
537	Call the method.
538	Call the method on the given request.
539	Get the existing file.
540	Returns the binding of the underlying annotation in the specified scope.
541	Creates a new tuple with the given values.
542	Static factory method for creating a new tuple of 5 elements.
543	Convert the given ExecutionContext to an Executor.
544	Creates a new JPAConfig instance with persistence units.
545	Creates a JPAConfig instance with persistence units.
546	Creates a JPAConfig instance from a Map.
547	String flow.
548	Json callback.
549	Adds a constraint validator for the given key.
550	Creates a new instance of the given key.
551	Get the method that matches the given name and parameter types.
552	Invoked when a client error is encountered.
553	Renders a bad request response.
554	A forbidden response.
555	Handle not found page.
556	Handles a server error.
557	Log error.
558	Thrown if the throwable is caused by a source mapper.
559	Renders a dev error page.
560	Render error page.
561	Creates a handler that can be used to build documentation.
562	Creates a handler for the build document.
563	Creates a build doc handler from a directory and a jar file.
564	Builds a documentation handler from a directory and a jar file.
565	Create a handler for the given jar file.
566	Consume data.
567	Creates a HttpEntity from a Content.
568	Create a strict entity from a string.
569	Chunked entity.
570	A status response with the given status code and JSON - encoded content.
571	A simple response with status code.
572	HTTP status.
573	Returns a Result that will send the given status code and content.
574	Returns a result with the given status and content.
575	find by id
576	Returns a lang with preferred languages.
577	Unique this call.
578	Add a fragment to the call.
579	Returns the absolute URL for the given request.
580	Returns the web socket URL for the given request.
581	Connection runnable function.
582	Connection callable function.
583	Creates a server instance for a router.
584	Convert an object to a JsonNode.
585	Convert a JsonNode to an instance of the given class.
586	Parse the given string.
587	Parse the given input stream.
588	Returns the relative path between the start and target paths.
589	Canonicalizes a URL.
590	Returns a list of tuples of displayable constraints.
591	Displayable constraint.
592	Timeouts the given stage in the given time unit.
593	Checks if the two classes are assignable.
594	Parses a CRON expression.
595	Get the next interval in the given CRON pattern for the given date.
596	Create a new AhcWSClient.
597	The builder will load the application configuration and override the configuration.
598	Render the todo page.
599	Stores a string value in the session.
600	Flash a message.
601	Returns a binding key that is qualified with the given annotation.
602	Returns a binding key that is qualified with the given annotation.
603	Creates a binding to the given implementation.
604	Creates a binding to the underlying binding.
605	Creates a binding to the underlying binding.
606	Returns a new binding that is the same as this binding but with the specified key.
607	Returns a binding that is bound to the given provider.
608	Returns a list of available languages.
609	Returns a lang preferred for the given application.
610	Construct a SimpleEvolutionsReader from a Map.
611	Read default evolutions.
612	Cleanup Evolutions.
613	Load the configuration from the delegate application.
614	Load modules from the delegate application.
615	Load modules into the builder.
616	Load modules into GuiceApplicationBuilder.
617	Load modules into the application.
618	Load a binding.
619	Create a builder for the Guice Application.
620	Encodes the given cookie into a string.
621	The EntityManager to use.
622	Returns the stack of EntityManager objects.
623	Push or pop the EntityManager.
624	A flow that is bypassing the flow.
625	A flow that is a flow that is a bypass.
626	Construct an ActorRef from a Props.
627	Convert error arguments.
628	Fill the form with the given value.
629	Returns all global errors.
630	Returns the errors as JSON.
631	Get the value of the value.
632	Fill the form with the given value.
633	Parse the given text into an instance of the given class.
634	Parse the given text into an object of the given field.
635	Print a T to a String.
636	Print a field with a type.
637	Print a string.
638	Register the converter for Optional.
639	Register a SimpleFormatter for the given field type.
640	Registers a formatter for the given annotation.
641	Encodes the given cookie.
642	Select nodes from the given node object.
643	Convert Java List to Seq
644	Convert an array to a Seq
645	Construct a Seq from an array of T.
646	WebSocket acceptor for JSON messages.
647	Accept or result.
648	Workaround for access - control.
649	Returns the cost of a primitive promotion between the srcClass and destClass.
650	Returns the total cost of transformation between the source and the destination.
651	Returns the cost of object transformation.
652	Get a localized message.
653	Get the value for the first key that matches the given key.
654	Creates a database from the given parameters.
655	Creates a parallel sorter for the given array of objects.
656	Sorts the elements in the table according to the comparator.
657	Merge sort.
658	Invoke the protected method.
659	casts a numeric type to another type.
660	Load an argument at the given index.
661	Emit a field instruction.
662	Pushes zero or null onto the stack.
663	Unbox or zero.
664	Generates code that processes an array.
665	Compare two null values.
666	Resolve all the signatures.
667	Get methods from superclass and interfaces.
668	Filter the constructors of a class.
669	Sets the superclass of this class.
670	Get field.
671	Add a method to the list.
672	Returns the cardinality of this BitSet.
673	Sets the naming policy.
674	Find methods.
675	Resolve child.
676	Read a string from a file.
677	Sets the host header.
678	Create a new HttpRequest with the specified method and destination.
679	Create a CONNECT HttpRequest with the specified destination.
680	Create a GET HttpRequest with the specified destination.
681	Create a POST HttpRequest with the specified destination.
682	HTTP PUT request.
683	Create a PATCH HttpRequest with the specified destination.
684	HTTP DELETE request.
685	HEAD request.
686	Static factory method for HTTP TRACE.
687	HTTP OPTIONS request.
688	Set the path of the request.
689	Set the HTTP Cookie header.
690	Add a query parameter to the HttpRequest.
691	Add query string parameters.
692	Sets the query string.
693	Get the query string.
694	Get the host URL.
695	Sets the Authorization header to include the given username and password.
696	Set the host header.
697	Build the request buffer.
698	Sends the request and returns the response.
699	Remove a range from the handler chain.
700	Returns the number of exception table entries in the exception table.
701	Collect action interceptors.
702	Collects all action filters.
703	Collects the action results.
704	Collects all action runtimes.
705	Set a simple property.
706	Get the property.
707	Extract this reference from the property name.
708	Returns a PrintWriter that can be used to print to the output stream.
709	Sets the object reference.
710	Get the object reference for the given name.
711	Lookup an object reference.
712	Get the table descriptor for the given table reference.
713	Find table descriptor by column reference.
714	Get the table alias for a table reference.
715	Register a table reference.
716	Lookup table reference.
717	Register a hint.
718	Serializes the given value to JSON.
719	Injects the servlet request attributes into targets.
720	Inject servlet request parameters into this request.
721	Inject uploaded files into targets.
722	Convert a property name to a column name.
723	Convert column name to property name.
724	Convert the given column name to the corresponding column name.
725	Store a value in a PreparedStatement.
726	Prepare a value to be returned.
727	Returns a set of all wrappers.
728	Resolves a wrapper class.
729	Create a wrapper instance.
730	Converts a path to a system path.
731	Get the path of a file.
732	Splits a filename into a path and extension.
733	Returns the relative path from the target path to the target path.
734	Registers a MADL - C component.
735	Registers an action config.
736	Start the Madvoc web application.
737	Configure defaults.
738	Register Madvoc WebApp components.
739	Exclude jars from scanning.
740	Include jars.
741	Include the given entries.
742	Exclude the given entries from the scan.
743	Scan jar file.
744	Scan the classpath.
745	Returns the bytecode signature of a class.
746	Scan the given paths.
747	Start scanning the files.
748	Create a new transaction.
749	Default or RequestScope type.
750	Gets or creates a new scope.
751	For a scope.
752	Decodes a byte array from a Unicode character array.
753	Prepares a CSRF token.
754	Assure that the size of the token set is at least as large as the maximum allowed
755	Checks if a token is valid.
756	Create a BeanCopy from a source object.
757	Copy the bean.
758	Visit a property.
759	Initializes this template.
760	Resolves a Petite scope.
761	Registers a petite bean.
762	Register a bean.
763	Remove all beans of the given type.
764	Resolve bean names for a given type.
765	Register a Petite constructor injection point.
766	Register a petite property injection point.
767	Register a Set Injection Point for a Petite bean.
768	Registers a Petite method injection point.
769	Register the specified init methods.
770	Register destroy methods.
771	Register a petite provider.
772	Register a petite provider.
773	For each bean of the given type and invoke the given consumer with the bean name.
774	Define parameters.
775	Intercepts the action request.
776	Resolves the Java version number.
777	Pushes an integer onto the stack.
778	Check that the given argument index is valid.
779	Advice field name.
780	Advice method name.
781	load special method arguments.
782	Load the static method arguments.
783	Load virtual method arguments.
784	Load a method argument.
785	Stores the specified method argument.
786	Prepares the return value of a method.
787	Create a key for a method signature.
788	Generates instruction to create a new array of the given type.
789	Store the given componentType into an array.
790	Extract encoding from the given content type.
791	Checks if the given flags are empty.
792	Resolve the bearer token from the Authorization header.
793	Require authentication.
794	Prepares the response for a download of a file.
795	Prepares the response object.
796	Get all cookies with the given name.
797	Read the request body from the request reader.
798	Read the request body from the stream.
799	Stores the context path in the request and the context context servlet context.
800	Stores the context path in the ServletContext.
801	Checks if the given name is a GET parameter.
802	Prepares the given parameter array for the request.
803	Copy all the request parameters to the servlet request attributes.
804	Invoke the tag body.
805	Renders the specified JspFragment as a char array.
806	Renders the JspFragment and returns the rendered string.
807	Invoke all init methods that match the invocation strategy.
808	Call all destroy methods.
809	Create a new instance of the bean.
810	Injects bean parameters.
811	Rewrite the action path.
812	Add a header.
813	Add a new property to the props map.
814	Sets a base property.
815	Put a profile property.
816	Get the profile property.
817	Resolve macros.
818	Extract properties from the base properties.
819	Stream to the next byte.
820	Hash a password using BCrypt.
821	Checks if the plaintext is a hashed password.
822	Copy all bytes from the input stream to the output stream.
823	Copy max bytes from the input stream to the output stream.
824	Parse an action method.
825	Resolve action config.
826	Detect and register an action alias.
827	Read action interceptors.
828	Read action filters.
829	read action path from actionPackage.
830	Read method action path.
831	Parse the method alias.
832	Create an ActionRuntime object.
833	Set the Last - Modified header if the request is newer than the last modified date.
834	Apply advice to target class.
835	Inject target into proxy.
836	Visit an annotation.
837	Resolve real name.
838	Resolve the real name.
839	Lookup the TypeData for the given class.
840	Lookup the TypeData for the given type.
841	Find a subclass of the given type.
842	Resolve a JSON name for a class.
843	Resolve real name.
844	Get the content of the file.
845	Copy the bootstrap methods from the class file to the symbol table.
846	Sets the major version and the class name.
847	Puts the constant pool into the given output.
848	Puts the bootstrap methods for this class into the given ByteVector.
849	Add a field reference to a class member.
850	Adds a constant to the symbol table.
851	Adds a constant reference to the constant pool.
852	Adds a constant member reference.
853	Adds a constant.
854	Adds a constant integer or float to the constant pool.
855	Adds a constant.
856	Adds a constant long or double.
857	Adds a constant to the constant pool.
858	Adds a constant name and type to the symbol table.
859	Adds a UTF - 8 constant to the constant pool.
860	Adds a constant UTF - 8.
861	Adds a constant constant to the constant pool.
862	Adds a constant method handle entry.
863	Adds a constant to the symbol table that is dynamically referenced by a bootstrap method.
864	Adds a constant invoke dynamic.
865	Adds a constant to the constant pool.
866	Adds a constant or method reference.
867	Adds a constant reference to the constant pool.
868	Adds a constant UTF - 8 reference to the constant pool.
869	Adds a bootstrap method to the constant pool.
870	Add a merged type.
871	Hash a string.
872	Clear all entries.
873	Get all values for the given key.
874	Returns an iterator over the entries in this list.
875	Returns a list of all entries in the list.
876	Grow the buffer.
877	Append a range of characters from a CharSequence to this FastCharBuffer.
878	Visit an annotation.
879	Creates the proxy methods for the current method.
880	Create the first chain delegate.
881	Create the first chain delegate continue.
882	Parse path.
883	Pushes a field onto the end of the path.
884	Configure the servlet context.
885	Execute the method.
886	Returns an array of all field descriptors.
887	Creates a new bean definition for the registration.
888	Converts JtxTransactionMode to DbTransactionMode.
889	Read a property from the source object.
890	Put all entries from the given map.
891	Append buffer to this buffer.
892	Write the list to the writer.
893	Write the list to the output stream.
894	Writes the list to the OutputStream.
895	Get a string.
896	Get an Integer.
897	Get a Long.
898	Get a Double.
899	Get a Float.
900	Get the value associated with the given key.
901	Adds a new key - value pair to the object.
902	Use a folder.
903	Receive all the messages in the folder.
904	Update the flags of the given message.
905	Close the given folder if it is opened.
906	Lookup a named parameter.
907	Alias target string.
908	Validate this action.
909	Add a Violation to the Validator.
910	Sets the MIME type of the RawData.
911	Download file as a file extension.
912	Sets the target stream.
913	Sets the target class.
914	Sets the target class.
915	Process the target class.
916	Create a proxy.
917	Creates a proxy class.
918	Create a new instance of the class defined by this Proxetta.
919	Dumps the given byte array to the debug folder.
920	Sets the sender address.
921	Set the to address.
922	Set the to address.
923	Set the recipient s email addresses.
924	Set the cc addresses.
925	Sends a plain text message.
926	Sends a plain text message with the given HTML content.
927	Set a header.
928	Gets the system property.
929	Returns a boolean value from the configuration file.
930	Returns the value of the specified parameter as an integer.
931	Returns the long value of the specified name.
932	Returns the resolved parameters for this method.
933	Serializes the given key value pair.
934	Lookup an action alias.
935	Resolve an alias.
936	resolve result path
937	Resolve a path and value into a string.
938	get last index of last slash dot in string
939	Returns the index of the last dot in the string after the last slash.
940	Returns the index of the last dot in the string after the last slash.
941	Strips the last camel case word from the given name.
942	Resolve schema name.
943	Resolve column descriptors.
944	Initialize the threefish key.
945	Mixes the two long arrays.
946	Perform a DEMIX operation.
947	Add s to the key schedule.
948	Initializes the hash table with the given key message and tweaks.
949	Encrypt a block.
950	Convert a byte array to a long array.
951	Removes any bounding characters from a string.
952	Get the path to the method.
953	Zlib file.
954	Gzip a file.
955	Ungzips a file.
956	List all entries in the zip file.
957	Unzips a zip file to a directory.
958	add file to zip archive.
959	add content to zip archive.
960	Get a FieldDescriptor for the given field name.
961	Get a property descriptor.
962	Sets the request bundle name.
963	Sets the locale to the session.
964	Gets the session locale.
965	Filter the parameters for the bean with the given beanName.
966	Add one or more profiles to the PropsEntries.
967	Get a long from the buffer.
968	Read the input stream.
969	Read a Label object from the bytecode.
970	Returns the bytecode offset of the TypeReference at the specified index.
971	Read the num_element_value_pairs field or num_element_value_pairs
972	Reads the verification type information.
973	Read the attribute_info attribute_name and attribute_length fields and return the offsets of
974	Inspects the constructors of the class.
975	Get the ctor descriptor for the given arguments.
976	Gets the request map.
977	Create a map of TransientBeanData.
978	Convert array to long array.
979	Initializes the Decora manager.
980	Specifies a consumer to consume file content.
981	Add a search path.
982	Add a search path.
983	Include the given patterns.
984	Add a pattern to be excluded from the find.
985	Add a path to the list of paths.
986	Find all files in the directory.
987	Initializes the todo list.
988	Returns an iterator over the files in the directory.
989	Resolve bean wiring mode.
990	Resolve bean name.
991	Returns the print writer.
992	Get the output stream.
993	Returns the class name of this type.
994	Gets the constructor descriptor.
995	Returns a method descriptor.
996	Get method descriptor.
997	Appends the descriptor.
998	Returns the size of this type.
999	Returns the number of arguments and return sizes in bytes.
1000	Mark the current transaction as marked as rollback only.
1001	Commit or rollback the transaction.
1002	Rolls back all the resources.
1003	Request a resource.
1004	Pops the name of the current object.
1005	Write a string.
1006	Writes a Unicode character.
1007	Writes a char sequence to the JSON stream.
1008	Sets the parsing error log level.
1009	Sets the start and length of the region.
1010	Returns true if the value is contained in the include string.
1011	Registers a pseudo function.
1012	Lookup a pseudo function.
1013	Visit the proxy class.
1014	Visit an annotation.
1015	Make a static init block.
1016	Makes a proxy constructor.
1017	Process the super methods.
1018	Find the last index in the range [ low high ).
1019	Adds prefix and suffix to the string if enabled.
1020	Replaces ASM instructions with the given class file.
1021	Returns an array of attribute prototypes.
1022	Register the default types for the SQL types.
1023	Register a type with the SqlTypeRegistry.
1024	Looks up a SQL type for a given class.
1025	Lookup a SQL type.
1026	Creates a SOCKS proxy.
1027	Creates a SOCKS5 proxy.
1028	Creates a proxy info object for HTTP proxy.
1029	Returns the total number of threads in the thread stack.
1030	Returns the number of threads with the given status.
1031	Associate a transaction with the current thread.
1032	Continue a participating transaction.
1033	Lookup the resource manager for the given resource type.
1034	Create a proxy object for the target class.
1035	Appends a method name to the path.
1036	Align text left and pad to size.
1037	Convert an object to a string.
1038	Converts a String to CamelCase.
1039	format a string with a paragraph of text.
1040	convert tabs to spaces
1041	Escape a string for use in a Java interpreter.
1042	Unescapes a Java string.
1043	Get a bean instance of the given type.
1044	Get a bean by its name.
1045	Initializes a bean definition.
1046	Invoke a provider.
1047	Adds a bean to the petite context.
1048	Set a bean property.
1049	Get a bean property.
1050	Shutdowns the bean manager.
1051	Resolve method parameters.
1052	Populate the form fields.
1053	Get the value.
1054	End the dom builder.
1055	Create a node for the given tag.
1056	Adds a tag to the current node.
1057	Remove the last child of the given node if it is a text node.
1058	Get the query string.
1059	Get action class name.
1060	Calculate the to position.
1061	Iterate collection.
1062	Iterate array.
1063	Replaces all occurrences of sub in s with with with.
1064	Replaces all occurrences of sub with with.
1065	Replaces all occurrences of sub in s with with with.
1066	Replaces the first occurrence of sub with with with.
1067	Replaces the first occurrence of sub with with.
1068	Replaces the last occurrence of sub in s with with with.
1069	Replaces the last occurrence of sub with with.
1070	Remove sub string from s.
1071	Removes the specified character from the end of the string.
1072	Checks if all strings are empty.
1073	Checks if all of the strings are blank.
1074	Convert an object to a String array.
1075	Change first character case.
1076	Title case.
1077	Compress chars.
1078	Checks if the string starts with the substring of the string.
1079	Checks if the string ends with the given character.
1080	Count the number of occurrences of sub in source.
1081	Compares two string arrays for equality.
1082	Find the first whitespace in the specified range.
1083	Strips leading char c from string.
1084	Strips trailing char c from string.
1085	Strips the specified character from the beginning and end of the string.
1086	Strips the first occurrence of c from string.
1087	Strips the first occurrence of c from string.
1088	Crop all the strings in the array.
1089	Remove any whitespace from the beginning of the string.
1090	Trims whitespace from the right.
1091	Returns the index of the first occurrence of the left boundary and the index of the right boundary
1092	Join a collection of strings with a separator.
1093	Joins the array elements into a String.
1094	Convert the source string to a new charset.
1095	Checks if the character at index is equal to the specified character.
1096	Surround string.
1097	Adds a prefix to a string.
1098	Adds suffix to string if it does not already exist.
1099	Cut string to the first occurrence of substring.
1100	Cut string from the first occurrence of substring.
1101	Cut the prefix from the string.
1102	Cuts a suffix from a string.
1103	Cut a string surround a prefix and suffix.
1104	Inserts the specified string at the specified offset.
1105	Repeats the source string by count times.
1106	Reverses the order of the given string.
1107	Returns the longest common prefix between two strings.
1108	Find common prefix.
1109	Shortens a string to a given length.
1110	Convert a String to upper case.
1111	Removes quotes from a string.
1112	Convert a byte array to a hexadecimal string.
1113	Get bytes from a String.
1114	Detect quote character.
1115	Visit the attribute.
1116	Visit an enum.
1117	Visit an annotation.
1118	Register a new type.
1119	Registers an entity of the given type.
1120	Remove an entity from the database.
1121	Creates an instance of the given type.
1122	Set the target interface.
1123	Inject target into wrapper.
1124	Lookup annotated properties for a given type.
1125	Detects a database connection and configures the database OOM.
1126	Closes the output stream.
1127	Writes a byte to the output stream.
1128	If the request is a session id in the URL then invalidate the session.
1129	Get the encoded name.
1130	Write the array to a byte array.
1131	Write the mail to a file.
1132	Write the mail to the given output stream.
1133	Append the argument type to the description.
1134	Prepends the argument type to the description.
1135	Change return type.
1136	Strip whitespace from text.
1137	Register a TypeConverter for a specific type.
1138	Lookup converter for a given type.
1139	Select nodes by CSS selector.
1140	Select the given selectors.
1141	Process selectors.
1142	Select the first node that matches the given query.
1143	Walks the descendant list of the given nodes and adds them to the given result list.
1144	Walks the tree of nodes and adds them to the result list.
1145	Select and add a node to the result if it matches the selector.
1146	Filter the current results with the given selector.
1147	Unpacks a CMap string.
1148	Refill the buffer if necessary.
1149	Creates a page of objects.
1150	remove the select part from the given SQL
1151	remove from from from select
1152	remove last order by
1153	Decodes HTML entities.
1154	Detect the name of the entity.
1155	Build order by clause.
1156	Build the SQL to select page.
1157	Resolve columns and properties of the given entity.
1158	Find by column name.
1159	Find a column descriptor by its property name.
1160	Get the property name of the column.
1161	Get the column name of the given property.
1162	Gets the id value.
1163	Sets the id value of the given object.
1164	Get the key value of the object.
1165	Appends a string to the end of the StringBand.
1166	Sets the index of the StringArray.
1167	Expands the array to a new capacity.
1168	Calculates the length of the array.
1169	Create a message to be displayed when a scope mixing is detected.
1170	Creates a proxy class for the given bean definition.
1171	Loop through the body.
1172	Initialize the file list.
1173	Checks if the file is accepted.
1174	Use watch file.
1175	Starts the watch task.
1176	Notify listeners of change.
1177	Adds an enumeration to the enumeration set.
1178	Compute the field info size.
1179	Put the field info.
1180	Creates a target that is a target that is a value.
1181	Write the given property value.
1182	Decorate the page content with the given decora content.
1183	Parse page.
1184	Write the content of the page to the given writer.
1185	Writes the content of the region to the page.
1186	Start listening for incoming connections.
1187	Run a process.
1188	Get the store.
1189	Create a GzipResponseStream.
1190	Initializes the template.
1191	Appends the alias to the given query.
1192	Append column name.
1193	Adds a rule definition to the list of rules.
1194	Applies the rules to the given value.
1195	Process includes.
1196	Process the excludes.
1197	Gets the pseudo class name.
1198	Adds all elements from the specified collection to this set.
1199	Finds an insertion point in the sorted set.
1200	Bind annotation config.
1201	Register a new ActionConfig for the given action config class.
1202	Lookup an ActionConfig by its type or annotation.
1203	Lookup action config and invoke actionConfigConsumer with it.
1204	Sets up the system properties for mail - related tasks.
1205	Validates that the value is within the context of the given context.
1206	Find the last table node.
1207	Fix the foster elements.
1208	Registers session beans.
1209	Get the session map.
1210	Initialize proxy class.
1211	Adds an advice init method.
1212	Register the bundle.
1213	Add a new line to the profile.
1214	Extract profiles and add to the key.
1215	Add a property.
1216	Convert a typedesc to a class name.
1217	Converts a type reference to a type reference name.
1218	Convert a typedesc to a signature.
1219	Convert a Java type to a Typeref.
1220	Add all consumers.
1221	Create a collection of the given length.
1222	Converts the given value to a collection of elements.
1223	Convert value to collection.
1224	Convert a collection of objects to a collection of objects.
1225	Convert a primitive array to a collection of primitive types.
1226	Sets the line number.
1227	Visit this node.
1228	Puts the bytecode offset into the bytecode buffer.
1229	Adds a forward reference.
1230	Resolve the forward reference.
1231	Mark this basic block as belonging to a subroutine.
1232	Add a return successor of the subroutine.
1233	Compares two strings and compares them with the first string.
1234	Fixes the accent.
1235	Put a byte value into the byte vector.
1236	Put 11 bytes.
1237	Put a short value into the byte vector.
1238	Put a 12 - bit value into the byte vector.
1239	Put 1 2 3 - bit unsigned short value.
1240	Put an int value into the byte vector.
1241	Put a byte value and two short values into this vector.
1242	Puts a long value into this vector.
1243	Put a byte array into this byte vector.
1244	Enlarges the buffer to a given size.
1245	Authenticates the user via HTTP session.
1246	Try to authenticate the user via the bearer token.
1247	Authenticate the user via HTTP Basic Auth.
1248	Find a default message.
1249	Gets a resource bundle.
1250	Get the element at the specified index.
1251	Sets the entity id.
1252	Save an entity.
1253	Update all the given entity.
1254	Update the property of the given entity with the given name and new value.
1255	Update the property of the specified entity.
1256	Find by id.
1257	Find by property.
1258	Find one entity.
1259	Delete entity by id.
1260	Delete the given entity by ID.
1261	Count the number of entities of the given type.
1262	Increases a property s value by delta.
1263	Decreases a property.
1264	Find related entities.
1265	Get all entities of the given type.
1266	Clear all entries.
1267	Returns a set of all the entries in this map.
1268	Sets the value associated with the specified key.
1269	Remove the entry for the specified key.
1270	Get the current stack trace.
1271	Get the stack trace of the given exception.
1272	Get the stack trace of the given exception.
1273	Gets the chain of exceptions from the given throwable.
1274	Convert the stack trace of an exception to a string.
1275	Convert the exception chain to a string.
1276	Build a message from the message and the cause.
1277	Unwraps the given Throwable.
1278	Register as consumer.
1279	Accept a Madvoc component class.
1280	Get the system class loader.
1281	Get a resource as an InputStream.
1282	Get a resource as an InputStream.
1283	Get the stream of the given class.
1284	Get the stream of a class.
1285	Add a new route chunk.
1286	Find or create a child chunk.
1287	Parse the request.
1288	Convert the given value to the given destination type and component type.
1289	Invoke a setter on the bean.
1290	Array forced set.
1291	Create a new bean property.
1292	Extract the type of the getter.
1293	Stops the authentication process.
1294	Start the authentication process.
1295	To date.
1296	To calendar calendar.
1297	Define proxy.
1298	Adds a check to the list.
1299	Resolve for a class.
1300	Add class checks.
1301	Collect annotation checks for a property.
1302	collect annotation checks.
1303	Copy the default check properties from the annotation to the destCheck.
1304	Encodes the source string using the given URI part.
1305	Encodes the given string with the given encoding.
1306	Encodes the scheme component with the given encoding.
1307	Encodes the host component.
1308	Encodes a port component.
1309	Encodes a path component.
1310	Encodes the given query string with the given encoding.
1311	Encodes the given query parameter with the given encoding.
1312	Encodes a fragment.
1313	Inspect the properties of the bean.
1314	Get all property descriptors.
1315	Get the cookies set in the response.
1316	Unzips the response body.
1317	Closes the HTTP connection.
1318	Checks if the reference scope is a subclass of ProtoScope or ThreadLocalScope.
1319	Prints the routes.
1320	Encrypt the content.
1321	Decrypt the given content.
1322	map to bean.
1323	Convert the elements of a List into a bean.
1324	Set the value of the given property.
1325	generates a new map from the given map.
1326	Compares two DbEntityColumnDescriptors.
1327	Sets a default header.
1328	Send the given request.
1329	Send the request.
1330	Add default headers to the given HttpRequest.
1331	Read the cookies from the response.
1332	Add all cookies to the given HttpRequest.
1333	Send an email.
1334	Sets the subject of the message.
1335	Set the sent date.
1336	Set the headers of the message.
1337	Set the people from the email.
1338	Set the recipients.
1339	Adds the body data to the given message.
1340	Set the content of the part to be sent.
1341	Create a body part for an attachment.
1342	Get the content type from the Content - Type header.
1343	Save the result set.
1344	Close all ResultSets associated with this query.
1345	Closes the query.
1346	Close the query.
1347	Sets the number of rows to fetch.
1348	Sets the maximum number of rows allowed in the current statement.
1349	Executes an UPDATE or DELETE query.
1350	Execute the count query.
1351	Get the generated columns.
1352	Get the query string.
1353	Create a proxy instance of the target class.
1354	Creates a collection from the given iterator.
1355	Construct a stream from an iterator.
1356	Compares two objects using the comparators.
1357	Set the default wiring mode.
1358	Print a message to standard out.
1359	Get the caller class.
1360	Shorten a class name.
1361	Exclude the given types from serialization.
1362	Serializes the given source object to the given appendable.
1363	Serializes the given object to a String.
1364	Clone an object via serialization.
1365	Serializes an object to a file.
1366	Reads an object from a file.
1367	Serializes an object to a byte array.
1368	Convert byte array to object.
1369	Resolve the table names for the mapped types.
1370	Create the table names for the given types.
1371	Read a column value.
1372	Cache the result set entities.
1373	Resolve providers.
1374	Converts the given table name to the corresponding entity name.
1375	Checks if the connection is valid.
1376	Render the view.
1377	Locate the target for the view.
1378	Returns a PrintWriter for the response.
1379	Returns the output stream.
1380	Writes the content to the response.
1381	Sets the content type.
1382	Print string to buffer.
1383	Login via basic auth.
1384	Create a JsonResult object with the token.
1385	Login via HTTP Basic Auth.
1386	Logout the user.
1387	Converts a URL to a File.
1388	Creates a directory.
1389	Creates a directory.
1390	Copies a file to another file.
1391	Copies a directory and all its contents.
1392	Moves a file to a different location.
1393	Move a directory.
1394	Deletes all files and subdirectories of the given directory.
1395	Reads a UTF - 8 string from a file.
1396	Read chars from a file.
1397	Write a set of characters to a file.
1398	Write string to file.
1399	Append string data to file.
1400	Read count bytes from file.
1401	Write a byte array to a file.
1402	Append bytes to a file.
1403	Copies a file or directory to another file.
1404	Deletes a file or directory.
1405	Creates a temporary directory.
1406	Checks if the given file is binary.
1407	Checks that the source and destination files are the same.
1408	Checks if the two files are copies.
1409	Prints the usage for the command.
1410	Resolve action method.
1411	Register an action method.
1412	Registers an alias for a path.
1413	Moves to the next iteration.
1414	Construct a CharArraySequence from a char array.
1415	Invoke the proxy method on the target object.
1416	Check if the input string matches uppercase.
1417	Returns a CharSequence of the specified range.
1418	Returns an array of URLs for the given class and its dependencies.
1419	Set the bcc addresses.
1420	Register a serializer for a given type.
1421	Lookup serializer for a given type.
1422	Parse the input stream.
1423	Gets the first value of a request parameter.
1424	Gets the request parameters for the specified parameter.
1425	Get a file upload parameter.
1426	Gets the files for the specified parameter.
1427	Initializes the filter.
1428	Parse the template.
1429	Find the end of the template string.
1430	Count the number of escapes in the template.
1431	Build a query string from the given map.
1432	parse the query string into a HttpMultiMap.
1433	Prepare header parameter name.
1434	Extract media type from content type.
1435	Convert a node to HTML.
1436	Convert the given node to an inner HTML string.
1437	Configures the servlet context.
1438	Reset the state of the object.
1439	Sets whether the parser should be lazy loaded.
1440	Replace the target class with a mapped type for the path.
1441	Parse a JSON string as a list of objects.
1442	Parse a JSON string as a map.
1443	Resolve lazy value.
1444	Skips object.
1445	Parse a string.
1446	Parse string content.
1447	Parse Unicode.
1448	Parse an unquoted string.
1449	Parse a number.
1450	Parse array content.
1451	Creates an empty constructor.
1452	Create a simple method wrapper.
1453	Resolve raw type name.
1454	Resolve a reference from a property value.
1455	Resolve references from method or constructor.
1456	Reads all references from the annotation on the given method or constructor.
1457	Build the default references for the given method or constructor.
1458	Build a default reference.
1459	Remove all duplicate names.
1460	Convert the references to BeanReferences.
1461	Convert an annotation value to a BeanReferences array.
1462	Run Jodd Joy.
1463	Find a method in a class.
1464	Finds a constructor that is assignable to the given parameter types.
1465	Resolve all interfaces of the given type.
1466	Compares two arrays of classes.
1467	Force access to an AccessibleObject.
1468	Create a new instance of the given class with the given parameters.
1469	Get the superclasses of the given type.
1470	Returns the first class that is a subclass of parentClass or null if there is no such class
1471	Returns a JAR file for the given class.
1472	Sleeps for a given amount of time.
1473	Sleeps for a long time.
1474	Wait for the given object to be done.
1475	Creates a ThreadFactory that creates a daemon thread.
1476	Get the value.
1477	Visits a parameter.
1478	Visit an annotation.
1479	Visit a type annotation.
1480	Visit a parameter annotation.
1481	Visits a field instruction.
1482	Generates a method instruction.
1483	Generates a invoke - dynamic instruction.
1484	Visits a jump instruction.
1485	visit a MULTI_ARRAY instruction.
1486	Visits a try - catch block.
1487	Visits a local variable annotation.
1488	Write properties to writer.
1489	Process the input stream.
1490	Moves to the next element in the list.
1491	Moves to the next result set.
1492	Joins the arrays.
1493	Joins the arrays into a new array of the given type.
1494	Resize the array to a new size.
1495	Appends an element to the end of the array.
1496	Remove a portion of the buffer.
1497	Returns the index of the first occurrence of the specified value in the specified array.
1498	Returns the index of the specified value in the specified array.
1499	Support for Arrays. indexOf
1500	Enables XHTML parsing.
1501	Parse the content.
1502	Parse the lagarto document.
1503	Compute the maximum stack and local variables for the current stack.
1504	End the current basic block.
1505	Collect the attribute prototypes.
1506	Injects the context of the given object.
1507	Registers a pseudo class.
1508	Lookup a pseudo class.
1509	Invoke action.
1510	Get all bean property names.
1511	Visit all properties in the bean.
1512	Checks if the property is equal to the rule.
1513	Resolve all methods of a given type.
1514	Read the filter configuration parameters.
1515	Send the bundle file to the client.
1516	Lookup a bundle file.
1517	Lookup the gzip bundle file.
1518	register bundle.
1519	Create a digest for the given source.
1520	Create a bundle.
1521	Delete all bundle files.
1522	Fixes relative URLs in the content.
1523	Update column.
1524	Create table ref name.
1525	Get the db session.
1526	Convert value to single element array.
1527	Parse a signature for generics.
1528	Resolve the given type.
1529	Match property types with excluded types.
1530	Open a connection for a query.
1531	Open the current transaction.
1532	Closes the current transaction.
1533	Commits the current transaction.
1534	Rollback the current transaction.
1535	Create a new Properties object from a properties file.
1536	Create a Properties object from a String.
1537	Load properties from a string.
1538	subset properties with prefix
1539	Create a new Properties object from the classpath.
1540	Get a property from a Map. If the property is not a String return defaultValue.
1541	Resolve all variables in the properties.
1542	Resolve a property.
1543	Resolve scope.
1544	Get transaction mode.
1545	Register the annotations.
1546	Read transaction annotation.
1547	Accept a node.
1548	Checks if the node is an element.
1549	Match attributes.
1550	Unescapes the given value.
1551	Build the list of packages to be installed on the classpath.
1552	Clone this node to another node.
1553	Detaches this node from its parent.
1554	Add child nodes.
1555	Inserts a child node at the specified index.
1556	Inserts newChild before refChild.
1557	Inserts the newChilds before the refChild.
1558	Inserts newChild after refChild.
1559	Inserts the newChilds after the refChild.
1560	Remove all child nodes.
1561	Find child node with given name.
1562	Filters the child nodes of this node.
1563	Check if the node tree is valid.
1564	Initializes the childElementNodes array.
1565	Initializes the siblingNameIndex property.
1566	Initializes the list of child nodes.
1567	Change the owner document of a node.
1568	Returns the previous sibling node with the same nodeName as this node.
1569	Get the text content of the current node.
1570	Get the HTML representation of the element.
1571	Get the inner HTML of the element.
1572	Visit all child nodes.
1573	Get the CSS path of this node.
1574	On decora tag.
1575	On id attribute start.
1576	Define the DecoraTag.
1577	Add a proxy aspect.
1578	Add a root package to the list of packages.
1579	Add root package of actionClass.
1580	Find the root package for the given action path.
1581	Resolve the message for a validation violation.
1582	Remove duplicate names.
1583	Add a new name pattern to the list of patterns to look for.
1584	For each target in the target list invoke the consumer for each target.
1585	For each target and InjectionPoint in the scope.
1586	For each target and out inject the out InjectionPoint into the BiConsumer.
1587	Extract the parameter values from the targets.
1588	Makes the targets for the action.
1589	Create action method argument.
1590	Session created.
1591	Session is being destroyed.
1592	Adds a value to the list.
1593	Add all elements from the specified JsonArray.
1594	Remove the item at the specified position.
1595	Resolve the target.
1596	Target not found.
1597	Convert an object to a string.
1598	Add action filter.
1599	Gets the pseudo - function name.
1600	Resolve all the fields of the given type.
1601	Create a proxy socket.
1602	Returns the number of attributes in this node.
1603	Get all action results.
1604	Checks if the char c equals one of the char sequences match.
1605	Finds the first occurrence of the first occurrence of the match in the source string.
1606	Finds the first index in the array that is equal to the specified match.
1607	Add command line arguments.
1608	Adds an environment variable.
1609	Run the command.
1610	Invoke a listener.
1611	Copy from another frame.
1612	Convert an object type to an abstract type.
1613	Returns the abstract type from the descriptor.
1614	Set the input frame from the API format.
1615	Get the local type of the abstract.
1616	Set the local variable.
1617	Pushes the abstract type on the output stack.
1618	Pushes an abstract type onto the stack.
1619	Pop the specified number of elements from the output stack.
1620	Pops the descriptor and returns the argument sizes.
1621	Adds an initialized type to the initializations array.
1622	Returns the type of abstract type initialized.
1623	Puts abstract type into output.
1624	Removes expired entries from the cache.
1625	Schedules a prune task.
1626	Visit a module.
1627	Visit Nest Host.
1628	Visit an outer class.
1629	Visit an annotation.
1630	Visit a nest member.
1631	Visit an inner class.
1632	Visit a field.
1633	Get the thread session.
1634	Close the current thread session.
1635	Create the array of action execution.
1636	Invoke the action method.
1637	Read the request body.
1638	Calculate the first item index of a page.
1639	Calculates the first item index of a page.
1640	Checks if the value is a multiple of a.
1641	Convert a char array to a byte array.
1642	Find the first occurrence of a character in the source array that differs from match.
1643	Resolve node name.
1644	Resolve the name of the attribute.
1645	Renders an attribute.
1646	Load properties from a file.
1647	Load properties from a file.
1648	Load properties from a stream.
1649	Load properties from a map.
1650	Load properties from a map.
1651	Load properties from classpath.
1652	Get the value of the specified key. If the key is not found in the data store
1653	Sets a property value.
1654	Extract the active profiles to the target map.
1655	Extract properties from the properties file.
1656	Extract sub - properties from the activeProfiles.
1657	Get the inner map.
1658	Add inner map.
1659	resolve active profiles
1660	Get all profiles.
1661	Returns the profiles for the given property key.
1662	Adds a Property Injection Point to the list of Property Injection Points.
1663	Adds a SetInjectionPoint to the list of SetInjectionPoints.
1664	Adds a Method Injection Point to this class.
1665	Add the init method points.
1666	Add destroy method points.
1667	Resolve the target class.
1668	Inject target into wrapper.
1669	Gets the wrapper target type.
1670	Find a field in this class.
1671	Get the type of this field.
1672	Resolves the keyType of this field.
1673	Resolve the component type of this field.
1674	Returns a JsonResult of the given object.
1675	Returns a JsonResult object with the error message and details.
1676	Resolve the HTTP method name from the method name.
1677	Match string with pattern.
1678	Resolve loading.
1679	Resolve the loading of a resource.
1680	Loads a class.
1681	Get the URL of the resource.
1682	Wait for the end of the task.
1683	Detect annotation type.
1684	build InjectionPoint.
1685	Visit the class.
1686	Returns an array of URLs for the given class.
1687	Sets the bean.
1688	Update the bean.
1689	Loads the property descriptor.
1690	Gets the getter for this property.
1691	Get the setter for this property.
1692	Connect to the database.
1693	Add an iterator to the end of the list.
1694	Prints the logo of Jodd.
1695	Stop the Joy.
1696	Creates a socket.
1697	Create a SSLSocket.
1698	Get the default SSLSocketFactory.
1699	Get the socket factory.
1700	Generate a random string.
1701	Generate a random string.
1702	Generate a random string of the specified number of characters.
1703	Create a new instance of the given target type.
1704	Injects the given value into the given target object.
1705	Convert value to target type.
1706	Visit a provide.
1707	Creates a default TypeCache.
1708	Adds a new value to the map.
1709	Get all the MethodDescriptors in the order they were declared.
1710	Resolve the IP address of the given hostname.
1711	get ip int value.
1712	Checks if the given string is a valid Againt IP Adress V4 format.
1713	Resolve the hostname from an IP address.
1714	Download bytes from a URL.
1715	Download string.
1716	Downloads a file from the given URL.
1717	Injects the MADL - C.
1718	Outject.
1719	Connects to a host on the given port.
1720	Connects to the given host and port.
1721	Returns the index of the primitive class.
1722	Load a class using the given class loader.
1723	load array class by component type.
1724	Shutdown the bean.
1725	Create a binary search builder for the given array.
1726	Construct a binary search builder for the given array.
1727	Exclude the given rules from the result.
1728	Include the given rules.
1729	Include the given bean as a template.
1730	Start tag.
1731	Registers a component.
1732	Resolve the column s SQL type.
1733	Preprocess the SQL string.
1734	Create a ResultSetMapper for the ResultSet.
1735	Find a generated key of the given type.
1736	Populate generated keys.
1737	Create a wrapper bean.
1738	Set the bean.
1739	Sets the map of named parameters.
1740	Sets the objects to be set.
1741	Inserts a chunk after another chunk.
1742	Lookup the type of the given entity.
1743	Find table descriptor by column reference.
1744	Resolve table name.
1745	Resolve the class of the given object.
1746	Append a space to the end of the string if it is not already a space.
1747	Get the file parameter names.
1748	Include a page.
1749	Get the servlet path and query string.
1750	Returns the request URI.
1751	Resolve the parameter names for the given action class method.
1752	Start the petite application.
1753	Stop the petite process.
1754	Method allow to add a subject term to the query.
1755	Method allow to filter email by message id.
1756	Filter email by email address.
1757	Filter by email recipient.
1758	Filter EmailReceivers to the CC recipient.
1759	Filter to only contain emails that arrive from the specified address.
1760	Filter email by flags.
1761	Add a flag to the email.
1762	Filter email by received date.
1763	Filter to only send email with a date in milliseconds.
1764	Filter by size.
1765	Add additional email filters.
1766	Add OR filter.
1767	Method allow to add a NotTerm to the search.
1768	Concatenate the search term with the search term.
1769	Encodes the given byte array into a base32 string.
1770	Convert value to byte array.
1771	check if gzip is eligible.
1772	Validates the target object against the rules defined in this validator.
1773	Validate the target object.
1774	Enable a profile.
1775	Enable the specified profiles.
1776	check if the profile is enabled
1777	Parse the request body.
1778	JD - 1970 - 1 Jan - 1st 1970 - 1st 1970
1779	Adds two JulianDates.
1780	Subtracts the given JulianDate from this JulianDate
1781	Set the integer and fraction.
1782	Initializes the parser with the given input.
1783	Emit a comment.
1784	Error message.
1785	Create a hash from the password.
1786	Derive PBKDF2 key.
1787	Converts a hex string to a byte array.
1788	Resolve provider definitions.
1789	Sets the name of the attachment.
1790	Sets the content id from the name if missing.
1791	Resolve the content type.
1792	Parses a JavaTypeSignature.
1793	Compute the size of the attributes.
1794	Puts the module attributes into the given ByteVector.
1795	Decodes a string using the given encoding.
1796	Decodes a string from a URL query string.
1797	Start the database.
1798	Check connection provider.
1799	MethodVisitor visitor.
1800	Visit the end of the class.
1801	Create a MethodSignatureVisitor.
1802	converts an array of objects to a comma separated string
1803	Convert a line of text into an array of Strings.
1804	Resolve a CtorInjectionPoint for a given type.
1805	Create advice class reader.
1806	Get cached advice class reader.
1807	Encrypt a string using UTF - 8.
1808	Decrypt the given string using the given D cipher.
1809	Get a logger.
1810	Sets the name of the cookie.
1811	Create an ActionRequest.
1812	Create a wrapper bean.
1813	Destroy a bean.
1814	Call destroy methods on all beans.
1815	Receive the messages from the sender.
1816	Launches ClusteredServiceContainer.
1817	Run the reporting loop.
1818	Print error.
1819	Print the rate of messages per second per second per second per second per second per second per
1820	Map an existing file read - only.
1821	Closes the archive.
1822	This method will block until the work is done.
1823	Returns the current position of the log record.
1824	Offer a message to the term.
1825	Append padding to the current position.
1826	Closes the AeronClient.
1827	Poll for error response.
1828	Stop the replay.
1829	Event available image.
1830	Event that an image is not available.
1831	Create a StatusIndicatorReader for the channel status.
1832	Receive channel status indicator reader.
1833	Sets the limit for the buffer.
1834	Appends length bytes from the source buffer to the end of the buffer.
1835	Poll for fragments.
1836	Map a loss report file to a MappedByteBuffer.
1837	Returns a snapshot of the stream state.
1838	Create a default header buffer.
1839	Add a key buffer.
1840	Label buffer.
1841	Connects to the Aeron server.
1842	Try to connect to the Aeron server.
1843	Sends a close - session request.
1844	Start recording.
1845	Stop recording.
1846	Replays a message.
1847	Stop replay.
1848	Offer a ListRecordings request.
1849	Offer a ListRecordingsForUri request.
1850	Sends a ListRecording message.
1851	Extend a recording.
1852	Offer a recording position request.
1853	Get stop position.
1854	Offer a ListRecordingSubscriptions request.
1855	Returns true if udpChannel matches tag.
1856	Replies the destination address for the given channel.
1857	Returns a string describing this UdpChannel.
1858	Add a destination to the list of image connections.
1859	Insert a packet.
1860	Find the control toggle.
1861	Adds a parameter to the request.
1862	Returns the channel tag.
1863	Get the entity tag.
1864	Add session id to channel.
1865	Get tag.
1866	Appends padding to the end of the term.
1867	Update the publisher limit.
1868	Allocate a buffer position.
1869	Label name.
1870	Scan for available bytes in the termBuffer.
1871	Clear this builder.
1872	Validates that this builder is valid.
1873	Sets the prefix to use for this builder.
1874	Sets the media to be used.
1875	Sets the control mode.
1876	Sets the term length.
1877	Term offset in the buffer.
1878	Sets the lingering namespace.
1879	Open the UDP datagram channel.
1880	Close the connection.
1881	Check if the frame is valid.
1882	Receive a UDP packet.
1883	This method is called when a term is nak.
1884	Process timeouts.
1885	Returns a string representation of the given status.
1886	Allocate a new AtomicCounter.
1887	Reset the buffer vector.
1888	Validate that this buffer is valid.
1889	Validate and compute the length of the message.
1890	producer window length.
1891	Validate socket buffer lengths.
1892	Validate the page size.
1893	Validate that the given low and high session id range are within the range.
1894	Validates that publicationUnblockTimeoutNs < = clientLivenessTimeoutNs and that timerInterval
1895	Set error code.
1896	Resets the state of the Aeron.
1897	Encodes the given array of ClusterMembers into a string.
1898	Add the publication of the members to the channel.
1899	Close all publications for the cluster members.
1900	Checks if the given member array has an active quorum.
1901	Computes the quorum position of the members.
1902	Reset log positions.
1903	Checks if the cluster member vote list is not null and the member s logPosition is greater
1904	Checks if the member count is not too large.
1905	Checks if the cluster member vote has a majority vote.
1906	Determine the cluster member.
1907	Validate that the cluster member and the cluster endpoint are the same.
1908	Compares two cluster members and returns true if they are the same.
1909	Checks if the candidate is unanimous.
1910	Checks if the candidate is a quorum candidate.
1911	Checks if the member is not duplicated.
1912	Find the index of the member with the given id.
1913	Remove member with given id from given array.
1914	Returns the highest member id among the given members.
1915	Maps an existing CnC file.
1916	Check if a CnC file is active.
1917	Check if the driver is active.
1918	Check if a CnC driver is active.
1919	Request a DriverTermination.
1920	Read the length of the frame in the buffer.
1921	Writes the length of a frame in an ordered fashion.
1922	Writes the frame type to the buffer.
1923	Writes frame flags to the buffer.
1924	Write the term offset to the buffer.
1925	Writes the frame term ID to the buffer.
1926	Find the counter id by recording id.
1927	Find the counter id for the given session.
1928	Returns the recording id for the given counter.
1929	Checks if the given counter is active.
1930	Application - specific feedback.
1931	Reloads the entries from the file.
1932	Find the last term entry in the list.
1933	Create a RecoveryPlan object.
1934	Creates a RecoveryPlan object from the given snapshots.
1935	Appends a term entry to the log.
1936	Appends a snapshot entry to the log.
1937	Commits the log position to the log.
1938	Tombstone an entry.
1939	Close the connection.
1940	Offer a buffer to the publication queue.
1941	Unblock a term.
1942	Returns the channel name.
1943	Set the channel name.
1944	Check term length.
1945	Checks that the given page size is a power of 2.
1946	CAS Active Term Count
1947	Computes the position of the active term.
1948	Computes the log length based on the term length and the file page size.
1949	Store the default frame header.
1950	Apply the default header to the log message.
1951	Rotate the log.
1952	Initialise the tail with the given termId.
1953	Returns the offset of the term in the rawTail.
1954	Returns the tail count volatile.
1955	CAS raw tail.
1956	Token buffer.
1957	Allocate a Counter.
1958	Find the next counter id.
1959	Checks if a given counter has a replay state.
1960	Get the snapshot recording id.
1961	Flags to chars.
1962	Set the channel name.
1963	Offer a buffer to the cluster.
1964	Wrap the buffer.
1965	Commits the current frame to the buffer.
1966	Aborts the current frame.
1967	Main method.
1968	Closes all the resources associated with this context.
1969	Returns the position of the current frame.
1970	Allocate a Counter.
1971	Find the counter id for the given service id.
1972	Creates a snapshot of the stream backlog.
1973	Allocate a new AtomicCounter.
1974	Closes the connection.
1975	Dispatch a recording descriptor.
1976	Add a new slab.
1977	Set a byte value at a given index.
1978	Adds the statistics to the statistics collection.
1979	Calculates the row ranges for the given filter.
1980	Convert array type.
1981	Convert a struct type to a GroupType.
1982	Annotate message with position pos.
1983	end the previous bit - packed - run
1984	Read one object from the wire.
1985	Read the footers from the given file.
1986	Read summary file.
1987	Read a file s footer.
1988	Read the next row group.
1989	Read the next row group.
1990	Read a dictionary page.
1991	Add a writer to the list of writers.
1992	Remove a writer from the list.
1993	Update the total allocation.
1994	Register a scale callback.
1995	Start the stream.
1996	Start a new block.
1997	Start a new column.
1998	Writes a dictionary page.
1999	Writes a data page.
2000	Writes a column chunk.
2001	End a block.
2002	Copies length bytes from the input stream to the output stream.
2003	End the parquet file.
2004	Merge metadata files.
2005	Merge multiple metadata files into one.
2006	Writes the metadata file for the given footers.
2007	Merge two file - level meta - data objects.
2008	Read the next value.
2009	Returns true if null ok.
2010	Returns the first non - null object in the given array or null if none are found.
2011	Convert a string into an object of the appropriate type.
2012	Creates a ThriftMetaData object from the given extraMetaData.
2013	Returns a ThriftMetaData object for the given Thrift class.
2014	Returns the extra meta data for the Thrift class.
2015	Writes a null value.
2016	Writes a page.
2017	Initialize the DeltaBinaryPacking object from a page.
2018	Allocate values buffer.
2019	check enum type
2020	Calculate the bit widths for the deltaBlockBuffer
2021	Throw an exception if the throwable is an exception of the given class.
2022	Get statistics based on the given column type.
2023	Returns a builder for reading.
2024	Merge statistics.
2025	Get the non - null schema.
2026	Create a TaskAttemptContext instance.
2027	Invoke a method on an object.
2028	Write the members of this class to a string builder.
2029	Merge fields from this group into the fields from the given group.
2030	Initialize the counter loader from the given Reporter and Configuration.
2031	Get the filter to use for this record.
2032	Read all files in parallel using ParquetFileReader.
2033	Generate Parquet input splits from rowGroups of each row group.
2034	Write a record to the log.
2035	Validates that the parquet schema is consistent with the schema in the descriptor.
2036	Serialize the DescriptorProto for the given message class.
2037	Creates a codec factory that creates a codec for a given configuration.
2038	amendMissingRequiredFields - Check the fields of the rootEvents.
2039	check set.
2040	Read file meta data from the given input stream.
2041	Close the record writer.
2042	Set the schema.
2043	Adds a class and its parameter types to the maps.
2044	Asserts that the given primitive type is valid for the given column.
2045	Cast a long value to an int.
2046	Creates a schema mapping from an arrow schema.
2047	Creates a schema mapping from a Parquet schema.
2048	Map the fields of the arrow schema and the parquet schema.
2049	Write a data page header.
2050	Skips to the next record.
2051	Writes an object to a Configuration object in Base64 encoding.
2052	Remove the entry for the given key.
2053	Adds a new entry to the cache.
2054	Get current value in cache.
2055	Writes the given value to the avro schema.
2056	Write value without converting to the avro schema.
2057	Set the glob pattern.
2058	Outputs content to a file.
2059	Open a file.
2060	Creates a filter that matches the specified column.
2061	Convert a struct to Thrift schema.
2062	Wrapper for list type.
2063	List elements.
2064	Returns the merged key - value metadata.
2065	Get a ParquetInputSplit for the Hive Hive.
2066	Get the fields of the given class.
2067	Resolve schema access.
2068	Get input files from parquet.
2069	Check that all files in the list are parquet files.
2070	Get input files from the partition directory.
2071	Creates a filter that filters records by page.
2072	Construct a ListConsumer that consumes a list of T objects.
2073	Initialize the mrwork map.
2074	Merge the tuples in the given Tuple into a summary data object.
2075	Sum up tuples.
2076	Read a struct.
2077	Read a map entry.
2078	Writes an integer to the input buffer.
2079	Read an int in little endian order.
2080	Set the Avro schema.
2081	Create a stream topic if it does not exist.
2082	Duplicate the pipeline stages.
2083	Creates a stage bean.
2084	Creates interceptor beans.
2085	Creates a new interceptor.
2086	Parse a schema string.
2087	Convert milliseconds since UTC - midnight to days.
2088	Get avro schema from record header.
2089	Upgrade from V1 to V2.
2090	Returns the length of the text stream.
2091	Copy blobstore resources to staging directory
2092	Reset the internal state.
2093	Report thread health.
2094	Register a thread name with the MetricsConfigurator.
2095	Store the new control hub configurations.
2096	Login the user using the given web credential.
2097	Upgrade the pipeline if necessary.
2098	Upgrade the stage if it is not already up - to - date.
2099	Upgrade the stage itself and all its services.
2100	Upgrade the service if necessary.
2101	Upgrade the stage if necessary.
2102	Gathers all fields to null and finds all field paths that match the field paths.
2103	Checks if the given class name is a system class.
2104	Adds the specified element to the list.
2105	Adds the specified element to the delegate set and returns the evicted element.
2106	If value is present return it otherwise return defaultValue.
2107	Add reported errors to the list of stages.
2108	Get the descriptor for the given protoDescriptorFile.
2109	Get all file descriptors.
2110	Populate the default values of all file descriptors and extensions.
2111	Get the Descriptor for the given qualified message type.
2112	Create a sdc field from the protobuf message.
2113	Convert a Record to a DynamicMessage.
2114	Convert a SDC field to a DynamicMessage.
2115	This method is used to upgrade the configuration to Jersey s config bean.
2116	Checks that the Kudu connection is established.
2117	Convert Kudu data type to Field. Type.
2118	Creates a Field instance for the given field name and type.
2119	Intercepts the records.
2120	Returns the text in this buffer.
2121	Add missing configurations to the stage.
2122	Parse the response.
2123	Add response headers to the response record.
2124	Write the header field to record.
2125	Write the header to the Record header.
2126	Saves the metadata to the metadataFile.
2127	Configures the client.
2128	Parse the headers only.
2129	Increment the source offset.
2130	Parse a paginated result record.
2131	Add response headers to header.
2132	Resolve headers.
2133	Process the response.
2134	Check if the given property is defined in the configuration.
2135	Convert a DataParserException to a DataParserException.
2136	Convert a DataGeneratorException to a DataGeneratorException.
2137	Get the credentials from the credentials file.
2138	Preview the stage outputs of a pipeline.
2139	Copy the content of a line to a buffer.
2140	Remove logical duplicates.
2141	Empty the batch.
2142	Find the next main line in a live file chunk.
2143	Resolve a live chunk.
2144	Closes the current connection.
2145	Escapes a string with double quotes.
2146	Get flow control settings.
2147	Returns a channel provider.
2148	Puts a batch of data into the data channel.
2149	Compile expression into a pattern.
2150	Digest the expression in the original expression.
2151	Add a dictionary from an input stream.
2152	Add a dictionary to the Grok file.
2153	Stops the timer.
2154	Roll the data window.
2155	Serialize an object to a string.
2156	Deserialize a string into an object of the specified type.
2157	Deserialize a file into an object of the specified type.
2158	Write the record to the destination.
2159	Resolve EL expression.
2160	Generate the inner field from the original list.
2161	Get the table name from the given record.
2162	Get the database name from the given metadata record.
2163	Get the internal field from the given metadata record.
2164	Get the location of the record.
2165	Get the custom location.
2166	Get AVRO schema from metadata record.
2167	Get the data format from the metadata record.
2168	Create a new schema metadata field builder.
2169	Validate partition information.
2170	Generate partition path.
2171	Serializes AVRO AVRO AVRO schema to HDFS.
2172	Sets the parameters of the given record.
2173	Get system configuration.
2174	Parse an RFC 3164 time string into a long.
2175	Format a template with optional arguments.
2176	Start a batch.
2177	Checks if record contains solr fields.
2178	Filter the field names that are not in the autogeneratedFieldNames map.
2179	Sends OnRecordErrorException to errorRecordHandler.
2180	Parse the jar name.
2181	Parse a jar file.
2182	Creates a CouchbaseConnector instance.
2183	Closes the connection to Couchbase.
2184	Validates the given configuration.
2185	Converts the given string representation of an integer code into a label.
2186	Verify that the dependency exists.
2187	Read a secret from Vault.
2188	Get the write operation from the header.
2189	Writes a document.
2190	Build a subdoc mutation.
2191	Generate the SQL string to alter a table.
2192	Configures the SASL client.
2193	Take messages from the producer.
2194	Commits the last committed offset.
2195	This method is called when an error occurs.
2196	Injects stage into stage.
2197	Get definitions.
2198	Get publisher definition.
2199	Format the column name.
2200	Format the value.
2201	Get pipeline configuration.
2202	Create a draft pipeline fragment.
2203	Get pipelines.
2204	Import a pipeline fragment.
2205	Get the file path for a record.
2206	Get the operation code from the record.
2207	Returns the field path for the given column.
2208	Poll the event queue.
2209	Get a runner from the queue.
2210	Get the runner that was used for the given time.
2211	Return a runner to the pipeline.
2212	This method is called when the runner is being destroyed.
2213	Validate that the container is not destroyed.
2214	Check that the stream exists.
2215	Get the last shard id from the stream.
2216	Process the queue.
2217	Handle a JDBC exception.
2218	Get column hash.
2219	Compares two files.
2220	Retrieve the PID value from the pidField.
2221	Validate and extract fields to hash.
2222	Proxy user.
2223	Roll the usage timer.
2224	Creates a snapshot of the active stats.
2225	Ensure that the directory exists.
2226	Writes the records in the batch to the recordWriters.
2227	Writes the records in the batch.
2228	Writes records to the cache.
2229	Triggered No More data event
2230	Detects a new partition.
2231	Update record for HDFS.
2232	Process the group and value.
2233	Checks if two stages have the same version.
2234	Main method for the Mesos cluster.
2235	Configures the authentication and build the client.
2236	Resolve the headers.
2237	Get the HTTP method.
2238	Fills in the bindings for NULL types.
2239	Get the value of a field.
2240	Load schema from registry.
2241	Register a schema.
2242	Load schema from registry.
2243	Get the schema id from the given subject.
2244	Load schema from registry.
2245	Writes the schema id to the given output stream.
2246	Detects the schema id.
2247	Get the default values for the given schema.
2248	Parse all records in the given payload.
2249	Log the results of the validation.
2250	Get bad records from error sink.
2251	Initializes the schema generator.
2252	Returns the outward edge vertices for the given vertex.
2253	Returns the inward edge vertices for the given vertex.
2254	Serialize offset map.
2255	Deserialize offset map.
2256	Queues a report using the given queue resource.
2257	Get a report from the WSSE.
2258	Check whether checkPointFilePath exists on hdfs path.
2259	Writes offsets to the main offset file.
2260	Deletes the blob with the given id.
2261	Handles the error.
2262	Handle archiving of an error.
2263	Returns a LiveFileReader for reading from the file.
2264	Release the reader.
2265	Set the base URL for the DPM API.
2266	Add a default header to the request.
2267	Parse a date from a String.
2268	URL - encode a string.
2269	Get the client.
2270	Initialize connection to GPUDB.
2271	Get the table metadata
2272	Create bulk inserter
2273	Creates a builder for the given context and to event.
2274	Build a schema from a set of fields.
2275	Convert an Oracle operation code to an SDC code.
2276	Add jars to the job.
2277	Add jars to the job.
2278	Check if the field name is the same as the field name in the fieldOrderByList.
2279	Check if the condition expression context contains a field expression.
2280	Get the offset lag for a file offset.
2281	BootstrapMain. instrumentation is only used once.
2282	Get Kafka topic parallelism.
2283	Run a BigQuery query.
2284	Convert a list of fields into a map of fields.
2285	Get the table description
2286	Validate that the table accepts inserts.
2287	Get the type of the column for the given field.
2288	Checks if the type is nullable.
2289	Get the schema for a table
2290	Get the column properties for the table
2291	Returns the class corresponding to the given type name.
2292	Initializes Aerospike bean.
2293	Get the topic for a record.
2294	Upgrade from V5 to V6.
2295	Returns an input stream to read from the file.
2296	Returns a proxy output stream.
2297	Checks if the file exists.
2298	Parse a string into a FsPermission object.
2299	Checks that all services are available.
2300	Create a SimpleAggregator of the given class.
2301	Returns the unit of the aggregator.
2302	Create an AggregatorData object.
2303	Create a new GroupByAggregator.
2304	Start the data data window.
2305	Stops the data provider.
2306	Roll the data window.
2307	Acquires a LoginManager instance.
2308	Release the LoginManager reference.
2309	Convert glob to regex.
2310	Returns a list of S3Objects in lexicographical order.
2311	Stops the pipeline.
2312	Produce empty batches for runners that are idle.
2313	Create a failure snapshot.
2314	Convert a Record into a BoundStatement.
2315	Set the configuration.
2316	Generates a lookup key from the given record.
2317	Handle partitioning turned off or on.
2318	Read a line from the input stream.
2319	Roll this usage timer down.
2320	Enables DPM.
2321	Disable DPM for the given user.
2322	Normalize the URL to the base URL of the DPM.
2323	Retrieve the token for the user.
2324	Logout from DPM.
2325	Update the token file.
2326	Update the dpm. properties file.
2327	Create a field for a record.
2328	Returns a complex schema for the given field.
2329	Get the decimal scale or precision of the given field attribute.
2330	Returns the default value for the given schema.
2331	Initialize metrics for file statistical.
2332	Compares two files.
2333	Get the index of the group.
2334	Get the group names.
2335	Checks if the current position is an escaped character.
2336	Check if the given position is a backslash or not.
2337	Checks if the character class is inside of a class.
2338	Count the number of open parens in the given string starting at the given position.
2339	Extract the group info from a named pattern.
2340	Replaces all occurrences of a string that match the given regular expression with the given replacement string.
2341	This method is called when the client is redirected to the view page.
2342	Refresh the schema.
2343	Checks if the entry is expired.
2344	Get offset.
2345	Fast forward.
2346	Returns empty envelope for detached stage.
2347	Convert string to Appropriate Number.
2348	Parse a single part of a record.
2349	Parse the values.
2350	Lookup primary keys.
2351	Create custom field mappings.
2352	Gets the SQL type name for a field type.
2353	Returns the table name.
2354	Set primary keys in the given record.
2355	Handle a JDBC exception.
2356	Process the pipeline.
2357	Prepare the batch context for the pipeline stage.
2358	Finishes the current batch and calculates metrics.
2359	Flattens the entire record.
2360	Create a detached stage runtime.
2361	Execute the action.
2362	Returns a map of columns to parameters.
2363	Returns the condition for the partition column.
2364	Validate that the offset is stored and that the offset is in the expected columns.
2365	Get the requested content generators.
2366	Get non - empty args.
2367	Get the appropriate operation for the given operation code.
2368	Convert bytes to a human readable string.
2369	Scan the current file.
2370	Returns the number of pending files that are matching the current file.
2371	Check if a dependency is whitelisted.
2372	Checks if the versions match.
2373	BootstrapClusterStreaming. main
2374	Propagate runtime configurations.
2375	Validates the reportDescription property.
2376	Create a JdbcRecordWriter.
2377	Create a JdbcRecordWriter.
2378	Upgrade from V1 to V2.
2379	Extract named groups from the input text.
2380	Commit offset.
2381	Create a new SDC instance.
2382	Set the fields in the record.
2383	This method is called when the remote pipeline changes.
2384	Asynchronously acknowledge the result of the given future.
2385	Create a gauge with a gauge gauge.
2386	Returns a map of columns to parameters.
2387	Generate header attributes for a record.
2388	Validate the record.
2389	Handle old temp files.
2390	Get the avro input stream.
2391	Get a file reader.
2392	Write parquet file.
2393	Check if the field is a cryptographic input.
2394	Checks that the input encrypt field is of the correct type.
2395	Check input decrypted field.
2396	Check that the input field is a byte array and that it is decrypted.
2397	Prepare encrypt field.
2398	Sets the parent pattern of this matcher.
2399	Append replacement.
2400	Returns a map of named groups.
2401	Replaces all occurrences of the pattern with the given replacement string.
2402	Ensure avroSchema exists.
2403	Get the value of a global variable.
2404	Create a start event record.
2405	Create a stop event record.
2406	Fix offset.
2407	Extract value as runtime type.
2408	Execute alter table add partition query.
2409	Execute alter table set table properties query.
2410	Describe database.
2411	Execute a query.
2412	Executes a query.
2413	Executes a batch of pipes.
2414	For each Pipe in the pipeline.
2415	Returns the OffsetCommitTrigger that was set on this stage.
2416	Checks if the pipeline has stopped.
2417	Accept a consumer.
2418	Get the record id for the given record.
2419	Get the value of a field.
2420	Set the fragment in the record.
2421	Set the document in the record.
2422	Sets N1QL property in record.
2423	Handle the whole file data format.
2424	Returns true if the incomplete transactions contain the given sequence number.
2425	Wraps the given ExceptionSupplier in a thread context.
2426	Sets the stage creator.
2427	Logout from Kerberos.
2428	Load exceptions from configuration.
2429	Replaces the variables in the given path.
2430	Ensure that the current thread is allowed to access the given path.
2431	This is the main method of the bootstrap emrbatch.
2432	Resolves the path to the target directory.
2433	Rename to final name.
2434	Checks if roll attribute is set in the record.
2435	Match strings.
2436	Get the offsets of the file.
2437	Get remaining time remaining in milliseconds.
2438	Get the offsets lag.
2439	Create a new StageLibraryDelegate instance and return it.
2440	Create a new instance of the specified interface.
2441	Create a new instance of the delegator class.
2442	Get the value of a metric.
2443	Find the end of the header.
2444	Get the body size.
2445	Save a file to a temp file.
2446	Creates a new SSL server socket factory.
2447	Get the MIME type for a file.
2448	Handle the request.
2449	Stops the HTTPD.
2450	Add mappings for the routes.
2451	Send the response to the given output stream.
2452	Send the body of the message.
2453	Creates a fixed length response.
2454	Returns true if gzip is currently in use.
2455	Set a cookie.
2456	Unload the cookie queue.
2457	Decode the base64 value.
2458	Base64 encode the string.
2459	Sets the table name to be used for the query.
2460	Get the name of the principal.
2461	Insert a Spring session repository filter.
2462	Resolve the principal name from the session.
2463	Get a session.
2464	Get the JNDI name.
2465	Gets the canonical names of the method s parameter types.
2466	Register a synchronization.
2467	This method is called before the completion of the JCA synchronization.
2468	Returns the current transaction.
2469	Add the module dependency to the deployment.
2470	Checks if the given persistence unit is scoped to the cache region prefix.
2471	Get the server config dependencies.
2472	Decrement the read lock count.
2473	Increment the read lock count.
2474	Add a service to the deployment.
2475	This method is called when the next expiration time is reached.
2476	Add the module specification to the deployment.
2477	Make the top - level BDAs visible from the static modules.
2478	Create JBossWebMetaData.
2479	Set the JBossWebMetaData. builder. setConfigName and. configFile.
2480	Get the security metadata.
2481	Gets the servlet url patterns mappings.
2482	Get the servlets for the given endpoints.
2483	Resolve the resolution of the EJB.
2484	Returns the available connectors for the given operation.
2485	Core environment element.
2486	Process - ID - Environment element.
2487	Get the path address of the given operation.
2488	Sets the PathAddress of the given operation.
2489	Get the attribute value of the given operation.
2490	Check if the INCLUDE_DEFAULTS attribute is set.
2491	Creates a composite operation.
2492	Create an add operation with the given parameters.
2493	Create an add operation.
2494	Create a read attribute operation.
2495	Create a write attribute operation.
2496	Create an undefine attribute operation.
2497	Get the value of the entry.
2498	Add a URL context factory.
2499	Remove a URL context factory.
2500	Load all providers.
2501	Modify the deployment.
2502	configure the endpoints for the deployment
2503	Modify the context root for the deployment.
2504	Get the transport class name from the deployment.
2505	Set the RunAs identity.
2506	Pops the RunAs identity from the given SecurityContext.
2507	Process the management servlets.
2508	Injects a property on an object.
2509	Checks if the classType and propertyType match.
2510	Finds a method on the given class that matches the given name and the given property type.
2511	Find a field in the given class.
2512	Initializes the options.
2513	Derive useful information from the given HTTP request.
2514	Run a standalone collect.
2515	Collect the JdrReport.
2516	Registers a ResourceAdapterDeployment.
2517	Unregister a deployment.
2518	Registers the transformers.
2519	Writes the parameters to the output stream.
2520	Read an exception from the given input stream.
2521	Returns the owner of the current thread.
2522	Releases the lock.
2523	Add a log entry.
2524	Add CDI flag to WAR.
2525	Get the component view.
2526	Invoke the endpoint.
2527	Replies the view method for the component.
2528	Checks if the given seiMethod and viewMethod match.
2529	Creates a resource that can be used to read statistics from the managementAdaptor.
2530	Get the security metadata for an endpoint.
2531	If the oldSecurityDomain and the nextSecurityDomain are null return the oldSecurityDomain.
2532	Ensures that the two security domains are the same.
2533	Sets the IDL name.
2534	Returns the absolute name of this entry.
2535	Creates a JndiName object from a string.
2536	Process the IronJacamar. xml file.
2537	This method is called by the wrapped handler.
2538	Checks if the transaction is in the current thread.
2539	This method is used to get the TransactionSynchronizationRegistry.
2540	Get the connection factory.
2541	Get last component.
2542	Checks if the given name is empty.
2543	Name not found in the context.
2544	Creates a new NamingException with the specified message and a specific cause.
2545	Creates a new NamingException with the specified message and cause.
2546	Creates a new CannotProceedException with the given resolved object and name.
2547	NamingEnumeration.
2548	Rebinds the given value to the given name.
2549	Get the active mq control.
2550	Connection attributes 5. 0 and above.
2551	Creates a new instance of the component.
2552	This method is called by the deployment unit.
2553	Resolve the runtime name.
2554	Create a builder for a listener.
2555	Get the appropriate analysis for a primitive type.
2556	This method will block until the shutdown flag is set.
2557	Get the url patterns.
2558	Gets the servlets metadata.
2559	Get the servlet mappings for the given JBossWebMetaData.
2560	Get the security constraints for the given JBossWebMetaData object.
2561	Gets the login config.
2562	Gets the context parameters.
2563	Gets the web resource collections.
2564	Gets the servlet init parameters.
2565	Creates a new security constraint.
2566	Creates a new web resource collection.
2567	Creates a new servlet.
2568	Creates a new servlet mapping.
2569	Create a new AuthConstraintMetaData object.
2570	Creates a UserDataConstraint.
2571	Create a new param value.
2572	Creates a new param value meta data.
2573	Register the interceptors for the SFSB and the SFSBInvocationInterceptor for the S
2574	Process injection targets.
2575	Stop WeldContainer.
2576	Get the JNDI name.
2577	Resolve the attribute value.
2578	Get the type of pattern.
2579	Checks if the resourceAdapter is a PooledConnectionFactory.
2580	Checks if the resourceAdapter is an external pooled - connection - factory.
2581	Get the activeMQ server name from properties.
2582	If persistence unit name is null or empty then the default persistence unit name is returned.
2583	Start the suspend.
2584	Unregisters this Activity.
2585	Suspends the current request.
2586	Resume the current request.
2587	Called when the invocation is complete.
2588	Called when a transaction is created.
2589	Bind resource into naming store.
2590	Remove the resource from the naming store.
2591	Returns the capability service name.
2592	Creates a list of ResourceRoots for the deployment.
2593	Get the set of all module class loaders from the top - level deployment unit.
2594	Check if the persistence unit needs a class file transformer.
2595	Check if two - phase bootstrap is allowed.
2596	Check if the persistence unit is allowed to use the default data source.
2597	Checks if the entity manager should skip synchronization type checking.
2598	Get ORB object from environment.
2599	Initialize the applet ORB.
2600	Initialize the method handles.
2601	Sets the active naming store.
2602	Validate default values.
2603	Check the generic type of the parameter.
2604	Lookup the default value from the annotation array.
2605	Validate base type.
2606	Get the deferred entity managers.
2607	Convert transaction status to a string.
2608	Add cache dependencies.
2609	Extract dialects from sql.
2610	In the event that a database dialect is detected we can use that to determine the correct dialect
2611	Identify the dialect.
2612	Checks the database.
2613	Convert a string to a Date object.
2614	Sets the parameter with the node name.
2615	Mark the given deployment unit as marked.
2616	Read the parameters from the input stream.
2617	Writes the return value of the method to the given output stream.
2618	Writes an exception to the output stream.
2619	Recursive lookup.
2620	Begin SFSB creation.
2621	End SFSB creation.
2622	Get the SFSB invocation stack.
2623	Pushes the entity managers onto the SFSBCallStack.
2624	Pop a SFSB call from the stack.
2625	Get the current SFSB call.
2626	Add dependencies to the deployment.
2627	Process XML managed beans.
2628	Process phase listeners.
2629	Get the IDL name for a given class.
2630	Insert a primitive into an Any object.
2631	Convert Java name to IDL name.
2632	Checks if the given string is a reserved IDL keyword.
2633	Returns the signature of cls.
2634	Get the signature of a method.
2635	IDL name for primitive types
2636	Returns a BatchPermission for the given name.
2637	Create or reuse the entity manager.
2638	Associates the given value with the given key.
2639	Converts a camelCase security role to a ModelNode.
2640	Returns the most recent version of the timer.
2641	Get the timers from the file.
2642	Get the directory for the given object id.
2643	Add a listener to the target scope.
2644	Remove a listener.
2645	Fires a NamingEvent.
2646	Close an AutoCloseable.
2647	Add a private credential to the Subject.
2648	Get an object instance.
2649	Add a Tx interceptor for the view.
2650	Substitutes from string to string.
2651	Creates a transport configuration for the InVM connector.
2652	Add EAR prefix if configured name is relative.
2653	Gets the root deployment unit.
2654	Returns the service name for this component.
2655	Create a view configuration.
2656	Create a view binding injection source.
2657	Get the view interceptors for a given method.
2658	Add a view interceptor to the interceptor factory.
2659	Add a view interceptor to the interceptor chain.
2660	Get the client interceptors for a given method.
2661	Add a client interceptor to the interceptor factory.
2662	Add a client interceptor to the interceptor chain.
2663	Put private data.
2664	Thrown when an unexpected element.
2665	Gets the JAXWS EJBS.
2666	Gets the JAXWS pojo endpoints.
2667	Get the endpoint name from the servlet metadata.
2668	Get the endpoint class name from the servlet metadata.
2669	Get servlet for servletName.
2670	Gets the attachment from the deployment unit.
2671	Gets optional attachment.
2672	Gets the JBossWebMetaData from the WAR.
2673	Get JBoss WebserviceMetaDataPortComponent from deployment unit.
2674	Get the Webservice Metadata EJB endpoint.
2675	Get the context root for a deployment.
2676	Load a class from the given name.
2677	Get the URL of the named resource.
2678	Returns a collection of all of the resources found in the given module.
2679	List all resources under the specified path.
2680	Pop a call to close all managed entity managers.
2681	Get the EntityManager for the given puScopedName.
2682	to avoid duplicate registration of more listeners for one context
2683	Process the WAR deployment.
2684	Update the server configuration.
2685	Checks if all fields of a class are public.
2686	Create a new HttpEndpoint.
2687	Creates a new deployment model.
2688	Checks if the given deployment is a JAXRS deployment.
2689	Set the next timeout.
2690	Sets the state of the timer.
2691	Merge the deployment data into this deployment.
2692	Add the jboss - invocation and jboss - as - ee modules to the deployment.
2693	Add a dependency on the remote transaction service.
2694	Get all container interceptors.
2695	Checks if the given method is a method level.
2696	Check that only one of the elements is not already in the set.
2697	Get the type of the given class.
2698	Get the type at the specified index.
2699	Replies the resource definition for the Elytron KeyStore.
2700	Replies the resource definition for the KeyManagers.
2701	Replies the resource definition for the Elytron trust managers.
2702	Parse a String into a CNCompoundName.
2703	Convert a string to a stringified component vector.
2704	Parse a component string.
2705	Deactivate the IR object.
2706	This method is used to convert a servant object to a reference.
2707	Authenticate the user.
2708	Checks if the type is matched.
2709	Lookup a binding.
2710	Unbinds the named binding.
2711	Instantiates a bean.
2712	Configure the given bean.
2713	Dispatch a LifecycleJoinpoint.
2714	Get the current selector.
2715	Returns the bean bean bean bean bean bean bean bean bean bean bean bean bean bean bean bean
2716	Returns the JBoss bean instance name.
2717	Get the EEModuleClassDescription for the specified name.
2718	Process the annotations of the composite index.
2719	Post - parse persistence units.
2720	Validate descriptor.
2721	Create the WAR and JBossWebMetaData.
2722	Create web. xml descriptor.
2723	Get the AuthMethod from the deployment.
2724	Deploys the JBossServiceDescriptor. xml file.
2725	Handle stateless session bean.
2726	Creates a stub class.
2727	Returns an anonymous object id.
2728	get persistence providers associated with the application
2729	Clear the cached deployment specific providers.
2730	Add persistence provider to deployment.
2731	Find the parent module class loader.
2732	Add JBoss modules and properties to the deployment.
2733	Add the persistence units to the deployment.
2734	Sets the annotation indexes for persistence units in the deployment.
2735	Get the persistence provider adaptor.
2736	Save the persistence provider adaptor in the deployment unit.
2737	Lookup the persistence provider for the specified persistence unit.
2738	Get annotations for the given URIs.
2739	Create a EJBArchiveMetaData object.
2740	build the metadata for an enterprise bean.
2741	Refresh the participant.
2742	Get the container analysis for the given class.
2743	Lookup the done object for the given class.
2744	Create a new container analysis instance.
2745	Returns the IDL module name.
2746	Convert an integer into a hexadecimal string.
2747	Convert a long into a hexadecimal string.
2748	JBAS - 4395
2749	JBAS - 4395. 1
2750	Returns true if the given method has non - AppExceptions.
2751	Get the name of the attribute read.
2752	Attribute write name.
2753	Fix up the operation names for the method.
2754	Fixes the case names of the entries in the list.
2755	Escape IR name.
2756	Parse an XTS environment element.
2757	Default context propagation element.
2758	Process attributes.
2759	Load provider module by module name.
2760	Creates a handler that will add the given child model to the model.
2761	Add EE API JAX - RPC and EJB - IIOP client modules to the deployment
2762	Write an attribute.
2763	Returns the MethodIntf attached to the given InterceptorContext.
2764	Creates a remote session.
2765	Infer destination name from address.
2766	Register endpoint handlers for the given endpoint class.
2767	Get the xml names for a given job.
2768	Load the job xml files and load the job names.
2769	Returns the request URI.
2770	Create a new ResolveResult using the given URL.
2771	Lookup an object in the context.
2772	Binds an object to the LdapContext.
2773	Call unbind.
2774	List all bindings for the specified name.
2775	Call destroy.
2776	Destroy a subcontext.
2777	Call a bind_new_context.
2778	Creates a new context that is a subcontext of this context.
2779	Lookup a link in the context.
2780	Add a property to the JNDI environment.
2781	Remove a property from the JNDI environment.
2782	Add transformation to the builder.
2783	Parse a credential.
2784	Remove a security domain.
2785	Look up JNDI.
2786	Create a ModularReference of the given type and factory class.
2787	Create a new ModularReference for the given class.
2788	Create a ModularReference of the given type and factory class.
2789	Get the LocalIDLType for the given type.
2790	Waits for the given service to become up.
2791	Compute the masked password.
2792	Initializes the SecurityVault.
2793	Start a vault session.
2794	Print the vault attribute created display
2795	Display the vault configuration.
2796	Vault configuration.
2797	Throws an exception if the service is not started.
2798	Get the deployment service name.
2799	Insert the value into an Any.
2800	Checks if this permission implies the given permission.
2801	Get the actions.
2802	Gets the name of the logger.
2803	Sends a state change notification.
2804	Return the state to bind to.
2805	Get the value of the property.
2806	Returns the context service name.
2807	Returns a set of all interceptors.
2808	Adds a method level interceptor to the EEModuleDescription.
2809	Add a dependency to this component.
2810	Get the component interceptors for the given method.
2811	Get the interceptors that should be used for the given method.
2812	Add a view interceptor to the timeout view.
2813	Adds a around - construct interceptor.
2814	Adds a post - construct interceptor to the list of interceptors to be invoked after the constructor is
2815	Add preDestroy interceptor.
2816	Add a pre - passivate interceptor.
2817	Add a post - activate interceptor.
2818	Set the component create service factory.
2819	Remove JNDI aliases.
2820	Add the remote transport providers to the builder.
2821	Returns the context service name for the given app module and component.
2822	Returns the context service name of the module.
2823	Returns bind info for envEntry.
2824	Returns a BindInfo object for the given JNDI name.
2825	Get the cache.
2826	Returns the value members of this node.
2827	Returns an array of ValueMember objects for the type of the value.
2828	Creates a subsystem root node.
2829	Parse the config.
2830	Start the NamingService.
2831	Add Weld integration.
2832	This method returns the service name for the job - operator.
2833	Adds a component to the deployment.
2834	Add a message destination.
2835	Get the view information for the given view type.
2836	Get the components for the given component name.
2837	Get the view information for the given component.
2838	Resolve message destination.
2839	Build 2. 0.
2840	Rejects the defined attribute with a default value.
2841	Rename an attribute.
2842	Pop identity from the context.
2843	Load ids for the main module.
2844	Check that all versions are in the active versions.
2845	Compute the slot.
2846	Get the TypeCode for a constant.
2847	Adds a type code to the typeCodeMap.
2848	Create a module with a package.
2849	Add the base interfaces of the given container.
2850	Add abstract base valuetypes.
2851	Add an object to the list of objects to be analyzed.
2852	Add an interface to the interface map.
2853	Add a value to the value map.
2854	Add an exception.
2855	Gets the class level injection type.
2856	Checks if jts is enabled.
2857	Initialize the naming store.
2858	Stop the root context.
2859	Check if the given method is allowed to invoke the given method.
2860	check the transaction synchronization status
2861	Get all component classes.
2862	Get the timers waiting on transaction completion.
2863	Returns the extra parameters that are not allowed by the user.
2864	Get the parameters from the given configuration.
2865	Convert a Type to a Class.
2866	Convert a value of the given class to the given value.
2867	Get the types of the given values.
2868	Simple check.
2869	Returns the next object in the list.
2870	Returns true if more bindings are available.
2871	Map a binding.
2872	Observes health checks.
2873	Closes the health check.
2874	Returns a reference to the bean that corresponds to the specified locator.
2875	Returns a handle for the specified locator.
2876	Convert the given ModelNode value to an Enum value.
2877	Skips amount bytes from the input stream.
2878	Checks that the two elements are not in the seen set.
2879	Adds a component to the module.
2880	Adds the top - level class loaders to the deployment.
2881	Unbinds the specified name.
2882	Lookup the object in the tree.
2883	Get a list of names for the root object.
2884	List bindings.
2885	Add a factory to this context.
2886	Save the context.
2887	Add IO subsystem.
2888	Creates a welcome content handler.
2889	Get a bean from the pool.
2890	Calculate the operation analysis map.
2891	Collect resource metrics.
2892	This method is called by the server side.
2893	Deploys the deployment.
2894	Publish the deployment.
2895	Stop the web app.
2896	Start the Weld container.
2897	Register an endpoint configuration.
2898	Retry timeout.
2899	This method is called after the timeout processing.
2900	Get the methods declared on the given class.
2901	Returns an array of Field objects for the specified class.
2902	Get a Constructor from a Class.
2903	Get a method from a class.
2904	Adds the Messaging ActiveMQ extension to the operation context.
2905	Checks if the parameter is allowed for the resource.
2906	Migrate the generic transport factory to the ARTEMIS_NETTY_CONNECTOR_FACTORY.
2907	Cancels the state machine.
2908	Run the task if it is not cancelled.
2909	Internal method to set the type of the property.
2910	Checks if the function can be executed without index.
2911	Estimate the number of indexes in the given class.
2912	Find all the classes in the given directory.
2913	Get the class ess of the given interface.
2914	Gets generic multivalue type.
2915	Evaluates the left and right values.
2916	Derive the field type from the given field name.
2917	Update the record.
2918	Find a record in the cache.
2919	This method is used to determine the minimal set of nodes that are in the cluster.
2920	Moves the flattened where clause to the left.
2921	Add additional ORDER BY and ORDER BY to the query planning info.
2922	Extract sub - queries from the query planning info.
2923	Checks if the cluster is in the set of clusters.
2924	Handle Class with index for sort only.
2925	Checks if the given class is a diamond hierarchy.
2926	Returns true if the order direction is ASC or DESC.
2927	Checks if the key condition requires multiple index lookups.
2928	find best index for the given class
2929	Build the index search descriptor for fulltext.
2930	common factor for index search.
2931	Create a new instance of the given field handling strategy.
2932	Allow the user to execute the operation.
2933	Check if the user has a rule defined.
2934	Returns a compact representation of the server status.
2935	Initialize system database.
2936	Load local databases.
2937	Remove the member from the cluster.
2938	This method elects a new lock manager.
2939	Assigns lock manager to current node.
2940	Commit the current micro - transaction.
2941	Rollback the current micro - transaction.
2942	This method is called after a record commit.
2943	Update local record cache after rollback.
2944	Prepares for file creation or replacement.
2945	Try to move the source file to target. If the move fails the target file will be
2946	Returns a list of disjoint patterns.
2947	Execute only locally.
2948	Append characters.
2949	Checks if the socket is connected.
2950	Merge two byte buffers into a short value.
2951	Split short into two buffers.
2952	Execute the CREATE PROPERTY command.
2953	Put a single value into the index.
2954	Remove the value from the map.
2955	Executes the query.
2956	Executes the first object in the list.
2957	Creates the file.
2958	Checks that the requested region is within the file.
2959	Replaces the content of the file with the given file.
2960	Executes the command.
2961	End the request.
2962	Add host to the host string.
2963	Begin a request.
2964	Get the current database.
2965	Get a connection.
2966	Kills the connection.
2967	Interrupt the connection.
2968	Disconnects a channel.
2969	Push Distrib. cfg to all clients.
2970	Swap the value at the given index with the given new value.
2971	Release all locks.
2972	Synchronize the schema.
2973	Update the metadata.
2974	Returns the last record in the record set.
2975	Read a character.
2976	Execute the command.
2977	Set the callback to be called when the request fails.
2978	Registers a storage compression algorithm.
2979	Returns limit of open files.
2980	Returns true if the expression allows an indexed function execution on the right - hand side of the
2981	Move the buffer to the position specified by the parameter.
2982	Fills the buffer with the specified byte array.
2983	Executes the steps until the return value is reached.
2984	Execute all steps until return.
2985	Evaluate the record.
2986	Execute the command.
2987	Loads the configuration from the storage.
2988	Parse the text request.
2989	Executes the request.
2990	Update the schedule starting at the given node.
2991	Adds an index definition to the composite key.
2992	Splits the projection into two projections.
2993	Determine the object type.
2994	Get the collate for the document.
2995	Returns the string value of the attribute.
2996	Advances the probe state.
2997	Execute the command.
2998	Build a JSON document from a file.
2999	Checks if the password matches the hash.
3000	Create hash.
3001	Checks if the given algorithm is supported by the current runtime.
3002	Creates a new index.
3003	Returns an iterable of vertices.
3004	Returns an iterable of edges.
3005	Returns PARTITION KEY.
3006	Distributed distributed distributed timeout.
3007	Get the features available to the feature manager.
3008	Checks if changes are filled up to the given page.
3009	Parses the timeout keyword.
3010	Parses the lock strategy.
3011	Create a cluster.
3012	Free a cluster.
3013	Start the profiler.
3014	Shuts down the profiler.
3015	Creates a new OScriptResultSet with the given entity and transformer.
3016	Grant access to a specific resource.
3017	Revokes access to the resource.
3018	Delete the record.
3019	Binds the parameters.
3020	Reset the table.
3021	Returns the index of the given item.
3022	spread the given value
3023	Creates a new index of the given type.
3024	Drops all indexes related to this property.
3025	Returns the first index in the list of indexes that are involved by this node.
3026	Returns the linked class.
3027	Returns the stream of the index configuration.
3028	Remove a listener.
3029	Register a database.
3030	Timeout the request.
3031	Creates a copy of the current document.
3032	Try to merge two Bags.
3033	Replaces the delegate s SBTree with the given pointer.
3034	Transforms the result of a command.
3035	Executes the command.
3036	Closes all pooled databases.
3037	On storage unregistered.
3038	Get the set of function names.
3039	Get the collection of collate types.
3040	Get the list of command names.
3041	Reads the field size and type from the current position.
3042	Write status.
3043	Write response headers.
3044	Write the records to the response.
3045	Write record to response.
3046	Sends a response.
3047	Sends a stream of bytes.
3048	Open the database.
3049	Closes the database.
3050	Listen for changes.
3051	Completes a component operation.
3052	Pushes counters for each component.
3053	Push the WritCacheCountersHolder on the snapshot.
3054	Push StorageCountersHolder data to the storage counters holder.
3055	Push WAL counters onto the WAL counters holder.
3056	Pushes counters for a component.
3057	Stop the write cache flush timer.
3058	Stops the fuzzy checkpoint timer.
3059	Stop the full checkpoint timer.
3060	Stop the commit timer.
3061	Stop the WAL record timer.
3062	Stop the WAL flush timer.
3063	Parse the given string into an OStatement.
3064	Init receive messages.
3065	Init check disconnect.
3066	Removes the record from the graph.
3067	Sets the property.
3068	Removes a property from the vertex.
3069	Checks if the given class is a subclass of the base class.
3070	Wrap cursor.
3071	Define the vertex attribute strategy.
3072	Define edge attribute strategy.
3073	RETURN ALL NEW RECORD ENTRYS WITH CLASSNAME
3074	RETURN ALL NEW RECORD ENTRYS WITH CLUSTER ID
3075	Adds an index entry to the index.
3076	Merge two sets.
3077	Update the record.
3078	If the function can be executed on the right side of the index.
3079	Prepare the keys for the index.
3080	Writes a page to the buffer.
3081	Read a page.
3082	Truncates the specified page index.
3083	Opens the WAL file.
3084	Is replication active.
3085	Get the NEW_NODE_STRATEGIES configuration field.
3086	Is the execution mode synchronous?
3087	Check if the cluster is read - your - writes.
3088	Get a map of cluster names to cluster names.
3089	Get the list of servers for the specified cluster.
3090	Checks if a server is contained in all of the specified clusters.
3091	Checks if the given server is contained in the cluster.
3092	Get the list of master servers.
3093	Get all configured servers.
3094	Get the cluster names that are connected to the server.
3095	Get the set of clusters owned by this server.
3096	Get the owner of the cluster.
3097	Get the cluster owner.
3098	Get the list of servers configured for the cluster.
3099	Get the set of servers that are currently registered.
3100	Get the data center names.
3101	Get the data center write quorum.
3102	Checks if the cluster is sharded.
3103	Get the list of servers in the distributed database configuration.
3104	Get the data center of the server.
3105	Get the global read quorum.
3106	Get write quorum.
3107	Get the cluster configuration for the specified cluster.
3108	Get the distributed database configuration for the given data center.
3109	Clear the initialization stack.
3110	Get index.
3111	Drops the index with the given name.
3112	Adds a vertex to the graph.
3113	Add an edge to the graph.
3114	Get a vertex.
3115	Get the vertices of the class iClassName.
3116	Get the edges of the class iClassName.
3117	Get an edge.
3118	Reuse the current graph.
3119	Shuts down the context.
3120	Returns the OrientBaseType of the vertex.
3121	Get the vertex type.
3122	Create a vertex type.
3123	Drops a vertex type.
3124	Get the edge type.
3125	Create an edge type.
3126	Get the element with the given id.
3127	Drops the key index for the given element class.
3128	Creates an index for the given element.
3129	Remove a listener from the background exception listeners list.
3130	Fired background data flush exception event.
3131	Stop monitoring.
3132	Registers the OPerformanceStatisticManagerMBean.
3133	Unregister the MBean for performance statistics
3134	Fetch write cache counters.
3135	fetch all threads and collect counters from the thread pool
3136	fetch all the counters for the component
3137	Compress the given JSON string.
3138	Get the property with the specified name.
3139	Detaches the given object from this entity.
3140	Get the version of the passed object.
3141	Executes the given command.
3142	Sets the dirty flag of the specified object.
3143	Unsets the dirty flag of the specified object.
3144	Returns the types of all index factories.
3145	Returns the set of index engines.
3146	Get the list of nodes that are missing from the response queue.
3147	Get the responses that conflict with the current responses group.
3148	Get the best response group.
3149	Compute quorum response.
3150	Get the received responses.
3151	Get the execution plan for the given statement.
3152	Returns true if the left and right expression allows the execution of the function.
3153	Get library.
3154	Release the database engine.
3155	Get the next position.
3156	Update the size of the bag.
3157	Get the value of the entry.
3158	Checks if the index can be used by order by after the filter.
3159	Returns the index of the character within iFrom and iTo within iText.
3160	Jump to the next white space.
3161	Jump to the next character in the text.
3162	Sets the fetch plan.
3163	Enqueue a record to repair.
3164	Cancels a record.
3165	Enqueue a cluster to repair.
3166	Returns a map of alias to the dependencies of the pattern.
3167	Create a new instance of the given class.
3168	Registers the given entity classes.
3169	Registers the given class as an entity class.
3170	Set the class handler.
3171	Acquires a new database.
3172	Get the number of available connections for a given user.
3173	Acquires a new database.
3174	Execute the synchronization.
3175	Lookup provider with OrientClassLoader.
3176	Check if the memory configuration is valid.
3177	Create a vertex from a JSON object.
3178	Create an edge from a JSON object.
3179	Convert an Element to a JSONObject.
3180	Create an object node from an Element.
3181	Execute import.
3182	Returns the current status of the job.
3183	Get the active data center map.
3184	Separate the algorithm from the given string.
3185	Creates a key from a key config.
3186	Creates a base64 - encoded key from a file.
3187	Creates a new OSymmetricKey object from the given input stream.
3188	Encrypt the given bytes using the given cipher transformation.
3189	Save the key to the given output stream.
3190	Save the key to a KeyStore.
3191	Set the child command context.
3192	Add the given object to the unique result.
3193	Get the value of the field as an object or a map.
3194	Authenticates the user to the database.
3195	Get the value of a map entry.
3196	Get the record.
3197	Read the current record.
3198	Get the database to use.
3199	Get the no - tx graph.
3200	Sets up the pool.
3201	Get the property with the specified name.
3202	Stops the current transaction.
3203	- - - - - - - - - - - - - - - - - -
3204	get next token
3205	Get the token at the given index.
3206	Generate a ParseException.
3207	Returns an iterable of vertices connected to the record.
3208	Removes all edges from the vertex.
3209	Adds an edge between the given vertices.
3210	Adds an edge between two vertices.
3211	Get the connection class.
3212	Get the connection class for the given field name.
3213	Process broken RIDs.
3214	Returns a map of console methods to their respective objects.
3215	Executes a remote task on the local node.
3216	Returns the number of nodes with the given status.
3217	Backup the underlying stream.
3218	Wait for next retry.
3219	Get the argument at the specified position.
3220	Check if the request has any of the given parameters.
3221	Connect to the remote server.
3222	Returns a map of the names of the databases in the network.
3223	Get server info.
3224	Checks if a database exists.
3225	Drops a database.
3226	Freezes the remote storage.
3227	Release the remote storage.
3228	Get the current cluster status
3229	Execute the CREATE INDEX.
3230	Get the active graph.
3231	Parse RETRY.
3232	Saves the record to the database.
3233	Delete record.
3234	Get authentication header.
3235	Authenticates the user.
3236	Checks if the user is authorized to execute the given resource.
3237	Run the server.
3238	adjust the line and column for the beginning of the token.
3239	Sets the bucket pointer.
3240	Get the bucket pointer at the given offset.
3241	End an atomic operation.
3242	Acquires an exclusive lock.
3243	Changes the maximum amount of memory used by the disk cache.
3244	Listen for incoming connections.
3245	Read the parameters from the server configuration.
3246	Shuts down the log manager.
3247	Add an item to the closable.
3248	Remove the entry with the given key.
3249	Acquires a lock on entry.
3250	Get the value associated with the given key.
3251	Clear the cache.
3252	Closes the entry.
3253	Empty all read buffers.
3254	Called after a write.
3255	Called after a read operation.
3256	Put an entry in the read buffer.
3257	Returns the closest power of two greater than or equal to the given value.
3258	On event.
3259	Convert the given key to its underlying enum value.
3260	Convert all the underlying values into the underlying enum values.
3261	Get the serializer for the given OType.
3262	Init shutdown queue.
3263	Get an engine by name.
3264	Optimization.
3265	Executes the query.
3266	Add a new state to the list of readers state.
3267	Authenticates a user.
3268	Create the OORole and OUser.
3269	Try to acquire a read lock.
3270	Get the vertex in the specified direction.
3271	This method is only used for debugging.
3272	This method is only used for the property access.
3273	Remove a property.
3274	Clears the tree.
3275	Deletes all the sub - trees from the file.
3276	End the import.
3277	Create a vertex.
3278	Parses the strategy keyword.
3279	Read the embedded collection.
3280	Execute the command.
3281	Fixes the link.
3282	Fill a record with the given record.
3283	Sets the record version.
3284	Get the record type.
3285	Initializes the database instance.
3286	Prints the stack trace of the given exception.
3287	Execute index query.
3288	Convert link to record.
3289	Registers a command.
3290	Create a server user object from the given document.
3291	Analyze the given condition.
3292	Create an indexed property.
3293	Attach all fields of the given object to this instance.
3294	Get the index class.
3295	This method is called when the next value is available.
3296	Truncates the class.
3297	Adds the base class to the subclass.
3298	Adds the polymorphic cluster ids to the class.
3299	Link to stream.
3300	Releases a pointer back to the pool.
3301	Checks if memory leaks are detected.
3302	Free all memory and free all pointers.
3303	Convert a byte array to an integer.
3304	Open the node.
3305	Installs clusters of a class.
3306	Dumps the current status of the distributed servers.
3307	Returns the index of the first occurrence of the specified object in the specified array.
3308	Returns the index of the first occurrence of an object in an array.
3309	Get the set of clusters that are involved in the target.
3310	Handle the result.
3311	Returns the current temporary RID counter.
3312	Report the tip of the table.
3313	Parses FETCH PLAN and sets the fetch plan.
3314	Parse the NOCACHE keyword.
3315	Optimize the sort.
3316	Get the status of the batched execution.
3317	Executes the command.
3318	Handle JVM error.
3319	Put a value to an index.
3320	Rolls back the current active micro - transaction.
3321	Executes the given command.
3322	Registers a new cluster.
3323	Sets the property.
3324	Execute the CREATE CLASS.
3325	Execute the SYNC DATABASE command.
3326	Delete a record.
3327	Callback for ORecordHook.
3328	Delete a record.
3329	Counts the number of objects in the view.
3330	Count the number of occurrences of the specified class.
3331	Activate the document on the current thread.
3332	Registers the given encryption algorithm.
3333	Returns the relative position of the given position relative to the target binary chunk.
3334	Returns the next word from the input stream.
3335	Parses the next word.
3336	Parses the next character in the text.
3337	Parses the next keyword.
3338	Checks if the current separator is the same as c.
3339	Execute the DROP CLASS command.
3340	Clear the configuration files.
3341	Get the offset of the next byte in the buffer.
3342	Extract the token value.
3343	Acquires an access token from the client context.
3344	Copy the access token from the authentication details to the context.
3345	Read more characters.
3346	Read a line of text from the input stream.
3347	Read a line from the input stream.
3348	Skip n bytes from the input stream.
3349	Skips n bytes.
3350	Ensures that the offset and length are within the array.
3351	Merge sort.
3352	Swaps two numbers.
3353	Perform a parallel quick sort.
3354	MurmurHash3 implementation.
3355	MurmurHash3 implementation.
3356	Writes the given byte buffer to the underlying file.
3357	Truncates the file to the specified size.
3358	Moves the position of the underlying byte stream to the given position.
3359	No fail refresh end metrics reporting.
3360	Awaits the completion of the current tasks.
3361	Find matches.
3362	Find the types that are dependent on any of the targets.
3363	Delete snapshots.
3364	Returns the field s hash code for the given field.
3365	Compares two fields.
3366	Remove all references outside of a closure.
3367	Called when Hollow announcements are completed.
3368	Called when a cycle is complete.
3369	Read header tags.
3370	Extract a RecordPrimaryKey from an object.
3371	Clear all the elements in the set.
3372	Reads the next 64 - bit ordinal from the DataInputStream and notifies the listeners.
3373	Returns the number of bits used in the sparse set.
3374	Get the field value.
3375	Copies the contents of the source array into the destination array.
3376	Copies length bytes from source to destination.
3377	Compares two byte arrays and returns true if they are equal.
3378	Copy length bytes from src to dest in the same order as srcPos.
3379	Copy length bytes from source to destination.
3380	Read segments from the input stream.
3381	Writes the contents of this buffer to the given stream.
3382	Ensure that segments are allocated.
3383	Returns the index of the field in the table.
3384	Calculates the total number of buckets in the select array.
3385	Checks if the given dataset has collections.
3386	Generate Hollow API Class and Hollow API Factory files.
3387	Generate Hollow schemas.
3388	Checks if the given keys match the field path.
3389	Get the record key for the given ordinal.
3390	Create a FieldPath for a PrimaryKey field.
3391	Create a FieldPath for a HashIndex.
3392	Create a FieldPath for a prefix index.
3393	Associates the given object with the given ordinal.
3394	Initialize the prefix index.
3395	Returns true if the prefix indexVolatile is set to contain the given key.
3396	Get the change percentage.
3397	Adds a field to the specified type.
3398	Returns a list of schemas that are ordered by dependency order.
3399	Initializes the default values for the major version of G3.
3400	Get the value of the given index.
3401	Find matching records for the given field and field value.
3402	Find matching records for the given field.
3403	Sets the element key and non - key paths.
3404	Sets the element key paths.
3405	Calculates the hashed results.
3406	Restore from the last state.
3407	Runs the incremental cycle.
3408	Mark the given key as excluded.
3409	This method is called when the Hollow object is read.
3410	Write the HollowBlobHeader.
3411	Calculate the heap footprint and populations for each type.
3412	Writes the field data to the given buffer.
3413	Writes a fixed - length int to the specified field buffer.
3414	Writes a fixed length long to the specified field buffer.
3415	Return an ordinal to the pool.
3416	Sort the free ordinary blocks.
3417	Generates a hash value for the given key and field type.
3418	Hash code for a field.
3419	Resize the storage.
3420	Returns the next available ordinal.
3421	Prepare for write.
3422	Compares the serialized representation with the contents of the byteData buffer.
3423	Grows the underlying key array.
3424	Rehashes the data for the given key.
3425	Create an empty key array.
3426	Check if the two fields are equal.
3427	Find a matching object.
3428	Swaps the current state with the pending state.
3429	Returns the size of the hash table.
3430	Run a cycle of read cycles.
3431	Writes a snapshot of the HollowTypeSchema object to the given OutputStream.
3432	Writes the delta of the HollowTypeSchema to the given OutputStream.
3433	Add schema names to the set if they are not a primitive or a collection.
3434	Normalizes field path to a parameter name.
3435	Reindex the hash index.
3436	Find matches in the index.
3437	Triggers a refresh with a random delay.
3438	Trigger refresh with a delay.
3439	Add a type diff.
3440	Calculate the diffs.
3441	Writes a variable - length value to the stream.
3442	Writes a VInt in the stream.
3443	Writes a VInt value to the specified array.
3444	Reads a varint from the InputStream.
3445	Reads a long value from the InputStream.
3446	Add a child view to the view.
3447	Refresh the loading views size.
3448	Update UI for the current mode.
3449	Pulls the header scroll and refreshes the footer when the user scrolls.
3450	OverScroll by scrolling by the specified amount.
3451	Creates a new fact builder.
3452	Adds a list of facts to the rule.
3453	Create a builder for the given rule class and action type.
3454	Creates a rule builder.
3455	Returns a builder that can be used to build the result and action of this rule.
3456	Returns a builder that can be used to build the rule.
3457	Creates a new GivenRuleBuilder instance.
3458	Creates a builder for the given facts.
3459	Creates a ThenRuleBuilder.
3460	Create an instance of the given rule.
3461	Get annotated field.
3462	Get the annotated method.
3463	Get annotation.
3464	Registers a rule.
3465	Update the rule status.
3466	Returns a map of rule names to rule statuses.
3467	Sets the result type of the builder.
3468	Adds an action to the rule.
3469	Add an action to the then rule.
3470	Resets the default value.
3471	Adds a new rule to the rule book.
3472	Get the list of all the pojo rules.
3473	Read an empty line or end of table.
3474	Convert the services to an array.
3475	Get the list of ports from the build configuration.
3476	Extract ports from the config.
3477	Parse port mapping.
3478	Add the port if it is not null.
3479	Shift the first port from the list if it is not empty.
3480	Add missing service parts from default service
3481	Appends an ImageStream resource to the target file.
3482	Checks if the ports match.
3483	Returns the value of the environmental variable that maps the given service name to its port number
3484	Get the host and port for the given service.
3485	Put a new value into the map if it does not exist.
3486	Merge the given map with the given map.
3487	Merge two maps.
3488	Put all the keys in toPut if it is not null.
3489	Waits until the pod is ready.
3490	Validates that the given value is a valid kubernetes ID.
3491	Convert the given entity to a list of items.
3492	Get the resource version of the given entity.
3493	Check if a pod is ready.
3494	Get the current context.
3495	Checks if the listBuilder has a route with the given name.
3496	Checks if a resource exists in the classpath.
3497	Reads a file and enriches the fragment.
3498	Convert a map of env vars to a list of EnvVars.
3499	Merge two resources.
3500	Merge the override map and the original map and remove empty strings.
3501	Checks if the pod spec is local customisation.
3502	Read configuration from a file.
3503	Adds the port to the map if it is valid.
3504	Gets the docker. json config string.
3505	Get plugin configuration.
3506	Get the secret configuration for the given id.
3507	Downloads the file at the given URL.
3508	Compares two versions.
3509	Blend a profile with a configuration.
3510	Lookup a profile by name and directory
3511	Read profiles from classpath.
3512	Read all profiles from the classpath.
3513	Find the profile. yaml file in the given directory.
3514	Get the list of profile paths.
3515	Read a YAML file and return a List of Profile objects.
3516	Get image pull policy.
3517	Returns true if the runtime is in OpenShift mode.
3518	Get the replica count.
3519	Get the first child element with the given name.
3520	Installs a template on Kubernetes
3521	Remove tag by name.
3522	Create a namespace
3523	Apply a project.
3524	Create a ProjectRequest
3525	Get the namespace for the given entity.
3526	On apply error.
3527	Add the default namespace and the default Project.
3528	Enriches the list builder with the namespace annotation.
3529	Get the environment variables for the Java interpreter.
3530	Convert a duration in seconds to seconds.
3531	Parse a duration string.
3532	Scan files in the build output directory.
3533	Disable OpenShift features for the applyService.
3534	Checks if the given service has an IngressRule.
3535	Parse the given mapping file.
3536	Creates a generator context.
3537	Extract the generator config from the profile.
3538	Get enricher context.
3539	Extract enricher config.
3540	Returns the default icon reference.
3541	Copy all files from the app s app build directory to the app build directory.
3542	Get the properties from a resource.
3543	Gets the Spring Boot version.
3544	Creates a list of objects representing the service objects defined by the given descriptors.
3545	Enriches the platform mode.
3546	Get the raw configuration map.
3547	Flatten the source map into a new map.
3548	Extract the watcher config from the profile.
3549	if the list contains a single Template we unwrap it
3550	Get the build reference date.
3551	Get the value of a property.
3552	Get the configuration map for the given name.
3553	Prepare processors for the given namedList.
3554	Add the image source to the builder.
3555	Get the default from - selector for the given mode.
3556	Returns image name.
3557	Returns the registry.
3558	Returns true if the fabric8 server is online.
3559	Get the external service URL.
3560	Get a boolean value from the context s configuration.
3561	Creates a JestClient instance.
3562	Create an internal node.
3563	Scan for plugins.
3564	Creates a new AmericanExpressRewardsBalance object from a JSON string.
3565	This method is used to get the rewards balance.
3566	Creates a PayPalPaymentResource object from a JSON string.
3567	Override get to add authorization fingerprint and authorization headers.
3568	Override post method to add authorization fingerprint if the client is authorized.
3569	Creates a VenmoConfiguration object from a JSON object.
3570	Collect device data from the fragment.
3571	Collect device data from the Braintree.
3572	Collects PayPal device data from fragment.
3573	Gets the client metadata id.
3574	Checks if signature is valid for the given package.
3575	Get the string value of a JSON property. If the property is null or empty the fallback
3576	Parse the JSON body for payment method nonces.
3577	Get the checkout config for the browser.
3578	Get the billing agreement recipe for the browser.
3579	Get a resource at the specified path.
3580	Post a file to the specified path with the specified data.
3581	Make a POST request to the specified path with the specified data.
3582	Starts a local payment.
3583	Approves a local payment.
3584	Add a listener to this object.
3585	Remove a listener.
3586	Request Billing Agreement flow
3587	Called when an activity is completed.
3588	Builds a PayPalAccountBuilder object from the response.
3589	Add Nouns to the dictionary.
3590	Remove words from the word dictionary.
3591	Transform a sequence of tokens into a Java string list.
3592	Extract phrases from the given tokens.
3593	Detokenize the input tokens.
3594	Fetch data from channel ch into buf.
3595	Joins NAL units into a single ByteBuffer.
3596	Join NAL units to buffer.
3597	Returns a profile for the specified integer.
3598	Normalizes and generates fixed precision.
3599	Read to the next marker partial.
3600	Read to the next marker buffer.
3601	Get the maximum available frame.
3602	Modify a file.
3603	Copy a file from src to dst.
3604	Get the duration of the last edited edit.
3605	Convert a frame number into a time value.
3606	Convert a time value to a frame.
3607	mediaTv - > edited - > edited - > edited - > edited - > edited
3608	Rescale the duration of the edited TV to the duration of the media.
3609	qtPlayerFrameNo - return the frame number of the movie in question.
3610	Get the time in seconds for the player in the movie.
3611	TimevalueToTimecodeFrame converts a timevalue to a timecode frame.
3612	Format the timecode.
3613	Generate a 7 bit value.
3614	Set n - th value in list.
3615	Checks if the inputColor matches this ColorSpace.
3616	Returns the size of the specified compass.
3617	Create a raw MP4 demuxer.
3618	Read the next cache entry.
3619	Create a WAV header with the given format and number of samples.
3620	Create a WAV file from an array of WAV headers.
3621	Parse MP4 decoder specific info.
3622	Encode the symbol.
3623	Decode decoder pic marking.
3624	Split the edits of a movie into two lists.
3625	Decode a frame.
3626	Sets the big - endian flag.
3627	Decompress left and top blocks.
3628	Encode a native frame.
3629	Encodes a long value to big - endian byte array.
3630	Returns the number of bits required to encode v.
3631	Add packet to output stream
3632	Repositions the file.
3633	Decode a CABAC BIT.
3634	Decode a single byte.
3635	gotoMarker is a wrapper around the above method.
3636	Returns the i th SampleFrequency value for the integer.
3637	Predicts the plane.
3638	Sets the start of the block.
3639	Calculates the coefficient of a given level.
3640	Finishes the division.
3641	Concatenate the bits in a buffer into this buffer.
3642	rewind reverse of v
3643	rewind reverse reverse of 64 bit integers
3644	Seeks to the specified frame.
3645	Get the pixel buffer for the frame.
3646	Get the change point ID for a given lngain.
3647	Convert byte array to int array.
3648	Convert an integer array to a byte array.
3649	Convert the buffer to a float using the specified AudioFormat.
3650	Read float data from floatBuf.
3651	Interleave the input buffer with the output buffer.
3652	Decompress input buffer into output buffer.
3653	Returns the size of the captured video.
3654	Build the box out map.
3655	Build a wipe map.
3656	Read an UL batch.
3657	Read int32 batch.
3658	Calculate the median value of two vectors.
3659	Encode a Picture into a EncodedFrame.
3660	Encode an IR frame.
3661	Encode a Picture frame.
3662	Returns a collection of all supported codecs.
3663	Returns a collection of all supported tags.
3664	Adds a reference to the reference slot.
3665	GC.
3666	Flushes the reference cache.
3667	Loads a library.
3668	Unpacks a library from a given path.
3669	Delete temporary files.
3670	Get the default audio layout for the specified number of channels.
3671	Get the AudioChannel. Type of the AudioChannel. Layout at the specified index.
3672	Create a MediaPacket.
3673	Get the version information.
3674	Get the default time base.
3675	Create a Demuxer.
3676	Plays a video stream.
3677	Display the video at correct time.
3678	Creates a CodecDescriptor for the given Codec. ID.
3679	Print a property option.
3680	Register a URLProtocolFactory for the given protocol prefix.
3681	Generate a unique name for a given object.
3682	Create a new MediaAudioResampler.
3683	Returns a list of supported video frame rates.
3684	Returns a list of supported pixel formats.
3685	Returns a list of supported audio sample rates.
3686	Returns a list of supported AudioFormats.
3687	Returns a list of all the channels that are supported by this library.
3688	Sets the flag associated with this Coder.
3689	Sets the specified flag to the specified value.
3690	Returns a decoder for this stream.
3691	Get the demuxer for this stream.
3692	Gets the list of available formats.
3693	Create a FilterGraph object.
3694	Get the type of this filter.
3695	Get a byte buffer.
3696	Create a new audio frame with the given audio format.
3697	Resample the input picture with the resampler.
3698	Validate the image.
3699	Validate the picture.
3700	Get the filter graph associated with this filter link.
3701	Get the meta data for this media.
3702	Get the CPU architecture.
3703	Get the CPU architecture from a GNU string.
3704	Get the OS family from the given OS name.
3705	Get the OS family from a GNU string.
3706	Plays the sound.
3707	Load a library.
3708	Set the library to be loaded.
3709	Load the specified library.
3710	Initialize the search paths.
3711	Check if the library is already loaded.
3712	Record the screen.
3713	Delete this object.
3714	Get a stream from the Muxer.
3715	Get the Muxer object associated with this stream.
3716	Make a SetScriptTransaction.
3717	Decodes a base58 - encoded ASCII string into a byte array.
3718	Generate a seed.
3719	Get a single transaction.
3720	Get a list of transactions for the given address.
3721	Get a list of transactions for a given address.
3722	Get a sequence of block headers.
3723	Get block.
3724	Send a transaction.
3725	Set the script for the given account.
3726	Compiles a script into a JavaScript file.
3727	Writes a primitive array to the stream.
3728	Flushes the buffer.
3729	Writes an object to memory.
3730	Read the class.
3731	Serialize an object to a byte array.
3732	Set the MMF data.
3733	Returns the specificity of the given class.
3734	resizes the underlying file to the specified size.
3735	Remove the binary key.
3736	Write a string as ASCII.
3737	Set output stream.
3738	Creates a FSTConfiguration object.
3739	Create a configuration for the struct mode.
3740	Calculate the size of the object not aUtility.
3741	Clear all cached objects.
3742	Get an FSTObjectInput instance that can be used to read from an input stream.
3743	Get an object input.
3744	Get an object input copy from an array.
3745	Get an FSTObjectOutput for this stream.
3746	Register a cross platform class mapping.
3747	Returns the canonical name of the class.
3748	Write an integer.
3749	Write a raw int.
3750	Write a packed int.
3751	Writes an array of primitive types.
3752	Writes a raw string to the output buffer.
3753	Get the cached FSTFieldInfo for the given class.
3754	Notifies the listener that an object will be written.
3755	Notifies the listener that an object has been written.
3756	Get the FSTClazzInfo for the given reference.
3757	Writes an array of objects.
3758	Set string.
3759	Write primitive array.
3760	Finish the change tracking.
3761	Snapshot changes.
3762	Register an object for write.
3763	Writes an object to the output stream.
3764	Read an object from the input stream.
3765	Read len bytes from storage.
3766	Reads an int from the buffer.
3767	Back at the end of the buffer.
3768	Sets whether or not thread pooling is enabled.
3769	Start the cassandra.
3770	Clean data embedded in cassandra.
3771	Copy a resource from the classpath to a directory.
3772	Print thread info.
3773	Checks if a remote port is already in use.
3774	Empty subscriber state.
3775	Gets the onnx op descriptors.
3776	Calculate the output shape of the input.
3777	Logical OR operation.
3778	Returns true if the condition is true.
3779	Check if the condition is true
3780	Or condition.
3781	Applies a condition to an ndarray
3782	First index of an ndarray
3783	Convert the array into a flat property buffer
3784	Create a new FunctionProperties object from a FlatProperties object.
3785	Create a flat node with properties
3786	Sets the exception.
3787	Sets the exception if this exception is the first exception.
3788	Merge the two data sets.
3789	Partition a variable in chunks
3790	Converts the given ONNX data type to the appropriate nd4j type.
3791	Shuts down the transport and the executor.
3792	Get current device architecture
3793	Convert a column to an image
3794	Pooling 2D
3795	Creates a new CompressionDescriptor object from a ByteBuffer.
3796	Splits the list into batches of the specified size.
3797	Validate that all arrays have the same dimensions
3798	Set the dtype of the underlying data buffer.
3799	Generate an ndarray of numbers
3800	Flatten the given matrices into a flattened ndarray
3801	Bilinear Products are bilinear products
3802	Create a complex array from a double array.
3803	Create a complex complex array with a constant value
3804	Create a complex value of the given shape and value
3805	Check if the last synced time has passed since the last sync.
3806	Subtract the complex components of this complex number with the complex components of c and set the result
3807	Creates a complex number that is the inverse of the input complex number.
3808	Ceiling the complex number
3809	Negates the complex number
3810	Creates an absolute value
3811	Complex power operation
3812	Aeron context.
3813	Binarizes the features in the model by binarizing the linear view of the model
3814	Samples the examples and outcomes of the classifier.
3815	Memory footprint used for the Nd4j
3816	Stringify an exception
3817	SimpleHostname returns the full hostname without any leading or trailing spaces.
3818	Convert an array of strings to a string.
3819	Converts a byte array to a string of hexadecimal digits.
3820	Get the values of the string delimited by the given delimiter.
3821	Splits a string into an array of strings.
3822	Splits a string into an array of strings.
3823	Finds the next occurrence of separator or escapeChar.
3824	Escapes a string for HTML output.
3825	Join the strings in the given sequence with the given separator.
3826	Camelize a string.
3827	Replaces tokens in the template with the given replacement map.
3828	Get the stack trace of the given thread.
3829	Invert the input array
3830	Returns the nth element in the array.
3831	Is actual on host side.
3832	Is actual on device side.
3833	Create shape information
3834	Create shape information
3835	Check if shapeInfo is a vector.
3836	Get the order of the elements in the INDArray
3837	Get the offset for the given indexes
3838	Convert an array of indices to an array of indices.
3839	Get a half - precision short.
3840	Reallocate the data buffer.
3841	Copy data from one buffer to another.
3842	get constant buffer
3843	Returns the kafka URI for this topic.
3844	Computes the power of ndArray by power power
3845	Logarithm of the ndarray
3846	Max the elements of an ndarray
3847	Computes the maximum of the first and second
3848	Min array with k elements
3849	Computes the minimum of the first and second
3850	Stabilizes an ndarray
3851	Create an expm1 array
3852	Computes the logarithm of the input array
3853	Prepare bounds for bounds calculation
3854	Adjusts the scheme to the upper and lower bounds of the input and returns the adjusted scheme
3855	Returns the next DataSet.
3856	SGEQRF operation
3857	Build an allocation shape from a DataBuffer.
3858	Checks if a file exists in the path.
3859	Read the data from the input stream.
3860	Sweep tail.
3861	Create a new ndarray from a NumpyPointer
3862	Create a numpy ndarray from a file
3863	Allocates a PagedPointer.
3864	Attach an object to the lock manager.
3865	Returns true if the master and responder are in the STARTED state.
3866	Execute the given op.
3867	Flush the queue blocking.
3868	Get input stream.
3869	Get the next available device for a given thread.
3870	Attach a thread to a device.
3871	Get next available device.
3872	Returns the operating system name.
3873	Calculates the architecture.
3874	Publish the given INDArray to the camel context
3875	Start the instrumentation server.
3876	Creates a DataBuffer.
3877	Intercept int data type operations.
3878	Adds two complex numbers.
3879	Process the message.
3880	Avg pooling 3d operation.
3881	Depth - wise convolution 2D SDVariable
3882	Resets the state of the class.
3883	Get the class of the given op.
3884	Store a new array for this variable.
3885	Get the shape of the array.
3886	Evaluate the same as the input
3887	Compress an ndarray
3888	Flatten the complex numbers in toExp
3889	Center the array
3890	Truncates a vector to n complex elements.
3891	Pad with zeros
3892	Compute the element index in the array
3893	Broadcast the given array to all devices
3894	Process the message.
3895	Returns the gamma value.
3896	Calculates square root of x.
3897	CBRT.
3898	Returns the root of x with n digits.
3899	The Taylor expansion function.
3900	Returns the exponential of 1. 0.
3901	Calculates the power of x by x^y.
3902	powRound.
3903	- - - - - - - - - - - - - - - - - -
3904	tangent of x
3905	Returns the hyperbolic cosine of x.
3906	Sinh function.
3907	tanh x = x + 1.
3908	Calculates the absolute error in an arcsinh function.
3909	Calculates the absolute error in acosh
3910	Gamma function.
3911	Broadhurst Broadhurst P.
3912	Scale x by d.
3913	Scales x by x. precision and x. precision.
3914	Decimal error to precision.
3915	Add a function to the functionInstancesById map.
3916	Returns the inputs for the given function.
3917	Update the array for the given variable name.
3918	Adds a shape for the given variable.
3919	Associate an array with a variable
3920	Gets the property for a given DifferentialFunction.
3921	Add a property for a differential function
3922	Adds an outgoing function to the output.
3923	Adds a new function to the receiver.
3924	HasArgs boolean.
3925	Execute SameDiff function
3926	Create a new constant variable with specified shape
3927	Create a new one - to - one SDVariable
3928	Create a new SDVariable that is equal to input but is a scalar
3929	Remove the argument from the function.
3930	Set the gradient for the given variable name
3931	Average pooling 3d operation.
3932	Create a GRU cell
3933	exec all ops
3934	Create a while loop.
3935	Execute the sameDiff function.
3936	Execute the sameDiff function with the given name.
3937	Execute the operation backwards and return the result
3938	Add a variable to the list of variables to be placed in the place holder.
3939	Allocates a number of bytes in memory.
3940	Returns the length for the given data buffer type.
3941	Get the name of the data buffer type.
3942	Get the data buffer type from the context
3943	Get the number of the operation with the given name.
3944	Destroy all workspaces for the current thread.
3945	Prints allocation statistics for current thread
3946	trmv for float or double
3947	Receive the data
3948	Execute the Variance operation
3949	Decode the encoded array into the target array
3950	Returns the node name.
3951	invoke the tad operation
3952	Assert that no active workspaces are open
3953	Negative log likelihood
3954	Request a tick.
3955	Try to request a toe.
3956	Releases the toe request.
3957	Get the current state.
3958	Build an environment.
3959	Process the message.
3960	Initialize the curr dataset from the list of examples
3961	Initialize host collectors
3962	Get the pointer to the data buffer.
3963	This method is called when a host buffer is being written to.
3964	Applies an updater to the given gradient
3965	Wait till the task is done.
3966	Create an NDArrayIndex from an ndarray
3967	Properties for function.
3968	Has place holder inputs?
3969	Diff operation.
3970	Format an ndarray
3971	Imports the given TFGraph into the SameDiff.
3972	Convert the given complex array to a Blob
3973	Load a complex array from a Blob
3974	Save the complex array.
3975	Copy real values to the given ndarray
3976	Copy imaginary values to the input ndarray
3977	Adds the complex number to the linear view.
3978	Assign the complex elements from another array.
3979	Get the rows of the matrix
3980	Put a row into the matrix
3981	Put a column of the matrix
3982	Subtract the other array with the result array
3983	Add the other array to the result array
3984	Subtract the complex elements from this and the other
3985	Adds the complex elements of this and the complex elements of the other.
3986	Assigns a complex number to this array
3987	Returns the complex elements of this array.
3988	Computes the eigenvalues of A
3989	Symmetric generalized eigenvalue decomposition
3990	Compute the approximate complex order
3991	Copy the complex elements from x to y.
3992	Scal the complex number alpha and the complex complex complex complex complex complex complex complex complex complex
3993	This method is called when a message is received from the distributed distributed optimizer.
3994	Count the number of non - zero values in the labels
3995	Reduce along specified dimensions
3996	Gets a no - arg constructor from a class.
3997	Gets a constructor.
3998	Invoke a method with the given parameters.
3999	Get the annotation of the given type.
4000	Gets the declared annotation.
4001	Checks if an annotation is present on the given class.
4002	Create a proxy instance.
4003	Load the given entity.
4004	Save the given entity.
4005	Create a proxy instance.
4006	Get the metadata of the entity class.
4007	Query keys - only.
4008	Query the database and return a query results.
4009	Query normal queries.
4010	Query the database with a ProjectionEntityQuery
4011	Count the number of keys returned by the query.
4012	Partition the input iterator into chunks of chunkSize.
4013	Load the keys from the given iterator.
4014	Format a message for the given path.
4015	Create a key for the given object.
4016	Compares two keys using the identity hash function.
4017	Convert raw key to Key.
4018	Returns the key of a typed object.
4019	Get the kind here.
4020	Checks if the given type has no type parameters.
4021	Checks if the superType is a subtype of subType.
4022	Returns an array of types that represent the exact supertype of the given type.
4023	Capture the type.
4024	Get translator.
4025	Get a populator for the given class.
4026	Checks if the given class has Index and Unindex annotations.
4027	Checks if the method has AlsoLoad annotation.
4028	Get all the properties declared on the given class.
4029	Gets the key metadata for the first non - Entity type.
4030	Get the value for the given key.
4031	Executes the round.
4032	Fetch pending keys.
4033	Adds the discriminators of the given class.
4034	Registers a subclass of P.
4035	Get the collection component type.
4036	Returns the type of the map s key.
4037	Creates a new ForwardPath from the given Path.
4038	Returns the final path.
4039	Returns the string representation of this node.
4040	Returns the depth of the path.
4041	Put all the updates in the updates collection.
4042	Empty the cache.
4043	Cache put if unconditionally expired.
4044	Get all the keys from the cache.
4045	Returns the keys of the given buckets.
4046	Find key fields in the given class hierarchy.
4047	Sets the key of the given entity.
4048	Sets the long id of the given object.
4049	Get the raw key of the parent.
4050	Registers a subtype of Object. class.
4051	Checks if the two types could be a common subtype of the two.
4052	Transform the given owner into the given class.
4053	Get the annotation of this annotation type or null if it is not present.
4054	Add all values from the other session to this session.
4055	Load a key into the round.
4056	Execute the round.
4057	Translate the raw result into a map.
4058	Fetch the entities with the given keys.
4059	Load entity.
4060	Creates a raw key.
4061	Returns the raw key.
4062	Returns the id value for the given key.
4063	Convert a URL - safe key to a datastore key.
4064	Transactionless.
4065	Transact a new object.
4066	Transacts the work in a single transaction.
4067	Returns true if the given condition matches the given object.
4068	Objectify object.
4069	Async datastore.
4070	Get the metadata for an entity.
4071	Allocate num keys.
4072	Open a new Objectify instance.
4073	Closes the Objectify instance.
4074	Homogenize indexes.
4075	Creates a reference to a value.
4076	Get the value of the key. If the key is not found an exception is thrown.
4077	Add a value to the list.
4078	Returns true if the future is done.
4079	Generate If conditions for the given If classes.
4080	Execute all deferred tasks.
4081	Get a container of the given type.
4082	Get the stat for the given kind.
4083	Unwraps the given Throwable and throws it.
4084	Get a translator.
4085	Get root entity.
4086	Create a translator.
4087	Load the given entity into the given object.
4088	Get the value of the property from the container.
4089	Sets the value of the property.
4090	Save the property value.
4091	Get the value of the property.
4092	Writes extensions to the JsonGenerator.
4093	Writes the content category.
4094	Writes the content categories.
4095	Process the given snippet.
4096	Get bids from response.
4097	Returns a Bid. Builder for the bid with the given id.
4098	Updates all BidBuilders in the response.
4099	Remove Bids that match the given filter.
4100	Returns an iterable of the impList that matches the given filter.
4101	Read extensions.
4102	Returns true if the current token is null.
4103	Registers an OpenRtbJsonExtReader for the given message class.
4104	Registers a new OpenRtbJsonExtWriter for the given message class.
4105	Process the SnippetProcessorContext.
4106	Process bid fields.
4107	Updates the given objects using the given updater.
4108	Filters the given list of messages according to the given predicate.
4109	Get the current name from the JsonParser.
4110	Start an object.
4111	Start an array.
4112	Peeks the next token.
4113	Writes a boolean field.
4114	Writes a list of Strings to a JsonGenerator.
4115	Writes an array of integers.
4116	Writes a long array.
4117	Writes the given enums to the given field.
4118	Resolve a URL.
4119	fixPureQueryTargets - Fixes the target for a pure query.
4120	Get the host segments of the given URL.
4121	Get the host part of the given URL.
4122	get the page from the url
4123	Load a list of String values from storm conf
4124	Extract the config element from the map.
4125	get the protocol for the given URL
4126	Generate WARC info.
4127	Extract the refresh URL from the given string.
4128	Returns a new Metadata object with the given targetURL sourceURL and parentMD.
4129	Filter metadata that are not persisted but not transfered.
4130	Add a URL to the queue.
4131	Cleans a field name.
4132	Get the charset from the BOM.
4133	Detects the charset of the given content.
4134	Look for a charset in the given buffer.
4135	Sniff the content.
4136	Sets a value for a given key.
4137	Get the first value in the Metadata object.
4138	Get a list of cookies from a string.
4139	Check if the domain matches the host name.
4140	Returns a cache key for robots. txt.
4141	Get the robot rules set from the cache.
4142	Extract meta tags from the document fragment.
4143	Acknowledge the tuple.
4144	Filter the URL according to the rules defined in the filter.
4145	Apply the rules to the given string.
4146	Read rules from a file.
4147	Process the query elements in the given URL.
4148	Load the NavigationFilters from the stormconf.
4149	Add a record format to the current record.
4150	throttle queries.
4151	Check if we should trigger queries.
4152	Load the ParseFilters from the storm config.
4153	Append a node to the current node.
4154	Ignorable whitespace.
4155	Add a processing instruction.
4156	Add a comment.
4157	CDATA section.
4158	Start DTD.
4159	Start a prefix mapping.
4160	Get the value for the URL.
4161	Trim text to fit into maxLengthText.
4162	Check custom interval.
4163	Load the URLFilters from the storm config file.
4164	Set the item count.
4165	Resolves size and state based on the measure spec.
4166	Set the empty item drawable.
4167	Set the angle of the wheel.
4168	Update the selected position.
4169	Invalidate the wheel item drawable.
4170	Convert raw position to wheel position.
4171	Update the velocity and angle.
4172	Get contrast color from the map entry.
4173	Clamp the value to be within upperLimit.
4174	Writes the Coveralls data to the given writer.
4175	Get the data as a ByteBuffer.
4176	Set the string value.
4177	Make a 1D array of String objects.
4178	Create ArrayChar from String s.
4179	Make ArrayChar from String Array
4180	make a char array from a string array
4181	Get the offset of the time interval for the given Grib2Record.
4182	show the dependent window
4183	Show this frame if it is not already iconified.
4184	make size estimate
4185	Read Grib1 records from a file.
4186	Creates a new UnitName with the given name and plural.
4187	Creates a new UnitName object.
4188	Makes a plural form of the given name.
4189	Returns true if the date range is included in the given date.
4190	Intersects this range with another range.
4191	Extend this range by another range.
4192	Extend the range by the given date.
4193	Sets the start date.
4194	Sets the end date.
4195	Sets the duration.
4196	Recalculates the duration.
4197	add a MapBean to the map bean menu
4198	This is called when a parse failed.
4199	Returns the name of the NCD.
4200	Returns a string representation of the parameters.
4201	Open a DSP file.
4202	Computes bounds of the given LatLonRect.
4203	Synch UI.
4204	Compute the unlimited chunking.
4205	Register a directory.
4206	Process events from the watch.
4207	Sets the reference date.
4208	Open a FeatureDataset.
4209	wrap a NetcdfDataset with a FeatureType
4210	Returns true if want is ok for facType.
4211	Find the FeatureType for a NetCDF file.
4212	Write a catalog to the HttpServletResponse.
4213	Convert a catalog to HTML.
4214	Get the user css.
4215	Get the user head.
4216	Create a dynamic catalog object.
4217	look for services that are not in the catalog
4218	Initializes the HTTPSession.
4219	Get the content as a String.
4220	PUT content to the server.
4221	Get front page.
4222	Make a catalog.
4223	Extract the geospatial coverage data from the GDS coordinate system.
4224	Get a single dataset or by its type name.
4225	Returns true if the two VertCoordValues are nearly equal.
4226	Creates a new UnitID object.
4227	Parse an attribute.
4228	Read the top of the NIRAD product.
4229	Convert two short values into an int.
4230	Convert a byte array to an integer.
4231	Get a Date object from Julian Day Count and Milli - Central Period.
4232	Make sure the given object name is a valid NetCDF object name.
4233	Checks if the given object name is a valid NetCDF3 object name.
4234	Open the NetcdfFile for writing.
4235	Read the record data from the given Structure.
4236	Read the record data subset.
4237	fill non - record variables
4238	Makes a time struct from the time values of this time series.
4239	Make a time struct from a Calendar object.
4240	Checks if the given template has time templates.
4241	Adds a ServerSideFunction to the list of functions.
4242	Get a boolean function.
4243	Get a BTFunction by name.
4244	Load a new function.
4245	Get the level name of a record.
4246	Get the level description of a record.
4247	Get the level unit of a record.
4248	Get the projection type.
4249	Returns true if the given record is vertical coordinate.
4250	Returns true if the given record is a layer.
4251	Make a CoordinateTransform from a NetCDF4 Variable
4252	Make a dummy variable for a coordinate transform.
4253	Create a projection from a CoverageTransform
4254	The main method that is run in the background.
4255	Saves the state of this instance.
4256	Returns a copy of this Chronology with the specified time zone altered.
4257	Write count.
4258	Writes an array of values.
4259	Writes a byte array to the output stream.
4260	Outputs a range of bytes.
4261	finish init.
4262	Construct a CalendarDateRange from a DateRange.
4263	Factory method for creating Grib2Gds objects.
4264	Parse the DDS document.
4265	Parse the text using the DAS parser.
4266	Swaps the grid header.
4267	Read a grid record.
4268	main method.
4269	Write a constraint.
4270	Write WFS headers and SS.
4271	Write the list of operations to the WFS file.
4272	Read all files in the given directory and call the closure closure.
4273	Scans a log file and calls the closure function for each log line.
4274	Get the packed type of the grid.
4275	Find a grid record by parameter.
4276	read the data packing type
4277	Unpacks data from the input stream.
4278	DP_UGRB.
4279	Unpack Grib1 data.
4280	Unpack Grib2 data.
4281	Prints the grids in the grid index.
4282	Get the next byte from the input stream.
4283	Creates a CalendarDate from a calendar object.
4284	Creates a CalendarDate from a java. util. Date.
4285	Constructs an instance set to the specified milliseconds.
4286	Creates a CalendarDate from a Calendar and a millisecond millisecond value.
4287	Parses the given UDUNIT string into a CalendarDate.
4288	Returns the difference in milliseconds between this date and the given period.
4289	Create an array atomically.
4290	Setup the request object.
4291	Escape special characters.
4292	Create slices from a list of ranges.
4293	Unwraps a file.
4294	Checks if the dimset contains a variable length dimension.
4295	Computes the shape of the DAP array.
4296	Add to this date
4297	Multiply this unit by another unit.
4298	This method divide by another unit.
4299	This method is used to divide this unit into another unit.
4300	Raise to the given power.
4301	Convert the given amount to the derived unit.
4302	Convert input array to output array using derived unit.
4303	Convert from a derived unit to this unit.
4304	Returns a canonical string representation of this derived unit.
4305	Read the data from the vindex.
4306	Read the data in the second dimension.
4307	Flatten this point feature collection into a point feature collection.
4308	Find a service by name.
4309	Get the gate size for the given datatype.
4310	Returns the start of the gate.
4311	Returns the number of gates for the given datatype.
4312	Write the document to the output stream
4313	Returns the preferred size of the target container.
4314	Verify that the given dataset is a descendant of the given dataset.
4315	Generate a proxy ds resolver catalog.
4316	Returns a CalendarDateUnit instance for the given calendar name and UDUNIT string.
4317	Returns a CalendarDateUnit instance with the given Calendar instance and UDUNIT string.
4318	Creates a CalendarDateUnit instance.
4319	Make offset from base date.
4320	Make a CalendarDate from a double.
4321	Returns the dimension of this unit.
4322	Checks if the file is a valid UCAR file.
4323	Read the header names for the station
4324	Read the data of type v2.
4325	Read an array of integers.
4326	Read data from the specified section to the specified channel.
4327	Calculate elevation.
4328	Calculate step.
4329	Calculate angle between az0 and az1.
4330	Calculate the data in the recHdr.
4331	Calculate the Nyquist value.
4332	Makes a VerticalTransform for the given dataset.
4333	Set the debug flags.
4334	Sets the extend index mode.
4335	Read the XY data.
4336	Checks if the variable is missing.
4337	Get the LatLon bounding box of this bounding box.
4338	Finish the structure.
4339	Tab - stops the tab.
4340	Pads a string to a certain width.
4341	Returns a String with the given integer value padded to the given width.
4342	Format a long value.
4343	Format byte size.
4344	Print a string representation of the given double.
4345	shows the decimal places and the decimal point of the decimal point.
4346	Get the shape string.
4347	Finish the slice.
4348	Returns a constraint string.
4349	Compose two slices.
4350	Map i - th element of target slice to i - th element of target slice.
4351	dump bytes in buf0
4352	dump bytes from buf0 to buf0. limit is set to buf0. position
4353	Get the type of the EarthEllipsoid.
4354	Get the type of ellipsoid.
4355	Decode the variable length data.
4356	Decode varlen data.
4357	Extract the HTML document from the given URL.
4358	Get the text content from the specified URL.
4359	filter tag.
4360	Read data from the specified section into the specified channel.
4361	Add all the given attributes.
4362	Remove an attribute.
4363	Remove an attribute ignoring case.
4364	Returns the offsets in time units.
4365	Add an ActionSourceListener to this ActionCoordinator.
4366	get standard date
4367	Get standard or ISO date.
4368	Returns the origin date.
4369	Get the date.
4370	Make a Date from a double.
4371	Make a value from a date.
4372	Make a standard date string from a double.
4373	Get the spacing in km.
4374	Add dimensions to NetCDF file
4375	Add a coordinate axis to the NetCDF file.
4376	make the projection
4377	Add all the gds parameters to the given variable
4378	Add a Coordinate System Variable to the NetCDF file.
4379	makeLC - makeLC - makeLC - makeLC - makeLC - makeLC -
4380	Make the Stereographic projection of the grid.
4381	Make a Mercator projection.
4382	Make the message geostationary.
4383	Set the DX and DY parameters.
4384	Read a dataset.
4385	Read a DatasetScan element.
4386	Read metadata content from a URL.
4387	Get the level type of the GRIB block.
4388	Checks if the file is a valid file.
4389	Writes a byte array to the underlying stream.
4390	Sets the clear name of this node.
4391	Get the coordinate name for the given axis type
4392	Get the coordinate name for the given axis and dimension
4393	Build the XML for the response.
4394	Build a DAP exception from this object.
4395	Breakup levels.
4396	Make a dimension for z - coordinates.
4397	Create new variables for the given level dimension.
4398	Create a time coordinate axis from a reference variable.
4399	Bit shave a float value by masking the bits.
4400	This is the main method of the program.
4401	wrap ncfile in a NetcdfDataset
4402	Opens a NetcdfFile from a location
4403	Clear all coordinate systems.
4404	Find a coordinate axis of the given type.
4405	Find a coordinate axis by its full name.
4406	Find a coordinate system by name.
4407	Find a coordinate transform by name.
4408	Check if the enhance mode is in the set.
4409	Set the values of a Variable.
4410	Set the values of a Variable.
4411	Make an array of the given dtype and a list of strings.
4412	Returns the offset of the index.
4413	Get an existing file.
4414	Get the features that intersect the given bounding box.
4415	Discretizes the data.
4416	Add all the elements from the ThreddsMetadata object.
4417	Adds a documentation to the list of documentation.
4418	Remove all documentation of a given type.
4419	Returns the number of bytes that can be read from the given start position.
4420	Check if the NetCDF file is a Mine CDM file.
4421	Add a dataset to the MFileRemote.
4422	Break up the convention names in the given string.
4423	build a comma separated list of strings for the convention attribute.
4424	This method is responsible for building the coordinate system objects.
4425	Find coordinate axes in all variables
4426	find coordinate systems
4427	Make coordinate systems.
4428	make sure all coordinate systems are maximal
4429	Checks if the given variable is a coordinate axis for the given variable.
4430	Add a coordinate variable to the coordinate variable map.
4431	subset the given dataset.
4432	Filter the dataset.
4433	mark the dataset if it is not marked by the given filter.
4434	Delete all datasets in the dataset.
4435	Initialize once.
4436	Count the number of occurrences of the given value.
4437	Adds a prefix to the symbol table.
4438	Compares two table rows.
4439	Compares two boolean values.
4440	Get the DapGroup scope.
4441	Passes all reserved XML attributes to the given node.
4442	Check if the date range is valid.
4443	Returns true if the slice is not empty.
4444	Registers a class.
4445	Registers a DSP class.
4446	Returns true if the DSP class is registered.
4447	Unregister a DSP class.
4448	Factory method for Grib2Tables.
4449	Calculate the total time interval size in hours
4450	Get the offset of the time interval of the record.
4451	Get the VertCoordType for the given code.
4452	Finishes the DAP parser.
4453	Sort the DAP tree.
4454	Get a RandomAccessFile object for a specific partition.
4455	Finds a variable with the given attribute.
4456	Finds a variable with the given attribute value.
4457	Find the name of the variable with the given attribute value.
4458	Finds a variable in the given structure that has the given attribute value.
4459	Finds a nested structure.
4460	Checks if the dataset has the NetCDF record structure
4461	Get the literal value of a global attribute.
4462	Get FeatureType from Dataset
4463	Get the variable name from the dataset.
4464	Get the coordinate value of the specified column.
4465	connect is in range 0 - 360
4466	Returns the coordinates of the coordinate axis.
4467	Section the coordinate axis.
4468	Finds the closest point in the run to the target.
4469	Get the name of the attribute.
4470	Add an action to the menu.
4471	Match the path.
4472	Display a projection.
4473	Search for the first occurrence of a byte array in the data array.
4474	Add a picture to the cache.
4475	Report the cache contents.
4476	Stop loading all source pictures.
4477	Stop background loading of picture except the one specified.
4478	HTTP GET method.
4479	Create a HTTPMethod instance.
4480	Return a random float.
4481	Generate a random number in [ min max )
4482	Read the data for the given Variable.
4483	Get a FileSystemProvider for the given URI.
4484	Read the station table.
4485	Get the index of a group.
4486	Remove the data variable with the given name.
4487	Cloud HGT 2 meters.
4488	Read the data from the main variable.
4489	Set the number of colors.
4490	Calculates the transform for the specified screen and bounds.
4491	Converts a URI into an AuthScope.
4492	Finishes the current stream.
4493	Checks if this factor is reciprocal of another factor.
4494	Get a catalog of files in the specified directory.
4495	Find the index of want in the raw array.
4496	Read metadata content from a URL.
4497	Read metadata content.
4498	Add content to metadata element.
4499	Validate the content of the metadata.
4500	Read catalogGenConfig element.
4501	Read a dataset source element.
4502	Read DatasetNamer element.
4503	Read DatasetFilter element.
4504	Read a result service element.
4505	Create the catalogGenConfig element.
4506	Create DatasetSource element.
4507	Create DatasetNamer XML element.
4508	Create DatasetFilter XML Element.
4509	Create resultService element.
4510	check if a flag is set
4511	This method is called from the constructor. It will add all items in the menu to the
4512	Adds the menu items to the menu.
4513	Add parameters from a table.
4514	Make a parameter.
4515	Get a parameter by name.
4516	Read the contents of the stream.
4517	Read content from the InputStream.
4518	Replace ENS template with the name of the ENS template.
4519	Set the station id and description variable names.
4520	Accept the buffer.
4521	show format info.
4522	Bitmap section.
4523	Set the NetCDF file to be read.
4524	Set debug flags.
4525	Parse a name into its components.
4526	Check if the DStructure is a group.
4527	Get NetCDF dimension of a DOS Variable
4528	Get a shared dimension.
4529	Construct a list of dimensions from a DArray.
4530	Check if the dtype is unsigned
4531	read DataDDS from server
4532	Get an ImageIcon from a resource.
4533	Get an Image from a resource
4534	Creates a custom cursor for the specified image.
4535	Read data from a RandomAccessFile.
4536	Read data from a data input stream.
4537	Read data from the layout.
4538	Make a primitive array of the specified size.
4539	Convert byte array to char array.
4540	Convert a char array to a byte array of UTF - 8 bytes.
4541	convert byte array to char array
4542	Read a section.
4543	ArrayStructure for a section
4544	Get the scalar string value of the given member.
4545	Get a scalar structure.
4546	Get a record s array member.
4547	Recursively creates a StructureMembers object for the given DAP variable.
4548	Add dimension to NetCDF file.
4549	Create a CrawlableDataset.
4550	Normalizes a path.
4551	Add an explicit dataset to the explicitDatasets list.
4552	Add a directory scan to the dataset manager.
4553	Finish the processing of the netcdf file.
4554	make the datasets.
4555	Get the typical dataset.
4556	This method is overridden in OuterDim.
4557	putResourceControl is called when a Dataset is added to the resourceControlHash.
4558	Add a point to the curve.
4559	Get the upper bound of the bounding box.
4560	Get the minimum bounding box of the line segment.
4561	Validate DatasetFilter object.
4562	Check whether this filter applies to the given dataset.
4563	Add all points in the given FeatureDatasetPoint.
4564	parse a constraint
4565	Evaluate the top - level clauses.
4566	Print the constraint.
4567	Amend the NetcdfFile from an ODL group.
4568	Set the shared dimensions for the variable.
4569	Check for unknown dimensions.
4570	Find a group in the parent group hierarchy.
4571	Read the content of the xlink link.
4572	Get the standard URI for this catalog.
4573	Set the projection.
4574	Add a component to the layout.
4575	Invalidate the layout.
4576	Remove a component from the layout.
4577	Returns the minimum size of the layout.
4578	Layout the target container.
4579	Checks if the given coordinate system is a radial coordinate system.
4580	Get the maximum radial value.
4581	Open a URL and send the given command to it.
4582	Earth to Saturation
4583	Convert from saturated to earthquake.
4584	Converts from German s German s German s German s German s G
4585	Convert a scan geometry to sweep angle axis.
4586	Sweep angle axis to scan geom.
4587	Set the runtime coordinates.
4588	Write a PointObsDataset to a file.
4589	Rewrite. nc files from fileIn to fileOut.
4590	Get the array sequence of the given member.
4591	Returns the full name of this node.
4592	Returns the authority and ID of this URI.
4593	Get the access of a given type.
4594	Find a dataset by name.
4595	Get the parent catalog.
4596	Get the metadata of this catalog.
4597	Search for a service by name.
4598	Returns the ThreddsMetadata. Variables object for the given vocabulary.
4599	Find all catalog references in the datasets.
4600	Escape a path for use in a URL.
4601	ADD - Staggering
4602	interpolate linearly from linear extrapolation
4603	Compute the Rho distance.
4604	Get detail info.
4605	Create a Structure object for the given part.
4606	Creates a MISSING_VAR variable.
4607	Create a variable for a GempakParameter.
4608	Add global attributes to the NetCDF file.
4609	Get the size of a variable.
4610	Get 1D array.
4611	Goto state.
4612	The syntax error.
4613	Print the reduced stack.
4614	Read the DMR chunk.
4615	Read the error body.
4616	Read len bytes from the input stream.
4617	Read header.
4618	Convert an ISO - 8601 string into a Date.
4619	Read a table from a file.
4620	Transfer a group from source group to target group.
4621	Get the STN file.
4622	Open the NCML file.
4623	Get the beginning of the node at the given index.
4624	Get the end of the node at the given index.
4625	Create all runtime collections.
4626	Set the edit value.
4627	Get the data type for the given format.
4628	Converts an ECF to LLA.
4629	Clean the unit.
4630	remove all spaces and spaces from the name
4631	isUnitless - Check if unit is unitless.
4632	Note factory.
4633	Get the VarId for a VarNotes object.
4634	Parse DAS file.
4635	Find a DodsV object.
4636	find the dataDDS
4637	Find by index.
4638	Returns the parent group of this group.
4639	Get dimension i.
4640	Find the index of the dimension with the given name.
4641	Get units string.
4642	Returns the shape of this Variable as a Section.
4643	Slice this variable into the specified dimension.
4644	Sets the enum typedef for this variable.
4645	Read the array.
4646	Read scalar data as STRING or CHAR.
4647	Read the data from the proxy.
4648	read the array from the given section.
4649	Write the CDL to the file.
4650	Debugging method for debugging.
4651	Set the data type of the variable.
4652	Sets the dimensions of the shape.
4653	Reset the shape of the Dataset.
4654	Set the dimensions of this variable.
4655	Reset the dimensions of this variable.
4656	Sets the dimension at the specified index.
4657	Set the cached data.
4658	Returns a list of all dimensions in this dimension.
4659	Set the bounding box of the bounding box of the coordinate system.
4660	Finish the grid.
4661	Returns an iterable of all datasets in the dataset set.
4662	Check if the file extension matches the SYNEXTENSIONS list.
4663	Open a NetcdfDataset.
4664	Build the DMR tree.
4665	build sequence types.
4666	Add cdmdims to the DapVariable dapvar.
4667	Find a matching enum.
4668	Get the core dimension set.
4669	scan the BAR file.
4670	Process a BufrMessage as a Dataset
4671	This method is called when a request is posted.
4672	Get the transformation transformation for this navigation.
4673	Returns true if the current display area is not rotating.
4674	Get the map area.
4675	Convert world coordinates to screen coordinates.
4676	Pan the map by a zoom level.
4677	Zoom in the image.
4678	Recalculates the position of the navigation from the bounding box.
4679	Add a listener to the listener manager.
4680	Remove a listener from the list of listeners.
4681	Send event to all listeners.
4682	Send event to all listeners except the source.
4683	Print a command to a NetCDF file
4684	Print a command to the output stream.
4685	Print the data of a VariableIF
4686	Prints the data section of a Variable.
4687	Print a StructureData object to a PrintWriter.
4688	Print an array of plain text.
4689	Print an array to a print writer.
4690	Write NetCDF file to writer.
4691	Read double.
4692	Add a parameter to the coordinate transform
4693	This is the main method of the program.
4694	Read an object of the given type from the given slices.
4695	Checks if a record is positive up.
4696	Checks if this Unit is compatible with the given Unit.
4697	Make a label for this quantity.
4698	Set the bit offset.
4699	Read nb bits from the current byte
4700	Convert to SInt.
4701	Open a connection to the DAP2 server.
4702	Get the DAS object.
4703	Get the DDS command.
4704	get the complete CE string
4705	Convert a projection point to a LatLon point.
4706	IDV Dataset Catalog
4707	IDV compatible date range.
4708	This method is called by the UCAR runtime.
4709	Handle satellite information.
4710	Handle sensor information.
4711	Read the root element from the specified location.
4712	Remove XML character data.
4713	Xunescapes a string.
4714	Escape a string for use in a URL query.
4715	Unescapes the given string.
4716	Decode backslashes in a string.
4717	Escapes the given string with backslash escapes.
4718	Add lightning global attributes to the NetcdfFile
4719	swap shorts
4720	swap int.
4721	swap byte array to double
4722	swap float and return swapped float
4723	swap the input double v and return the swapped double.
4724	Convert a short value to a byte array.
4725	Convert an integer to a byte array.
4726	Convert a long to a byte array.
4727	Subset of this VerticalTransform.
4728	Write the XML document to the file.
4729	make a constant array
4730	Start XML.
4731	Write features to the WFS file.
4732	Add levels to the levels list.
4733	Add vertical dimension to the group g.
4734	Add the vertical group to the NetCDF file.
4735	find the coordinate transform for the given group
4736	Get the index of the level corresponding to the given record.
4737	Exit the disk cache.
4738	Get a file from the cache.
4739	Get an existing file or cache.
4740	Display the cache files.
4741	Delete the directory and its contents.
4742	Calculate the beat between two points.
4743	Calculate the bearing of the two points.
4744	This is the main method of the Bearing class.
4745	Find a point in the Earth.
4746	Find a point in the Earth surface.
4747	Finds a point on the default Earth.
4748	Load a picture in a thread.
4749	Load a picture.
4750	Load the source picture into this SourcePicture object.
4751	Stop loading the image
4752	Stop loading the image except the one specified.
4753	Returns the dimensions of the buffered image.
4754	Sets the buffered image of the source picture.
4755	Get the standard URI for this catalog.
4756	Make an associated field.
4757	transfer info from proto message to proto message
4758	count bits in all subkeys
4759	Compares two DataDescriptors.
4760	Load the header.
4761	Load the data.
4762	Get the field with the given name.
4763	Get the value of the field with the given name.
4764	Get the string array for the field with the given name.
4765	Get a boolean array by name.
4766	Returns the name of the field i.
4767	Returns an array of field names.
4768	DbaseData dump.
4769	Returns the attributes of this DapElement.
4770	Adds a new attribute to this object.
4771	Remove an attribute.
4772	Returns the group that this node belongs to.
4773	Get the parent DAP node.
4774	Returns the escaped short name.
4775	Returns the path to the current node in the tree.
4776	Get the path to the current node in the DAP group tree.
4777	Computes the fully qualified name of the DAP node.
4778	Returns true if this DapNode is a top - level DapNode.
4779	Build the databuffer section of the server response.
4780	putBeanCollection - store bean collection
4781	Get a List.
4782	Get the value of the given key. If the key is not found in the keyValues
4783	Read the data from the drs file.
4784	Prints the top variables of the DapDataset.
4785	Prints a compound instance of the given data - cursor.
4786	Write the given Element to a String.
4787	Write the given element to the given file.
4788	Write the given XML element to the given stream.
4789	Writes the XML document to the given writer.
4790	Creates a dimension element.
4791	makeCoordinateTransform - Creates a projection for the given attribute container
4792	Get the int array from the AttributeContainer attName
4793	Create a new base unit.
4794	Creates a new unit with the given name symbol and definition.
4795	base unit database.
4796	Creates a derived unit database.
4797	Get the singleton instance of the SI class.
4798	Find the coord element.
4799	Finds the closest coordinate in the axis.
4800	Subset the values in the coordinate axis.
4801	Opens a feature dataset.
4802	Open a feature dataset.
4803	Annotate a Dataset with the NetcdfDataset
4804	Read the data from the Grib1Record at the specified position.
4805	Assemble the URI string.
4806	Canonicalizes a string.
4807	Normalizes the units.
4808	Compiles the DAP dataset into a DAP dataset.
4809	Finish the metadata parsing.
4810	Get the element associated with the specified key.
4811	Inserts a new key - value pair into the hash map.
4812	Get the date.
4813	Prints XML attributes for a DAP node.
4814	Prints an XML attribute.
4815	Check if the attribute is special.
4816	Prints dimension references for the given variable.
4817	Checks if the file is a valid AreaFile.
4818	Set area directory attributes.
4819	Set navigation block attributes.
4820	Get the calibrator type.
4821	Set the attributes for the Calibrator type.
4822	finds lat lon time elev and pressure
4823	Returns the coordinate name of the coordinate axis of the specified type.
4824	Find a coordinate axis of the specified type.
4825	try the best coordinate system
4826	Find the dimension of the coordinate axis of the given type.
4827	find the best coordinate system for the dataset
4828	Find the dependent axis.
4829	Get a variable from the DSequence.
4830	Deserialize a single object from a DataInputStream.
4831	Read the marker byte.
4832	Writes a marker to the given stream.
4833	Throw a fatal error.
4834	Create a dataset with the given name base start time and count.
4835	Example of how to use the chart.
4836	Get the Java representation of the string array.
4837	Get the list of all the parameters of the RAdd objects.
4838	Sets the stations.
4839	Sets the selected station.
4840	redraw the panel
4841	Deserialize this rectangle.
4842	Serializes this rectangle.
4843	Add the given UnitDBImpl to this UnitDB.
4844	Adds a unit to the unit set.
4845	Adds a symbol to the symbol table.
4846	Get a unit by its id.
4847	Adds a new unit to the name map.
4848	Add a new unit by symbol.
4849	Add a new unit to the map.
4850	Add the UIManager. LookAndFeel information to the JMenu.
4851	Find a Grib2Record that is at the specified position in the drs file.
4852	read the scalar structure into memory
4853	Serialize the dataset to the sink.
4854	get the values of the parameter
4855	Constructs a copy of this projection.
4856	Open a feature dataset.
4857	Open a feature dataset.
4858	Open a dataset.
4859	Annotate the given dataset with the given NetcdfDataset
4860	Removes duplicate properties from org.
4861	Add a partition to the collection.
4862	Create a GribCollectionMutable object from the given DICOM object.
4863	Returns an enhancer that enhances the coverage of a given match pattern and substitution
4864	Returns an enhancer that enforces that the match pattern and substitution pattern match on
4865	Write the query capability to a file.
4866	Read the data from the given Structure.
4867	Set the picture of the legend.
4868	Sets the buffered image to be displayed.
4869	Zooms the picture to fit into the image.
4870	Paint the component.
4871	TG_FTOI - > TG_FTOI - > TG
4872	Get the character time from the int array.
4873	TI_ITOC TI_ITOC TI_ITOC TI_
4874	The number of days for the given IMON.
4875	Translate known vertical coordinates or parameter name.
4876	Reverses values in reverse order.
4877	Get the grid packing name.
4878	Get the data type of a Gemprt.
4879	Read data from the input stream.
4880	Externalize the response.
4881	Get the TagEnum for a given code.
4882	Get the next image.
4883	size of the type
4884	Sums the values of an array.
4885	Set the grid size
4886	Sets the overlap of the scale.
4887	Clear all grids.
4888	Mark the given rectangle as having been cleared.
4889	Finds the object that intersects the given rectangle.
4890	Find the intersection of the given point with this grid.
4891	Find the closest object to the given point.
4892	Returns the squared Euclidean distance between the point and the point in the cell.
4893	Get or create a base unit.
4894	Search for a fragment.
4895	Search for a path in the FRAG protocol.
4896	Decodes the path extension.
4897	Check if the location is a DOS.
4898	Check if DAP4 is available.
4899	Send a data packet to the specified section.
4900	Returns the suffix of the given fully qualified name.
4901	Returns the prefix of the given fully qualified name.
4902	Locate a file in the current working directory.
4903	Locate a relative path.
4904	Extract a byte array from a buffer.
4905	Get the structure path from the variable.
4906	Returns null if the path is null or empty.
4907	Joins the elements of the array from the specified index to the specified index.
4908	Checks if the given path has a drive letter.
4909	Get the protocols of the given URL.
4910	Convert Index to slices.
4911	Convert an offset into slices.
4912	Checks if the slices are contiguous.
4913	Checks if the slices are single - point slices.
4914	Convert a list of slices to an index.
4915	Read a data record from the input stream.
4916	Set the station id and description names.
4917	Set short names for the velocities.
4918	Read a feature collection config from a catalog file.
4919	Adds a declaration to the group.
4920	Update the groups in this DAP object.
4921	Find a variable in the DAP file.
4922	Get the AxisType of the Variable
4923	Get the GribStatType from the timeRangeIndicator.
4924	Subset the longitude axis.
4925	Returns the ranges of the axis.
4926	Set default values for all properties.
4927	Get the session id.
4928	Set the maximum number of redirects allowed.
4929	Set whether to use sessions.
4930	Close all the methods.
4931	Set the authentication and proxy credentials.
4932	Track a HTTPSession.
4933	Set the global credentials provider.
4934	Validate the input URL.
4935	Index factory.
4936	Computes the stride for the given shape.
4937	index section.
4938	Reduce Index.
4939	Reduces the index to a given dimension.
4940	Transpose two indices.
4941	Create a new index with the specified dimensions.
4942	Get an index iterator for the given Array.
4943	Current element.
4944	Sets the index to the given array.
4945	Set the dimension of the current array.
4946	Set the dimensions of the index.
4947	Returns the name of the time interval.
4948	Make a CalendarDateRange from the time interval.
4949	Make a list of date and time strings.
4950	Make a list of GempakParameter objects for the DMPart.
4951	Returns a list of all station objects in the file.
4952	Make a new station object from the given header.
4953	Get the station keys.
4954	Get the dates.
4955	Find the station index for the given station id.
4956	Get the file type.
4957	Indents the current indentation level.
4958	Set indent.
4959	Read index from a single file.
4960	Add a directory scan.
4961	Check if we need to scan.
4962	Scan first time.
4963	Set the debug flags.
4964	Adds a new variable to the model.
4965	Write the data to the file.
4966	Validate the given XML document.
4967	Returns a string representation of this range.
4968	Set the original variable.
4969	Read the data.
4970	Read the data.
4971	Returns true if conversion is needed.
4972	Convert the given array to a new ArrayStructure.
4973	Convert member info from a StructureMembers to a Variable.
4974	Find a variable that has the given orgName.
4975	Returns true if the given variable has data.
4976	Enhance the variables in this dataset.
4977	see if the request is under resource control
4978	Make an empty sequence.
4979	Create an ArraySequence from the given values.
4980	Create a sequence of variables.
4981	Add vertical coordinate attribute.
4982	Read XML asynch.
4983	Read a catalog from a string.
4984	Read a string of XML and return an InvCatalogImpl.
4985	Write an InvCatalogImpl as XML to an OutputStream.
4986	Get the MetadataConverterIF associated with the given key.
4987	Returns a dimensionless ID.
4988	Multiply this unit by another unit.
4989	Divide this unit by the given unit.
4990	Convert input array to output array.
4991	Checks if this unit is compatible with the given unit.
4992	Write a feature to the output stream.
4993	Write a Point to an XML string.
4994	Write a line to the output.
4995	Write a Polygon to a String.
4996	Pulls the value of an attribute from a node.
4997	Get the subnodes of the given parent node.
4998	Parse the response.
4999	Pass reserved attributes to the DAPNode.
5000	Get subset string.
5001	Create an ArrayStructureMA from an ArrayStructure.
5002	Set the array of members.
5003	ArrayStructureMA.
5004	Get the GeometryType of the given Geometry
5005	Make a station feature.
5006	compiles the CEAST tree into the DAP AST.
5007	Compile a filter expression into a DAP variable.
5008	Add a dim redef.
5009	Creates a new Array.
5010	Returns true if this region is contained within the specified region.
5011	Extend the bounding box by the given point.
5012	extend the bounds of this rectangle with another rectangle.
5013	Intersect this rectangle with another rectangle.
5014	Add two arrays.
5015	Check if the arrays a and b conform to.
5016	Check if shapeA is conformable to shapeB.
5017	Convert array to another array.
5018	Copies the elements of a to result
5019	Copies the elements of a to result.
5020	Copies the elements of the two arrays.
5021	Get the MinMax and Max values of an Array.
5022	Set the double value in the array.
5023	Make a catalog builder.
5024	Factory method for creating a ProjectionImpl.
5025	Unescapes a DOS identifier.
5026	URL - decode a string.
5027	Unescapes the given URL.
5028	Escape a string with backslash escaping.
5029	Unescapes the given string.
5030	Tokenize an escaped name.
5031	Find the first occurrence of c in escapedName.
5032	Convert a backslash to a DAZ - 2 string.
5033	Read an atomic scalar.
5034	Get the path to the cursor.
5035	Get the default value of a property of a class.
5036	Returns the J class of the given component.
5037	Compiles the variables represented in the databuffer.
5038	Compiles a structure array.
5039	Compiles a structure.
5040	Compiles a sequence array.
5041	Compiles a sequence.
5042	Read a little endian long.
5043	Get a field by name.
5044	Returns the value of the named field.
5045	Sets the value of a field.
5046	Add a field to the table.
5047	Add a CheckBox field to this object.
5048	Add a date field to this object.
5049	Add a double field to this object.
5050	Add a Int field to this object.
5051	Add a Password field to this object.
5052	Add a text field.
5053	Add a text combo field.
5054	Add a Text Area Field.
5055	Adds a heading to the table.
5056	Add a component to the layout.
5057	Add an empty row.
5058	Finds the first visible frame in the JFrame.
5059	get the cell spacing
5060	Returns the factors of this factorization.
5061	Multiplies this dimension by another dimension.
5062	Returns the factorized factors of this factorization multiplied by the given power.
5063	Replies if this dimension is reciprocal of another dimension.
5064	Returns true if all factors in the factor chain are dimensionless.
5065	Factory method for Grib1.
5066	Factory method for Grib1ParamTables
5067	Adds the parameter table lookup to the standard lookup table.
5068	Add a parameter table to the standard lookup table.
5069	Raise to the given power.
5070	Convert input to a derived unit.
5071	Initialize the unit table.
5072	Make a vertical variable.
5073	peek the name of the file.
5074	Grab a short from the byte array.
5075	Grab an int from the byte array.
5076	method for reading a float value from the byte array.
5077	This method extracts a double value from the byte array.
5078	A convenience method for the AAA mechanism.
5079	Add a symbol to the symbol table.
5080	Creates a converter from the given units.
5081	Set the structure data.
5082	Set the point feature data.
5083	Draws the shape list.
5084	Get the shapes of the features.
5085	Read from the input stream.
5086	Read want bytes from the input stream.
5087	Read more bytes from the input stream.
5088	Read a byte array.
5089	Skip bytes n bytes.
5090	Add dimension to the group g.
5091	Returns the index of the coordinate in the level array.
5092	Checks if the file is a valid NWRadheader.
5093	Open the nc2 file.
5094	Read data from the file.
5095	Read one row data.
5096	create the coordinate variables from the NetcdfDataset
5097	Create a variable
5098	fire map area event
5099	Set the map area.
5100	Set the map area.
5101	Set the map area to map from the given latitude and longitude.
5102	set the projection implementation
5103	Add actions to the given menu.
5104	redraw the gauge later
5105	change the size of the screen.
5106	Select the given variable.
5107	Get a double value from the template
5108	Read a double.
5109	Read an object from the array.
5110	Gini entid.
5111	Read a scaled int.
5112	Find a parameter with the given name ignoring case.
5113	Returns true if there are more elements to move to the next odometer.
5114	Swap byte order.
5115	Get the number of times and the index of the first chsub that matches filename.
5116	Get the full path to the file.
5117	Get the file names for the data file.
5118	Get the path to the DDF file.
5119	Get the full path to the file.
5120	Adds a chsub to the list of chsubs.
5121	Convert this time unit to a TimeCoordIntvValue.
5122	read WMO file
5123	Get the uncompData array.
5124	Special graphic symbol for code 12n13n14.
5125	Code for the Circle Packet.
5126	check the nids product header
5127	Code for Vector Arrow
5128	Code for the 128 bit code.
5129	Code for Unlinked Vectors.
5130	Get calibrated levels from the given short array.
5131	Get the dualpol levels for the given calibrated data values.
5132	Add a variable to the dataset.
5133	Add a parameter to the NetCDF file.
5134	Decompress buffer to uncompressed format.
5135	Get the integer value of the byte array
5136	Get an integer value from a byte array.
5137	Convert byte array to object
5138	Do the DMR.
5139	Get the request state.
5140	Send error to client.
5141	Set the anchor point to point p.
5142	Stretch the current point.
5143	Returns the bounds of the anchor point.
5144	Returns the last bounds of the anchor point.
5145	date only format.
5146	Replace the data variables for the given StructureMembers.
5147	Ensures that the array size is okay.
5148	Read two bytes from a RandomAccessFile.
5149	Read an unsigned byte from a file - like object.
5150	Read three integers from a RandomAccessFile.
5151	Read two bytes from a RandomAccessFile.
5152	Read three bytes from a RandomAccessFile.
5153	Read four bytes from a RandomAccessFile and return as float.
5154	- - - - - - - - - - - - - - - - - -
5155	Reads 8 bytes from a RandomAccessFile.
5156	Count the number of bits in the given byte array.
5157	Constructs a copy of this Projection.
5158	Returns a Well Known Text representation of the ProCoDA object.
5159	Entity escape.
5160	Unescapes a string by replacing all backslash escapes with a single backslash.
5161	Splits a string into a list of strings.
5162	make the FMRC inventory
5163	Get the service special.
5164	Returns the number of projected components in this DArray.
5165	Returns a reference time of this time.
5166	ArrayStructureBB - > ArrayStructureBB - > ArrayStructureBB - > ArrayStructureBB
5167	Main method.
5168	Read a Grib1Record from the Grib1IndexProto. Grib1Record
5169	Check if the given NetcdfFile is a Mine.
5170	Construct a UTM projection.
5171	Reacquire the area file.
5172	Returns true if this date is before the given date.
5173	Returns true if date is before date given.
5174	Returns true if this date is after the given date.
5175	Sets the i th value.
5176	Adds a CoordinateSystem to this Variable.
5177	Set units string.
5178	Get units string.
5179	Initializes the read mode.
5180	read the catalog.
5181	Process datasets.
5182	recursively read catalogs in the given directory
5183	Checks if a longitude is between two longitude values.
5184	Convert a latitude value into a string.
5185	Convert longitude to a string.
5186	Compares two base quantity objects.
5187	Returns the selected dataset.
5188	Select the dataset.
5189	Make a TreePath from a given node.
5190	Open all the catalog tree.
5191	Set the catalog.
5192	Set the catalog.
5193	Find the alias of the axis of the given variable.
5194	Writes a varint.
5195	Writes a string of characters.
5196	Read characters from the input stream.
5197	Set the debug flags.
5198	Adds a member to the class.
5199	Hide a member.
5200	Returns a list of member names.
5201	Returns the member with the given name.
5202	Read the bitmap.
5203	Restore the state of the table.
5204	Returns an iterator over the selected rows.
5205	Returns an array of model indices.
5206	Get the array of members of this StructureMembers.
5207	Get the scalar value of a given member.
5208	Get a Java array of double values.
5209	Get the scalar value of a given member.
5210	cast the data array to a Java float array
5211	Get scalar value for a given member.
5212	Get the Java array byte.
5213	Get the scalar value of a given member.
5214	Get the Java array of an array member.
5215	Get scalar value of a given member.
5216	Get a Java short array from an array member.
5217	Get the scalar value of a given member.
5218	Get a Java array of long values.
5219	Get the scalar value of a given member.
5220	Get the Java representation of an array.
5221	do one dataset
5222	Check if a dataset is useable.
5223	Copy a dataset.
5224	transfer metadata from one DatasetNode to another
5225	Get the ThreddsMetadata inheritable metadata.
5226	Adds a product to the list of records.
5227	Prints the missing values for the record tracker.
5228	Prints the number of missing entries in the record tracker.
5229	Find a record in the recordTracker.
5230	Dumps the grid to a string.
5231	Make a long name for the grid.
5232	Subset by intervals.
5233	Compares two byte arrays and returns true if they are the same.
5234	Parse the DMR document.
5235	Process the attributes of the dataset.
5236	Add coordinates to the partition.
5237	Set the Gaussian Latitudes at the given parallels.
5238	Parse a variable selector.
5239	Creates a string representation of the section spec.
5240	Check if the given point is inside the rectangle.
5241	Close the underlying stream and release the underlying connection.
5242	Execute the HTTP method.
5243	identify the station encoding
5244	Match the given axis type and dimension.
5245	Set the input stream.
5246	Read a character from the input stream.
5247	Start the task in a separate thread.
5248	Parse a string into a URI.
5249	Returns a new URI with the given parts excluded.
5250	nullify - returns null if s is null and empty.
5251	Join two paths.
5252	Checks if the dataset is accepted.
5253	Copy all the information from the given GribCollectionMutable to this GribCollectionMutable.
5254	Returns a list of all filenames in the file map sorted by path.
5255	Sets the index file.
5256	Get the file path in the cache.
5257	Close the RAF index.
5258	Returns the number of counters in this bitmap.
5259	Adds a global attribute.
5260	Adds a global attribute with the given name and value array.
5261	Delete a global attribute.
5262	Rename a global attribute.
5263	Adds a variable attribute to the model.
5264	Add a variable attribute.
5265	Delete a variable attribute.
5266	Rename an attribute of a variable.
5267	Determine the subtype of the file.
5268	Write WFS headers and BB to file.
5269	Write members.
5270	Write the station observation dataset as an XML document.
5271	Write the station collection as XML.
5272	Write a DSR to the DAP stream.
5273	Send the DXR.
5274	Send an error response.
5275	Close the DAP output stream.
5276	Flush the DMR transfer.
5277	Constructs a copy of this projection.
5278	Returns true if the range contains want.
5279	Get the i th element of this array.
5280	Shifts this range by origin.
5281	Read data.
5282	Read data from the file.
5283	Subset the BooleanPrimitiveVector.
5284	Get the catalog catalog.
5285	Delete old dataset tracker files.
5286	Set the values of the GDS parameter.
5287	Returns a DataChunkIteratorNoFilter.
5288	Make a double array from an array of ints.
5289	Get the boundaries of the datasets.
5290	Check if all variables are requested in the grid.
5291	Get a DatasetSourceStructure by its name.
5292	Get the real path to the resource.
5293	make vertical dimensions
5294	Read the PIB file.
5295	Finishes the current dataset.
5296	transfer inheritable to the public metadata of the parent
5297	Transfer the local metadata from another dataset to this dataset.
5298	transfer inherited metadata from the local dataset to the target metadata
5299	Set the contributors.
5300	Adds a dataset to the list.
5301	Remove a dataset from the catalog.
5302	Replace the specified dataset.
5303	Add a service to the dataset.
5304	Remove a service.
5305	Set the local list of InvServices.
5306	Remove the local metadata from the dataset.
5307	Get the user property.
5308	Validate DatasetNamer object.
5309	Returns a list of descriptors.
5310	Construct the server path.
5311	Get the capabilities of the WMS geometry.
5312	Get a feature
5313	Checks the parameters for an error.
5314	This is the default HTTP handler. It is the default implementation of the http handler.
5315	Get the capabilities of a file.
5316	Get the length of the object.
5317	Returns the last modified date of the object.
5318	This method is called when the DAP dataset is created.
5319	Return a file to the client.
5320	return string to response
5321	Set the response content length.
5322	Get the request URI.
5323	Get the request path.
5324	Get the request base string.
5325	Get the first parameter with the given name ignoring case.
5326	Saves the preferences.
5327	Write directory as HTML
5328	Set the bit offset for the given data descriptor.
5329	Make a nested table.
5330	countBits - count bits in all rows
5331	Append a line to the history pane.
5332	Create a StationCollectionDocument from a LatLonRect or list of names.
5333	Returns the capabilities document for the DSG.
5334	Get a record at a given subset.
5335	Get the coordinate at the specified index.
5336	Adds an item to the list.
5337	Handle the exception.
5338	Get the i th slice.
5339	Move forward from firstpos to lastpos.
5340	Get the NCEP generation process map.
5341	Get the feature type of a Cdmrf endpoint
5342	Set has value.
5343	Factory method for Grib1Gds.
5344	Copy from in to out
5345	Read contents from InputStream to String.
5346	Read contents to byte array.
5347	Writes the contents of the string to the output stream.
5348	Copies a file from fileIn to fileOut.
5349	Copy a range of bytes from a RandomAccessFile to a stream.
5350	Copies a directory tree from one directory to another.
5351	Read a file into a byte array.
5352	Read a file from disk and return it as a String.
5353	Write contents to file.
5354	Write contents to file.
5355	Write the contents of the InputStream to the given file.
5356	This is the default exception handler.
5357	DAP2 exception handler
5358	This method is called when the client is not responding to the client.
5359	Get catalog.
5360	Print the catalog available for this server.
5361	Print the status of the server.
5362	Print a bad URL page.
5363	Gets the reference date.
5364	Read the Vlen data.
5365	Read a NcML document.
5366	Open a NCML file.
5367	allows a string to be a string of letters and digits.
5368	Remove all non - ASCII characters from the end of the string.
5369	Filter the string x according to okChars.
5370	Filter 7bits.
5371	Make sure the given string is a valid CDM object name.
5372	Returns the index of the first character in s1 and s2.
5373	Pads the left side of a string to the desired length.
5374	Pad right to the right
5375	Remove all occurrences of sub in s.
5376	remove c from s
5377	Remove the first occurrence of c from s.
5378	Collapses whitespace characters into a single space.
5379	replace all occurrences of in in string s with out string s.
5380	replace all occurrences of a string with another string.
5381	Replaces all occurrences of pattern in string with value.
5382	Substitute a string with another string.
5383	Substitute a string with another string.
5384	Remove characters from sb that are not in out.
5385	Replace all occurrences of out with in.
5386	Replaces all occurrences of in with in.
5387	Substitute a string in a StringBuilder.
5388	trim the string s characters until it reaches bad
5389	Process collection update event.
5390	Check state.
5391	Update the collection.
5392	Show Unique GDS and PDS templates.
5393	Returns a list of InvDatasets.
5394	Release resources.
5395	Create a deep copy of the given StructureData.
5396	copy array structure to array buffer BB
5397	Copy an array structure to a ArrayStructureBB object.
5398	Create a copy of the given StructureData object into a ArrayStructureBB object.
5399	Create a copy of the given StructureData object and return it.
5400	Override time interval size in hours
5401	Returns a section of this coordinate axis.
5402	Create an analyzer with the given TableConfigurer and FeatureType
5403	Returns the first feature type found in this nested table.
5404	analyze the input file
5405	Synchronize the ncfile with the ncfile.
5406	Returns the num latitudes of the specified type starting at index start.
5407	swap long.
5408	swap float.
5409	Swap two bytes in a char.
5410	find coordinate axes
5411	Add a parameter to the coordinate transform
5412	Returns the common parent of this group and the given group.
5413	Returns true if this group is the parent of the given group.
5414	Sets the parent group.
5415	Adds a dimension to this group.
5416	Adds a dimension to this group if it does not already exist.
5417	Add a group to this group.
5418	Adds an enumeration to this group.
5419	Adds a new variable to the group.
5420	Remove a dimension.
5421	Create a group relative to this group.
5422	Convert DDS alias fields to DAS alias fields.
5423	Print this DAS object to the given PrintWriter.
5424	Get a variable.
5425	Write a grid to the file.
5426	Replace missing values with min and max values.
5427	Replace missing values with scale.
5428	Get the x - start of the longitude array.
5429	Write a grid file.
5430	Writes the exception to the HttpServletResponse.
5431	Returns the in - queue library version string.
5432	Make the top index file from the config.
5433	Get the type of GRIB2 GRIB1 or Partition1
5434	Update the GRIB collection.
5435	Update the leaf collection.
5436	Open a GRIB collection from a RAF file.
5437	Open a GribCollectionImmutable object from a data file.
5438	Open a GribCollectionImmutable object from a MFile.
5439	Returns true if pattern matches url.
5440	Add a new triple.
5441	Lookup a key in the cache.
5442	Set well known triples in RC.
5443	Load a rc file.
5444	Insert a new triple into the triplestore.
5445	Get the local datasets.
5446	Find a dataset by name.
5447	Set the projection of the display.
5448	Get the shape of the feature set.
5449	make shapes for each feature
5450	Compares this string with another string.
5451	Start a progress monitor task.
5452	Check if the collection index file needs to be updated.
5453	Normalizes the result to be greater than the first.
5454	Set an object in the StructureData object.
5455	Get the structure data at the specified index.
5456	Copy the data structures from the array to the result index iterator.
5457	Get the scalar value of a record.
5458	converts a scalar value to a double
5459	convert scalar data type to int
5460	Get a float value from the data array.
5461	Get a scalar byte value.
5462	Get a scalar short value.
5463	Get scalar char value.
5464	Get a scalar string value.
5465	Get an ArrayStructure from a StructureMembers. Member.
5466	Get an ArraySequence object from a StructureMembers. Member
5467	Get an Array Object from a StructureMembers. Member
5468	Returns the minimum and maximum value of the given value.
5469	Evaluates the expression.
5470	Returns a string representation of this Constraint.
5471	Checks if the DapNode is a reference to this DapNode.
5472	Test if the current data is a match.
5473	Returns the number of expansion variables in the structure.
5474	Computes the enumeration of the variables.
5475	Compute the groups.
5476	Compile a constraint.
5477	Check if the file is a valid GRIB2 or GRIB2 file.
5478	make actions system
5479	Get byte order.
5480	Set the byte order.
5481	Find a key by name.
5482	Find a file header by name.
5483	Get the file header.
5484	Prints the parts of the message.
5485	Get the data pointer.
5486	read a word from the file
5487	Read a string from the file.
5488	Convert the bitstring into a data value.
5489	Get the bits string.
5490	Write the NetcdfFile to a WritableByteChannel.
5491	Parse a BaseType element.
5492	Parse a Grid Element.
5493	Parse the aliases in the DAS document.
5494	Decodes the keys in the keyDesc.
5495	Replicates the keys in keys.
5496	Get the dataset filename.
5497	Get the type of CF feature.
5498	Returns true if the absolute difference between two floats is less than or equal to the given maximum
5499	Checks if the given DAP node references this DAP node.
5500	Parse a unit specification.
5501	Probe the object.
5502	Returns true if the variable v is tiled.
5503	Returns a coordinate time that is the best time that is greater than or equal to the time
5504	Convert a LatLonRect to a ProjectionRect.
5505	shows time series for all logs
5506	Make a map of attribute names to their respective attributes.
5507	Returns the values of the field.
5508	Get the numeric value of the attribute.
5509	Writes the CDL representation of this CDLField.
5510	Set the string value.
5511	Set the values of the attribute.
5512	Set the values of this array.
5513	Scan the dataset.
5514	Generate a skeleton catalog for the given ProxyDatasetHandler.
5515	Schedules a write.
5516	Open the thredds data type.
5517	Open Thredds data type if needed
5518	Jumpto thredds data type.
5519	set the dataset
5520	Prepares the GUI for use.
5521	Create a JFrame containing the NetCDF Tools UI.
5522	Make a string representation of the axes.
5523	Returns a coordinate axis with rank lesser than or equal to the rank of the two coordinates
5524	Find the axis of the given type.
5525	Get the projection transformation.
5526	Returns true if the transformation is a geo - xy transformation.
5527	Returns true if all the coordinates are regular.
5528	Checks if the set is a subset of the subset.
5529	Returns true if this coordinate system contains all of the axes in the given list.
5530	Returns true if this coordinate system contains the given axis.
5531	Returns true if the domain contains all of the dimensions in the list.
5532	Returns true if this axis contains all of the axes in the given list.
5533	Returns true if this coordinate system contains the axis of the given type.
5534	Clone this DAPNode.
5535	Returns the currently selected bean.
5536	Get the selected beans.
5537	Returns the selected cells.
5538	Sets the bean selected.
5539	Restore the state of the table.
5540	Create a UnknownUnit with the given name.
5541	Close the stream.
5542	Returns true if the given variable is an extra variable.
5543	Returns true if the given Variable is a coordinate.
5544	Find the coordinate axis.
5545	Add all data variables in the table t.
5546	Add parent join.
5547	Make a station feature from a StructureData object.
5548	Create a new node map.
5549	Factory method.
5550	Factory method for unit creation.
5551	Make a Unit object from a string.
5552	Checks if the two units are compatible with the exceptions.
5553	Checks if the given Unit is compatible with the date reference unit.
5554	Checks if the unit is a time unit.
5555	Get the conversion factor between two unit strings.
5556	Convert a value to another unit.
5557	Checks if this unit is unknown.
5558	Returns the value of this unit.
5559	Creates a new RelOpClause.
5560	Creates a new BoolFunctionClause.
5561	Creates a new BTFunctionClause.
5562	Convert an array of RGB values into a grayscale image.
5563	Crawl the datasets in the catalog.
5564	Crawl the dataset and collect the datasets.
5565	crawlDirectDatasets - Crawls the direct datasets.
5566	Get a File from the cache or create a new one.
5567	Get an existing file or cache.
5568	Debug Leaks
5569	Get all files.
5570	Close the file.
5571	Seek to the given position.
5572	Flush buffer to file.
5573	Read a byte from the file.
5574	Read short array.
5575	Read an int value from the stream.
5576	Read an array of n integers from the input stream.
5577	Reads a number of long values from the stream.
5578	Read a number of float values from the stream.
5579	Read n double values from the stream.
5580	Read a string from the input stream.
5581	Read a string of the given length.
5582	Writes n boolean values from the array.
5583	Write a short array.
5584	Writes n characters from pa starting at start.
5585	Writes n integers from pa.
5586	Write n bytes of data.
5587	Write n float values from pa to stream.
5588	Writes n double values from the double array pa.
5589	Writes a string to the output stream.
5590	Writes a byte array to the output stream.
5591	Search forward.
5592	Append the query string from this object to the given StringBuffer.
5593	Factory method for creating a collection.
5594	Find index.
5595	Is this a leaf partition?
5596	Construct children.
5597	Scan for children.
5598	Read files from index.
5599	Returns a list of GridSets in this Dataset.
5600	Acquire a file from the cache.
5601	Remove the cache file.
5602	eject the file cache
5603	Release a file cache.
5604	Returns an integer between a and b.
5605	Update the cache.
5606	Clear the cache.
5607	make the vertical transform
5608	Returns true if this coordinate system is global longitude.
5609	Returns true if vertZaxis is positive.
5610	Find the XYindex corresponding to the given x and y coordinates.
5611	Find the XY index from the x_coord y_coord.
5612	Find the XY index corresponding to the given latitude and longitude.
5613	Find the XY index of the point on the map.
5614	Get the position of the arrow in the table.
5615	Get the item index for the given pixel.
5616	Iterate over all files in the MFileCollection.
5617	Download remote logs
5618	Override to provide a more readable subcenter name.
5619	Convert a unit string to a CalendarPeriod.
5620	Returns a CalendarPeriod instance for the given value and field.
5621	Creates a CalendarPeriod from a string representing a period.
5622	Subtract from start to end
5623	Returns the conversion factor.
5624	Get the value in milliseconds.
5625	Returns the offset between the two dates.
5626	Synchronize the ncfile with the ncfile.
5627	init the tables
5628	Put a DataRootExt into the map.
5629	find the longest match of reqPath
5630	Find the data root for the given request path.
5631	Convert a DataRootExt to a DataRoot.
5632	Get the calendar date range for the given calendar.
5633	Reindex the coordinates in the list.
5634	Create a new NetCDF File Writer.
5635	Add a group to the group tree.
5636	Adds an EnumTypedef to the given Group.
5637	Delete an attribute from a group.
5638	Rename an attribute in a group.
5639	add a record to the NetCDF file
5640	Aborts the SPI write operation.
5641	Write the properties of the bean to the given PrintWriter.
5642	Extract Thredds metadata from a Thredds Dataset.
5643	This method is used to divide this unit into another unit.
5644	Convert the given amount to the derived unit.
5645	Convert from derived unit to base unit.
5646	Convert a nested variable to a Dods array.
5647	Convert top variable to array
5648	Convert a DodsV object to a DAP Array.
5649	Close all open databases.
5650	Open the database.
5651	Convert an integer to a Joda Period.
5652	Ensure that the array is at least as large as the specified capacity.
5653	Get the string at the specified index.
5654	Create a catalog for a directory.
5655	Create a proxy ds resolver catalog.
5656	Get the coordinate type of the first dimension.
5657	Factory method for Grib2Pds
5658	Calculates the time from the start of the OCTET.
5659	Apply a scale factor to a value.
5660	Parse a local concept file.
5661	Add a local concept to the table.
5662	Remove all the line characters that are not part of the line.
5663	Store a concept.
5664	Write grib1 tables.
5665	Write the table names in lookupTables. txt.
5666	Print the local concepts.
5667	This is the main method of ECMWF.
5668	Get the type of the DatasetSourceType.
5669	Expands the access point dataset.
5670	Expand the dataset source and return the resulting catalog.
5671	Name the dataset names in the dataset container.
5672	Create a temporary dataset in which to hold named datasets.
5673	Try to name the dataset tree.
5674	Load a picture from a given URL.
5675	Stop loading the picture except the given URL.
5676	Called when the status of the source image changes.
5677	Notification about source load progress.
5678	Scale picture in thread.
5679	Returns the size of the image scaled by this image.
5680	Returns a string representation of the scaled size of this image.
5681	Returns a list of the merged parts of this SNDT.
5682	Make a header string for a GempakStation
5683	SN_CKUA is a small function to check for mandatory groups.
5684	Checks if the part is a valid DM part and if so checks if the group is valid
5685	Set the root directory.
5686	Make root directory.
5687	Get the cache file.
5688	Delete all files that are older than cutoff.
5689	Delete all files with less than maxBytes.
5690	Check if the framexy is a Buffers table.
5691	Factory method for CoordinateAxis
5692	Copy the coordinate axis without caching it.
5693	Returns true if the data type is numeric.
5694	Get information about this dataset.
5695	Get Calendar from CF1 Attribute.
5696	Set the list of rows to select.
5697	Returns the currently selected row.
5698	Increment or decrement the selected row.
5699	Get the model index of the columns in the table.
5700	Set the selected index.
5701	sorts the array in a quick sort order
5702	Swaps the elements of the array.
5703	Get an existing file.
5704	rotation around the right hand side
5705	Create a store from a file.
5706	Create a XMLStore from two input streams.
5707	create a XMLStore from a resource
5708	make standard filename
5709	Saves the preferences to the file.
5710	Save the preferences to the given output stream.
5711	Write an atomic variable.
5712	Write the structure of the given data cursor.
5713	Write the structure of a DataCursor instance.
5714	Write a sequence of DAP variable values.
5715	Write a record to the serial writer.
5716	Checks if the file is a valid Urban file.
5717	Get the WmoID.
5718	Read a row of data from the DataInputStream ds.
5719	Get the i th data.
5720	Get the data for the GRIB.
5721	Get the data for the grid record.
5722	Read the variable.
5723	Create a grid file.
5724	Make a size estimate for a grid.
5725	Create a NetCDF file.
5726	Sets the stations.
5727	Sets the selected station.
5728	Picks a station from the station grid.
5729	Picks the closest station in the world.
5730	Returns the selected station or null if no station is selected.
5731	Get the name of the projector.
5732	Get the stations of the given bounding box
5733	Get a station by name.
5734	Get the DataIterator for a Station.
5735	Get a DataIterator for a Station.
5736	Read the data from the ray.
5737	Computes the dot product of this MAVector and another MAVector.
5738	Returns the norm of the matrix.
5739	Normalizes the matrix by dividing the values by the norm.
5740	Set the services.
5741	Get a parameter by its id.
5742	Returns the parameter associated with the given parameter ID.
5743	Adds a prefix name and value.
5744	Adds a symbol and its value to the symbol set.
5745	Get the first prefix that matches the given string.
5746	email address is valid
5747	Get the value of a parameter.
5748	Calculate the CRC of the grid definition.
5749	Returns true if the packet is a thin packet.
5750	Get the index of a field on a compound object.
5751	Get the time type name.
5752	Get the time coordination of the interval.
5753	Set the next polygon.
5754	Set the previous polygon.
5755	Find a property by name.
5756	set the current projection
5757	Subset the time axis.
5758	Register an IOProvider class.
5759	Register IOProvider.
5760	Register IOProvider with IOSP.
5761	Checks if IOSP provider is registered for the given IOSP class.
5762	Unregister IOSP Class
5763	Checks if a RAF file is available.
5764	Open a NetCDF file in - memory.
5765	Open a NetcdfFile in memory.
5766	Open a file in memory.
5767	Open a NetcdfFile in memory.
5768	Find a global attribute of this class ignoring the case.
5769	Convert the object to a NetCDF4 NetCDF5 NetCDF4 Net
5770	Write the CDL to the given output stream.
5771	Write the CDL to a PrintWriter.
5772	Writes the CDL start and end of the string.
5773	Adds an attribute to the given group.
5774	Adds an attribute to the given group.
5775	Adds a group to the group tree.
5776	Add a dimension to a group.
5777	Remove a dimension from a group.
5778	Adds a new variable to the given group.
5779	Add a new variable to the given group.
5780	Add a string variable to the specified group.
5781	Remove a variable from a group.
5782	Send IOSP message.
5783	This method is called by the constructor.
5784	Finishes the current group.
5785	Read a section of the file.
5786	Read to byte channel.
5787	Read a list of variables.
5788	Read the array from the specified section.
5789	Make the full name of a CDMNode.
5790	Make a full name with the given parent group.
5791	Returns true if the given file should be included.
5792	Check if the given file should be excluded from the analysis.
5793	and and and and and and and and and and and and and and and and and and
5794	Append a string value to the attribute.
5795	Dispatches the check value.
5796	Convert value to a string.
5797	Check byte.
5798	Check short.
5799	Check if string is an integer.
5800	Check if a string is a valid unsigned integer.
5801	Check if a string is a float.
5802	Check if a string is a double.
5803	Get the data type of the given attribute.
5804	Check if the dataset is viewable.
5805	Checks if the string is a valid boolean value.
5806	Checks if the given string is a valid alphabetic string.
5807	Checks if the given string is a valid alphabetic string and is in the given set
5808	Returns true if the path is descend - only.
5809	Converts a Unicode code point to a percent - encoded string.
5810	get the parameter value
5811	Compares two griddefs.
5812	Reads from the input stream and processes the contents of the stream.
5813	Process a buffer.
5814	Remove quotes from a string.
5815	Mark the variables in s as stacked.
5816	Write NetCDF file to editor.
5817	Get the value from ThreddsConfig.
5818	Write the CDL to the file.
5819	Create a StationHelper object.
5820	Validate the result.
5821	The azimuth of the message.
5822	Returns the elevation of the message.
5823	Returns the latitude values of the ASAs.
5824	Returns the longitude values of the ASA values.
5825	Returns an array of the altitude values of the AIBs.
5826	Returns the azimuths of the Rythm - Rythm.
5827	Returns an array of the elevations of the Rythm.
5828	Select members from a subset of the structure.
5829	Select a member of this Structure.
5830	Adds a member variable to this structure.
5831	Set the members of this class.
5832	Sets the parent group of this variable.
5833	Calculates the element size of this variable.
5834	Read a structure from the file.
5835	Read a vector structure.
5836	Get an iterator for the Structure.
5837	Get the data category for a given category.
5838	Returns the class name without the package.
5839	Adds a parameter to the list of parameters.
5840	Get the header of the class.
5841	Convert from LatLonRect to ProjectionRect.
5842	Get the version of the given string.
5843	Get the positive value of a zaxis.
5844	Delete next file.
5845	Set the color scale parameters.
5846	Render the plan view.
5847	Returns true if parent is a child of that group.
5848	Get the MessageType for a given name.
5849	Installs new cells in all columns.
5850	Set the API key and secret.
5851	Creates a label with the given value.
5852	Creates a label with the given lines.
5853	Creates a label with the given HTML value.
5854	Connect to Cloud SQL instance via unix socket.
5855	List the ip types.
5856	Connect to the MySQL server.
5857	Remove a logger from the list of loggers.
5858	Compiles all the source code.
5859	Compiles the given source code into a class.
5860	Add a source code to the compiler.
5861	Graphic Control Ext.
5862	Get the next frame.
5863	The list of persons that can be selectable.
5864	Init list events
5865	Get a person by id.
5866	Add the messages to the internal map.
5867	Sets the person id.
5868	Creates a ViewModel and injects it into the given View.
5869	Creates a ViewModel instance.
5870	Load the list of countries.
5871	Load the list of subdivisions.
5872	Defines a String property which gets and sets the value of the property.
5873	Defines an immutable field.
5874	Creates a step that will create a JavaViewStep instance.
5875	Creates a step that will create a FXML view.
5876	Clear the map.
5877	Add index events to the selection model.
5878	Access a member.
5879	Loads a view from FXML.
5880	Create the fxml path for the view.
5881	Query for style mapping row.
5882	Get the pixel value of the pixel at the specified location.
5883	Get the pixel values from the image bytes.
5884	Validate the image type
5885	Creates a new image of the specified size.
5886	Set the tile data.
5887	Execute a raw query with the given arguments.
5888	Wrap a raw query with a CursorResult.
5889	Query the database.
5890	Query the database.
5891	Handle cursor.
5892	Get the feature row for the given geometry index
5893	Register a table with the cursor
5894	Retrieve the TileRow for the tile.
5895	Get the coverage data for the tile
5896	Get the coverage data for the tile DAO
5897	Get the coverage data for the tile DAO
5898	Get the coverage data for the requested coverage data tile.
5899	Zooms the requested tileMatrix within the bounding box.
5900	Get the coverage data tile results zoom in the requested tileMatrix.
5901	Get the coverage data tile results zoom out from the tile zoom level.
5902	Get the tile matrix for the coverage data request
5903	Get the value of the tile at the given tile tile tile tile row and x y.
5904	Set the icon for a geometry type.
5905	Get the icon for a geometry type.
5906	Open or get bindings db.
5907	Converts a byte array to a bitmap.
5908	Compress bitmap to bytes
5909	Create the table metadata
5910	Delete the table.
5911	Get or create a table metadata
5912	Get the GeoPackage id for the GeoPackage
5913	Read table metadata.
5914	Create a new extension.
5915	Get the feature row.
5916	Query the table.
5917	Query for features within the bounding box
5918	Query the user s cursor.
5919	Count the number of points in the GeometryEnvelope.
5920	Query for rows within the given rectangle.
5921	Build the where clause for the RTreeIndexExtension.
5922	Query for features within the bounding box
5923	Count the number of features in the bounding box
5924	Query the features in the geometry envelope.
5925	Query for features that overlap the bounding box.
5926	Count the number of elements in the bounding box.
5927	Set the data of the bitmap.
5928	Set the data of the bitmap.
5929	Set bitmap compression configuration.
5930	Get the number of tiles in the bounding box.
5931	Adjust bounding box bounds
5932	Adjust the bounding box of the tile matrix set to be the world bounding box
5933	Adjust the bounding box that fits the tile grid and the bounding box that fits it
5934	Adjust the bounding box that fits the request WebMercator tile.
5935	Get the bounding box of the tile grid for the given zoom level.
5936	Get the tile grid for the given zoom level.
5937	Query for a tile.
5938	Query for tiles in the given zoom level descending.
5939	Get the closest zoom level for the given length.
5940	Get the approximate zoom level for the given length.
5941	Query for a TileGrid object.
5942	Delete a tile.
5943	Count tiles at a given zoom level.
5944	Check if the tileMatrixSet is a google tiles
5945	Get the pixel value of the pixel at the given coordinates.
5946	Get the pixel values of the TIFF image.
5947	Validate the image type
5948	Creates a CoverageDataTiffImage for the given tile width and height.
5949	Sets the first pixel value of the image.
5950	Get the GeoPackage object for the given name creating it if necessary.
5951	Get the current row.
5952	Move to the next invalid position
5953	Query by base feature id.
5954	Delete by base id and geometry type.
5955	Get the rectangle of the specified width and height
5956	Get a rounded rectangle
5957	Delete missing databases.
5958	Create the GeoPackage and close it
5959	Check if the database is valid
5960	Validate the database and close on error.
5961	Validate the database and close it.
5962	Validate the database.
5963	Validate the header of the GeoPackage
5964	Check if the header of the database is valid
5965	Add internal databases
5966	Add the external databases to the collection
5967	Import the GeoPackage into the GeoPackage
5968	Get the GeoPackage metadata for the database
5969	Get the GeoPackage metadata at the external path
5970	Create a new GeometryMetadata record.
5971	Populate the geometry metadata.
5972	Delete the GeometryMetadata for the given GeoPackage.
5973	Creates or updates the GeometryMetadata object if it does not exist.
5974	Update the GeometryMetadata object.
5975	Count the number of rows in the table in the bounding box
5976	Read a geometry metadata record.
5977	Update the table.
5978	Draw a tile
5979	Get SimpleAttributesRows for the given IDs.
5980	Check integrity.
5981	Get a UserMappingDao for the given table.
5982	SimpleAttributesDao.
5983	Get the mappings for the base id.
5984	Get the mappings for the given related id.
5985	Checks if the table has a mapping between baseId and relatedId.
5986	Count the number of records in the cursor.
5987	Register the cursor wrapper for the table
5988	Read the user - custom table
5989	Get the tile from the request bounding box
5990	Draw the tiles with the requested tile width and height
5991	Reproject the tile into the requested tile width and height.
5992	Retrieve the tile results from the TileDao
5993	Calculate the overlap between the stroke and stroke pixels.
5994	Sets the density of the stroke.
5995	Set the Paint to use for the line.
5996	Set the Paint used to paint the polygon.
5997	Draw a tile in the image.
5998	Draw a tile.
5999	Draw the tile bitmap if at least one geometry exists
6000	Query for the count of features in the index that match the bounds in the index
6001	Query for feature index results that match the bounding box in the index
6002	Query for the features in the index that match the bounds defined by the tile coordinates
6003	Query for features within the bounding box that overlap the bounding box of the web mercator
6004	Draw the tile query all features
6005	Simplify the points.
6006	Get the paint for the point.
6007	Get the line paint for the given feature style.
6008	Get the polygon paint for the feature style.
6009	Get the fill paint for the polygon.
6010	Get the paint for a feature style.
6011	Get the style paint for the style row
6012	Get the paint for a style row.
6013	Get the paint for the specified styleId and draw type.
6014	Puts an icon bitmap into the icon cache.
6015	Creates a bitmap of the icon.
6016	Wrap the values in quotes.
6017	Create a bitmap.
6018	Recycle all bitmaps.
6019	Get the bitmap for a given layer.
6020	Get the canvas for a given layer.
6021	Create the bitmap and canvas for a given layer.
6022	Returns a mapping DAO for the feature table.
6023	Get the style DAO
6024	Get the Icon DAO
6025	Get the table feature styles.
6026	Get the table styles for the feature table.
6027	Get the table style for the given feature table and geometry type.
6028	Get the icons for a feature table.
6029	Get the table icon for a feature table.
6030	Get the style for a feature row.
6031	Get the style for a feature.
6032	Get the styles for a feature row.
6033	Get the icons for a feature row.
6034	Get the styles for a feature.
6035	Get icons for a feature
6036	Sets the feature table feature styles.
6037	Set table styles.
6038	Set table icons
6039	Set the feature styles for a feature row.
6040	Set feature style.
6041	Sets the styles for a feature row.
6042	Set styles for a feature.
6043	Set the style for a feature row.
6044	Set the default style for a feature row.
6045	Set the default style for a feature.
6046	Set the icons for a feature row.
6047	Set the icons for a feature.
6048	Set the icon for a feature row.
6049	Set the default icon for a feature row.
6050	Set the default icon for a feature.
6051	Insert or update style.
6052	Insert or update the icon.
6053	Insert a style mapping row.
6054	Delete the style mapping for the feature table.
6055	Delete icon mapping for feature table
6056	Delete all style mapping table entries for a feature table.
6057	Delete the style mapping for a feature table.
6058	Delete the mapping for a feature.
6059	Get all style ids for a feature table
6060	Get all icon ids for a feature table
6061	Get all style ids for a feature table
6062	Get all icon ids for the feature table
6063	Get the image bytes.
6064	Flush the output stream.
6065	Get the pixel value of the pixel at the x y coordinate
6066	Read the pixels from the image.
6067	Draw the feature in the tile
6068	Draw a line path
6069	Draws a polygon path.
6070	Add a LineString to the Path
6071	Add a polygon to the path
6072	Get the cache for the given table.
6073	Remove a feature row.
6074	Clear all feature caches and resize the table.
6075	Get the table style cache.
6076	Get the table icons.
6077	Get the RTree index table DAO
6078	Set the width of the table.
6079	Set the height of the chart
6080	Returns the dimensions of the bitmap.
6081	Tile density.
6082	Read blob value.
6083	Read the table
6084	Get the color of the color object or create a new one if it doesn t exist.
6085	Validate the color
6086	Creates a color object from the hexColor and opacity.
6087	Get the GeoPackageManager
6088	Set the progress of the GeoPackage
6089	Index the given types.
6090	Index a row of features.
6091	Delete the given types from the index.
6092	Delete the index for the given row and types.
6093	Delete the index for the given geometry and types.
6094	Delete the feature index of the feature table.
6095	Checks if the feature index is indexed.
6096	Get the list of indexed types.
6097	Query the feature index.
6098	Count the number of features in the index.
6099	Get the bounding box of the feature table.
6100	Query the feature index table.
6101	Get the indexed type.
6102	Get the internal file.
6103	Get the absolute path of the file at the given path.
6104	Get the geometry type.
6105	Sets the GeometryType of the Geometry.
6106	Check if the url has a bounding box
6107	Replace XYZ.
6108	Checks if the url has XYZ.
6109	Replaces the bounding box in the url with the new one
6110	Replace the bounding box in the url with the values from the bounding box
6111	Get the Geometry data
6112	Index the row
6113	Update the last indexed time
6114	Delete the index.
6115	Delete the index for the given geometry id.
6116	Returns true if the feature is indexed.
6117	Query the geometry metadata table.
6118	Query the table and return a cursor that contains the feature data.
6119	Count the number of features in the bounding box
6120	Query the table.
6121	Count the number of features in the geometry.
6122	Query the feature cursor.
6123	Count the features in the bounding box
6124	Get the feature bounding box
6125	Get the geometry metadata.
6126	Get the feature row.
6127	Get the feature row for the given geometry.
6128	Get the Tile DAO for a feature table
6129	Get the list of FeatureDaos for a tile table.
6130	Get the bounding box for the feature tiles
6131	Query by baseId and relatedId
6132	Get the base id s of all users.
6133	Returns a list of unique related ids.
6134	Delete by base id
6135	Delete by related id
6136	Delete records by baseId and relatedId
6137	Build the where clause for the ids.
6138	Create the metadata in the GeoPackage
6139	Delete the table
6140	Rename the GeoPackageMetadata and the new name.
6141	Rename the column
6142	Get all the metadata
6143	Get the GeoPackage metadata for the database
6144	Get the metadata for the GeoPackage
6145	Get or create a GeoPackageMetadata object
6146	Is the database an external file?
6147	Get the metadata for the external package at the given path
6148	Get the list of metadata where the column name is like like like
6149	Get the list of metadata where the column name is not like the column name.
6150	Get the metadata where the column name like like like?
6151	Create the GeoPackage metadata
6152	Called when a view is created.
6153	add a view to parallaxViews list
6154	Create a view.
6155	Create a custom view.
6156	Append the event to the buffer.
6157	Find the logback configuration file from system properties.
6158	Get the resource from the classloader.
6159	Auto - configure Joran.
6160	Status on resource search.
6161	Convert the given address to a string.
6162	Creates a new ExecutorService.
6163	Start converter.
6164	Sub - Appends the given event to the end of the file.
6165	Add a substitution property.
6166	Get the property.
6167	Compile the converter.
6168	E - > T T E - > Eopt Eopt Eopt T T T T
6169	T - > T T - > T T T T T T T T T T T
6170	Escapes the given escape characters.
6171	Convert a fixed date into a regular expression.
6172	Start the interpreter.
6173	Ends the interpreter.
6174	Initialize the logger context selector.
6175	Creates a context selector.
6176	Set up the properties for this package.
6177	Get the mount point of the external storage directory.
6178	Get the database directory path.
6179	If the file is relative to the app s data directory fix it up.
6180	Evaluates the logging event.
6181	Get the discriminating value from the MDCPropertyMap.
6182	Update the mask if necessary.
6183	Get the filter chain decision.
6184	Create the key managers.
6185	Create and return the trust managers.
6186	Creates a KeyStoreFactoryBean from system properties.
6187	Get the location of a system property.
6188	Returns a URL for the given location.
6189	Returns true if the head converter handles the Throwable.
6190	Stops the logback context.
6191	Prints the status of errors or warnings.
6192	Prints the status manager if errors were detected.
6193	Prints the status manager of the given context.
6194	Handle the first line of throwable.
6195	Get the entry from either the live or lingering map.
6196	Called when the key is no longer needed.
6197	Returns a FormatInfo object from a string.
6198	Renames the source file to the target file.
6199	Checks if the files in the source file are on the same volume as the target file.
6200	Get the value of an environment variable.
6201	Get Android system property.
6202	Sets the MDCPropertyMap for this event.
6203	Format the MDC property map for all keys.
6204	Extract the caller data from the stack trace.
6205	Checks if the given class is in the framework space list.
6206	Add a new status to the status list.
6207	Add a StatusListener to the list.
6208	Looks up the implicit action.
6209	Returns a list of actions that can be performed on the given element.
6210	Set the ClassLoader to use.
6211	Get a system property.
6212	Get a system property as a boolean.
6213	Decapitalize a name.
6214	Get the MethodDescriptors for the given class.
6215	Get the property descriptors for the given class.
6216	Start the appender.
6217	Add OnConsoleStatusListener instance.
6218	End the current object.
6219	Returns the discriminating value of the logging event.
6220	Returns true if the given event is discardable.
6221	Initialize a shutdown hook.
6222	Called when the interpreter ends.
6223	The enabled protocols.
6224	Returns the enabled cipher suites.
6225	Returns a String array with the strings in defaults that match the specified strings.
6226	Convert a string to a Scope object.
6227	Sets the properties of the given properties object.
6228	Adds a new appender to the list.
6229	Detach appender from this appender.
6230	Detach a appender from the list.
6231	Propagate a level change to all children.
6232	Call appenders on this logger.
6233	Detach a appender from this logger.
6234	Create a child logger by last name part.
6235	Call Turbo Filters.
6236	Log a slf4j LoggingEvent.
6237	Creates a Socket object.
6238	Creates the parent directories for the specified file.
6239	Returns the integer representation of this level.
6240	Convert an integer to a Level.
6241	Get the resource occurrences of the given resource.
6242	Get the URL of a resource.
6243	Returns a ClassLoader that can be used to load the given object.
6244	Get the ClassLoader for the given Class.
6245	Gets the class loader of the given class.
6246	Start the appender.
6247	Format the tag based on the encoder.
6248	Start a substitution property.
6249	Get the separator index of the given name starting at fromIndex.
6250	Evaluate the event.
6251	Get the thread name of the client.
6252	Compares two files and returns true if they are on the same file store.
6253	Start the session.
6254	Append an object to the buffer.
6255	Sends the buffer to the server.
6256	Adds an MDCValueLevelPair to the value level map.
6257	Create a converter for the given keyword.
6258	Creates a composite converter for the given composite conversion word.
6259	Determine the compression mode.
6260	Configure the Joran context.
6261	Configure the Joran context.
6262	Configure the Joran instance with the input stream.
6263	Build the interpreter.
6264	Configure the configuration.
6265	Configure the interpreter.
6266	Get the value of a property.
6267	Sets the name of the context.
6268	Checks if the given context has status listeners.
6269	Returns the time of the last reset message.
6270	Start parsing.
6271	Returns the effective converter map.
6272	Returns the file header.
6273	Returns the file footer.
6274	Start the parsing of the appender.
6275	End the current appender.
6276	Copy the clients collection.
6277	Adds a client to the clients list.
6278	Remove a client from the clients list.
6279	Get a copy of the hash map on the thread.
6280	Gets the value - of method for the given type.
6281	Get the first TurboFilter in this chain.
6282	Checks if the current operating system is on Android OS.
6283	Initializes the default logger context.
6284	Returns an array of files in the given file that match the given stem regex.
6285	Print the retrospective of the status.
6286	Convert facility string to integer.
6287	Get the database file.
6288	Clear expired logs.
6289	Checks if the last cleanup time is less than or equal to the given expiry time.
6290	SubAppend.
6291	Append the secondary sub - append.
6292	Binds the logging event to the statement.
6293	Returns a String representation of the given object.
6294	Compute the reference mask for the logging event.
6295	Merge the property maps from the logging event to the event - specific property maps.
6296	Insert an exception.
6297	Returns the length of the prefix match of the two elements.
6298	Returns the effective level of the status.
6299	Sets the value of the named property.
6300	Checks if the given class is unequivocally instantiable.
6301	Returns the child value of the parent.
6302	Process the include tag.
6303	Opens the given URL as an InputStream.
6304	Remove the head and the tail of the list.
6305	Returns true if the server should start.
6306	Returns true if the response is transient.
6307	Set the default hosts.
6308	Ensure that the local index is created.
6309	Syncs with the remote server.
6310	Syncs the table if it s time to live.
6311	Wait for a task to be published.
6312	List all offline data.
6313	Convert the stream to a String.
6314	Convert stream to byte array.
6315	Consume the entire stream and close the connection.
6316	Returns a list of hosts that are up.
6317	Sets the type of the PlacesQuery.
6318	Starts the index browse.
6319	Associates the given value with the given key.
6320	Get the value associated with the given key.
6321	Wait for all threads to complete.
6322	Compares two version strings.
6323	Reports an exception to the Agent.
6324	Copies all files from src to target.
6325	Initializes the properties file.
6326	Get static field value.
6327	Get a method by name.
6328	Format a percentage value.
6329	Formats a double value.
6330	Formats a long value.
6331	Read a JSON syntax character.
6332	Convert a hex character to a byte.
6333	Writes a JSON string to the stream.
6334	Write a JSON integer.
6335	Writes a double value to the JSON stream.
6336	Read a JSON string.
6337	Reads a JSON - numeric value.
6338	Reads a JSON integer.
6339	Reads a double value.
6340	Read a JSON string and decode it as base64.
6341	Execute the given MethodCall.
6342	Invoke a method call.
6343	Enqueue a MethodCall to be sent to the service.
6344	Get a resource from a file system location.
6345	Update Decoration.
6346	Refresh the RepositoryView.
6347	Get the ResourceHistoryView from the active workbench window.
6348	Opens an editor with the given contents.
6349	Report a failure to authenticate.
6350	Prompt for authentication.
6351	Create the default page.
6352	Start the animation thread.
6353	Set the keep - all - alive flag.
6354	Set the omit attribute of the WebDAVNode.
6355	Set the owner of the element.
6356	Adds a new condition factor.
6357	Creates a new condition term.
6358	Checks if the condition term matches this condition.
6359	Get the DSL configuration file content.
6360	Load the DSL config file.
6361	Read configuration from the given stream.
6362	Creates a menu with the wizards.
6363	Add a response element.
6364	Add an href attribute.
6365	Inserts a new href before the given refHref.
6366	Remove the href attribute.
6367	Add a propstat element.
6368	Get the href attribute of the element.
6369	Get the status text.
6370	Get the stack frame for the given value.
6371	Checks if the class is a subtype of the class specified by the second argument.
6372	Checks if the given newProposal is contained in the given proposals.
6373	Clone a node.
6374	Reset the stream.
6375	Create actions for this editor.
6376	Adds a connection to the connection pool.
6377	Get the property value.
6378	Remove a connection from the connection pool.
6379	Sets the location of the map.
6380	Sets the property value.
6381	Sets the size of the widget.
6382	Dumps the constraints array to a String.
6383	Add a lock entry.
6384	Adds a child vertex to this vertex.
6385	Remove a child vertex.
6386	Initializes the cache.
6387	Stop the bundle.
6388	Get a resource string from the default resource bundle.
6389	Returns the resource bundle.
6390	Gets the form colors for the rule builder.
6391	Set the date and time of the datepicker.
6392	Set the date and time according to the given date and time pattern.
6393	Create an error status.
6394	Log an error.
6395	Add a field to the list of fields to be edited.
6396	Adjusts the grid layout.
6397	Apply font to all fields.
6398	Calculates the number of columns in the table.
6399	Initializes the fields.
6400	Fired when a property change is made.
6401	Set the active editor.
6402	Add the ZoomComboContributionItem to the ToolBarManager.
6403	Determine the dialect based on the back text.
6404	Create a context object.
6405	Saves the file.
6406	add table listeners
6407	Creates a table with the given parent.
6408	Puts a value into the cache.
6409	Put the url key and value pair in the table.
6410	Add a token to the end of the tree.
6411	Add a child node.
6412	Sets the file and offset of the buffer.
6413	Adds a condition to the list of conditions.
6414	Adds a state token condition to the current WebDAV query.
6415	Checks if the current condition matches the given condition.
6416	Get the prop element.
6417	Get the status text.
6418	Set the property.
6419	get the last line of backText
6420	Get the last non - dash line
6421	Binds the given id and binding.
6422	Binds two strings.
6423	Bind the message with the given bindings.
6424	Create a process.
6425	Creates a ProcessJUnit for the given example type.
6426	Returns the runtime id of this KieVersion.
6427	Visits a Rete.
6428	Visits a node.
6429	Generate a dot - id for an object.
6430	Add remove.
6431	Add a set and a prop to the document.
6432	Create a new locator.
6433	This reconciles the presentation of the document.
6434	Compares this status with another status.
6435	Returns true if the condition terms of this condition match the given term.
6436	Creates a new condition factor.
6437	Add the pages.
6438	HTTP DELETE request
6439	HTTP POST
6440	Get the status of a job.
6441	Executes the pull operation.
6442	Handle pull results.
6443	Sets the value at the given index to the given string value.
6444	Add an active lock.
6445	Filter proposals that start with prefix.
6446	Read the prefix string from the document backwards.
6447	Calculate the row list for the given root vertex.
6448	Paints this shape.
6449	Get the edit part for the given model element.
6450	Get an ImageDescriptor for the specified path.
6451	Declare an image in the registry.
6452	Add a vertex at a given depth.
6453	Returns the row index of the given vertex.
6454	Replies the width of the table.
6455	Dumps the matrix in a readable format.
6456	Optimize the table.
6457	Load the RETE model.
6458	Initialize the graphical viewer.
6459	Draw the graph.
6460	Get the Drools breakpoint for the specified source.
6461	Set the href attribute of the node.
6462	Check if DAV can talk.
6463	Copy the properties from one location to another.
6464	Examines the response from a multistatus request.
6465	Extract the property statistics from the multi - status response.
6466	Get the content of the response.
6467	Returns an enumeration of Lock objects.
6468	Get the property with the given name.
6469	Get the head context.
6470	Acquire a shared or shared lock.
6471	Move the specified properties to the specified destination.
6472	Override this method to provide the actual check - in behavior.
6473	Refresh the lock.
6474	Remove the specified properties from the DAV document.
6475	Remove a property.
6476	Sets the content of the response.
6477	Sets the properties of the element.
6478	Sets the property of the DAV object.
6479	Unlocks the DAV resource.
6480	Update the DAV document.
6481	Request the version control endpoint.
6482	Deletes the resource.
6483	Examines the status code.
6484	Checks to see if the property has a child.
6485	Write the request body to the OutputStream.
6486	Convert an array of bytes to a hex string.
6487	Convert an array of integers to a hex string.
6488	Set the allprop flag.
6489	Set the propname attribute.
6490	Set the property on the node.
6491	Strips the last word from prefix.
6492	Update the rules.
6493	Writes the contents of this response to the given OutputStream.
6494	Step over the current stack frame.
6495	Mark parser errors as markers.
6496	Skips whitespace.
6497	Add a resource to Guvnor.
6498	Commit changes to the selected file.
6499	Returns the age of the user.
6500	Returns the value of the Content - Length header.
6501	Returns the maximum number of forwards.
6502	Returns true if the file should be overwritten.
6503	Indicates if the message is passthrough.
6504	Get the timeout.
6505	Adds a property to the properties map.
6506	Sets the timeout value.
6507	Open a DSL file.
6508	Parse the file.
6509	Get the object metadata from the given text.
6510	Strip object metadata from the given text.
6511	Add tokens to the root node.
6512	Get the children of the condition.
6513	Get the children of the given object.
6514	Add prefix to list.
6515	Prints the tree.
6516	Prints a node.
6517	Prints count tabs.
6518	Read JsonValue from String.
6519	Get an ImageDescriptor for the given ID.
6520	Invoke the request.
6521	Set a field in the request header.
6522	Create the rule launcher.
6523	Creates a rule in the project.
6524	Creates the rule flow.
6525	Creates the rule flow launcher.
6526	Returns a list of IInstallableUnits that are selected in this list.
6527	Creates an Image object.
6528	Returns the field name of the node.
6529	Returns the expression evaluator for this node.
6530	Get the value of the field.
6531	Add Guvnor properties from a resource.
6532	Sends the baseline control to the server.
6533	Binds a member to a source.
6534	Get the member of the DAV.
6535	Optimizes the vertices.
6536	Initialize the controls.
6537	Validates the page.
6538	Generate an EntityTag.
6539	Get the opposite of the given vertex.
6540	Validate OTPs.
6541	Check if the YubiKey belongs to the given user.
6542	Get the username for the given publicId.
6543	Add a YubiKey to a file.
6544	Verify OATH OTP
6545	Clear all the passwords.
6546	Get the public ID of the OTP.
6547	Checks if the given string is a valid OTP format.
6548	Create an Evaluation for the given SimpleNode and source.
6549	Create a new Evaluation object.
6550	Clear the cache.
6551	Checks if the JVM is in a JDK 15.
6552	Get the package name of the given object.
6553	Get the package name of the given class.
6554	Returns a unique descriptor for the given object.
6555	Get the argument s class.
6556	Checks if the two given classes are more specific.
6557	Returns the best matching method for the given arguments.
6558	Get the value of a property.
6559	Get a Map of all PropertyDescriptors of the given class.
6560	Get the PropertyDescriptor from an array of PropertyDescriptor.
6561	Get a read method.
6562	Read a single character.
6563	The projection is a simple expression.
6564	the select expression
6565	Convert value to a long.
6566	Convert the given value to a double.
6567	Convert the given value to a BigInteger.
6568	Convert value to BigDecimal.
6569	Convert an Object to a String.
6570	Get the numeric type of the given value.
6571	Convert value to a different type.
6572	Convert value to an integer.
6573	Get the numeric type.
6574	Get the numeric type between two objects.
6575	Creates a Number of the given type and value.
6576	Pops the current evaluation.
6577	Generate OGNL getter.
6578	Generate OGNL setter.
6579	Flatten the tree.
6580	Initializes the iterator.
6581	This method is called when the image is escaped.
6582	Sets the root context.
6583	Evaluates the expression and returns the result.
6584	Set the value of an expression.
6585	Sets the value of the given node.
6586	Checks if the expression is constant.
6587	Returns the default watchServiceId.
6588	Wait for Play! server to start.
6589	Read the source file and return it as a String.
6590	Reload the application s classloader.
6591	Get the archiver with the given name.
6592	Check if the archiver has problems.
6593	Read the file and return it as a String.
6594	Create the ant project.
6595	Add a system property to the Java object.
6596	Add a system property to the Java object.
6597	Opens a dialog to create a new folder.
6598	Changes the selected directory.
6599	Refreshes the button state.
6600	Creates a FileObserver that will refresh the directory when the file changes.
6601	If the user selected a folder then return it. Otherwise cancel it.
6602	Creates a new folder.
6603	Checks if the given file is a valid file.
6604	Start a background job.
6605	Start a list.
6606	End the list.
6607	Handles motion events.
6608	Get the crop rectangle.
6609	Computes the layout of the crop area.
6610	Register the RTEditTextListener and the RTEditMediaFactory.
6611	Add a span watcher to the text.
6612	This method is called when the user clicks on the button.
6613	This method is called when the item is dropped.
6614	Convert the text to the specified format.
6615	Process paragraphs within a paragraph.
6616	Creates a unique file in targetFolder with the given originalFile.
6617	Determines the original file path.
6618	Get the namespace for the given name.
6619	Returns the local name of the given name.
6620	Set an attribute.
6621	Set an attribute.
6622	Get the font name from a font file.
6623	Get the font name from the font file.
6624	If the buffer is not currently in the buffers list then create a new buffer.
6625	Writes a range of bytes to the output stream.
6626	Writes a byte to the buffer.
6627	Read from the InputStream and write to the buffer.
6628	Writes the contents of this buffer to the given output stream.
6629	Returns a byte array containing all the buffered data.
6630	Sets the font size.
6631	Converts Windows path separators to Unix path separators.
6632	Recompute focus.
6633	Pan the view if it is visible.
6634	Center the image based on the highlight view.
6635	Reset the document locator.
6636	Validates the given value against the rules defined in this object.
6637	Adds an element type.
6638	Set an attribute of an element.
6639	Set the parent element of this element.
6640	Get the ElementType object for the given name.
6641	Get an entity by its name.
6642	Cleans up paragraph - related elements.
6643	Applies the given value to the given editor selection.
6644	see if the domain is a valid domain name or a valid TLD.
6645	this method is called when the operation is executed.
6646	Redo the current undo operation.
6647	Replace all occurrences of the search string with the replacement string.
6648	Get or create a ThreadStatus object for the given Thread.
6649	Set the decoding options for the given thread.
6650	Returns true if the given thread can be decoded.
6651	Decodes a file descriptor into a bitmap.
6652	Get the set of Fonts from the assets folder.
6653	Get the asset fonts.
6654	Get a map of system fonts.
6655	Sets up the internal structures.
6656	Get a Reader for the InputSource.
6657	Get an input stream for the given systemid.
6658	Adup method called when a character is read.
6659	Expands entities in a string.
6660	Lookup an entity.
6661	Restart the stack.
6662	Pop the current stack element.
6663	Pop the top element of the stack and if restart elements are enabled then anonymize the
6664	Returns the prefix of the given name.
6665	Checks if the schema is foreign.
6666	Remove any quotes and single quotes from the input string.
6667	Splits a string into an array of strings.
6668	rectify the element
6669	Make a name from the input buffer.
6670	Save the state of the Toolbar.
6671	Called when the RTEditText is being destroyed.
6672	On main thread.
6673	Link fragment event handler
6674	Rotate bitmap and apply the matrix to the bitmap.
6675	Returns the maximum zoom level.
6676	Checks if the text exists in the selection.
6677	Find spans and remove them from the paragraph.
6678	Encodes a URL.
6679	URL - decode the query string.
6680	Picks a directory.
6681	Rotate image in the image.
6682	Set the output writer.
6683	Writes a character to the output stream.
6684	Writes a string to the output stream.
6685	Check if the attribute is a boolean attribute.
6686	Write an escape sequence of UTF - 16 characters.
6687	Write namespaces and declarations.
6688	Write a name.
6689	Creates a stream if it doesn t already exist.
6690	Waits for the stream to be active.
6691	Complete the snapshot of the target stores with missing instance snapshots.
6692	Wait the minimal duration to execute the next provisioning request.
6693	Get records.
6694	Perform an action with retry.
6695	Try to execute an action on Amazon S3.
6696	Checks if bucket is accessible.
6697	Load stores from the snapshot store.
6698	Triggers wildcard expander.
6699	Replaces all occurrences of oldPattern with newPattern in inString.
6700	Delete any of the characters in charsToDelete from inString.
6701	Adds a report to the report.
6702	Update the given properties with the values from the filter - config.
6703	Get the configuration properties.
6704	Create a stream to read the WRO file.
6705	Converts a map of resource pre - processors to a post - processor.
6706	Compiles the given content with Rhino script.
6707	Reloads the cache with a new value.
6708	Reloads the model with a new value.
6709	Wraps the given request in a wrapper around the given location.
6710	Transformer that adds suffix to base name and extension.
6711	Called when an error occurs.
6712	Sends a redirect to the specified location.
6713	Process a resource.
6714	Create a expander handler that expands the files into a group.
6715	Locate the specified URI using the URI Locator.
6716	Create WroConfiguration.
6717	Register change listeners.
6718	Process the request using the WroManager.
6719	Sets the WroConfiguration.
6720	Identify duplicate group names.
6721	Merge the given WroModel with this one.
6722	Locate the specified URI.
6723	Apply post processors.
6724	Decorate processor with callback registry.
6725	Process the resource.
6726	Splits the given string into an array of strings.
6727	Load properties from a file.
6728	Parse properties.
6729	Create a custom WroManagerFactory.
6730	Persist resource fingerprints for the given groups.
6731	Checks if the group is a target group.
6732	Extend the plugin classpath.
6733	Get the resource stream for the model.
6734	Initialize Wro Manager Factory
6735	Sets the transformers for the model.
6736	Compile the given content into a precompiled template.
6737	Process and merge resources.
6738	Process and merge resources.
6739	Run pre - processing in parallel.
6740	Apply pre - processors to the given resource.
6741	Decorate pre - processor.
6742	Persists the fallback storage.
6743	Get all fields from the given object.
6744	Rewrite the given cssUri with the given imageUrl.
6745	Computes the new image location.
6746	Add a model transformer.
6747	Serve processed bundle.
6748	Initializes the aggregated folder path.
6749	Extract variables from the variables body.
6750	Parse the CSS string and replace variables with their values.
6751	Replaces all variables in the CSS string with their values.
6752	Returns a pre - processor that will be called after processing the resource.
6753	Checks if the resource can be eligible for the given resource type.
6754	Compress the response.
6755	Include the given patterns into the path pattern processor.
6756	Excludes the given patterns from the path pattern processor.
6757	Creates a resource change handler.
6758	Remember a resource.
6759	For each CSS import apply.
6760	Filter the given collection.
6761	Checks if the request is minimized.
6762	Find imported resources.
6763	Computes the absolute url from the relative resource URI.
6764	Create a string representation of the given items.
6765	Get alias list.
6766	Creates a common script.
6767	Evaluate the expression in the specified reader.
6768	Evaluate a JavaScript string.
6769	Process the WroResourceBundle.
6770	Checks if the request is a handler request.
6771	Create the request handler path.
6772	Rename the group.
6773	Computes the destination folder for the given resource type.
6774	Process a group.
6775	Checks if the resource is changed for the group.
6776	Locate a resource in the context.
6777	Create an object pool.
6778	Locate a stream from a jar file.
6779	Opens a JAR file.
6780	Extract the query path from the given URI.
6781	Checks if the group is minimized.
6782	Add a URI Locator to the factory.
6783	Decorate a WroModelFactory with a list of model transformations.
6784	Adds a require parameter.
6785	Process the content.
6786	Log summary.
6787	Called when a resource is processed.
6788	Get the lock for the given key.
6789	Create a process from a source file.
6790	Parse properties.
6791	Get the task info.
6792	Get compilation command.
6793	Parse the header.
6794	Add no - cache headers.
6795	Get path info from location.
6796	Gets servlet path from location.
6797	Checks if the given request matches the given path.
6798	Load a regexp with a specific key.
6799	Safely copy the contents of the Reader to the Writer. Closures are closed before this
6800	Create a temporary file.
6801	Remove spaces and spaces from image URL.
6802	Sets the given object as attribute of the given attribute.
6803	Generate a data URI from the given input stream and file name.
6804	Generate the data URI.
6805	Sets the context and configuration.
6806	Unregisters the context.
6807	check if the resource group is changed
6808	Called when an exception occurs.
6809	Check if the resource has changed.
6810	Update hash for group.
6811	Checks if this resource collection has resources of the given type.
6812	Create a process from the source file and destination file.
6813	Encodes a Java object into a JSON string.
6814	Process the groups.
6815	Parse the group.
6816	Create a group from a DOM.
6817	Parse a resource element.
6818	Get the resources for a group.
6819	Log this timer.
6820	Stops a timer with the given name and todo flags.
6821	Get a timer with the given name and todo flags.
6822	Get a timer with the given name.
6823	Print statistics about the statistic.
6824	Wake up all workers.
6825	Update the processed counters.
6826	Update the finished counters.
6827	Updates the counter if it is smaller than the given value.
6828	Default visit method.
6829	Instanciates the given property into the taxonomy.
6830	Ensures that the loading is complete.
6831	Restores the saturation of the stage.
6832	Returns true if the current state of the model is consistent.
6833	Restores the taxonomy.
6834	Restores the instance taxonomy.
6835	Returns a Proof of the Entailment Inferences.
6836	Called before the reasoner is initialized.
6837	Invalidate this reasoner and all its sub - stages.
6838	Get the collection of individuals to add.
6839	Get the individuals to remove.
6840	Throws UnsupportedOperationException for unknown method.
6841	Remove the element at the given position.
6842	Remove the element at the given position.
6843	Returns the position of the element after del.
6844	Returns true if the object o is contained in the array d.
6845	Add an element to the end of an array.
6846	Checks that this index has a positive occurrence.
6847	Add a timer to this timer.
6848	Add a timer to this set.
6849	Put a key - value pair into the keys array.
6850	Remove an entry from the keys and values.
6851	Enlarges the map by enlarging the keys and values.
6852	Shrink the hash table.
6853	Save the given configuration to disk.
6854	Prints the declarations of the class taxonomy.
6855	Returns a set of all reachable instance nodes.
6856	Clear all elements from the hash table.
6857	Combine multiple hashes.
6858	Combines the given list of hashes into a single hash.
6859	Copy the contents of the input stream to the output stream.
6860	Returns a DelegatingIncompletenessMonitor that can be used to monitor reasoning.
6861	Process taxonomy omomy.
6862	Submits a new input to the buffer.
6863	Append an ElkObject to the given appender.
6864	Marks the query as not computed.
6865	Adds a direct type node to this node.
6866	Checks that the start position exists in the full chain.
6867	Returns a set of objects that satisfy the given condition.
6868	Map the input Set to a Set.
6869	Adds an element to the log.
6870	Remove an object from the log.
6871	Adds the given counter to this class.
6872	Log memory usage
6873	Sets configuration options.
6874	Shuts down the Elek reasoner.
6875	Prints the header.
6876	Prints the values to the debug log.
6877	Get a string of n characters.
6878	Adds a counter to the counter.
6879	Writes a resource to the writer.
6880	Get the ActionInputParameter for the given name.
6881	Gets the property descriptor for the given property path.
6882	Returns a map of required parameters.
6883	Checks if the given class is a single type.
6884	Adds a REL parameter to the link.
6885	Sets the type of the link.
6886	Add a href lang parameter to the link.
6887	Add a revision parameter.
6888	Adds a link parameter.
6889	Expands the partial URI template with the given arguments.
6890	Gets the list of relationships.
6891	Get the list of revisions.
6892	Returns true if any of the action descriptors has unsatisfied required variables.
6893	Returns the formatted value of the field.
6894	Check if the given property is hidden.
6895	Check if the input annotation contains the property with the include value.
6896	Returns true if the input annotation has an explicit property include value.
6897	Indicates if the request is required.
6898	Returns the default value of the request.
6899	Returns the parameter name.
6900	Get the property name from the Expose annotation or the parameter name.
6901	Determine the vocab for the given mixin source and bean.
6902	Get the query string.
6903	Append the form for the action.
6904	Output a button with the given type and value.
6905	Append an input or a select parameter.
6906	Add action descriptors from affordance builder.
6907	Gets the UriTemplate components.
6908	Removes optional variables from the uri template.
6909	Returns the first UberNode with the given name.
6910	Get the first node with the given relation.
6911	Returns an iterator over the UberNodes in this UberNode.
6912	Creates a PersistentHashMap from an Equator and an iterable of Map. Entry objects.
6913	Creates a PersistentTreeMap from an iterable of Map. Entry objects.
6914	Returns a PersistentTreeMap with an empty map.
6915	Returns a ImSortedSet of the entries in this Tree.
6916	Returns the last key in this map.
6917	Construct a Xform from an iterable.
6918	folds the source into the map and then flattens the result into the result.
6919	Drops elements while a predicate evaluates to true.
6920	Folds this run into a new run.
6921	Returns a new Tuple2 instance from the given Map. Entry.
6922	Match the item with the selector.
6923	Registers a list of classes.
6924	Returns the i th element.
6925	Append the given element to the end of the list.
6926	Concatenates the given items into this vector.
6927	Construct a MutableSet from the given items.
6928	Construct a mutable list from the given items.
6929	Creates a PersistentHashSet from the given items.
6930	Construct a vector from the given items.
6931	Construct an UnmodIterable from an array of items.
6932	Indent spaces at the given position.
6933	Convert an array of objects into a string.
6934	Creates a LazyRef that holds the value returned by the producer function.
6935	This method is synchronized.
6936	Inserts an item into an array at a given index.
6937	Copy an array of the given length.
6938	suspend the thread if it is associated with this thread.
6939	This method is called before the async operation.
6940	build the components from the deployable unit jar
6941	Checks that a directory exists and that it is readable.
6942	Creates a inheritance link between the concreteClass and superClass.
6943	Copy all methods from source to destination.
6944	Copy methods to destination.
6945	Create a tree item for the local root.
6946	remove SbbEntity and lock from SbbEntity
6947	Returns true if notifications are enabled for the given parameter.
6948	Get the set of resource entity links which are not referenced by the service
6949	Installs the given service.
6950	Uninstall a service.
6951	Checks if the given RA link name is referenced by any resource adaptor entity.
6952	Get the set of usage parameter sets for the sbb.
6953	Reset all usage parameters.
6954	Returns a collection of profiles.
6955	Get the profile table activity.
6956	Get a profile by indexed attribute
6957	Display the result.
6958	Unfolds an array.
6959	Execute the event.
6960	Bind a name to the cache node.
6961	Unbinds a name.
6962	Lookup a name in the cache.
6963	Get the name bindings of the last node in the subtree.
6964	Get the next SbbEntity that is attached to the SbbEntity that is attached to
6965	Returns true if this level is higher than the given level.
6966	Extract the contents of a jar file to a directory.
6967	pipe stream.
6968	Put an object into the map.
6969	Attach a SbbEntityID to the SbbNode.
6970	Detaches the SbbEntity from the SbbEntityID.
6971	Returns true if the SBBs are attached to the current node.
6972	Replies the SbbEntities attached to this node.
6973	Attach a timer to the timer graph.
6974	Detach timer.
6975	Returns true if there are no timers attached to this node.
6976	Replies the set of attached timers.
6977	Adds a name to the names bound node.
6978	Remove a name bound to this node.
6979	Returns true if the node has no names bound.
6980	Get the set of names bound to this node.
6981	Set a CMP attribute.
6982	Get the value of the specified cmp attribute.
6983	Get the map of the CMP attributes.
6984	Initialize the notification types.
6985	Send a usage notification to all registered listeners.
6986	Download the remote DU.
6987	Update the list of components that are deployed
6988	Installs a deployable unit.
6989	Uninstall a deployable unit
6990	Process the undeploy operation.
6991	Returns a String describing the status of this deployment.
6992	Log a LogRecord.
6993	Get the logger for the given record.
6994	Get the components that are referring to the given component.
6995	Get the SbbEntities that are part of the current node.
6996	Get permissions from the current policy.
6997	Returns the code sources of the current policy.
6998	Checks if a profile exists on the profile table.
6999	remove all profiles
7000	Update the configuration properties of the resource adaptor.
7001	Activate the ra object
7002	SLEE_STOPPING event.
7003	Activate the entity.
7004	Deactivate this entity.
7005	Schedule the end of all activities.
7006	Remove this entity from the SLEE.
7007	Get the resource adaptor interface.
7008	This method is called when the service is active.
7009	Dereference an ActivityHandle from an ActivityHandle.
7010	Called when an activity has ended.
7011	This method is called when the configuration properties have been updated.
7012	verify the new configuration properties
7013	This method is called when the resource adapter is in a state that is in the STOPPING
7014	This method is called when the resource adapter is in a inactive state.
7015	unconfigure the resource adapter object
7016	Unconfigure the ResourceAdaptorContext.
7017	unset fault tolerant resource adaptor context
7018	build the map of profile attributes to their return values
7019	Resume the event routing task.
7020	Replies the ActivityContextHandles that are associated with this node.
7021	Remove this MBean.
7022	Get the usage MBean for the given paramSetName.
7023	Decorate the Abstract Class.
7024	Fires an event on the specified SbbEntity.
7025	Fired an event on the SBB object.
7026	Get the profile cmp method.
7027	Get the SbbUsageParameterSet for the given SbbEntity.
7028	Get abstract methods from a given class.
7029	Get the methods from an interface.
7030	Create Object Pool
7031	Remove Object Pool
7032	Checks if the given source object is the owner of the given alarm.
7033	Raise an alarm.
7034	Get the usage parameter set for the specified profile.
7035	Returns the specs descriptor.
7036	Check if the deployable - unit is accepted.
7037	Initialize the deployableUnitWrapper.
7038	Start the deployable unit.
7039	Stop the deployable unit.
7040	Show the status of the deployment.
7041	Executes after commit actions.
7042	Executes after commit priority actions.
7043	Executes the after rollback actions.
7044	Executes before commit actions.
7045	Executes before commit priority actions.
7046	Get the tracer names defined in this tracer.
7047	Create a tracer with the given name.
7048	Remove all replicated data.
7049	Registers the property editors.
7050	Process the usage parameters interface.
7051	Get the object pool for the given service and SbbID.
7052	Create a Sbb object pool.
7053	Execute the given activity.
7054	Start an activity.
7055	end an activity
7056	Checks the preconditions for fire - event - preconditions.
7057	Fire an event on an activity.
7058	This method creates the concrete concrete SbbLocalObject and the SbbLocalObjectImpl.
7059	Make the getter.
7060	Convert field to the appropriate type.
7061	Sets the profile name and address.
7062	Extract message from text.
7063	Checks if the SbbLocalObject is contained in the SbbLocalObject.
7064	Returns true if the relation contains all of the elements in the given collection.
7065	Remove all elements from the specified collection.
7066	Returns true if this level is higher than the given level.
7067	Resolve the internal state of the stream.
7068	Clean up the class loader.
7069	Record a profile call.
7070	Get a profile object.
7071	Profile object is passivated on transaction end.
7072	Set the text of this component.
7073	Generate the concrete concrete class.
7074	generate concrete methods from interface methods
7075	Set a data attribute.
7076	Add an ACI name binding.
7077	Remove the naming bindings from the cache.
7078	Remove the ACI name binding.
7079	Attach a timer to the cache.
7080	Remove all the timers attached to this cache.
7081	Attaches the given SbbEntity to the cache.
7082	Detaches the SbbEntity from the cache.
7083	Get the SbbAttachmentSet sorted by SbbEntityID and not in the excludeSet
7084	End the current activity.
7085	Add a component to the DU.
7086	Get the external dependencies of this DU.
7087	Check if the dependency graph is satisfied.
7088	Check if there are any duplicate components in the DU.
7089	get actions related with components already installed
7090	This method returns the actions that should be executed when uninstall is done.
7091	Check if this component has a reference to another component.
7092	Close the SLEE.
7093	Get the object name for a profile.
7094	change the write mode to read - write
7095	Method called before the field is set.
7096	Suspend the transaction manager.
7097	Common logic for the get - cmp - field operation.
7098	After non - set field.
7099	Method to be called before the management method invocation.
7100	Method invoked after the management method invocation.
7101	Recursively deletes a path.
7102	Create a default constructor.
7103	Create the default SbbUsageParameterSet
7104	Creates the SbbEntity getter and setter methods for SbbEntity.
7105	Create the fireEvent methods for the given event entries.
7106	Create the method to get the SbbActivityContextInterface object.
7107	Add the given expression to the list of expressions.
7108	Binds the given target object to the given key.
7109	Rebinds the target object to the given name.
7110	Decorate Abstract Sbb Class.
7111	Invoke the method with the given name with the given arguments and return void type.
7112	get real field name
7113	Set the value of the field with the given name.
7114	Get the field value of the ACI.
7115	Set the profile context.
7116	Initialize the profile.
7117	Unsets the profile context.
7118	Get the profile local object.
7119	Fires an add or updated event if the object is not yet persisted.
7120	Get the profileCmpSlee10Wrapper.
7121	Creates a class with the given name and interfaces.
7122	Creates a link to the superclass of the concreteClass.
7123	Add an annotation to a class or method.
7124	Add the member values to the annotation.
7125	Get the ActivityContext associated with the given activity.
7126	get the class pool
7127	Set the deployable unit.
7128	Clean up resources when deployment is undeployed.
7129	Execute the given activity.
7130	check if the given class or interface is an interface and if it is an interface it will
7131	Get all methods from all interfaces of the given xInterfaceClass.
7132	Resolve an entity.
7133	Check the tracer name.
7134	This method is used to handle the static query.
7135	Check the dependencies of the component
7136	Create a temp dir for the DU.
7137	Get the entity manager.
7138	Start the slee container.
7139	Switch to a classloader.
7140	This method is used to make a proxy method call in a proxy object.
7141	Check if the current transaction is the same as the current one.
7142	Convert the last access time to a TTL.
7143	Returns true if the profile class is visible.
7144	Get a profile object from the object pool. If the object is not found in the object
7145	Get the names of loggers that match the given regular expression.
7146	Reset the logger levels.
7147	Clear all loggers for the given name
7148	Add a logger to the console.
7149	Add a socket handler to the logMgmtMBean
7150	Remove a handler from a logger
7151	Returns tracerName to log4jLoggerName.
7152	sync level with log4j level
7153	Assigns the log4j level to the trace level.
7154	Reset the cache flags.
7155	Send a trace notification.
7156	Check the tracer name.
7157	Serializes the given vendor data to the given ObjectOutputStream.
7158	Read an object from the stream.
7159	Add a URLClassLoaderDomainImpl to the list of direct dependencies.
7160	Get all dependencies of this domain.
7161	Find a class in the classpath.
7162	Override findResource to provide a trace - friendly way to find a resource locally.
7163	Find resources locally.
7164	Create and register a profile MBean.
7165	Resume the specified transaction.
7166	Get the set of SbbIDs in the component repository.
7167	Get the set of resource - adaptor - entity - links for all the SBBs in
7168	Initializes the slee state.
7169	Shuts down the slee container.
7170	Validate state transition.
7171	generate usage parameter getter
7172	Set an update field.
7173	Build the PolyJDBC object.
7174	Add a value argument to the insert query.
7175	Executes the given transaction.
7176	Create a RegionRequest object from a string.
7177	Returns the region of the region.
7178	Resolve the image dimensions.
7179	The on type is the type of the on object.
7180	Sets the viewing hints.
7181	Add a viewing hint to the resource.
7182	Sets the list of renderings to use.
7183	Add other rendering.
7184	Merge profiles.
7185	Merges the two profiles.
7186	Create a RotationRequest object from a string.
7187	Create a SizeRequest object from a string.
7188	Initialize the adb connection.
7189	Get the dump of the current device.
7190	Run the test for the device.
7191	Push automator. jar to device
7192	Delete the temp files.
7193	Pull the dump file to pc s path.
7194	Get the crash log.
7195	Removes tabs at the end of each line.
7196	Indents the text.
7197	Tokenize the HTML text.
7198	Markdown - strips all HTML - code blocks and replaces all line endings with a single
7199	Escapes special characters within tag attributes.
7200	Adds an exception to the exception queue.
7201	Closes the statement cache.
7202	Find the parent class name.
7203	Writes the class to the filer.
7204	Writes a divider.
7205	Appends the bit strings in the given array to the given bit vector.
7206	Read the data from the specified input stream.
7207	Get a list of objects from the server.
7208	Get a list of objects from a path.
7209	This method is called by the KlovReporter. It will create a new Klo
7210	Add a screenshot of the image at the specified path.
7211	Set SystemInfo.
7212	Select a property.
7213	Select a property as an alias.
7214	Extract validation annotation data.
7215	Extract all annotations for a property.
7216	Find the annotations of the given property.
7217	Get a PropertyDescriptor for the given property.
7218	Lookup object.
7219	Convert a Map to a Java object.
7220	Construct a new instance of T from a Map.
7221	Convert a Map of Value objects into an object of the given class.
7222	Convert an object to a Map.
7223	Convert an object to a Map.
7224	Get the values from the annotation.
7225	Create a validator.
7226	This method will look up the validators in the validationMetaData list and then initialize them with the
7227	Lookup validator in object registry.
7228	Apply validation meta - data properties to validator.
7229	If the property is blank remove it.
7230	Tick the timer.
7231	Returns the number of elements in the cache.
7232	Hash the given object.
7233	Default options for the file.
7234	Open the database.
7235	Put all the given values in the given map.
7236	Remove all of the given keys.
7237	Search for the keys in the database starting at the given startKey.
7238	Load all keys by keys.
7239	Close the database.
7240	Reduces the array by the sum of the values of the object.
7241	Performs a reduce operation on the array.
7242	Calculates the variance of a range of values.
7243	Mean of the values in the long array.
7244	Invoke a method on an object with an argument list.
7245	Reduce array by using ReduceBy
7246	Returns a string representation of the given timestamp.
7247	Checks if the object matches the criteria.
7248	Creates a Criterion that tests if the field value is not in the given values.
7249	Create a Criteria from a List.
7250	Creates a Criteria object from a JSON string.
7251	Adds an array of doubles to the end of the array.
7252	Returns the maximum element in the array.
7253	Returns a slice of the first count elements of the list.
7254	Returns the last element of the list.
7255	Returns the last count elements of the list.
7256	Returns a list of the most count elements from the list.
7257	Returns the minimum element in the list.
7258	Returns the minimum element in the array.
7259	Process array of maps.
7260	Handle collection of maps.
7261	Create an object from a map.
7262	Get the value associated with the given key.
7263	Create a toolTip string from the given resource bundle.
7264	Generates a label value from a field name.
7265	Adds a 2 - byte Nibble to this CharSequence.
7266	Process read queue.
7267	Process the write queue.
7268	Start the data store process.
7269	Returns the string at the specified index and character.
7270	Slices a string.
7271	Checks if the first character in chars is in str.
7272	Add the specified character to the end of the string.
7273	Add the given objects to the end of the string.
7274	Compact a string.
7275	Split a string into an array of strings.
7276	Split by space
7277	Splits the given string by pipes.
7278	Convert a char array of char array to a string array.
7279	Converts a String to a camelCased String.
7280	Checks if the string is inside of the string.
7281	Changes the case of the input string.
7282	count is a Number
7283	Creates a new Sort object with the given sorts.
7284	Sorts the list according to the comparator.
7285	Returns a comparator for this field.
7286	Returns the comparators for the child sorts.
7287	Checks if the given value is in the given map.
7288	Checks if the int value is equal to the int value.
7289	Checks that two int arrays are equal.
7290	sum the values in the range [ start end )
7291	Round up to power of 2.
7292	Sort the list according to the sortBy field.
7293	Sorts the list according to the given sortBy and fields.
7294	Set the field value from the map.
7295	Converts an object to a List.
7296	Create the SQL to load all version data.
7297	A convenience method for creating a deep copy of a list.
7298	Checks if the given object has a string field with the given name.
7299	Checks if a class has a string field with the given name.
7300	Checks if a class has a field with the given name.
7301	Returns the first comparable or primitive field from the given class.
7302	Get the sortable field from the given value.
7303	Compares two CacheEntry objects.
7304	Compare this CacheEntry with another CacheEntry.
7305	Sort the list according to the given sorts.
7306	Sorts the given list according to the given sortBy.
7307	Sorts the entries of a Map.
7308	Sorts the values of a Map.
7309	Sorts the keys of a Map.
7310	Sorts an array of objects.
7311	Returns a comparator that compares two objects using the given field.
7312	Returns a comparator that can be used to sort objects in ascending order.
7313	Get the value associated with the given key.
7314	Get the cached value for the given key.
7315	Returns the current order.
7316	If the cache is too large evict the entries.
7317	Dynamically initialize the range based on the type of the value.
7318	Allocate a buffer of the specified size.
7319	Determines if we should exit the processing loop.
7320	Manages the input writer channel.
7321	If the writer is not flushed then flush it.
7322	Start monitoring the thread pool.
7323	Start monitoring.
7324	Get the object associated with the given key.
7325	This method is called from the main query plan. It is called by the query builder.
7326	Filter the group.
7327	Tick the timer.
7328	Flush the output stream to disk.
7329	Closes the output stream.
7330	Write the next buffer to the output stream.
7331	Write to the output stream.
7332	Initialize the output stream.
7333	Put all the keys and values in the map.
7334	Converts the given key to a byte array.
7335	Read the validation meta data for the given property.
7336	Extract the ValidatorMetaData from a string.
7337	Read the validator meta - data.
7338	Extract the validator meta - data from the annotation.
7339	Extract the validator meta data from the annotations.
7340	Convert annotation data to validator meta data.
7341	Splits the string into an array of strings.
7342	Splits the string by white space.
7343	Splits a string by delimiters.
7344	Removes characters from a string.
7345	Splits a string into an array of strings.
7346	Parse a double value.
7347	Parse a number from a String
7348	Parse a long value.
7349	Get a property by path.
7350	Get the fields from an object.
7351	Get the type of the property.
7352	Injects value into object property.
7353	Set a property value.
7354	Get a collection property.
7355	Get a property of an object.
7356	Gets the int value of one or more properties.
7357	Initialize the message keys.
7358	Create a message.
7359	Create a validation error message.
7360	Converts the list of keys to the values.
7361	Get the subject.
7362	Parse the JSON input text.
7363	Sends the given request to the client.
7364	Delete a database.
7365	Create a database.
7366	Retrieves a list of UUIDs.
7367	List all resources in the given path.
7368	Triggers replication.
7369	Query the database and return the first row of the result as an object of the given class
7370	Sets the view descending.
7371	Synchronize all documents in the design database with the database.
7372	Gets a design document from the database.
7373	Get all from Desk design docs.
7374	Get a DesignDocument from Desk.
7375	Save the replicator document.
7376	Find a replicator document.
7377	Find all documents in the database.
7378	Remove the document.
7379	Find an object of the given class.
7380	Find documents by jsonQuery.
7381	Checks if the document with the given id exists in the database.
7382	Bulk insert multiple objects into the database.
7383	Performs a PUT request to the given URI.
7384	Execute a PUT request.
7385	Execute a POST request.
7386	Execute a DELETE request.
7387	Validate the response.
7388	Sets the entity to be sent to the client.
7389	Adds an attachment to the message.
7390	Get changes.
7391	Reads next row.
7392	Convert the given Money to the equivalent String.
7393	Release all locks.
7394	Writes the given data to the given ServletOutputStream.
7395	Adds tags to the given metric.
7396	This method will verify that the temp tables are created.
7397	Get the project id for a namespace.
7398	Checks if the request is a GET or a POST request.
7399	Sends the authentication request.
7400	Get the HTTP verb.
7401	Generate a subjectAccessReview string.
7402	Called when a request is received.
7403	Called when a client request fails.
7404	Initialize the configuration.
7405	Find all scheduled jobs.
7406	Converts a bucket into a list of bucket points.
7407	End the exchange with the given status code and reason phrase.
7408	This method is called when the table is created.
7409	Construct a new Buckets object from start end and step.
7410	Send message.
7411	send one way message
7412	Send a message delay level.
7413	Scan the keys and values.
7414	Sets the value of a property.
7415	Adds a file to the zip archive.
7416	Replace the text in the zip file.
7417	Build the zip file.
7418	Generates metrics for the given component and product.
7419	Fetch content.
7420	Downloads the order content from the server.
7421	Upload the given zip stream as a stylesheet.
7422	Generates a file and returns a FileGenerationMetrics object.
7423	Creates a new directory in the given parent directory.
7424	Add a child object to the parent.
7425	Register a model adaptor.
7426	Register a renderer for a given type.
7427	Prepare template.
7428	Add a domain object to the assembler.
7429	Sets a property.
7430	Adds a child object to the specified collection.
7431	Creates a Supplier that will create a new File object from the given directory.
7432	Copy the contents of the input stream to the output stream.
7433	Parse the given file.
7434	Parse the XML document read from the given reader.
7435	Stream of elements in given parent element.
7436	Returns a stream of nodes in the given parent element.
7437	Get the first child element of the given parent element.
7438	Returns a stream of named elements in the given parent element.
7439	Validate the XML document against the XML Schema.
7440	Entry point for the build.
7441	Add content to the builder.
7442	Read content from a resource.
7443	Process a single entry in the zip file.
7444	URL - encode a string to be used in a QS query.
7445	Set the signature.
7446	Remove all whitespace characters from the input array.
7447	Sign the request.
7448	Set the data in the recorder.
7449	Complete a multi - part upload.
7450	Favorite notifications.
7451	Add a new entry state to the notification.
7452	Returns true if the timer has expired.
7453	Get a notification by id
7454	Get the informative addresseees for a given notification id
7455	Get a specific addresse.
7456	Get all events for a notification
7457	Get an event
7458	Get the REST URL for a single notification.
7459	Gets the entry with the given entryId.
7460	Get the authentication token.
7461	Returns the number of notifications in this collection.
7462	Add new categories to the current list.
7463	Fetch SSP notifications from SSP.
7464	Notification error.
7465	Map the notification response.
7466	Map a row to a notification entry.
7467	Attaches actions to the NotificationEntry.
7468	Normalizes a link to a URL.
7469	Gets the NotificationCategory from the PortletRequest.
7470	Gets the notification source from the PortletRequest.
7471	Invoke the notification.
7472	Read the notification from a file.
7473	Get the student id from the user s user info.
7474	Extract the user id from the response.
7475	Hide or unhide the notification.
7476	Returns a map of all the attributes of this notification.
7477	Normalizes the given point.
7478	Returns true if the three boxes are contained within the other box.
7479	Computes the closest point to the specified point.
7480	Computes the sign of the point.
7481	Sets the translation from a Se3_F64
7482	Specifies the rotation and rotation of the camera.
7483	Converts a rectangle into a polygon.
7484	Converts a 4 - sided polygon into a quadrilateral.
7485	Computes the bounding box of the quadrilateral and fills it with the bounding box
7486	Computes the bounding rectangle of the polygon.
7487	Computes the center of the quadrilateral.
7488	Computes the average of the vertices in the polygon.
7489	Computes the convex hull of the points.
7490	Removes vertices that are almost parallel to the given polygon.
7491	Computes the average of the error between the two points on the line segment.
7492	Computes the area between two polygons.
7493	Checks if the quadrilateral contains the given point.
7494	Checks if the triangle is inside the triangle.
7495	Computes the intersection of two lines.
7496	Computes the intersection of two line segments.
7497	Computes the intersection between two lines.
7498	Computes the intersection between two line segments.
7499	Computes the intersection between two polygons.
7500	Returns true if the ellipse contains the specified point.
7501	Computes the area of the intersection of two rectangles.
7502	Get the element at the specified index.
7503	Converts a rotation matrix into a quaternion.
7504	Rotates the rotation matrix by the given angle.
7505	Sets the rotation matrix to the x axis.
7506	Rotates the Y axis by the given angle.
7507	Rotates the rotation matrix by the angle ang.
7508	Sets the rotation matrix to a rotation matrix.
7509	Euler rotation matrix.
7510	Rotate around axis axis
7511	Sets the angle of the slope.
7512	Computes the twist coordinate.
7513	Sets the rotation and magnitude of the translation.
7514	Interpolate the camera in the plane.
7515	Solve the point system using SVD.
7516	Solves a point on the plane.
7517	Returns the side length of the vertex at index index.
7518	Checks if the given point is inside the image.
7519	Converts the given ConicGeneral_F64 into a real image.
7520	Converts the source ConicGeneral_F64 into a 3x3 matrix.
7521	Converts a ConicGeneral_F64 into a ParabolaGeneral_F64
7522	Converts Parabola General Parameters into Conic General Parameters
7523	Divide the given point by v and stores the result in the given GeoTuple.
7524	Converts a 3x3 vector into a 3x3 matrix.
7525	Converts the input into a 3D tuple.
7526	Sets the parameter vector.
7527	Distance between two angles.
7528	Checks if the line segment intersects with the plane.
7529	Checks if the plane is contained within the plane plane.
7530	Computes whether the line segment intersects with the given sphere.
7531	Interpolates a and b into a image.
7532	Extract the quaternion from the quaternion.
7533	Computes the hull from the input points.
7534	Sets the camera motion to no motion.
7535	Converts the homogeneous 3D image into a homogeneous 3D image.
7536	Converts the homogeneous ellipsoid to homogeneous coordinates.
7537	Creates a rotation rotation and rotation matrix.
7538	Checks if two Se3_F64 objects are identical.
7539	Converts a point on the surface of a point on a unit sphere into a unit vector.
7540	Computes a circle centered around x0 and y1.
7541	Computes the squared radius of a circle.
7542	Computes the closest point on the line segment to the line segment.
7543	Finds the point on the line closest to the given point.
7544	Finds the closest point origin on the plane.
7545	Returns the point on the line closest to the given point.
7546	Finds the closest point on the triangle defined by the three vertices.
7547	Transform the image from the se to the orig point.
7548	Transforms a set of points into a set of points.
7549	Returns true if the quadrilateral is equal to the given quadrilater
7550	Calculates the angle between two lines.
7551	Converts a polar source into a parametric 2D.
7552	Converts a source line into a 2D - like object.
7553	Converts a source segment into a parametric 2D image.
7554	Converts the source segment into a line general image.
7555	Converts from A to B.
7556	Converts a point into a line parametric model.
7557	Converts a source line into a polar object.
7558	Converts a source parameterized variant into a 2D line general section.
7559	Converts a line into a parametric 2D image.
7560	Converts a plane normal into a general plane.
7561	Converts a plane normal into a plane normal.
7562	Converts a plane normal to a plane on the world.
7563	Converts a point into a 3D plane.
7564	Converts a plane into a world plane.
7565	Compares two matrices.
7566	Returns a copy of this array.
7567	Returns the square root of the norm of this matrix.
7568	Computes the t - value of the slope of the line.
7569	JDK 1. 2 and later
7570	Compares the parabola with this parabola and compares it with this par
7571	Center the camera in the camera space.
7572	Calculate the acute angle between two lines.
7573	Checks if the point p is infinite Hilbert curve.
7574	Randomly selects points from the center and returns a list of points.
7575	Converts a 4D Half - Half Point into an EulerAngles - equivalent
7576	Subtracts two points.
7577	Test whether two values are identical.
7578	Sets this rectangle to be equal to the given rectangle.
7579	Converts the input ellipsoid into a quadratic quadratic quadratic model.
7580	Computes the point in the frame given the ellipse and the time t.
7581	Computes the angle between the reference frame and the ellipse.
7582	Computes the tangent vector of the given ellipse.
7583	Selects the tangent line.
7584	Get the corner of the image.
7585	Computes the distance between two lines.
7586	Computes the distance between two points.
7587	Computes the distance between the line segment and the point p.
7588	Computes the distance between a plane and a point.
7589	Computes the distance between a cylinder and a point.
7590	Computes the Euclidean distance between two line segments.
7591	Computes the squared distance between two lines relative to A and b.
7592	Computes the Euclidean distance between the quadrilateral and the specified point.
7593	Computes the squared Euclidean distance between the quadrilateral and the specified point.
7594	Computes the Euclidean distance between the polygon and the point p.
7595	Computes the squared Euclidean distance between the polygon and the given point.
7596	The origin vector of the line.
7597	Computes the Elevation distance between the ellipse and the given point.
7598	Computes the 2 - dimensional distance between the ellipse and the given point.
7599	Add a transform to the path.
7600	Computes the closest point on the line segment.
7601	Finds the closest point in the ellipse.
7602	Computes the polynomial curve.
7603	Creates a random vector.
7604	perpendicular canonical transformation
7605	Compares two 3D vectors and returns true if they are identical.
7606	Normalizes the input vector so that it is normalized.
7607	Creates a matrix from the given vector.
7608	Convert a 3D matrix into a 3D vector.
7609	Computes the Euclidean distance between this vector and the given point.
7610	Specifies the ellipse to be used.
7611	Normalizes this vector so that it is normalized.
7612	Computes the triangle distance between two points.
7613	Computes the quadrilateral value of the quadrilateral.
7614	Simple polygon test.
7615	Computes the mean of a set of points.
7616	Order points in CCW direction.
7617	Computes the normal distribution.
7618	Checks if the polygon is convex.
7619	Multiply by a scalar.
7620	Returns the maximum absolute value.
7621	Computes the Euclidean distance between two points.
7622	Computes the squared of the distance between two points.
7623	Randomly selects a plane and returns a list of points.
7624	Randomly selects points from the mean point.
7625	Randomly selects points from the mean and standard deviation.
7626	Computes the mean of the points.
7627	Computes the mean of the points.
7628	Invalidate all the given credentials.
7629	Invalidate all entries that match the given predicate.
7630	Combines the given collections into a single Set.
7631	Get the features of the server. xml file.
7632	Get the server features from the configDropins folder.
7633	Get the features of the server. xml file.
7634	Parse the include node.
7635	Parse feature manager node.
7636	Download features for the given product.
7637	Get the Open Liberty feature set from the given JSON files.
7638	Checks if the features to install are only OpenLiberty features.
7639	Checks if the reference and target contains all elements in the reference.
7640	Get next product version.
7641	Extract the symbolic name from the given jar file.
7642	Get the map - based install kernel jar.
7643	Checks if file1 and file2 are the same.
7644	Extract the version from the file name.
7645	Compares two versions.
7646	Executes the given action on the given install directory.
7647	Checks if the given artifact is a spring - boot - uber jar.
7648	Get a property from the arquillian properties.
7649	Checks if the given file is working in this environment.
7650	Move back to center.
7651	Compares two objects.
7652	Load an integer from a string.
7653	Throw pizza party.
7654	Verify the turtle.
7655	Swap the blank cell with the target cell.
7656	Returns the distance to the goal cell.
7657	Print a formatted string with the given arguments.
7658	Print a formatted string in the given locale.
7659	This method is used to make sure the number of Fish is correct.
7660	Write a variable to the current thread.
7661	Uniformly uniformly selects a random number between a and b.
7662	Uniformly uniformly distributed on a uniform distribution.
7663	Poisson distribution.
7664	Uniformly distributed distributed.
7665	Test program.
7666	Capitalize first letter of the first letter.
7667	UnCapitalizes the first letter of the given string.
7668	Fixes the path.
7669	Convert a CriteriaJoin to a String
7670	Get the token sentence.
7671	This method is called when the client is redirected to the logout page.
7672	Extract the token from the cookieList.
7673	Registers the Guice bindings.
7674	Get all permissions of a role.
7675	Add a Projection and an alias.
7676	Convert JobInfo to JobDetail.
7677	Convert TriggerInfo to TriggerInfo.
7678	Set count interval values.
7679	Set start and end time.
7680	Send mail.
7681	Write buffered data to output stream.
7682	Initialize the scheduler.
7683	Get all fields of the given class sorted by field name.
7684	Get the field map for the given class.
7685	Converts an exception to a response.
7686	Configure the encryptor.
7687	Generate hash of attributes.
7688	Generate a new token string.
7689	Sends a message.
7690	Generate strong password for a user.
7691	Change password of user.
7692	Get a user by username.
7693	Hash password.
7694	Verify that the given accountName strength is a valid email address.
7695	Verify password strength.
7696	Provide the search response.
7697	Commit the current transaction if it is active.
7698	Rollback the current transaction if it is active.
7699	Starts the transaction.
7700	configure field by name
7701	Check if the user is authorized to access the service.
7702	Parse the given object using the given field.
7703	Get the response.
7704	Create a Restriction that only evaluates to true for the given value.
7705	Create a not equals restriction.
7706	Creates a less than restriction.
7707	Gets a less - or - equals - than restriction.
7708	Create a greater than restriction.
7709	Create a greater - or equals - than restriction.
7710	Create a CONTAINS restriction.
7711	Create a Restriction that only contains the given value.
7712	Add a namespace to the representation.
7713	Creates a new ResourceRepresentation of this resource with the given content.
7714	Add a relationship.
7715	Returns a new ResourceRepresentation instance with the given value.
7716	Creates a new resource representation with the given namespace and href.
7717	Checks if the given input can be decoded.
7718	Encodes a substring of a string into a byte array.
7719	Test if two input streams are equal.
7720	Move file from src to dst.
7721	Creates a new file or a directory and sets its last modified time.
7722	Get the base name of a file.
7723	Add padding.
7724	Get the short name of a class.
7725	Returns a set of all super types of the given class.
7726	Verify a password against a hash.
7727	Reads a string from System. in using the specified charset.
7728	Appends a byte to the end of the buffer.
7729	Appends the contents of the byte array to the end of the buffer.
7730	Creates a copy of the given array.
7731	Adds f to this fraction.
7732	Returns a new Fraction that is f - f.
7733	Returns a new Fraction that has n and d multiplied by f.
7734	Returns a new Fraction that is this division by f.
7735	Calculates the maximum of the given long values.
7736	Calculates the minimum of the given values.
7737	Checks if the condition is true.
7738	Fetch content from Meteo
7739	Fetch Sunrise data
7740	Fetch Sunrise data
7741	Find point - level forecasts from now that are at least hoursAhead.
7742	Finds the nearest forecast for the given date.
7743	Fetch content for a forecast
7744	Create a simple forecast for the current day.
7745	Create a Long Term Forecast.
7746	Creates a Location object from a string representation.
7747	Fetch content from Meteo
7748	Create a way symbol name.
7749	Find the Beaufort level for a PointForecast.
7750	Create a new URI object from a string.
7751	Returns true if the current date is within the SUN period.
7752	Returns the point forecast for the given date - time.
7753	Get the best fit period forecast for the requested day.
7754	Fetch content from the Meteo server.
7755	Fetch content from Meteo.
7756	This is the main entry point for the liquibase update.
7757	Invoke a string method.
7758	Acquires a reference to the object.
7759	Get a new referenced object.
7760	Get a new ReferencedObject of the given type.
7761	Get the configuration for the service.
7762	Returns true if the substitutor is enabled.
7763	Create an iterator over the given service and service name.
7764	Get the Decoder from the specified configuration.
7765	Returns a list of all the services of the given interface.
7766	Get a module implementation of the given interface implemented by the given moduleType.
7767	Acquires a stream from the given source.
7768	Returns the size of the data in bytes.
7769	Gets the wrapped data.
7770	Gets the component at the specified index.
7771	Get the prefix of this name.
7772	Returns true if the compiler is colored.
7773	Execute a regular expression.
7774	Cfind loop.
7775	subset sub expression begin and end.
7776	t is a runtime subexpression t is a runtime subexpression t is a runtime subexpression
7777	dissects a cbr - dissect t.
7778	Clone all outgoing arcs from old to to.
7779	Recursively go through the tree t and its children.
7780	Mark the given subre as in use.
7781	NFAFA.
7782	Parse a branch.
7783	Traverse s to s and all outarcs s.
7784	nonword - word - processing
7785	word chrs.
7786	Read a reference number.
7787	brackets are not escaped
7788	scanplain.
7789	Add a new lacon.
7790	one chr c
7791	Do a vec operation.
7792	Get the short color corresponding to the given Unicode code point.
7793	Creates a pseudo - color.
7794	Subrange from from to to.
7795	okcolors nfa nfa.
7796	Set the color chain of an arc.
7797	Unlink a color chain.
7798	Dumps the color descriptors of the color descriptors.
7799	Lexical start token.
7800	prefixes - literal string
7801	Lexical Nesting
7802	Get the color of a codepoint.
7803	Initialize a state set.
7804	Last cold.
7805	Returns UnicodeSet for the given character.
7806	Returns a UnicodeSet instance for the given class.
7807	sorts arcs in the order specified by first and last
7808	Dump the state of this compiler.
7809	Creates a new state.
7810	Move all outgoing arcs from old to newState.
7811	Move all the innermost state from old to newState.
7812	Copy all inchain from old to newState.
7813	Copy all outgoing states from old to newState.
7814	Drops a state.
7815	Free a state.
7816	Create a new Arc from a State from to a State to.
7817	Duplicatetraverse s.
7818	false colors for BOS BOL EOS and EOL.
7819	Debug dump of this state.
7820	Debugging utility to dump a state.
7821	Prints the arcs of the output state s.
7822	Dumps an arc to a string builder.
7823	Dumps the parity Arc a into a string builder.
7824	Optimize the regular expression.
7825	Analyzes the chain of Arc objects.
7826	Combines two arc objects.
7827	Remove all states from the state stack.
7828	Mark the state s as unreachable if it is not in the mark.
7829	Mark s as cancelling s.
7830	fixes empties until there are no more.
7831	Free an arc.
7832	Read the rule parameters from the ruleParametersFile.
7833	Get the rule interpreter plugins.
7834	Get report plugins.
7835	Returns a RuleSelection object that can be used to select the rules.
7836	Executes the CLI.
7837	Gets the error message from the exception.
7838	Gathers standard options.
7839	gatherTasksOptions - gather task options.
7840	Gathers the task names from the given TaskFactory.
7841	Interprets the given command line and applies tasks to it.
7842	Get the command line.
7843	Executes a task.
7844	Read properties from a file or a file on the classpath.
7845	Prints the usage of the program.
7846	Gets the home directory.
7847	Creates a plugin classloader.
7848	Returns the containing ids of the contained cells.
7849	Returns a set of IDs intersecting the given range of coordinates.
7850	Returns the URI for the given target and parameters.
7851	Adds a route to the router.
7852	Returns the number of routes in the chain.
7853	Add a route to the first route in the router stack.
7854	Add a route to the other router.
7855	Adds a route to the last route.
7856	Returns true if any of the matched request tokens are matched by the first and the last matched
7857	Special case for equality.
7858	Get the file name for the store.
7859	Compares two folders.
7860	Compares two entries.
7861	Compare Bookmarks.
7862	Sets the last modified time of the servlet class.
7863	Returns the list of dependent resources.
7864	Find a class by name.
7865	Parse the Authorization header.
7866	Get the instance of the ProtectedFunctionMapper.
7867	Map a function to a class.
7868	Get the mapping for a protected function.
7869	Resolve a function.
7870	Sets the character array.
7871	Resolve a variable.
7872	Parse the tag file or resource specified by inFileName.
7873	Parse a file.
7874	Parse tag file directives.
7875	Parse the file.
7876	Create a JSP compiler.
7877	Get a resource from the context.
7878	Calculates the last modification time of all channels.
7879	basic find class loaders
7880	Checks if the given classloader is a child of this classloader.
7881	Start loading a class.
7882	Read stream header.
7883	Paginates the data set.
7884	Create a MetaKey from a string.
7885	Fill requirements.
7886	Get the TagFile for the given tag.
7887	Parse implicit. tld.
7888	Get checksum.
7889	Get the size of a file.
7890	Validates the channel name.
7891	Seeks to the specified block.
7892	Locate a block from the stream that contains the target position.
7893	Get the list of Maven artifacts for the given channel ID.
7894	Update the state of the current option and the REPS.
7895	Calculate the price of a 1 byte.
7896	Calculate the price of the match.
7897	Calculate the price of a normal match.
7898	Method expectedByte.
7899	Throw an exception if the byte is invalid.
7900	Scan TLDs.
7901	Scan the TLD for the specified resource.
7902	Add a wrapper to the list of wrapper objects.
7903	Returns the parent ClassLoader.
7904	Sets the bytecode for the given name.
7905	Returns the time when the bytecode is birthed.
7906	Save the bytecode for the given class name to the given file.
7907	Check compile.
7908	Initializes the classpath.
7909	Start the background thread.
7910	Stops the current thread.
7911	This method is run in a loop.
7912	Find by name.
7913	Finds a channel instance.
7914	update deploy group cache
7915	List groups.
7916	Copy data from the input stream to the output stream.
7917	Parse the jsp file.
7918	Parse the attributes of the JSP document.
7919	Parse a quoted string.
7920	Add include directives.
7921	Parse the jsp attribute and the jsp body.
7922	Adds an attribute to the element.
7923	Adds a child node to this node.
7924	Returns an iterator over the attributes of the element.
7925	Find all children.
7926	Find children with the given name.
7927	Returns a MavenCoordinates object that is the base of this coordinates.
7928	Find the alias for the given variable name.
7929	Set the thread data and streams.
7930	Unsets the thread s output stream.
7931	Find a stream.
7932	Write optional.
7933	Writes a string value to a StringWriter.
7934	Add element.
7935	Adds an element to the first level of the parent element.
7936	Write the BodyContent to the Writer.
7937	Sets the writer to be used for writing to the response body.
7938	Re - allocates buffer for the given length.
7939	Map EL functions.
7940	Get the same parent state.
7941	Registers a new model provider.
7942	Stream data.
7943	Monitor a job.
7944	Checks if the user is authenticated.
7945	Finishes writing.
7946	Make a Gson object.
7947	Encode for LZMA2.
7948	Returns an unmodifiable Map of MetaKey - > String pairs.
7949	Get the Throwable that caused the page fault.
7950	Checks if the coordinates are checksumed.
7951	Finishes the compressed stream.
7952	Get the exception that occurred during the rendering.
7953	Evaluates an EL expression.
7954	If the OSGi properties are set on the System property the prefix will be prepended to
7955	Checks if the file is an XML file.
7956	Parse tag file directives.
7957	Loads a tag file.
7958	Remove proto type files.
7959	Main method.
7960	Sets the URI root.
7961	Scan files in base directory.
7962	Locate the root directory for the current working directory.
7963	Initialize the system class loader.
7964	Move to next available byte.
7965	Checks if the given string matches the given string.
7966	Checks if the given string s spaces followed by spaces followed by spaces.
7967	Skips characters until the limit string is reached.
7968	Skips characters until it reaches the end of the limit.
7969	Skips the given tag until it reaches a closing tag.
7970	Parse a token.
7971	Pop a file from the stack.
7972	Make this coordinates unclassified.
7973	Filters the list of aspect information by factory id.
7974	Get the required ids for this aspect.
7975	Sets the schema resource prefix.
7976	Set DTD resource prefix.
7977	URL - encode a prefix.
7978	Convert this node to a TreeNode.
7979	Merge errors.
7980	Initialize the binder.
7981	Scan aspect information.
7982	Unqualifies the path.
7983	Invoke the tag plugin.
7984	Get a byte array of the specified size.
7985	Get an int array of the specified size.
7986	Convert a collection of ArtifactResults into an AetherResult.
7987	Get the resource from the context.
7988	Validates this page against the tag library.
7989	Pushes a stream onto the include stack.
7990	Get the encoding of the XML file.
7991	scan XML declaration.
7992	Report a fatal error.
7993	Get the real path to a file.
7994	Get a resource from the resource base.
7995	Returns an InputStream for the specified resource.
7996	Get the paths to the given path.
7997	Log a message and an exception.
7998	Add a filter to the filter list.
7999	Returns the size of the buffer to be kept.
8000	Returns the memory usage of a dictionary.
8001	Set the preset dictionary buffer.
8002	Moves the read window to the end of the buffer.
8003	Fills the sliding window.
8004	Process pending bytes.
8005	Returns the length of the match.
8006	Get the length of the match.
8007	Verify that the matches are the same length as the available matches.
8008	Move the cursor forward.
8009	Recycle this buffer.
8010	Flushes the buffer.
8011	Clears the output buffer.
8012	Flush the response buffer.
8013	Close the response.
8014	Write a string to the stream.
8015	Allocate a CharBuffer.
8016	This method is called when an error occurs.
8017	Make a list of fields from the given meta data.
8018	Generate the Java class.
8019	Compiles the JSP page.
8020	Remove the generated files.
8021	Initialize the JavaCompiler.
8022	Check if the path is a jar in the WEB - INF directory.
8023	Quotes a single character.
8024	Generate the page directives.
8025	Compiles a list of tag handler pools.
8026	Generate the XML prolog.
8027	Generate the common postamble for the class.
8028	Generate the postamble for the page.
8029	Generate the JASPER_CLASS.
8030	Generate the tag handler attributes.
8031	Read properties from the given stream.
8032	Exports the specified channel to the specified stream.
8033	Validate the XML view.
8034	Get the next tag handler.
8035	Parse EL expression.
8036	Select the best match for a property.
8037	Checks if the specified URI is a jsp page.
8038	Prints a comment.
8039	Prints a string in the current line.
8040	Prints a string.
8041	Prints a multi - line string.
8042	Get expression in XML.
8043	Checks that the scope is valid.
8044	Escape XML.
8045	Validate the given expressions.
8046	Get the tag handler class name.
8047	Make a Java package from a path.
8048	Splits a path into an array of strings.
8049	Mangles the given identifier so that it can be used as a Java identifier.
8050	Mangles a single character.
8051	Checks if the given string is a valid Java keyword.
8052	Adds a property to a map.
8053	Returns a modifier string.
8054	Returns a set of metadata entries that are not in the given namespace and key.
8055	Run the task.
8056	Get the basename of a file name.
8057	Put a value into the cache.
8058	Load the value of the key in the database.
8059	Build metrics collection from AggregatedPayload
8060	Resolve a number.
8061	Writes a String to an CodedOutputStream.
8062	Get the TTL for the tenant.
8063	Create the prepared statements.
8064	Log the delayed metrics.
8065	This method is called when a delayed metrics tenant is being sent.
8066	Reads a double or long.
8067	putUnversionedDoubleOrLong - Writes double or long to the stream.
8068	Returns a map of all properties.
8069	Creates a new container.
8070	Schedule eligible slots for rollup.
8071	Clear the slot from running.
8072	Add a listener to an event.
8073	Registers a listener that will be called only once.
8074	Remove an event.
8075	Emit an event with the given arguments.
8076	Get the list of listeners for the given event.
8077	Returns the remote name.
8078	Append a RollupEvent to the rollup stream.
8079	Parse the timestamp part of the file name.
8080	Start the server.
8081	Get the appropriate rollups computation for the given rollups.
8082	Creates a new IOContainer instance from the configuration.
8083	Put a TTL config into the TTL map.
8084	Computes the maximum length of each string in the headers and outputs.
8085	Format the header.
8086	Format the output.
8087	Register metrics for the lock manager.
8088	Sets the name of the thread pool.
8089	Add a metric index to the metrics.
8090	Get the complete metric names.
8091	Get the tokens for the given metric.
8092	Put a statement asynchronously.
8093	Returns a granularity based on the points in the interval specified.
8094	Returns a granularity based on requestedDuration and points.
8095	Manually set the server time.
8096	Get the set of unique hosts.
8097	Get the maximum number of connections per host.
8098	Returns an iterable of MetricColumnFamilies.
8099	Insert the metrics.
8100	Insert metrics.
8101	Get the set of locators that should be used to track the location of the current slot
8102	Get the metric names from elasticsearch.
8103	Get the current and next level of the query.
8104	Start the storage manager.
8105	Stops the file uploader thread.
8106	Returns true if the given locator is currently in the batch layer.
8107	Returns true if the given locator is currently in discovery layer.
8108	Returns true if the given Locator is currently in the token discovery layer.
8109	Is the given locator delayed for the given slot current?
8110	Set the current delayed Locator for the specified slot.
8111	Creates a map of Range objects that can be iterated over.
8112	Returns an iterable of Range objects for the given interval.
8113	Insert all the metrics in the metrics collection.
8114	Insert the metrics into the given column family.
8115	Checks if the metric is delayed.
8116	If the metric is delayed return the bound statement for that metric. Otherwise return null.
8117	Gets the metadata values.
8118	This method is used to instantiate the appropriate serializer for the given type.
8119	Checks if the Content - Type header is valid.
8120	Checks if the Accept header is valid.
8121	Insert Discovery.
8122	Checks if the aggregated metrics are valid.
8123	Check if the download is running.
8124	Create a new instance of Extractor.
8125	Checks if the OS name and version match.
8126	Starts the RABbitMqProcess.
8127	Stops the rabbitmq process.
8128	Creates a default PnSignalingParams instance.
8129	Add ICE servers.
8130	Add ICE servers.
8131	Transmit a message to a user
8132	Transmit all peers
8133	Gets the value of the weitere adresses property.
8134	Gets the value of the userDefinedSimplefield property.
8135	Gets the value of the userDefinedAnyfield property.
8136	Sets the value of the apiSuchfelder property.
8137	Gets the value of the multimediaAnhang property.
8138	Gets the value of the statusVBM property.
8139	Gets the value of the status field.
8140	Gets the value of the statusHP property.
8141	Gets the value of the importmodus property.
8142	Gets the value of the adressdruck property.
8143	Gets the value of the waehrung property.
8144	Gets the value of the bodenbelag property.
8145	Sets the value of the region property.
8146	Sets the value of the area property.
8147	Sets the value of the address property.
8148	Sets the value of the description property.
8149	Sets the value of the rentCollectionPeriod property.
8150	Sets the value of the furnished property.
8151	Sets the value of the phone1 property.
8152	Sets the value of the phone2 property.
8153	Sets the value of the contactName property.
8154	Sets the value of the phoneInfo property.
8155	Sets the value of the mainEmail property.
8156	Sets the value of the ccEmail property.
8157	Sets the value of the externalId property.
8158	Sets the value of the agentId property.
8159	Sets the value of the epart property.
8160	Sets the value of the jahrgang property.
8161	Sets the value of the gebaeudeart property.
8162	Sets the value of bueroTyp property.
8163	Checks if the given value is a number.
8164	Sets the value of the gebiete property.
8165	Sets the value of the gruppe property.
8166	Sets the value of the agent property.
8167	Gets the value of the property property.
8168	Sets the value of the stand property.
8169	Gets the value of the userDefinedExtend property.
8170	Sets the value of the zeiteinheit property.
8171	Gets the value of the zimmer property.
8172	Gets the value of the haus property.
8173	Gets the value of the bueroPraxen property.
8174	Gets the value of the gastgewerbe property.
8175	Gets the value of the landUndForstwirtschaft property.
8176	Gets the value of the sonstige property.
8177	Gets the value of the zinshausRenditeobjekt property.
8178	Gets the value of the terrain property.
8179	Sets the value of the umfang property.
8180	Sets the value of the wohnungtyp property.
8181	Get the ISO 2 code for the given country.
8182	Returns the ISO 2 code from an ISO 3166 - 1 code.
8183	Get the ISO 3166 - 1 country code.
8184	Returns the ISO 3166 - 1 country code from ISO 2166 - 2 country code.
8185	Get the country name.
8186	Translate the given country to the given language.
8187	Gets the value of the anbieter property.
8188	Sets the value of the category property.
8189	Gets the value of the pdf property.
8190	Sets the value of the aktionart property.
8191	Sets the value of the realestateitems property.
8192	Sets the value of the pacht property.
8193	Downgrade the given document to the previous version.
8194	Upgrades the given document to the previous version.
8195	Gets the value of the content property.
8196	Returns the field names.
8197	Sets the value of the blick property.
8198	Sets the value of the pauschalmiete property.
8199	Sets the value of the monatsmiete property.
8200	Gets the value of the parkplatz property.
8201	Sets the value of the lastenaufzug property.
8202	Sets the value of the zustandArt property.
8203	Gets the value of the feld property.
8204	Log a warning message if the event is fatal or if the event is a warning.
8205	Dumps the record to a writer.
8206	Get the value at the given position.
8207	Print the record in a row.
8208	Sets the value at the given position.
8209	Sets the value of the ctype property.
8210	Sets the value of the haustyp property.
8211	Gets the value of the energiepass property.
8212	Sets the value of the keller property.
8213	Sets the value of the grundstTyp property.
8214	Sets the value of the geschlAttr property.
8215	Sets the value of the hallenTyp property.
8216	Gets the value of the wiederholungstermin property.
8217	Gets the value of the teilungsversteigerung property.
8218	Upgrades the given document to the previous version.
8219	Gets the value of the bevorzugt property.
8220	Gets the value of the wunsch property.
8221	Sets the value of the art property.
8222	Sets the value of the modus property.
8223	Gets the value of the emailSonstige property.
8224	Gets the value of the telSonstige property.
8225	Sets the value of the handelTyp property.
8226	Downgrade the given document to the previous version.
8227	Sets the value of the apiSuchfeld1 property.
8228	Sets the value of the apiSuchfeld2 property.
8229	Sets the value of the apiSuchfeld3 property.
8230	Gets the value of the row property.
8231	Sets the value of the distanzZuSport property.
8232	Gets the value of the anhang property.
8233	Gets the value of the objektKategorie2 property.
8234	Gets the value of the objektzustand property.
8235	Gets the value of the hausKategorie property.
8236	Gets the value of the ausstattungsqualitaet property.
8237	Gets the value of the vermarktungsart property.
8238	Gets the value of the interessent property.
8239	Sets the value of the wert property.
8240	Sets the value of the ackerland property.
8241	Sets the value of the bauerwartungsland property.
8242	Sets the value of the bootsstaende property.
8243	Sets the buero property.
8244	Sets the value of the camping property.
8245	Sets the value of the doppelhaus property.
8246	Sets the einfamilienhaus property.
8247	Sets the value of the einzelhandelGross property.
8248	Sets the value of the einzelhandelKlein property.
8249	Sets the value of the garagen property.
8250	Sets the value of the garten property.
8251	Sets the value of the gastronomie property.
8252	Sets the value of the gewerbe property.
8253	Sets the value of the hotel property.
8254	Sets the value of the industrie property.
8255	Sets the value of the keineBebauung property.
8256	Sets the value of the kleingewerbe property.
8257	Sets the value of the lager property.
8258	Sets the value of the mehrfamilienhaus property.
8259	Sets the value of the obstpflanzung property.
8260	Sets the value of the parkhaus property.
8261	Sets the value of the produktion property.
8262	Sets the value of the reihenhaus property.
8263	Sets the value of the stellplaetze property.
8264	Sets the value of the villa property.
8265	Sets the wald property.
8266	Sets the value of the anbieter property.
8267	Gets the value of the wohnung property.
8268	Gets the value of the grundstueck property.
8269	Gets the value of the einzelhandel property.
8270	Gets the value of the hallenLagerProd property.
8271	Gets the value of the parken property.
8272	Gets the value of the freizeitimmobilieGewerblich
8273	Gets the value of the objektartZusatz property.
8274	Gets the value of the stellplatzart property.
8275	Sets the value of the maxDauer property.
8276	Gets the value of the feature property.
8277	Sets the value of the zimmertyp property.
8278	Upgrades the given document to the previous version of the document.
8279	Sets the value of the keineAngabe property.
8280	Sets the value of the erdwerme property.
8281	Sets the value of the solarheizung property.
8282	Sets the value of the pelletheizung property.
8283	Sets the value of gas property.
8284	Sets the value of the oel property.
8285	Sets the value of the fernwaerme property.
8286	Sets the value of the strom property.
8287	Sets the value of the kohle property.
8288	Generate a random string of the given length.
8289	Generate a random string of the given length.
8290	Generate a random string of the given length.
8291	Gets the value of the wohnung_kategorie property.
8292	Sets the value of the benutzer property.
8293	Sets the value of the objekte property.
8294	Gets the value of the feed property.
8295	Sets the value of the moeb property.
8296	Gets the value of the serviceleistungen property.
8297	Sets the value of the subAdministrativeArea property.
8298	Sets the value of the city property.
8299	Sets the value of the locality property.
8300	Downgrade the given document to the previous version.
8301	Upgrade the given document to the previous version of the document.
8302	Sets the value of the landTyp property.
8303	Gets the value of the field property.
8304	Upgrades the given document to the previous version of the document.
8305	Gets the value of the ad property.
8306	Sets the value of the gastgewTyp property.
8307	Sets the value of the platzart property.
8308	Gets the value of the datenVerkabelungsTyp property.
8309	Gets the value of the klimaanlage property.
8310	Gets the value of the image property.
8311	Sets the value of the priceType property.
8312	Sets the value of the newDevelopmentAvailability property.
8313	Sets the value of the directions property.
8314	Sets the value of the co2Rating property.
8315	Sets the value of the energyRating property.
8316	Sets the value of the viewingDetails property.
8317	Sets the value of the propertyStatus property.
8318	Sets the value of the pictures property.
8319	Sets the value of the bebaubarAttr property.
8320	Upgrades the given document to the previous version.
8321	Sets the value of the parkenTyp property.
8322	Sets the value of the alterAttr property.
8323	Sets the value of the freizeitTyp property.
8324	Sets the value of the telefonart property.
8325	Sets the value of the emailart property.
8326	Sets the value of the overseasSales property.
8327	Sets the value of the overseasRental property.
8328	Create a user defined simplefield.
8329	Gets the value of the fehler property.
8330	Sets the value of the erbpacht property.
8331	Gets the value of the stpSonstige property.
8332	Gets the value of the valuelist property.
8333	Sets the value of the minDauer property.
8334	Sets the value of the zinsTyp property.
8335	Gets the value of the photo property.
8336	Sets the value of the metadata property.
8337	Sets the value of the projects property.
8338	Sets the value of the properties property.
8339	Downgrades the given document to the previous version.
8340	Upgrade KyeroDocument from previous version.
8341	Gets the value of the immobilie property.
8342	Gets the value of the objekt property.
8343	Gets the value of the fehlerliste property.
8344	Gets the value of the status property.
8345	Sets the value of the sonstigeTyp property.
8346	Sets the value of the distanzZu property.
8347	Gets the value of the distanzen property.
8348	Gets the value of the distanzenSport property.
8349	Checks if the exception is compatible with the throws clause.
8350	Sets the namespace bindings.
8351	Binds a prefix to a namespace URI.
8352	Remove a binding.
8353	Checks if the given string has a opening tag.
8354	Consumes the tokens from the given line.
8355	Consumes a line.
8356	Returns the index of the token in the line.
8357	Initialize logging.
8358	Start a prefix mapping.
8359	Adds an iterator to the composite iterator.
8360	Adds an option to the command.
8361	Add a string option.
8362	Add an integer option.
8363	Add a long option.
8364	Add a double option.
8365	Add a boolean option.
8366	Parse the command line arguments.
8367	Create a new instance of the given class.
8368	This method is called after access.
8369	Sets the target object.
8370	Prepares the constructor.
8371	Find a matching method for the target class.
8372	Convert an unsigned integer into a string.
8373	Serializes an object to a byte array.
8374	Deserializes a byte array into an object.
8375	Get the first child element with the given name.
8376	Get the child element value by tag name.
8377	Get the child elements of an element.
8378	Checks if the node s name matches the desired name.
8379	Checks if the node s name matches the desired names.
8380	Set the size of a String.
8381	Add a listener to the internal map.
8382	Add entry to trackedEntries.
8383	Keep monitoring thread alive if there are no more entries left to track.
8384	Calculates the mobile city for the given mobile number.
8385	Start a prefix mapping.
8386	End prefix mapping.
8387	Add a callback to be called when the future completes.
8388	Parse the jar file and return a tree of unique children.
8389	get text color of item
8390	Set the values of the item.
8391	Get the selected color.
8392	Sets the text size.
8393	Get the x position in the range 0 - 1.
8394	Get the intro text from the classpath
8395	Get the keywords in the test library.
8396	Get the arguments for the specified keyword.
8397	Get the documentation for a keyword.
8398	Main method that is run by the server.
8399	Stop the remote server.
8400	Starts the robot framework remote server.
8401	Converts properties from a file to a JSON string.
8402	Converts properties from a file to a JSON string.
8403	Converts the input stream to JSON.
8404	Converts properties to JSON.
8405	Converts a map of properties to a JSON string.
8406	Converts a Map of properties into a JSON string.
8407	Converts a Map of properties into a String.
8408	Converts properties to JSON.
8409	Get the radius of the shadow.
8410	Creates a builder that can be used to build OCSP.
8411	Find the intermediate certificate.
8412	Execute the Mojo.
8413	Read markdown files from the input directory.
8414	Substitute variables in template.
8415	Get the title from the raw list.
8416	Add the title to the HTML file.
8417	Replace variables in the content.
8418	Update relative paths in html includes.
8419	Copies files from one directory to another.
8420	Check the path.
8421	Wrap the child view with a small view.
8422	Fade up the overlap view.
8423	Fade down the view.
8424	calculate the percentage of the given width
8425	Overlap views.
8426	Create an intent to launch an activity.
8427	Launches the activity.
8428	Get TodoList. Lists all todos of a given type.
8429	Get FactSheet List of FactSheet
8430	Download file from response.
8431	Build a HTTP client.
8432	Create an AccessControlEntity
8433	Update DataModel Update response
8434	Create full export
8435	Get exports for a user
8436	Set the host to use for token provider.
8437	Sets the client ID and secret key.
8438	Process a GraphQL request as a multipart request
8439	Get bookmark list.
8440	Adds the given GraphPermissions to the given Graph.
8441	Write the given GraphPermissions object to the GraphServer.
8442	Add rulesets to the MarkLogicDatasetGraph.
8443	Close the connection.
8444	Execute a select query.
8445	Create a MarkLogic Dataset Graph.
8446	Limit the number of threads per process.
8447	Resize the image.
8448	Rotate the object.
8449	Set the gravity value.
8450	Remove the + profile argument.
8451	Text font.
8452	Add a source image.
8453	Add an image to the command.
8454	Parse the arguments.
8455	Prints the usage of the given object.
8456	Extract the TimeUnit from a string.
8457	Parse the target object and its properties.
8458	Executes the slide with the specified URL.
8459	Executes the slide with the given file.
8460	Interprets the PPTX file.
8461	Sorts the list of rectangles by their size.
8462	Renders the template using the template parameters.
8463	Get the XML file for a particular slide.
8464	Check if the mouse event is within the screen region.
8465	Selects elements that overlap with the specified element.
8466	Execute an outbound operation on the queue.
8467	This method is called by the message processor. It is called by the message processor.
8468	Find a file with the given name and options.
8469	Create a temp directory.
8470	Returns a LogValueMap with the given key and value.
8471	Log a message at level TRACE.
8472	Log a trace message.
8473	Log a debug message.
8474	Log a debug message.
8475	Log a message with level INFO.
8476	Log a message with a given event and a given message.
8477	Record a info event with two data values.
8478	Log a warning message.
8479	Log a warning.
8480	Log a formatted string with a level of ERROR.
8481	Log an error.
8482	Add the line and method to the target log builder.
8483	Start Steno wrapper.
8484	Writes key - value pairs to JSON.
8485	Serializes a Throwable to JSON.
8486	Converts this object to a log value.
8487	Get the caller data.
8488	Encode a value to a StringBuilder.
8489	Create a database.
8490	Check if the arrayPosition is mapped to a value.
8491	Parse cell save attribute.
8492	Save the data object in the context.
8493	Refreshes the given row.
8494	Parse save attribute string.
8495	Get the string value of the hidden save objects cell.
8496	Get the save attribute from the saveAttrs string.
8497	Sets the value of the hidden save objects column.
8498	Set save attributes for all rows in the sheet.
8499	Set the save attributes for a row.
8500	Prepare the context and attributes for a cell.
8501	Format number.
8502	Put shift attributes.
8503	Set the Workbook to use.
8504	Get the workbook wrapper.
8505	Get the formula evaluator.
8506	Recalculates the maximum column counts for the worksheet.
8507	Load a workbook from the given input stream.
8508	Load a web sheet.
8509	Load a worksheet by tab name.
8510	Export the file.
8511	Save the current page.
8512	Process the submit.
8513	Populate the given component with the default cell attributes.
8514	Get the current sheet configuration.
8515	Reads the serialized object from the stream.
8516	Get the locale for the given component.
8517	Get picture from the session.
8518	Returns the cell helper.
8519	Get the PicturesHelper.
8520	Returns the validation handler.
8521	Get the ChartHelper.
8522	Convert a list of ptgs to a shared formulas.
8523	Convert a ptg to a list of ptgs.
8524	converts ptg for watch list.
8525	Create a Ptg object.
8526	Returns a list of rows for the current row.
8527	Assemble a list of rows from the current mapping.
8528	Fix up RefRelativeRowOneToOne.
8529	Build a row for the Ref3D Ptg base.
8530	Builds a dynamic row for the area PTG base.
8531	Get the bgcolor.
8532	Get the color from the shape properties.
8533	Finds the automatic fill color.
8534	Get the XColor from a CTSchemeColor.
8535	Get the XColor from the RGB color.
8536	Returns an XColor object with automatic fill.
8537	Converts an XSSF color to a CLR color.
8538	Get the triplet from an XSSF color.
8539	Get the background color from a cell.
8540	Find the component name from the component s class.
8541	Populates the input attributes of the given component with the values of the input attributes.
8542	Match a method on an object.
8543	Set a property on an object.
8544	Gets the value of the specified property of the specified object.
8545	Sets the control attributes of a cell.
8546	Find the validate attributes for a cell.
8547	Setup faces cell pictures and charts.
8548	Set the faces cell chart style.
8549	Set picture style for faces cell.
8550	Initialize the charts map.
8551	Get the title of the chart.
8552	Sets the style for a series of a chart.
8553	Create a chart with the given chartData.
8554	Sets the bar style for the chart.
8555	Initializes the charts map.
8556	Get the chart id from the parent of the chart.
8557	Initialize anchors map.
8558	Generate a single chart for a given chartId.
8559	Transforms a collection expression to a collection object
8560	Gets the hidden full name from a row.
8561	Rebuilds the upper - level formula for the given action.
8562	setup upper level formula for a cell.
8563	only shift when there s watchlist exist.
8564	Gathers rows mapping by full name.
8565	Change index number in shift map.
8566	Change upper level final length.
8567	Change index number in hidden column.
8568	Sets the given full name in the hidden column.
8569	Get original row number in hidden column.
8570	Sets row number in hidden column.
8571	find parent rows mapping from shift map.
8572	find child rows mapping from shift map
8573	Finds an item in a collection.
8574	Build a range of ranges that are in source config range.
8575	Checks if the row is a static row.
8576	Checks if the row is a static row reference.
8577	Replace expression with cell value.
8578	Returns a map of cell indexes to the merged region.
8579	Returns a list of cells in the first merged region.
8580	Add the cell range address to the list of skip cells.
8581	Build sheet comment from TieCommandAlias.
8582	Build cell comment from TieCommandAlias.
8583	Build the configuration for the worksheet.
8584	Get the sheet configuration.
8585	Build form command from sheet configuration.
8586	Verifies that the last cell in the sheet is a blank cell.
8587	build the sheet.
8588	Check if the last row is blank. If it s blank remove it.
8589	Build a list of configuration commands from the comments in the sheet.
8590	Set the parent for a child command.
8591	Checks if the list has the command of type COMMAND_EACH.
8592	Match command to sheet config form.
8593	Copy template for TieCommands.
8594	Builds a list of ConfigCommand objects.
8595	Process method line.
8596	Process a command line.
8597	Move the comment to the map.
8598	Create a ConfigCommand object.
8599	Builds a map of attribute names to their values.
8600	Get the sheet configuration from the form command.
8601	Set the footer of the sheet configuration.
8602	Sets the body of the sheet configuration.
8603	Set the header of the sheet configuration.
8604	Delete a row.
8605	Remove ranges from shiftMap.
8606	Find remove full name list.
8607	Get EachCommand from varparts name.
8608	Insert an empty object in the last collection.
8609	Delete the object from the data context.
8610	Prepare collection data context.
8611	Indexes all the commands in the source config range.
8612	Check if the row allows addition.
8613	Insert each template in sourceConfigRange.
8614	Evaluates the given string value and creates a TieCell.
8615	Evaluates the user formula.
8616	Check if the string is a user formula.
8617	Create a comment for a cell.
8618	Evaluates a boolean expression.
8619	Remove rows from the sheet.
8620	Remove a single row from a sheet.
8621	Remove cached cells for a row.
8622	Remove rows from the body.
8623	Load the picture data from the current page.
8624	Load the chart.
8625	Assemble a new value from the given value.
8626	Get the cell value with the given formula evaluator and data formatter.
8627	Get the cell value without the cell format.
8628	Get the string value of a cell.
8629	Get the string representation of a cell.
8630	Set cell value.
8631	Sets the string value of a cell.
8632	Sets the boolean value of a cell.
8633	Sets the date value of a cell.
8634	Sets the cell value as numeric.
8635	Copy rows from source sheet to destination sheet.
8636	Copy a single row from source sheet to dest sheet.
8637	Copy a cell from source cell to dest cell.
8638	Copy the cell value from the source cell to the new cell.
8639	Copy the style of a cell from sourceCell to newCell.
8640	Clone a comment from the source cell to the new cell.
8641	Creates a comment anchor.
8642	Create or insert a comment on a cell.
8643	Match comment settings.
8644	Get the vmlDrawing from a cell.
8645	Get the shape of the comment in the source cell.
8646	Get the style of the source cell.
8647	Converts a cell to a FacesCell.
8648	Get the row and column indices from the attributes of the given UIComponent.
8649	Get the number of initial rows from the configuration.
8650	Get a FacesRow from the body row.
8651	Get a FacesCell from a BodyRow.
8652	Get Poi cell from sheet.
8653	Get the Skey from a POI cell.
8654	Get or add a TieCell in the HashMap. If the HashMap already contains a T
8655	Get the current data context name.
8656	Evaluates the expression.
8657	Evaluates the JEXPR.
8658	Serialize this object.
8659	Remove a row from the table.
8660	Merge the rows in the add map.
8661	Recover all rows in the table.
8662	Get the chart type.
8663	Converts a style string to a BasicStroke.
8664	Initialize ChartData from XSSFChart
8665	Set up chart data.
8666	Initializes the anchors map for the chart.
8667	Initialize anchors map for a sheet.
8668	Get the chart id associated with the given anchor.
8669	Get the chart id from the child nodes attributes.
8670	build each object in the collection
8671	Save POI value to context.
8672	Recalculate the formula.
8673	Get the Poi cell with row and column from a tab.
8674	Gets the FacesCell with the given row and column from the current page.
8675	Restore collection data in context.
8676	Get the last collection.
8677	Check if the rest of the data context is needed to restore the data.
8678	Start restore data context.
8679	Shifts the row reference.
8680	Set the first row reference.
8681	Set the last row + reference and optionally set the last row + reference address.
8682	Builds all cells for a static row.
8683	Builds a single cell.
8684	Reads the serialized object from the stream.
8685	build the category list.
8686	Builds the series list.
8687	Builds a chart series in the form of a list of cells.
8688	Get the color list from the DPT cell value.
8689	Get the DPT from the list with the given index.
8690	Set the command index map.
8691	Get the picture map from the workbook.
8692	Get all the pictures from the workbook and index them in the map.
8693	Index all picture in the map.
8694	Generate the style for a picture.
8695	Generate chart style.
8696	Get Anchor Size
8697	Returns the pattern to use for this parser.
8698	Get the chart picture.
8699	Recover the cell.
8700	Get the row style.
8701	Get the web style for a cell.
8702	Get the cell font color.
8703	Gets the cell font decoration.
8704	Get the cell style.
8705	Gets the column style.
8706	Get the text alignment from a cell.
8707	Get the vertical alignment from a cell style.
8708	Calculates the total height of the first row and the last row.
8709	Sets the cell style.
8710	Get the input type from a cell type.
8711	Get the resource paths for the given path.
8712	Get a resource from the context.
8713	Remove the prefix path from the resource.
8714	Evaluate the input string for the given type.
8715	Find a bean by name.
8716	Join short array with a separator.
8717	Rounds a double value to a certain number of decimal places.
8718	Returns the tab type.
8719	Returns the style of the tab.
8720	Get the default date pattern.
8721	Returns the decimal separator for the default locale.
8722	Returns the thousand separator for the default locale.
8723	Set the list of TieCommandAliases.
8724	Build watch list.
8725	Builds the watch list for a cell.
8726	Add a row to the watch list.
8727	Checks if the string is a command string.
8728	Parse widget attributes.
8729	Get attribute key in map by cell.
8730	Parse validate attributes.
8731	Find pair bracket position.
8732	Parse the attributes of a command.
8733	parse input attributes.
8734	Parse validation attributes.
8735	Split by EualSign.
8736	Parse special attributes.
8737	Process calendar attributes.
8738	Process select item attributes.
8739	Gathers special attributes from the cell form attributes.
8740	Parse comment to map.
8741	Find the position of the first non - cell name character.
8742	Remove characters from a string.
8743	Convert a number into an Excel column name.
8744	Convert column name to integer.
8745	Get a cell by reference.
8746	Convert height units to pixel values.
8747	Checks if a string is a valid date.
8748	Parse a date string.
8749	Check if a string is numeric.
8750	Checks if the character c should continue.
8751	Set a property on an object.
8752	Compares two cells.
8753	Checks if the child range is inside the parent range.
8754	Delete all hidden columns in the sheet.
8755	Delete the hidden columns in the row.
8756	Deletes a cell from a row.
8757	Process SystemEvent.
8758	Refresh the status of a cell after it has changed.
8759	Validate with row col in current page.
8760	Validate a POI cell by TieWebSheetValidationBean.
8761	Check if the error message from the given POI cell is valid.
8762	Validates all rules for a single cell.
8763	Do validation.
8764	Validates the cell.
8765	Validates the current page.
8766	Validates a row in the current page.
8767	Validates the row irow.
8768	refresh all cached cells in the current page
8769	Refresh cached cells in a row.
8770	Sets the submit mode in the view.
8771	This method is called before the validation. It is called before the validation.
8772	Clear all of the internal data structures.
8773	Load header rows.
8774	Load the header row without the configuration tab.
8775	Fill to max columns.
8776	Get the style of the header column.
8777	Returns the width style for the cell.
8778	Load the header row with the given configuration tab.
8779	Get the column width style.
8780	Clear the workbook.
8781	Initialize the tabs.
8782	Load the data.
8783	Refresh the data for all the rows in the worksheet.
8784	Refresh the data for the given row.
8785	Refresh the data for a cell.
8786	Find the tab index of the tab with the given name.
8787	Load a work sheet.
8788	prepare work shee
8789	Sets the first column of the DataTable page.
8790	Save the objects in the viewMap
8791	Setup faces row info.
8792	Load the body rows.
8793	Assemble faces body row.
8794	Refresh Cached cell.
8795	Process a cell refresh.
8796	Create dynamic columns.
8797	Add a row of repeat cells.
8798	Refresh the body rows in the parent table.
8799	set unsaved status flag in client js
8800	Returns true if the view is in unsaved state.
8801	Finds the most common constructor for a given type.
8802	Write the contents of the source stream to the output stream.
8803	Write a long value to a writer.
8804	Writes a string to the writer.
8805	Set the tag for the Traffic Stats.
8806	Add bitmap.
8807	Add a file descriptor to the result.
8808	Remove a parameter with the given name.
8809	Add a header to the result.
8810	Clear the request.
8811	Call the play method.
8812	Call stop.
8813	Bind to the streaming service.
8814	Unbinds the radio.
8815	Drops the listener.
8816	Store the image to disk.
8817	Transfer the contents of the given InputStream to a String.
8818	Convert the given InputStream to a String.
8819	Send the content to the OutputStream.
8820	Returns the available bytes available in the stream.
8821	Release the underlying input stream.
8822	Read a byte from the stream.
8823	Reset the mark position.
8824	Send the start part of the message.
8825	Sends the content disposition header to the specified output stream.
8826	Send content type header.
8827	Send the transfer encoding header.
8828	Send the end of the header.
8829	Send end frame.
8830	Send the parts to the stream.
8831	Calculates the total length of the parts.
8832	Check if the URI is a redirect.
8833	Sends a Not Modified response.
8834	Sets the date header.
8835	Set date and cache headers
8836	Sets the Content - Type header to the given file.
8837	Close the channel when the flush is complete.
8838	Send the file part of the file.
8839	Send the data to the given output stream.
8840	Installs the cache.
8841	Ensures that the working directory exists and that it is a directory.
8842	Get the cached entry.
8843	Creates a filter input stream for the entry body.
8844	Reset the bitmap.
8845	Get the WebsockifySslContext instance.
8846	Validates the keystore.
8847	Replaces the current scale type with the given one.
8848	Stop listening for location updates.
8849	Get a PendingIntent for the given RequestBuilder.
8850	Disconnects the given connection.
8851	Bind to the GoroService.
8852	Unbinds this service from its context.
8853	Notify about view changes.
8854	If the target connection fails close the channel.
8855	On accept data.
8856	Reset the response.
8857	Wait for loader to complete.
8858	Sets text or hvisibility to a TextView.
8859	Hide the soft input.
8860	Show the soft input.
8861	Toggle the soft input on the textView.
8862	Calculate the width of pixels based on density.
8863	When an exception occurs during the connection attempt cancel the direct connection timer.
8864	Clear the cache for the given image.
8865	Populate the image of the view.
8866	Cancel image loading.
8867	Create image consumer.
8868	Set the result image.
8869	Sets the loading image.
8870	Start a new image loader task.
8871	Memcache image.
8872	Release a buffer.
8873	On connection prepared.
8874	Add a parameter to the request.
8875	Connect with a workaround for the case where the core connection is not a HttpsURLConnection.
8876	Calculate the MD5 hash of the given text.
8877	Returns the String identifying the given integer.
8878	Returns the String identifying the given CUBLAS_STATUS_CODE.
8879	Check if CudaStatus. CUBLAS_STATUS_SUCCESS and if not throw
8880	Check if the CudaStatus result code is BLAS.
8881	Add a lexeme to the frequency map.
8882	Add a ending.
8883	Returns the estimated word frequency.
8884	Prints a long description of the token and its attributes.
8885	Verify and set the tag s character at the given index.
8886	toKamoli markup.
8887	Verify and set AVS attribute.
8888	Remove the markup formatting for kamols.
8889	Get the list of MetricData.
8890	Returns a query string for the request.
8891	Process the JSON node to create a list of MetricData objects.
8892	Parse the JSON string to get the list of AppInfo.
8893	Get the connection configuration.
8894	Perform the data request.
8895	Generates a GenericodeReader for GC04 code list.
8896	Generates a GenericodeReader for GC04_CODE_LIST_SET.
8897	Create a new GenericodeReader for GC04 column set.
8898	Returns a GenericodeReader for GC10_CODE_LIST.
8899	Returns a GenericodeReader for GC10_CODE_LIST_SET.
8900	Returns a GenericodeReader for GC10 column set.
8901	Get the ID of the passed column element.
8902	Get the value of the passed column.
8903	Get the first column with the passed ID.
8904	Get all key IDs from the given column set.
8905	Get the first key with the passed ID.
8906	Check if the passed column ID is a key column.
8907	Create a new column with the passed parameters.
8908	Create a new key with the passed parameters.
8909	Set the number of lines to skip.
8910	Add a column to the read object.
8911	Create a writer for GC04 code list.
8912	Create a writer for the GC04 code list set document.
8913	Create a new GenericodeWriter for GC04 column set.
8914	Create a writer for GC10 code list.
8915	Create a writer for GC10_CODE_LIST_SET.
8916	Create a new GenericodeWriter for GC10 column set.
8917	Validator for GC04 code list.
8918	Validator for GC04 - Code List Set.
8919	Validator for GC04 column set.
8920	Validator for GC10 code list.
8921	Validator for GC10_CODE_LIST_SET.
8922	Validator for GC10 column set.
8923	Send logs to the server.
8924	Set the context to be used by the LogPersister.
8925	Get the current log level.
8926	Synchronously get capture status.
8927	Sets the maximum size of the log file store.
8928	Prepends the given message with the given metadata.
8929	Append stack trace information to the JSON metadata.
8930	Create a JSONObject with the given parameters.
8931	Log location information
8932	Set the user identity.
8933	Get byte array from file
8934	Start the location updates.
8935	Size the specified region.
8936	Size the partitioned region.
8937	Size the given region or a replicated region.
8938	Read a SnapshotRecord from the stream.
8939	Dumps the time stamps to the given stream.
8940	Get the time values since the given index.
8941	Convert a GF chart from a GFS file.
8942	Get a pool for a server.
8943	Get a pool for the locator.
8944	Checks if the given region is already on the server.
8945	Get a member from a JMX object.
8946	Get the list of host names from the JMX object.
8947	Lookup the host name in the host property file.
8948	Check if the data is an exception and send it to the result sender.
8949	Executes the function and returns the results.
8950	Flattens the input collection into the output collection.
8951	Executes the given query locally.
8952	Creates a CacheListenerBridge for the given Consumer after a put operation.
8953	Creates a CacheListenerBridge for the purpose of the consumer to be invoked after the entry is
8954	Handle the exception.
8955	Gets the OnRegionFilterKeyFacts array.
8956	Export data to a file
8957	Get the list of hosts.
8958	Execute on a region
8959	Get the application name.
8960	Construct the security properties.
8961	Get a region from the client cache.
8962	Get a region from the client cache.
8963	Constructs a comparison between two hashes.
8964	Returns true if the next value must be inserted at the given timestamp.
8965	Close the input stream.
8966	Converts all. gfs files in the given directory to. cvs files.
8967	This is the main method of the class.
8968	Reconnect to the server.
8969	Stop members on a host
8970	Shuts down a member
8971	Shuts down all the members of the given JMX object.
8972	Shuts down the redundancy zone.
8973	store the results in the pageKeysRegion
8974	Read results by page.
8975	Import a GEMFIRE region
8976	Check if the remote Locators and the locators match.
8977	This is the main entry point for the check sum.
8978	Builds a HashMap of all the keys in the given region and their checksums.
8979	Returns the value of the column.
8980	Checks if the TypeMirror is an integer or a subtype of an integer.
8981	Serializes the given object to a byte array.
8982	Deserializes a byte array into a K object.
8983	Create an instance of the given class.
8984	Check for table id.
8985	Checks for fields.
8986	Checks if the given type is a subtype of the given element.
8987	Returns the table schema for this table.
8988	Emits a BrewJava file.
8989	Emit the id method.
8990	Returns an observable sequence of the table object.
8991	Checks that the column name is a field in the table object.
8992	Returns the string value or the default string if the string is blank.
8993	Capitalizes the first character of the string.
8994	Checks if the TypeMirror is a subtype of another TypeMirror.
8995	Order by descending.
8996	Read the temperature of the slave.
8997	Get the supported cursors for the given type.
8998	Prints a note message.
8999	Log an error message.
9000	Get the list of icon fonts.
9001	Get all icons.
9002	Creates the layout for SLD editor.
9003	Get the background decoration.
9004	Raises the power of px by powing x^exponent.
9005	Set the array of values.
9006	Compute the power of the passed BigDecimal by multiplying x by the given exponent and then multiply
9007	Calculates the root of x.
9008	ExpTaylor.
9009	Calculate the natural order of x.
9010	Solve the equation of the equation of the equation of the equation of the equation of the
9011	Calculates the arccotangent of x.
9012	Australia - Taylor.
9013	Calculates the sqrt of x.
9014	Prints the pi string.
9015	Generate a timestamp.
9016	Sets the minimum and maximum values for the range.
9017	Put a value into the histogram.
9018	Print the bar bar.
9019	Adds two complex numbers.
9020	Subtract two complex numbers.
9021	Multiply this complex with another.
9022	Divide two complex numbers.
9023	Set the matrix to be the same as the given matrix.
9024	Get a row of data.
9025	Get a column of this matrix.
9026	Set the matrix.
9027	Transpose the matrix.
9028	Add the matrix m to this matrix.
9029	Subtracts the matrix from this matrix and returns the result.
9030	Multiply this matrix by a scalar.
9031	Multiply this matrix by another matrix.
9032	Print the table in the specified width.
9033	Sets the image resource.
9034	Validates the coefficients.
9035	Compute the next position.
9036	Clear the SLD.
9037	Converts StyledLayerDescriptorInfo to RawSld.
9038	Convert a RawSld object to StyledLayerDescriptorInfo.
9039	Validate the StyledLayerDescriptorInfo object.
9040	Validate the SLD.
9041	Calculate the area of the region.
9042	Set this matrix to be equal to the given matrix.
9043	Sets the values of this matrix.
9044	Computes the inverse of this matrix.
9045	Computes the determinant of this matrix.
9046	Returns the norm of the matrix.
9047	Solve b by substitution.
9048	Print the matrix in decomposed order.
9049	Forward elimination.
9050	Do forward substitution.
9051	Do back substitution.
9052	Improve x.
9053	Convert a square matrix to a square matrix.
9054	Generate a uniformly - distributed random value.
9055	Initialize the XNeg and XPos side.
9056	Compute the next position.
9057	Check if the XFalse value is the same as the previous XFalse value.
9058	Compute the next iteration position.
9059	Check if the interval is valid.
9060	Add the addend value to the running sum.
9061	Multiplacer.
9062	Raises the power of an integer.
9063	Do the iteration procedure.
9064	Get the SLD manager.
9065	Convert a long to a char array.
9066	Decomposes the individual parts of the number.
9067	Print this number.
9068	Validate the biased exponent.
9069	Validate the unbiased exponent value.
9070	Validate that the given double biased exponent value is valid.
9071	Validate that the given unbiased exponent value is within the range - 1 through - I
9072	Create a SldGwtService.
9073	Random distribution distribution.
9074	Returns the next polar point.
9075	Randomly selects a point and returns the ratio of the point.
9076	Create a sieve array.
9077	Returns an array of the distinct prime factors of n.
9078	Initialize the xNeg half.
9079	Compute the next position.
9080	Check if the X - MID is the same as the previous X - MID.
9081	Sets the JavaFX Application.
9082	Sets the configuration file.
9083	Sets the default configuration.
9084	Initializes the FXML loader.
9085	Sets the latitude and longitude for the geocode request.
9086	Extract the host and port from the service metadata.
9087	Get the applicable attribute definition.
9088	Evaluate the attribute filter expression against the given attribute definition.
9089	Sanitize a tag.
9090	The address of the geocode result.
9091	Specifies the componenets to be queried.
9092	Query for names.
9093	Query for service instances by name
9094	Get all to by logged in user.
9095	Get the meta data for Decimal field.
9096	Changes the password for a logged in user.
9097	Get a list of all users.
9098	Get a Gravatar image for a specific email address.
9099	Get the Gravatar for a user.
9100	Populate from Elastic Search JSON.
9101	Get the field type of the field.
9102	Create a new flow step.
9103	Update a flow step.
9104	This method creates a new FlowStep with the given id and type.
9105	Get flow step by step
9106	Get the steps of a flow.
9107	Delete a flow step.
9108	Delete a flow step.
9109	Populate the table fields.
9110	Close ABaseES Connection
9111	Handle a message.
9112	Called when the connection is closed.
9113	Get the ECHO messages from the return value.
9114	Get a list of all items in the PersonalInventory.
9115	Create a new TableRecord.
9116	Deletes a form container.
9117	Get the form flow historic data.
9118	Get the form and field historic data.
9119	Get the most recent form and field historic data.
9120	Lock the form container.
9121	Unlocks the form container.
9122	Unlocks the specified form container.
9123	Map the form container to a Form object.
9124	Convert a string to a list of Role objects.
9125	Create a new form definition.
9126	Updates a form definition.
9127	This method is used to get a form definition by id.
9128	This method is used to get a Form definition by name.
9129	Get all by logged in user.
9130	Deletes a form definition.
9131	Get storage key from form definition container and form field ids.
9132	Initialize the memcached client.
9133	Shuts down the memcached client.
9134	Convert to long.
9135	Converts a document to a PDF file.
9136	This method is used to get the field values for a form from the cache.
9137	Create a FlowStepRule.
9138	Create a new flow step exit rule.
9139	Create a new FlowStepRule.
9140	Update FlowStepEntryRule.
9141	Update the flow step exit rule.
9142	Update the flow step view rule.
9143	Move FlowStepEntryRuleUp.
9144	Move flow step entry rule down.
9145	Delete a FlowStepEntryRule.
9146	Delete a flow step exit rule.
9147	Delete a FlowStepViewRule.
9148	Initialize the session.
9149	Get a list of all user queries.
9150	Get a list of all roles.
9151	Get the service ticket in hexadecimal format.
9152	This method is used to create a text field with a mask value.
9153	This method is used to create a text barcode field.
9154	This method is used to create a decimal spinner field.
9155	This method is used to create a decimal slider field.
9156	This method is used to create a table field.
9157	Update a text field with a mask value.
9158	Update a text barcode field.
9159	This method is used to update the decimal spinner field.
9160	This method is used to update the decimal slider field.
9161	This method is used to update a table field in a form.
9162	Get a Field object from the form.
9163	Get the form fields for the current logged in user.
9164	This method is used to get a form field listing for a user.
9165	Delete a field.
9166	Delete a field.
9167	Returns the table field meta data.
9168	Update the value of a field.
9169	Create or get a new index.
9170	Create a new flow.
9171	Update a flow.
9172	Create a new flow with the given id.
9173	Get a flow by name.
9174	Delete a flow.
9175	Force deletion of a flow.
9176	Update the global field value.
9177	Get all global field values.
9178	Get the form definition id and title.
9179	Decrypt the init packet
9180	Close ABaseClientWebSocket Connection and clean up.
9181	Initialize a new request.
9182	Get the exception message for the handler.
9183	Create a new admin user.
9184	Get an access token.
9185	Get the user profile information.
9186	Execute a JSON request.
9187	Execute a form request.
9188	Create a response handler for the given HTTP response.
9189	Check if the connection is valid.
9190	Get the client.
9191	Get the path to the system property fluid - specific - trust - store.
9192	Closes the Fluid connection.
9193	Get a list of Fluid items for a given JobView.
9194	Sends a form to a flow.
9195	Called when the client closes.
9196	Message handler.
9197	Send a JSON Object to the Fluid server.
9198	Sends a message to the remote endpoint.
9199	Closes the Fluid user session.
9200	Execute a native SQL query with a data source.
9201	Request a license.
9202	Apply a license to the server.
9203	This method is used to create a text field.
9204	This method is used to create a ParagraphText field.
9205	This method is used to create a ParagraphText field.
9206	This method is used to create a MultipleChoice select many field.
9207	date time route field.
9208	Update field with text type.
9209	This method is used to update the ParagraphText field in a route.
9210	Update field date and time.
9211	updateFieldDecimalPlain.
9212	Update route field value.
9213	This method is used to create a Field object from a Route Field.
9214	Get a Configuration object by key.
9215	Get a list of all configurations.
9216	Create a new attachment.
9217	Retrieves an attachment by id.
9218	Deletes an attachment.
9219	Force delete attachment.
9220	Parse the jar file.
9221	Set the classloader to use for the given jar file.
9222	rule 2.
9223	rule 3.
9224	rule 3.
9225	Get the schema node.
9226	rule 7.
9227	rule 3.
9228	Convert the given value to a fluent interface.
9229	Create a Cli interface.
9230	Create a Cli instance using the specified options.
9231	Parse the given arguments.
9232	Parse the given arguments using the given options object.
9233	Returns a builder for the given path.
9234	Remove a footer view.
9235	Returns the value of the module at the given pressure.
9236	Generate a 3D gradient.
9237	Returns the 3 - D noise value.
9238	Returns a 3 - D value noise.
9239	Cubic interpolation.
9240	S curve 5.
9241	Sets the bounds of the range.
9242	Process the given event.
9243	Process the given event.
9244	Gets the account id of the user or recipient.
9245	Checks if the rule entity is allowed to be included in the violation entity.
9246	Get event serializer.
9247	Creates a new file in the root folder.
9248	Creates a new directory in the temporary folder.
9249	Restore the system properties.
9250	Create the delegate Map implementation.
9251	Adds an object to the soft - linked list.
9252	Set a property.
9253	Get array property.
9254	Sets the next state of the current state.
9255	Process the garbage collection queue.
9256	Get a parameterized type.
9257	Get the parameterized type.
9258	Get the type variable for the given type.
9259	Prints the stack trace of this Throwable.
9260	Prints the stack trace of this Throwable.
9261	Replace the object with stubs.
9262	Run the task
9263	Sets the task.
9264	Returns true if the task is accepted.
9265	Called when the task is rejected.
9266	Called by the task when it is about to start.
9267	Called by the TaskRunner when it is completed.
9268	Stops the task.
9269	Get the next job from the queue.
9270	Put a job into the queue.
9271	Returns the block mode for the given name.
9272	This method is called when the object is read.
9273	Setup the readers.
9274	Add a reader to the catalog.
9275	Copy the readers from the readerMap to the newCatalog
9276	Create a new catalog.
9277	Load the system catalogs.
9278	Parse a catalog.
9279	This method is called when the catalog files are parsed.
9280	Parse the catalog file.
9281	This method is called when an unknown token is found.
9282	Parse all the subordinate catalogs.
9283	Resolve a doctype.
9284	Resolve a document.
9285	Resolve a system ID.
9286	Resolve a local URI.
9287	Resolve subordinate catalogs.
9288	Make the given system identifier absolute.
9289	Normalizes a URI.
9290	Encode a byte.
9291	Add a delegate entry.
9292	Creates a SoftValueRef.
9293	Fired on Throwable.
9294	Fires a throwable of the given type.
9295	Create the implementation.
9296	Compares two TimerTasks.
9297	Returns the value of the field.
9298	Get the object at the specified index.
9299	Set an object at a given index.
9300	Maintains the heap.
9301	Add an entry type and its arguments.
9302	Get the entry type.
9303	Get the number of arguments for the given entry type.
9304	Get the entry argument with the given number.
9305	Sets the context class loader for the specified thread.
9306	Swap two elements.
9307	Remove a node at a given index.
9308	Cleanup the timeout object.
9309	Load a class.
9310	Preload all protocols.
9311	Create a URLStreamHandler for the given protocol.
9312	Check the handler packages property.
9313	Get the value of the property.
9314	Create the implementation.
9315	Make a synchronized counter.
9316	Make a directional counter.
9317	Checks if the current thread is in the extension namespace.
9318	Check if the notification is required.
9319	Rebinds the target object to the given name.
9320	Get the wrapper map value.
9321	Substitutes the string from the map.
9322	Splits a string into an array of strings.
9323	Joins the given byte array into a single String.
9324	Default toString method.
9325	Get the value of the field.
9326	Creates the entry map.
9327	Get the value associated with the specified key.
9328	Peeks the value associated with the specified key.
9329	Remove the entry for the given key.
9330	Flush the entries to the cache.
9331	Returns a list of keys that are valid.
9332	Set the resolution.
9333	Peek an entry from the map.
9334	Get children of the given element by tag name.
9335	Get the first child with the given tag name.
9336	Get optional child element with given tag name.
9337	Get the content of an element.
9338	Get the content of the first child with the given tag name.
9339	Get optional child content of an element.
9340	Set the maximum queue size.
9341	Sets the blocking mode.
9342	Sets the blocking mode to be used.
9343	Execute the task.
9344	Resolve a system ID.
9345	Resolve a public resource.
9346	Resolve an external system.
9347	Resolve external public.
9348	Query resolver.
9349	Append elements from appvec to vec.
9350	Resolve all system entries in the catalog.
9351	Resolve a system system identifier.
9352	Resolve all system entries in this catalog.
9353	Resolve all entries for a system.
9354	Resolve all subordinate catalogs.
9355	Read a catalog from a file.
9356	Read a catalog from the given input stream.
9357	Connects to the file.
9358	Get a FileOutputStream for this file.
9359	Atomically sets the next node in the comparator.
9360	Mark a field as deleted.
9361	Returns null if value is valid.
9362	Creates a snapshot of the current value.
9363	Atomically sets the right index on the current index to the given value.
9364	Create a logger for the given class.
9365	List object.
9366	Returns the short name of the class.
9367	Returns a String representation of this class.
9368	Get the property names.
9369	Get the property group.
9370	Get a compatible constructor with the given type and value.
9371	Copy an object.
9372	Dereference an object and cast to a certain type.
9373	Initialize the context manager.
9374	Update the JNDI property cache.
9375	Returns a Set of all keys in the context.
9376	Returns a Set that contains all the entries in this context.
9377	Removes a property listener.
9378	Fired when a property is added to a list.
9379	Fire the PropertyRemoved event to all PropertyListeners in the list.
9380	Fired property changed
9381	Fired when a property is changed.
9382	Make a property name that is prefixed with the given prefix.
9383	Load properties from a property reader.
9384	Loads the properties from the source.
9385	Get a property group with the given index.
9386	Indicates if the entity is resolved.
9387	Resolve a systemId into an InputSource.
9388	Resolve a system ID as a URL.
9389	Resolve a classpath resource name.
9390	Sets the text value of the element.
9391	Normalizes public id to be used in a URL.
9392	Encodes a public id into a URN.
9393	Decode an URN string into a public ID.
9394	Replace all occurrences of oldStr with newStr.
9395	Start the timer.
9396	Stop the timer.
9397	Make a synchronized StopWatch.
9398	Compares this object to another object.
9399	Generates a hash code for the given byte array.
9400	Generates a hash code for an array of objects.
9401	Creates a new map and list.
9402	Set the value of the field.
9403	This method is used to read the next token from the file.
9404	Initialize the date format.
9405	Adds a vertex to the graph.
9406	Sets the root vertex.
9407	Remove a vertex v from the graph.
9408	Depth first search.
9409	DFS spanning tree
9410	Finds a vertex by data.
9411	Find cycles in the graph.
9412	Normalizes a string.
9413	Parse an XML string.
9414	Parse the XML from the given InputStream.
9415	Parse the given InputSource and return the root Element.
9416	Create an Element.
9417	Resolve a qualified name.
9418	Copy all attributes from srcElement to destElement.
9419	Checks if the given node has child elements.
9420	Get child elements of a node.
9421	Get the text content of a node.
9422	Get child elements of a node.
9423	Get the parent Element of the given Node.
9424	Add a resource to the waiting list.
9425	Read a catalog from the given input stream.
9426	Read a catalog from a file.
9427	Get the host address.
9428	Resolve the given entity.
9429	Sets the system property to the specified class.
9430	Prints out some information about the given class.
9431	Describe a class.
9432	Remove package name from the given classname.
9433	Get the package name from a class name.
9434	Force a class to be loaded.
9435	Get the primitive wrapper class.
9436	Get all interfaces of a class.
9437	Get all interfaces that are unique.
9438	Checks if a given type is a primitive wrapper.
9439	Instantiate a class.
9440	Get the getter method for the given attribute.
9441	Get the setter method for the given attribute.
9442	Convert a parameter name to a Java class.
9443	Get a system property.
9444	Get the filenames for a property.
9445	Maintains the set.
9446	Returns an Iterator over the set.
9447	Create a URLLister for the given protocol.
9448	Returns a set of all entries in this map.
9449	Add a property listener to the bound object.
9450	Remove the bound property listener.
9451	Checks if the given String is null.
9452	Find an editor for a given type.
9453	Registers an editor for a property type.
9454	Convert a string value to a Java object.
9455	Returns the context class loader for the specified Thread.
9456	If the Throwable is an ApplicationDeadlockException return it. Otherwise return null.
9457	Schedule a timeout.
9458	Do work.
9459	Creates a new subcontext with the given name.
9460	Lookup an object of the given class.
9461	Checks if the object is an instance of the given class.
9462	Append the class and interfaces to the buffer.
9463	Get the transition for the given name.
9464	Read the properties file.
9465	Query the verbosity of the JVM.
9466	Query relative catalogs.
9467	Query the catalog files.
9468	Get the catalog files.
9469	Query whether public is preferred.
9470	Query whether or not to use the static catalog.
9471	Resolve the given entity.
9472	Resolve a relative URI.
9473	Make the given URI absolute.
9474	Resolve a class.
9475	Invoke the setter method.
9476	Get the local name of the element.
9477	Get the namespace URI of the given node.
9478	Get the namespace URI of the given element.
9479	Convert an enumeration to a List.
9480	Get input stream.
9481	Loads properties from a file.
9482	Read properties from the specified property files.
9483	Adds an edge to the graph.
9484	Adds an outgoing edge between this vertex and the given to vertex.
9485	Adds an incoming edge between this vertex and the given vertex.
9486	Returns true if this node has the given edge.
9487	Remove an edge from the graph.
9488	Finds an outgoing edge from the given destination vertex.
9489	Finds an edge in the outgoing graph.
9490	Returns the cost of the edge between this vertex and dest.
9491	Recursively dump the source file to a jar file.
9492	Returns true if at least one iterator has more elements.
9493	Fires an event.
9494	Installs the JVM type providers.
9495	Recursively delete a folder and all its contents.
9496	Dispatches an action on the FX application thread.
9497	Get action stream.
9498	Create the path to the FXML file for the given view type.
9499	One - to - Many relationship.
9500	Many - to - One relationship.
9501	Strict many - to - one rights.
9502	Returns a stream of T2 objects where the first element is the left element and the second
9503	Returns true if the page is allowed to use robots. txt.
9504	Checks if the instruction generated should be the given command.
9505	Main method.
9506	Main method.
9507	Returns the sum of the degree of the words in this set.
9508	This method is called from the superclass to provide additional arguments to the superclass.
9509	Informs the resource loader that the resource loader is ready to be loaded.
9510	Check if data source connection is available.
9511	Create an iterable of the given type.
9512	Generates an array of the given type.
9513	Construct a list of all the non - parameterized instances of the given class.
9514	Construct a collection of the given type.
9515	Construct a List of all objects of the given class.
9516	Construct an Either object from a parameterized type.
9517	Construct an Either object of the given type.
9518	Validation failed.
9519	Validates that the type passed is an instance of the given class.
9520	Static factory method for creating a Try. Success.
9521	Connect to the specified JDBC server with the specified URL driver class username and password.
9522	Run the given SQL in the given database.
9523	Query in with sql
9524	As boolean array.
9525	Add a example to the query.
9526	On upgrade.
9527	Backup the table to CSV.
9528	Restore the table from a CSV file.
9529	Set the empty text.
9530	Dump table to CSV.
9531	Unescapes the given string.
9532	Get the values from a CSV row.
9533	Convert a comma - separated string to a map.
9534	Map to CSV
9535	Join a list of strings into a single string.
9536	Join the strings in the array.
9537	Read the database from index file.
9538	Write the table helpers to the given writer.
9539	Inspects the id field.
9540	Get the base DAO class for the given entity.
9541	Gets the bind type.
9542	Import data from a CSV file.
9543	Backup all tables to csv.
9544	Restore all tables from CSV.
9545	Write the index file.
9546	Creates a query from the query and applies the query parameters.
9547	Creates a typed query.
9548	Render the query.
9549	Delete the record with the given id.
9550	Insert or update an object in the table.
9551	Update the object in the database.
9552	Add a where not in clause.
9553	Add a WhereSubquery.
9554	Get the next active stack.
9555	Get an empty intention stack. If the active stack is empty then return it.
9556	Add a plan to the cache.
9557	Select a plan based on the given selection policy.
9558	Select a plan at random.
9559	Set plan variables.
9560	Returns the result at the given index.
9561	Get the array of parent byte arrays.
9562	Get the children of this node.
9563	Grow the byte array by increment.
9564	Create a logger with the given name and level.
9565	Step through the body.
9566	Set the goals array.
9567	Pause the user input.
9568	Initialize Intention Selection Pools.
9569	Initialize Intention Selectors
9570	Start intention selection threads.
9571	Shuts down all intention selection threads.
9572	Registers a Jill extension.
9573	Reset all the objects to their initial state.
9574	Load the agent class and add it to the catalog.
9575	Process the plans for a Goal
9576	Create agents in the catalog.
9577	Load a class.
9578	Load the extension.
9579	Compares two objects for equality.
9580	Get the usage string for this program.
9581	Parse command line options.
9582	Parse command line options.
9583	Do the evaluation of the agent.
9584	Get an object from the list.
9585	Find an object by name.
9586	Pushes an object onto the stack.
9587	Get the object at the specified index.
9588	Push an object onto the stack.
9589	Removes and returns the last object in the queue.
9590	Get the type of the given object.
9591	Match the belief against the query.
9592	This is the main method that is run when the BeliefBase is instantiated.
9593	Convert a String to a byte array.
9594	Post a Goal to the agent.
9595	Sends a message to an agent.
9596	Send a message to an agent.
9597	Get the goals.
9598	Create a new BeliefSet.
9599	Adds a new belief to the node.
9600	Evaluate the belief base.
9601	Suspends the agent.
9602	Returns the BeliefSetField object for the given field name.
9603	Register the neighbouring BeliefBase.
9604	Build a name.
9605	Run the agent management.
9606	Check if the execution stack is valid.
9607	Remove agents from the finished set.
9608	Manages a goal.
9609	Shutdown the pool.
9610	Set agent idle state.
9611	Move a disc on pin A to pin B.
9612	Initialize the agent manager.
9613	Wait till we are all running
9614	Finish the agent.
9615	Checks if all the intention selectors in the pool are idle.
9616	Get pool id.
9617	Picks the expression to use.
9618	Sets the expression to be used for the expression.
9619	Joins the given attribute with the given from expression.
9620	Recursively joins properties.
9621	Find or create a join.
9622	Returns true if the end of the response is reached.
9623	Get the next part of the form.
9624	Handle the incoming request.
9625	Check if the request has a parameter with the given name and value.
9626	Get parameter by name
9627	Parse content type parameters.
9628	Configure transaction manager.
9629	Get the target file.
9630	Writes an artifact to a target file.
9631	Post - processes the instance.
9632	Returns the declared constructor.
9633	Build a string representation of the ConfigDescriptor.
9634	Get the method from the interfaces of the given method.
9635	Returns the type of the given field.
9636	Get the dependency value of the given type.
9637	Persist the file.
9638	Set the default link.
9639	Sets the default link template.
9640	Handle links.
9641	Handle header links.
9642	Handle the body links.
9643	Parse a link object.
9644	Get or add a new key to the map.
9645	Handle the response of the RESTful Methods request.
9646	Checks if the given method is allowed by this class.
9647	Registers instance processors.
9648	Register a new instance factory.
9649	Register instance processor.
9650	Register a class processor.
9651	Create a new instance of the given interface class.
9652	Adds an argument to the command.
9653	Create target files.
9654	Convert the object to an XML string.
9655	Initializes this producer.
9656	Checks if the template file has a reference to the template file.
9657	Create a ParameterizedTemplateModel from a XML document.
9658	Create a ParameterizedTemplateModel from a file.
9659	Sets the request path.
9660	Get an observable observable that will receive more data.
9661	Create a new instance scope with the given string.
9662	Sets the value of the field.
9663	Add a CaptureAppender to a logger.
9664	Remove a specific appender.
9665	Clear the given appender.
9666	Read the request and return the arguments.
9667	Parse the EMF model files.
9668	Resolve the proxies.
9669	Gets the files from the given directory.
9670	Parse the given directory.
9671	Replies if the model is fully resolved.
9672	Find all EObjects in the given resource set.
9673	Sets the model directories.
9674	Sets the file extensions.
9675	Sets the model resources.
9676	Read next record.
9677	Sets the designated parameter to the given array of String values.
9678	Sets parameter with value.
9679	Executes an update statement with the specified column indexes.
9680	Convert the string representation of the object into an instance of the given type.
9681	Merge velocity template content.
9682	Get the model directory.
9683	Gets the canonical template directory.
9684	Write the value to the HttpServletResponse.
9685	Start the web UI.
9686	Configures the given window.
9687	Print the result to the web view.
9688	Copy the contents of the input stream to the output stream.
9689	Invoke the method.
9690	Attaches this request to the response.
9691	Detaches this instance from its parent.
9692	Returns the cookies associated with this response.
9693	Dumps the request context and the HTTP request headers.
9694	Get meter for all managed methods.
9695	Configures this EventStream with the given EventStreamConfig.
9696	Sets the remote host.
9697	Gets the named parameter.
9698	Removes the prefix from the given path.
9699	Returns the common directory between dir1 and dir2.
9700	Convert absolute path to relative path.
9701	Convert a relative path to an absolute one.
9702	Get the directory depth.
9703	Dumps the given throwable on the given RequestContext.
9704	Send JSON object to response.
9705	Adds a parameterized template model to the list of param templates.
9706	Add param templates.
9707	Initializes this template.
9708	Find all the ParameterizedTemplate models which reference the given template file.
9709	Sets the save enabled state.
9710	Delete the button.
9711	Deletes the endpoint.
9712	Creates a new instance of the managed class.
9713	Get the files that were fit.
9714	Get the summary of the results.
9715	Get the summary row for a directory.
9716	Get summary row for sub - directories.
9717	Create a new instance of the managed class.
9718	Get the setup class.
9719	Get the model directories.
9720	Get the model resources.
9721	Sets the candidates.
9722	Load configuration document from XML file.
9723	Display an error notification.
9724	Checks if the formal parameters are objects.
9725	Read the JSON from the request.
9726	Read JSON from the given input stream.
9727	Extract the parameter from the fit cell.
9728	Get the hints.
9729	Checks if the request is an XHR request.
9730	Checks if the request is an Android request.
9731	Refresh the entity if the entity type is the same as the current endpoint.
9732	Returns a list of all properties of the given type that are annotated with the given annotation.
9733	Get annotation on given property.
9734	Log a message.
9735	Perform a Whois lookup.
9736	Returns true if the given host has a parser for it.
9737	Get the managed class.
9738	Get managed method.
9739	Process not contains exception.
9740	Process not contains.
9741	ResultSet object as a boolean.
9742	arg0 is wrapper for arg0
9743	Serialize the response.
9744	Get cookie value by cookie name.
9745	Add a cookie to the response.
9746	Remove cookie with given name.
9747	Returns an iterator over the cookies in this response.
9748	Gets the TargetFileListProducer.
9749	Add a field to the class.
9750	Compiles the Java class.
9751	Verify the response for the given token.
9752	Returns the file name without extension.
9753	Ensures that the URI has a trailing slash.
9754	Login to the servlet container.
9755	Get the HTTP request.
9756	Executes managed method.
9757	Execute a managed method in a mutable transaction.
9758	Execute an immutable transactional method.
9759	Gets the files in the directory.
9760	Returns the last file in the directory.
9761	Get the concrete configuration.
9762	Checks if the requestPath starts with pathComponent.
9763	Get the factories for the given model type.
9764	Get the session.
9765	Serialize the file to the HttpServletResponse.
9766	Reads the metadata of the resource.
9767	Handle the incoming request.
9768	Closes the underlying JDBC statement.
9769	Close all event streams
9770	Handle allowed methods.
9771	Upload the blob to the server.
9772	Delete the data from the server.
9773	Extract column parameters from fit row.
9774	Get the argument names.
9775	Schedule a periodic task.
9776	Timeout the specified task.
9777	Configures the view manager.
9778	Returns the next file in the list.
9779	Configure the application.
9780	Prints welcome banner to standard out.
9781	Prints the stopped banner.
9782	Create a Chameleon instance.
9783	Register a shutdown hook to stop Chameleon.
9784	Triggers the notification.
9785	Trigger the endpoint.
9786	Insert and replace the fit row.
9787	Get the counts of the files in the result set.
9788	setter for score - sets score in the score score -
9789	getter for variants - gets variants of the answered object
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInBeginSection - gets
9828	setter for offsetInBeginSection - sets
9829	getter for offsetInEndSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triple - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets subject subject C
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for isObjUri - gets
9846	setter for isObjUri - sets whether the triple is an object or not O
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets variants of the answer O
9862	setter for variants - sets variants of the answer O
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for args - gets
9874	setter for args - sets
9875	getter for label - gets
9876	setter for label - sets label of the role C
9877	Returns the index of the next clear bit.
9878	Set the bit at index index.
9879	Free the buffer.
9880	Creates a new instance of CacheValue.
9881	Rehashes the given array of objects to a new array of the given size.
9882	Get the HELM2 representation of the MonomerNotations in this MonomerNotation.
9883	Check of brackets in the annotation section.
9884	Add details from the string
9885	Returns the HELM2 string.
9886	Adds an element to the MonomerNotation.
9887	Entry point for the HELM2 converter.
9888	Checks if the given PolymerID is valid.
9889	Checks if the polymerID in the connection section is valid.
9890	Checks if the connection details are valid.
9891	Checks if the string d is a valid group id.
9892	Checks if the string is repeating.
9893	Checks if the PolymerId is a peptide or rna PolymerId.
9894	Convert the notation container to a JSON string.
9895	method to get a simple PolymerNotation of the given string
9896	Get the current groupingNotation.
9897	Converts the Polymer to HELM2.
9898	Polymer ID to HELM2.
9899	Returns a HELM2 representation of the connections.
9900	Converts the grouping list to HELM2 notation.
9901	Converts the annotation section to HELM2.
9902	method to get the polymer and grouping IDs
9903	method to get a PolymerNotation with the given id
9904	Sets the PolymerElements.
9905	Convert the HELM string to a HELM string.
9906	Sets the annotation of the element.
9907	Sets the count.
9908	method to decide what monomerNotation is to be used
9909	method to decide what monomer is in the group
9910	Decide what HELMEntity to use based on the string
9911	Returns the value of the interval.
9912	Parses HELM2 standard.
9913	set contents of nucleotide
9914	Define ambiguity.
9915	Get statistics for this thread.
9916	Creates an ADiGraph from the given edges.
9917	Creates an ADiGraph object from the given nodes and edges.
9918	Initializes the internal _incomingPaths internal variable.
9919	Returns a list of nodes sorted by reachability.
9920	Subscribes to the specified pattern.
9921	Subscribes to the given pattern.
9922	Unsubscribe from the specified pattern.
9923	Sends a response to the server.
9924	Send a return sync message.
9925	Poll for a request.
9926	Shutdown the server.
9927	If the exception is not checked it will be thrown.
9928	Unlocks the run state.
9929	Creates a worker thread.
9930	try to add a worker to the run state.
9931	Register a worker thread.
9932	Deregisters a worker thread.
9933	signal work.
9934	Run a worker.
9935	Await a work to be done.
9936	Returns the number of queued tasks.
9937	Common submitter queue.
9938	external help complete.
9939	Submits a ForkJoinTask to the pool.
9940	Makes a common pool.
9941	Get the value.
9942	Build a String from a code block.
9943	Get statistics about the thread pool.
9944	Creates an AList from the given elements.
9945	Returns a list of the reverse of this list.
9946	Returns true if all elements in the collection satisfy the predicate.
9947	Folds the elements of the collection into a value using the supplied AFunction2.
9948	Folds the elements of the list right by using the AFunction2 function.
9949	Push a task onto the queue.
9950	A option to specify the nullable value.
9951	Creates an ALongHashMap from the given keys and values.
9952	Returns an AListMap of the empty values.
9953	Returns a AListMap from the elements in the given collection.
9954	Creates an AListMap from the given keys and values.
9955	Returns a Set of keys in this AMap.
9956	Normalizes the resource name.
9957	Marshals a BoundType to a String.
9958	Returns a subsequence of the specified range.
9959	Create a binary search builder for a list.
9960	Create a binary search builder for a list.
9961	Sends an email.
9962	Sends an email.
9963	Binds a route to the application.
9964	Binds a filter to the application.
9965	Check if the user has at least one of the roles.
9966	Convert a Long to an int.
9967	Remove duplicate strings from String array
9968	Like string.
9969	Run the task.
9970	Login a user with a password
9971	get login user with db
9972	Get the login user from the session.
9973	Check if the password matches the given salt.
9974	Save or delete a member in the cookie.
9975	Get the login key.
9976	Returns a CookieUser object for the given UUID.
9977	Forward to the specified path.
9978	Append File. separator to path if it is not already.
9979	Get long parameter.
9980	Record a debug message.
9981	Get the caller information at the given level.
9982	Convert a char array to a byte array.
9983	Convert a CharSequence to a byte array.
9984	Convert a byte array to a simple char array.
9985	Converts a CharSequence to a byte array.
9986	Lookup the LocaleData for the given locale code.
9987	Schedule the job to be executed in the given number of seconds.
9988	Crops an image.
9989	Schedule the given invocation for the given amount of time.
9990	Invoke the invocation in the current thread.
9991	Get the rest operations.
9992	Renders an error in the AJAX response.
9993	Renders an AJAX forbidden response.
9994	Process the template.
9995	Parse the path.
9996	Renders the data tables.
9997	Renders empty data tables.
9998	Sets the items of the combobox.
9999	Redirect to the given URL.
10000	Returns a list of the providers bound to this binding.
10001	Get the current method.
10002	Compacts memory.
10003	Propagate a Metrics object to the local MetricsCollection.
10004	Encodes a string to a string.
10005	Returns the character set of the file.
10006	Copy the contents of the input stream to the output stream.
10007	Copy the input stream to the output stream.
10008	Copy the contents of the InputStream to the Writer.
10009	Copy the contents of the Reader to the Writer.
10010	Copy the specified number of characters from the input stream to the output stream.
10011	Copies the contents of the Reader to the OutputStream.
10012	Copies the contents of the Reader to the OutputStream.
10013	Compare two input streams.
10014	Compare two input streams.
10015	Apply the pipeline.
10016	Get the SQL for a group.
10017	Unmarshals src into clazz.
10018	Unzips a zip file.
10019	Create a new fragment with the given bean permissions.
10020	Set the key listener to be notified when the user presses enter.
10021	Add a core value type.
10022	Checks if the given value matches the given regular expression.
10023	Checks if the value is a mobile device.
10024	Checks if the given value is a phone number.
10025	Checks if the given value is a birth day.
10026	Checks if the given string is a URL.
10027	Checks if the given string is a date or a date time.
10028	Process the HTTP request.
10029	Encodes a String to Base64.
10030	Decodes a base64 string into a byte array.
10031	Converts a hexadecimal string to a byte array.
10032	Read UTF - 8 properties from the given InputStream.
10033	Read content as string.
10034	Read content as string.
10035	Writes the given byte array to the given file.
10036	Copies a directory to a target file.
10037	Serializes the given XML document to a string.
10038	Get a Document object from an xml file.
10039	Get a Document object from the given xml string.
10040	Get a Document object from the given XML stream.
10041	Validate an XML signature.
10042	Signs a document.
10043	Checks if the given class is safe to be cached.
10044	Checks if the given class is an array and its component type is a primitive type.
10045	Checks if the given class is an array and is primitive wrapper.
10046	Resolves primitive types to wrappers if they are primitive.
10047	Checks if the left - hand side type is assignable to the right - hand side type.
10048	Checks if the given value is assignable to the given type.
10049	Returns all interfaces of the given object.
10050	Returns all interfaces of the given object as a Set.
10051	Write properties to a temp file.
10052	Returns a map of variables and their values.
10053	Adds a permission to the PermBean.
10054	Druid plugin.
10055	Binds the extension point to the implementation.
10056	The builtin method.
10057	This method is used to create primitive types.
10058	Convert an object to another type.
10059	Convert the user defined type to the specified type.
10060	Query parameter.
10061	Cookie parameter.
10062	Provides access to the session attribute.
10063	Initialize the data source.
10064	Ftl shared variable.
10065	Sets a parameter.
10066	Sets a parameter.
10067	Shows the permission dialog.
10068	Checks if all values have been granted.
10069	Check if any value is denied.
10070	Find records by the given SqlSelect.
10071	Find a single record.
10072	Is the given pk_column a new record?
10073	Checks if the given method declares an exception of the given type.
10074	Process the queue.
10075	Puts a new value into the map.
10076	Test if string matches pattern.
10077	Reads the arguments of the given interface.
10078	Get ProtobufEntity annotation from class.
10079	Checks if the given class is a ProtobufEntity.
10080	Get all fields from a given class that are annotated with ProtobufAttribute.
10081	Gets the protobuf getter for the given field.
10082	Get the setter for the given field.
10083	Get the current thread s ObjectMapper.
10084	Get the JsonFactory.
10085	Convert an object to a JSON string.
10086	Sets the borders of the rectangle.
10087	Get user record.
10088	Copy out the attributes of the target object.
10089	Copy out the attributes from the jmxAttributeValues list to the target object.
10090	Get a property.
10091	Set a property.
10092	Add this application to a frame.
10093	Saves the token.
10094	Get the token.
10095	Get the default classloader.
10096	Returns the URL of the named resource.
10097	Get a resource as InputStream.
10098	Get the stream of the given class.
10099	Initialize the URI object.
10100	Initialize scheme.
10101	Initialize the path component of the URI.
10102	Sets the scheme.
10103	Sets the userinfo component of the URI.
10104	Sets the host component of this URI.
10105	Set the port.
10106	Append a path string to the current path.
10107	Sets the query string.
10108	Sets the fragment of this URI.
10109	Returns the URI string.
10110	Create a PreparedStatement from an Iterator.
10111	Initialize the applet.
10112	Get the muffin string.
10113	Set the muffin parameter.
10114	Get the contents of the system clipboard.
10115	Set the contents of the system clipboard to the given Transferable object.
10116	Open a file through this service.
10117	Load all the services of the given type.
10118	Set service parameters.
10119	Get the service parameters.
10120	Find a parametrized service by id.
10121	Finds the first service that is an instance of the given class.
10122	Parse the query response.
10123	Returns an iterator over the elements in this buffer.
10124	Get encoding from xml string
10125	Returns the parent logger.
10126	Creates a proxy instance for the given connection.
10127	Get authorization code.
10128	Visit a PackageDeclaration. This method will be called for every package declaration.
10129	Visit a ClassDeclaration. This method will be called for every class declaration.
10130	Visit an executable declaration. This method will be called for every declaration.
10131	Returns the value of the option with the given key.
10132	Returns a DeclarationFilter that only accepts modifiers that are contained in the given collection.
10133	Returns a filter that only returns the declared or superfluously - typed declarations of
10134	Creates a filter that matches this and f.
10135	Creates a filter that tests that the given filter is or equal to the given filter.
10136	Get the map.
10137	Make the given constructor accessible.
10138	Prepare the query for the given object.
10139	Replaces the forward - slash with a hyphen.
10140	Convert a byte array to a string of hexadecimal digits.
10141	Get the indexes for the given parameter name.
10142	Parse a named SQL string.
10143	Convert collection of Protobuf objects to Protobuf objects.
10144	Set field value to protobuf builder.
10145	Sets the value of the given protobuf attribute on the given pojo.
10146	Accept this file.
10147	Get a ResultSet instance proxy.
10148	Maps the list of labels to the corresponding expected labels.
10149	Extract the values from the given list.
10150	Gets the generic supertype of the given type.
10151	Poll the object.
10152	Poll the object in the individually.
10153	Get a Field from a Class or a super - class.
10154	Get the declared methods of the given class and its superclasses.
10155	Get the Method object for the given class and optionally recursively for the given class.
10156	Get all methods annotated with annotationClass.
10157	Get the annotated declared constructors of the given class.
10158	Dumps a single byte.
10159	Search string s for the substring substring.
10160	Removes all the characters in chars from s.
10161	Clean up state.
10162	Initialize the audit.
10163	Initializes the message queue.
10164	Initializes the password validator.
10165	Initializes the password authenticator.
10166	Resolve locale code.
10167	Lookup a locale info object.
10168	Creates a proxy instance for the given statement.
10169	Clear the list.
10170	Pushes an element onto the end of the stack.
10171	Pop an element off the stack.
10172	Returns an InputStream for reading from the input file.
10173	Parse the command line arguments into a Properties object.
10174	Match tokens with patterns.
10175	Move the cursor.
10176	Returns true if this rectangle encloses the given rectangle.
10177	Returns true if the rectangle contains the specified point.
10178	Returns the intersection of this rectangle with the given rectangle.
10179	Returns a new rectangle that is the union of this rectangle and the specified rectangle.
10180	Returns a new Rectangular object with the x - component of this and the x - component
10181	Returns a new Rectangular object with y1 and y2 replaced by the values of this
10182	Get the offset of the column in the table.
10183	Get the offset of the specified row of the matrix.
10184	Returns the bounds of a cell relative to the current cell.
10185	Calculate the width and the maxindent and minindent for the columns.
10186	Calculate the number of rows and the layout.
10187	Unwraps Throwable.
10188	The main method.
10189	Called when a WAM instruction is updated.
10190	Copy and resize the code buffer.
10191	Render instructions.
10192	Initialize the servlet.
10193	Create a copy of this QueryParameter with the specified elements.
10194	Add a new child to the tree.
10195	Clear all children.
10196	Internal method used to generate the next solution.
10197	Adds instructions to this WAM object.
10198	Add instructions to the parent.
10199	Enable the Cancel and Apply buttons when the WorkPanel state changes
10200	Register the work panel.
10201	Update the component flags.
10202	Creates a new type.
10203	Evaluates the term.
10204	Optimizes the given instructions.
10205	Compares two collections.
10206	This method is called by the servlet.
10207	Renders the first page button and the back button.
10208	Renders a button.
10209	Reset the model.
10210	Initializes the LearningRule.
10211	Get the value associated with the given key.
10212	Get the index of the given key.
10213	Set the value at the given index.
10214	Remove the value associated with the given key.
10215	Remove the value at the given index.
10216	Check if a property has a getter method.
10217	Sets the property of the given object.
10218	Get the value of a property.
10219	Checks if the wrapper type is assignable to the primitive type.
10220	Initialize the getters and setters on the given object.
10221	Returns a decision tree that matches the value of the property being decided.
10222	Initialize the lookup table.
10223	Unify the query and statement.
10224	Unifies left and right.
10225	Unify a variable.
10226	Compiles the query.
10227	Finds the maximum arity of the body in the given clause.
10228	Allocate local variable slots for all variables in a query.
10229	Gather position and occurrence information from a clause.
10230	Pretty print the compiled predicate.
10231	Pretty print the compiled query.
10232	Put a padded int32 value into the buffer.
10233	Read a string from a buffer.
10234	Get the string value of the attribute.
10235	Sets the string value of this attribute.
10236	Read a term.
10237	Checks if the class exists and is loadable.
10238	Checks if the given class is a subtype of the given parent class.
10239	Checks if the class of the given parent is a subtype of the given class of the given
10240	Checks that the child class can be cast as a sub - type of the parent class.
10241	Get a Class object from the given class name.
10242	Create a new instance of the given class.
10243	Creates a new instance of the given class.
10244	Call a method on the given object with the given parameters.
10245	Call a method on an object.
10246	Call a static method with the given parameters.
10247	Get a Constructor from a Class.
10248	Find all the types of the matching setters for the given property.
10249	Returns a transactional queue.
10250	Creates a transactional re - queue.
10251	Get the Type for the given object.
10252	Reset the state machine.
10253	Search the node.
10254	Creates a new IntRangeType.
10255	Add support of TZ.
10256	Add an alternate dimension for the specified timezone.
10257	Adds a dimension to the table.
10258	Finds free variables that are not part of the query.
10259	Finds free non - anonymous variables.
10260	Compares two search nodes.
10261	Writes the given object to the given output file.
10262	Reads the contents of the input stream into a String.
10263	Create a search node.
10264	Generate the indent string to be used for the trace trace.
10265	Allocate argument registers.
10266	Returns true if the term is the last body term in the argument position only.
10267	This method is used to create a minor classification.
10268	Checks if all the examples have the same classification.
10269	Choose the best property to decide on.
10270	Creates a functor.
10271	Creates a new Variable object.
10272	This method is called when the user clicks on the form.
10273	Get the element at the specified index.
10274	Set the texture.
10275	Override paint to save double buffering.
10276	Create a buffered image.
10277	Create a 2D Graphics2D.
10278	Create a binary image.
10279	Create a SGISurface image.
10280	Set the queue search algorithm.
10281	Perform a depth - bounded search.
10282	Search the search graph.
10283	Main method.
10284	Returns a clause that can be used to construct the query.
10285	Consumes a list of terms.
10286	Parses a functor.
10287	List functor.
10288	Returns an array of terms.
10289	Variable.
10290	ECMA - 262 12. 2. 2. 1
10291	Parse a double literal.
10292	Consumes a string literal.
10293	Consume a Directive.
10294	Intern an operator.
10295	Initializes the built - in operators table.
10296	Consumes a token of the given kind.
10297	Consume a token of the given kind.
10298	Bind the session to the current thread.
10299	Rollback all the resources.
10300	Collect all elements from the iterator into the target collection.
10301	Reserve a call point for the given name and length.
10302	Convert time of day minute second and millisecond to milliseconds.
10303	Convert ticks to years.
10304	ticks with hours set to hours
10305	ticks with minutes set to the given value.
10306	ticksWithSecondsSetTo returns ticks with seconds set to seconds.
10307	ticks with year set to year
10308	Returns the ticks in the given month set to the given value.
10309	ticksWithDateSetTo returns the ticks with the given date set to the given date.
10310	Calculate the start of the given year.
10311	Returns the month - of - year for the given ticks.
10312	Read bytes from the source.
10313	Applies the given entry to this map.
10314	Returns the entry for the given key.
10315	This is the cuckoo - style algorithm.
10316	Rehash the hash table.
10317	ActionHandler for the work panel
10318	Set the next available state.
10319	Set the previous available state.
10320	Set the finished state of the listener.
10321	Creates a WAM resolving native library.
10322	Returns an iterator over the set of variables in the sequence.
10323	Calculate the expected value over all the symbols.
10324	Calculates the probability of a distribution of symbols.
10325	Set the ticks.
10326	This method is called by the client to perform the sorting.
10327	Creates a new URL from a string.
10328	Returns a String with the request info.
10329	Returns a String containing the header values of the request.
10330	Returns a String containing the cookies in the page.
10331	Returns a String containing the request parameters.
10332	Get the request scope as a HTML table.
10333	Get the page scope.
10334	Returns the HTML tag for the session scope.
10335	Returns the application scope.
10336	Get the principal from the request
10337	Writes out the start of the debug table.
10338	Converts a Map of String values to HTML table.
10339	Search the search graph.
10340	Sets the current state of the current screen.
10341	Walks the term and its children.
10342	Compares two search nodes.
10343	Update the internal registers.
10344	Notifies all active listeners of the given changes.
10345	Called when the clause is leaving.
10346	Checks if the context is in the top - level functor.
10347	Converts the elements of this set into an array.
10348	Sets the arguments of the operator.
10349	Returns the fixity for this rule.
10350	Returns true if this transformation is infix.
10351	Compare this symbol to another.
10352	This method is called when a property is changed in the screen.
10353	Register the work flow controller.
10354	Create an EnumAttributeFactory for the given class.
10355	Create a ComponentFactory instance.
10356	Returns the storage cell of this variable.
10357	Returns true if this variable is bound.
10358	Set the column attributes.
10359	Set the row attribute.
10360	Returns the column attribute at the specified index or null if the index is out of range.
10361	Get the row attribute or null if it is not present.
10362	Internal insert method.
10363	Creates a new TimeRangeType.
10364	Creates a new StringPatternType.
10365	Check the value is a CharSequence and matches the pattern if one is set.
10366	Creates a new initial context for the term.
10367	Update the registers of this WAMMemoryLayout.
10368	Get the value of this variable.
10369	Find the goal state.
10370	Joins the forward and reverse paths.
10371	Get the block and cache it.
10372	Get the properties for the named resource.
10373	Sets the rate of the sleep throttle.
10374	Read from the source.
10375	Skips n bytes.
10376	Gathers disjunctions from the expressions.
10377	Read an int from a byte array.
10378	Writes an int value to a byte array at a specific offset.
10379	Write an int value into a byte array at a specific offset.
10380	Get a 24 bit int from a byte array.
10381	Read a short from a byte array.
10382	Writes a short value to a byte array at a specific offset.
10383	Returns a new TreeSearchState for the given operator.
10384	Returns an iterator over the operators that are valid for the search.
10385	Get the id of the object.
10386	Get the value of the attribute.
10387	Sets the value of this IdAttribute.
10388	Convert a string to an array.
10389	Convert an array of strings to a string list.
10390	Convert a string like my_foo_bar_baz to my_foo_bar
10391	Converts a String to a String.
10392	Current configuration.
10393	List handlers.
10394	Resolve a call point.
10395	Create a WAMCallPoint object.
10396	Checks if the given HierarchyAttribute is a sub - category of this HierarchyAttribute.
10397	Returns the id of the attribute.
10398	Returns the value at the specified level.
10399	Get the last value.
10400	Serializes this hierarchy attribute.
10401	Deserializes this object from the stream.
10402	Compute the manhattan distance of the whole board.
10403	Modulo - 1
10404	Add an error message.
10405	Handle errors.
10406	Write out the string to the output stream
10407	Classify the decision tree.
10408	Compares two objects using the partial ordering.
10409	Returns an iterator over the elements of this list.
10410	intLogBase2 - > intLogBase2 - > intLogBase2
10411	intLogBase2v2 - > intLogBase2v2
10412	Convert an integer to its integer log10v2 representation.
10413	Convert an integer to its integer log - base 10v3 representation.
10414	intLogBase10 returns the int value of the given value.
10415	intLogBase10v2 - > intLogBase10v2
10416	Get the number of characters in the specified value.
10417	Get the character count for a long value.
10418	Get the number of characters needed to represent the given integer value.
10419	Sets the head of the WAM file.
10420	Emmit the compiled code into the byte code machine.
10421	Set the current screen.
10422	Evaluate the chain.
10423	Get the property value.
10424	Get the properties of the caller.
10425	Get the key iterator.
10426	Create the array properties.
10427	Sets the rate of the throttle.
10428	Evaluate the number.
10429	Find the properties file.
10430	Get the properties from the system properties.
10431	Get the properties from the classpath.
10432	Get the properties from a file or URl.
10433	Leave a functor.
10434	Gets the value of this variable.
10435	Sets the substitution.
10436	Creates a queue of nodes.
10437	Clean up the IO stream.
10438	Append a LoggingEvent to the socket.
10439	Fire the connector thread.
10440	Initialize printers.
10441	Commit the current transaction.
10442	Rolls back the current transaction.
10443	Request a write operation.
10444	Adds a cached write operation to the write cache.
10445	Acquires the global write lock.
10446	Releases the global write lock.
10447	Enlist this resource with the session.
10448	Enter the rule set.
10449	Inserts the specified element into the queue waiting up to the specified wait time for space to become
10450	Retrieves and returns the first element in the queue.
10451	Put an element into the queue.
10452	Inserts a new data item into the queue.
10453	Returns the next object in the source.
10454	Get the property as a boolean.
10455	Get the property as an Integer.
10456	Get the property as a Long.
10457	Call a mixin.
10458	Sets the addition visitor to visit the given node.
10459	Backtrack the state of a search node.
10460	Retrieve the code for a WAM call point.
10461	Executes the query and extracts the bindings.
10462	Decode a heap.
10463	Capture the current object.
10464	Restore the map.
10465	Get the specified attribute of the specified class.
10466	Put an attribute of a class.
10467	Get all the field names for the given class.
10468	Execute the test runner.
10469	Inserts the specified element into the queue.
10470	Poll for data.
10471	Create a new search node.
10472	Creates a queue of nodes.
10473	Simple walker.
10474	Create a simple walker with a goal predicate.
10475	Creates a TermWalker that walks through the terms in the tree.
10476	Creates a TermWalker that walks the term tree starting from the first node in the tree
10477	Creates a TermWalker that walks the term tree after the first occurrence of a term.
10478	Get properties object laoded from input stream
10479	Get the properties object from the given file.
10480	Get the properties object from the given URL.
10481	Get the properties of a file or URL.
10482	Computes the size of the grid.
10483	Initialize the font metrics.
10484	Add a PropertyChangeListener to the list of listeners
10485	Add a PropertyChangeListener to the list of listeners
10486	Remove a PropertyChangeListener.
10487	Fires a property change event to all listeners.
10488	Creates a new DoubleRangeType.
10489	Fade the target group.
10490	Show the left vertical bar.
10491	Show the left vertical bar.
10492	Show the right vertical bar.
10493	Sanitize radio controls.
10494	Waits for all conditions pass or the thread is interrupted.
10495	Waits for the given time to elapse or until the timeout expires.
10496	Execute the test runner.
10497	Appends classpath elements to the given command line.
10498	Creates a new type.
10499	Prints the introduction.
10500	Initialize the command line reader.
10501	Evaluate the given sentence.
10502	Evaluate the query.
10503	Get the set of types that can be converted to a boolean.
10504	Convert the byte b to a String and return the set of types that that can be converted
10505	Convert the given character to a String and return the set of types that can be converted to
10506	Get the set of types that can be converted to a short.
10507	Get the set of types that can be converted to int.
10508	Get the set of types that can be converted to a long.
10509	Get the set of types that can be converted to a float.
10510	Get the set of types that can be converted to a double.
10511	Get the type data for a string.
10512	Convert the given value to a String and return the set of types that that can be converted
10513	Convert a MultiTypeData object to a Java object.
10514	Adds a new attribute to the page context.
10515	Clear all data up to the given key.
10516	Expands the array.
10517	Internal insert method.
10518	Compares two search nodes.
10519	Parse the operators.
10520	Get the operators matching the given name.
10521	Checks if the candidate operator symbol is one of the given fixities.
10522	Create a new node that will be created by the successor.
10523	Pad string to size with padder.
10524	Returns the parsing errors.
10525	Get the options in force.
10526	Get the usage string for this command line option.
10527	Add trailing pairs to properties.
10528	Adds the parsed properties to the given properties.
10529	Add an option to the command line options map.
10530	Take the free arguments as a system property.
10531	Check if the option enforces a format for its argument.
10532	Compares the iterators in the given iterator with the iterators in the given mapping function.
10533	Returns an enumeration of options for this command.
10534	Returns the options to be passed to the command line.
10535	Sets the stemmer tag.
10536	Get the actual stemmer.
10537	Stem a word.
10538	This is the main method of the program.
10539	Creates a new float range type.
10540	Reset the state of the stack.
10541	Trace the frame of the environment variable.
10542	Trace a choice frame
10543	Internal function.
10544	next stack frame
10545	backtrack backtrack backtrack backtrack backtrack backtrack backtrack backtrack backtrack
10546	Trailing [ TR ] <- a
10547	unwind trail.
10548	Tidy down to the trail.
10549	Unify a pair of A1 and A2.
10550	Unify a constant.
10551	Print the slot.
10552	Generate a random start state.
10553	Checks if the puzzle state is solvable.
10554	Returns a new state that is a child of this state.
10555	Returns an iterator of valid operators.
10556	Returns a pretty - printed representation of the board.
10557	This method is used to swap tiles that are swapped down or down.
10558	Swap the two tiles in the board.
10559	Convert the goal state into a list of characters.
10560	Convert a list of characters into a puzzle state.
10561	Format the message to log4j.
10562	Convert the level to the log4j level.
10563	Requeue an element.
10564	Requeue an element.
10565	Increment the size and count for the given record.
10566	Decrement the size and count for the given record.
10567	Signal on size crossing.
10568	List all the names in the context.
10569	List all bindings for the given name.
10570	Add a property to the environment.
10571	Remove the specified property from the environment.
10572	This method runs garbage collection until the used memory count becomes stable.
10573	Literal Color MultiDimension Dimension String and String
10574	Resolve a mixin reference.
10575	Push a variable reference onto the value stack.
10576	Set the maximum height of a row.
10577	Update the max column width.
10578	This method is called when the user clicks on the page.
10579	Make a new node.
10580	This method is called by the action processor. It is called by the action processor.
10581	Substitute built - in expressions in a clause.
10582	Initialise the symbol table.
10583	Performs a top - level check on the given clause.
10584	Convert a list of terms to a string.
10585	Evaluates the comparison of two numbers.
10586	Changes the state of the thread.
10587	Signal that the process is terminating.
10588	Mark the process as terminated.
10589	Inserts a new data element into the heap.
10590	Ceiling Log2
10591	Update the minimum node.
10592	Compares two nodes.
10593	Inserts a new node into the root list.
10594	Restart the sweep thread.
10595	Finds all objects that match the given search method.
10596	Returns a collection of objects that match the given search method.
10597	Finds all solutions and adds them to the result collection.
10598	Iterate through the source iterator until a filtered element is found.
10599	Restore the values of the given object.
10600	Get a property cached in this memento.
10601	Store the specified multi typed data.
10602	Store the new data under the specified property name.
10603	Capture the memento.
10604	Removes and returns the first element from the list.
10605	Convert modifiers to a string.
10606	Convert a string to an integer.
10607	Convert a string to a Date object.
10608	Checks if a string is a date.
10609	Checks if the string s format is a time.
10610	Checks if the string is a date time.
10611	Create a TokenSource for a string.
10612	Create a TokenSource for the given file.
10613	Create a TokenSource for the given input stream.
10614	Returns true if instruction is a constant.
10615	Checks if the instruction is a void variable.
10616	Is the instruction a non - argument instruction?
10617	Returns an iterator over the children of this node.
10618	Get the argument at the given index.
10619	Returns an iterator over the children of this operator.
10620	Returns a string representation of the arguments.
10621	Retrieve summary.
10622	Retrieve records from the database.
10623	Executes a query.
10624	Emmit code buffer.
10625	Set the basic type.
10626	Consult the type checking rules and add them to the knowledge base.
10627	Print a variable binding.
10628	Expands the result set to a map of variables.
10629	Read the stream and handle any exceptions that occur.
10630	Read the stream.
10631	Returns the current time.
10632	Returns the current time in milliseconds.
10633	Update the track info.
10634	Update the PlayInfo object with the given parameters.
10635	Called when the player is done playing.
10636	Handle the request for a resource resource.
10637	Handle an event request.
10638	Fire the start music request.
10639	Initialize the parser.
10640	Start the reader thread.
10641	Shutdown the connection.
10642	Reset the parser.
10643	Parse packets.
10644	Process a packet.
10645	Set the cli option.
10646	Create a chat.
10647	Internalizes the content manager.
10648	Reset the content to the given map.
10649	Sets a property on the content object.
10650	Adds a filter to the end of the filter array.
10651	Process the request.
10652	Reset all properties.
10653	Initialize the Packet Writer.
10654	Send a packet to the server.
10655	Get the next packet from the queue.
10656	Open the stream.
10657	Returns a list of strings describing the descriptors and the type of the descriptor.
10658	Checks if the descriptor is contained in the descriptors list.
10659	Add event life cycle listener.
10660	Shuts down the timer.
10661	Checks if the content of the two files are the same.
10662	Cleans a direct ByteBuffer.
10663	Checks if the given entry is valid.
10664	Mask null keys.
10665	Compares two objects.
10666	Returns the entry for the given key.
10667	Resizes the table to the specified capacity.
10668	Adds all of the mappings from the given map.
10669	Removes the value associated with the given key.
10670	Removes the entry for the given key.
10671	Removes the given object from the table.
10672	Adds a new entry to the table.
10673	Create a delegate map.
10674	Encode a string as a binary attribute.
10675	Encodes a byte array into a hexadecimal string.
10676	Encodes a string into Base64.
10677	Encodes a byte array into Base64.
10678	The count of the elements in the collection.
10679	Set the controller to be called when the track is selected.
10680	Set the progress controller to use when jump is to be made.
10681	Set the change playback controller.
10682	Set change volume controller.
10683	Broadcasts the available playlists.
10684	Handle command resource events.
10685	Handles volume change.
10686	Handle jump.
10687	Handles the select track command.
10688	Get the thread cache.
10689	Get the request cache.
10690	Returns the alt field name.
10691	Returns a new map with properties that are not in include and that are not in exclude.
10692	Returns the path to the shard with the given id.
10693	Adapt the given source object to a JCR session.
10694	Invoke a method with the given name and arguments.
10695	Delete a tree of content.
10696	Update one or more properties of an entity.
10697	Set the ping interval.
10698	Schedule a periodic ping server task.
10699	Add all options.
10700	Checks if the given option is used by this command.
10701	Parse the command line.
10702	Prints the usage for the given application.
10703	Parse the command line.
10704	Initialize the connection.
10705	Start TLS negotiation.
10706	Returns the compression handler if any.
10707	Request stream compression.
10708	Start the stream compression.
10709	Notifies connection listeners that an error occurs.
10710	Notify connection listeners of the reconnection.
10711	Registers a SASLMechanism implementation.
10712	Get the registered SASL mechanisms.
10713	Returns the output plugin behaviour.
10714	Log an INFO message and a throwable.
10715	Log an error.
10716	Log a message with a prefix.
10717	Create a StartEvent.
10718	Creates a StartEvent.
10719	Notifies all listeners of a string.
10720	Checks if the resource provides a resource.
10721	Checks if the given source is contained in the list of resources.
10722	Checks if the resource IDs are contained in the resources.
10723	Provide a list of resources.
10724	Get cached.
10725	Returns a cache key for the given key space column family and key.
10726	Removes a key from the cache.
10727	Put a new item in the cache.
10728	Get the location map for the Java class.
10729	Include a file or directory.
10730	Include a jar file.
10731	Add a SASL Mech.
10732	Add a collection of SASL Mechs.
10733	Create the debug streams.
10734	Activate the proxy server.
10735	Registers standard Common Events.
10736	Registers an event listener.
10737	Registers an event ID.
10738	Do with lock.
10739	Unregister an event ID.
10740	Checks if the event can be run.
10741	Creates a new DSE session.
10742	Creates a PlayerError object with the given source and error message.
10743	Start playing the track.
10744	Stop playing the player.
10745	Command a player.
10746	Create a playlist request.
10747	Create a BroadcasterPlaylist object from the given Identification and Playlist.
10748	Appends a string to the end of the url.
10749	Add a boolean query parameter.
10750	Adds a query parameter with a number value.
10751	Add a query parameter to the URL.
10752	Add a query parameter to the URL.
10753	Get the playlist for the given event.
10754	Launch Nakamura.
10755	Check if Nakamura is running.
10756	Check if a resource exists
10757	Browser button toggles.
10758	Create an ImageIcon from a file.
10759	Launch Nakamura.
10760	Sets the values of this IntArray.
10761	Exports the level and level data.
10762	Get the value at the given index.
10763	Get a JSON value.
10764	Get the value as an integer.
10765	Get the Double value.
10766	Get the string value.
10767	Creates a CommandResource.
10768	Verify that the given command is a valid command.
10769	Verifies that the capabilities of the given command are compatible with the capabilities of the given command.
10770	Verifies that the given command is valid against the given capabilities.
10771	Executes a batch of statements asynchronously.
10772	Get the subclasses of the given class.
10773	Get the subclasses of the specified class.
10774	Search for classes in the given location.
10775	Search for classes in the given directory.
10776	Search jar.
10777	Returns a list of all resources in this resource.
10778	Returns the size of this map.
10779	Process a packet.
10780	Get Volume from EventModel
10781	Error RSM page not found.
10782	Create an error request.
10783	Checks if identifiable is a target of the eventModel.
10784	Enable or disable login.
10785	Decorate a Set with a synchronized Set.
10786	Set the name of the user.
10787	Update the state of the current state.
10788	Returns a collection of roster groups that contain this entry.
10789	Appends the RSM query element to the query element.
10790	Parse RSM query element.
10791	Filter the objects in the RSM response.
10792	Create a LeavingEvent.
10793	Reload roster.
10794	Create a roster entry.
10795	Returns a collection of all entries in the roster.
10796	Get the presence of a resource.
10797	Set the presence of offline users.
10798	Fire roster event.
10799	Set the connection digest.
10800	Generate a music resource.
10801	Creates a PlayerRequest object.
10802	Get the time passed.
10803	Register a listener to be notified when the properties are updated.
10804	Initializes the properties file.
10805	Reload the Properties - File.
10806	Parse StreamError element.
10807	Parse mechanism elements.
10808	Parse compression methods.
10809	Parse a packet extension.
10810	Decode a string into an object.
10811	Verify if the event is a PlaybackEvent.
10812	Get playback state from resource.
10813	Get the secret key for the given subdomain.
10814	Check if multiple subdomains are allowed.
10815	Puts a new key - value pair into the map.
10816	Returns the key set.
10817	Returns a collection of values.
10818	Purges the given reference.
10819	Returns the entry for the given key.
10820	Hash entry.
10821	Creates a new reference entry.
10822	Control events.
10823	Sets the presence of the vague.
10824	Update vague.
10825	Delivers a message to all the listeners.
10826	Generate the script.
10827	Initialize the output directory.
10828	Load a property file.
10829	Write a file.
10830	Import progress.
10831	Decorate a collection with a synchronized collection.
10832	Discover the hosts in the range specified.
10833	Get the REST REST response.
10834	Gets the thread pool.
10835	Create a StopMusic request from source to target.
10836	Verify if the event is a stop music event and if the player is the target of the
10837	Get a DSE cluster.
10838	Add a connection listener.
10839	Add packet listener.
10840	Add packet sending listener.
10841	Notify listeners of the new sent packet
10842	Add packet interceptor.
10843	Fire interceptor listeners.
10844	Convert a value to a Java object.
10845	This method is called when a connection is lost. It will attempt to reconnect with the server
10846	Get the current thread id.
10847	Checks if the node is valid.
10848	Get the key associated with the given value.
10849	Get the value at the specified index.
10850	Lookup a node in the tree that is valid.
10851	Lookup the node at the given index.
10852	Compares two objects.
10853	Returns the least node with the given index.
10854	Returns the most node at the given index.
10855	Returns the next greater than or equal to index.
10856	Returns the most valid node that is greater than or equal to the given index.
10857	Returns the least valid node.
10858	Copy color from one node to another.
10859	Returns true if the node is red.
10860	Returns true if the node is black or false if it is not.
10861	Returns the parent node at the given index.
10862	Returns the parent node at the given index.
10863	Returns the right child of the given node at the given index.
10864	Returns the left child of the given node at the given index.
10865	Rotate the left - hand side of a node.
10866	Rotate right.
10867	Insert a node in the tree.
10868	Red - Black - Delete.
10869	Checks that the given object is not null and that it is not a Comparable.
10870	Inserts a new value into the Map.
10871	Checks if the specified object is in the cache.
10872	Checks if the value is in the list.
10873	Get the value associated with the specified key.
10874	Remove the key.
10875	Clear the node cache.
10876	Returns a set of keys in the map.
10877	Returns a collection of values in this map.
10878	This method returns a FilterableSet of all entries in the tree.
10879	Copy all entries from this map into the new map.
10880	Remove all expired entries.
10881	Cull the cache.
10882	Activate the trusted proxy.
10883	Get the player request for the playlist with the given name.
10884	Initialize a roster store.
10885	Open a roster store.
10886	Scan for addresses in the range of the given address.
10887	Convert an address to a subnet address 0.
10888	Exports the data.
10889	Import TrackInfo from HashMap.
10890	Add all applications from the given set.
10891	execute an application
10892	Prints the list of all the properties.
10893	Prints the usage information.
10894	Main method.
10895	Creates a Mute Event.
10896	Creates a Mute Event.
10897	Get the schema for the given schema name.
10898	Write the lines to the given file.
10899	Check if the executable JAR is in the executable JAR.
10900	Adds an option to the command line.
10901	Get the schema.
10902	Get the field with the given name.
10903	Get the package name from a JarEntry.
10904	Map content to values.
10905	Create a new event listener.
10906	Set the state of the iteration.
10907	Iterate over the given collection.
10908	Do the iteration.
10909	Get track info from list resource.
10910	Exports the data in this object.
10911	Import a resource.
10912	Create an error image.
10913	Get an image from the specified URL.
10914	Get the text from the URL.
10915	Reverses the keys in the source map to the target map.
10916	Returns the result of the Cartesian product.
10917	Start the daemon.
10918	Return this object to the pool.
10919	Create an EndedEvent.
10920	Get the current track.
10921	Update the playback with the given track info.
10922	Shuffle the playlist.
10923	Verify that the capabilities are met.
10924	Exports the playback mode.
10925	Escape a string for XML.
10926	Handle a challenge received from the server.
10927	Convert this object to a JSON object.
10928	The main loop.
10929	Handle an event.
10930	Join all queues.
10931	Sets a property to the given value.
10932	Remove a property.
10933	Adds a principal to the list of principals.
10934	Remove a principal from the principals list.
10935	Root WindowClosing event handler.
10936	This method is called when a user - supplied event is received.
10937	Fired when the event is fired.
10938	Returns true if the resource is permanent.
10939	Set the name of the group.
10940	Returns true if the specified object is in the hash table.
10941	Returns true if the hash table contains the specified value.
10942	Associates the specified value with the specified key.
10943	Removes all entries from the hash table.
10944	Hash the given object.
10945	Compares two keys.
10946	Compares two values.
10947	Ensures that the table has a given capacity.
10948	Calculates the new capacity.
10949	Creates an Iterator over the EntrySet.
10950	Load the object from the binary stream.
10951	Register the module.
10952	Initialize the context.
10953	Notifies all connection listeners that a reconnection failed.
10954	Notifies all connection listeners that the attempt to reconnect is allowed.
