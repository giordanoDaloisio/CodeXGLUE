0	Copies the contents of this stream to the given character sink.
1	Reads the contents of the file as a String.
2	Reads the contents of the file as a list of Strings.
3	Reads bytes from the underlying input stream.
4	Grows the buffer by a half of the capacity of the buffer.
5	Reads more characters from the input stream.
6	Start draining.
7	Returns an array of the elements of the iterable.
8	Returns true if the given iterable is empty.
9	Converts an Iterable to an Iterator.
10	Consumes an array of elements and returns an iterator that consumes the elements.
11	Returns an iterator that combines the given iterators with the same elements.
12	Removes all elements from the iterator.
13	Writes the given bytes to the stream.
14	Parses the given cache builder specification.
15	Converts this cache to a cache builder.
16	Returns a new Joiner that skips null values.
17	Creates an immutable array containing the elements of the given array.
18	Returns an immutable copy of this IntArray with the specified range.
19	Reads a single byte from the input stream.
20	Reads bytes from the underlying stream.
21	Write a map to a stream.
22	Serializes a Multiset to a stream.
23	Returns a FieldSetter for the given field name.
24	Starts the stopwatch.
25	Adds the specified number of occurrences to the specified element.
26	Resizes the array to the given size if necessary.
27	Converts a byte array into an InetAddress.
28	Compress the given array of hextets to find the longest run of zeroes.
29	Converts an array of hextets to an IPv6 address string.
30	Returns an InetAddress for the given URI literal.
31	Checks if the given address is a compatible IPv4 address.
32	Returns the compat IPv4 address of the given IPv6 address.
33	Checks if the given address is a Teredo address.
34	Returns true if the given address is a ISATAP address.
35	Returns the ISATAP IPv4 address of the given IPv6 address.
36	Returns the embedded IPv4 client address.
37	Checks if the given string is a mapped IPv4 address.
38	Decrements the address by one.
39	Creates a new reader for the given file.
40	Writes the given byte array to the given file.
41	Copies the contents of the given file to the given output stream.
42	Copies the contents of the given source file to the given destination file.
43	Creates a new file and sets its last modified time to the current time.
44	Reads the first line of the given file.
45	Creates a new builder with the given expected size.
46	This method is deprecated.
47	Creates a new MinMaxPriorityQueue with the given initial contents.
48	Calculates the new capacity of the queue.
49	Flips a hash code.
50	Returns an element order for natural order.
51	Enter a new lock.
52	Enter the lock and wait for it to enter.
53	Enter the monitor when the guard is satisfied.
54	Enter the monitor when the guard is satisfied.
55	Enter the monitor when the guard is satisfied.
56	Enter the monitor if the guard is satisfied.
57	Enter a guard if it is satisfied.
58	Enter the monitor if the guard is satisfied.
59	Attempts to enter the monitor if the guard is satisfied.
60	Waits for the given guard to be satisfied.
61	Waits for the given guard to be satisfied and then blocks until the guard is satisfied.
62	Waits for the given guard to be satisfied and returns true if the guard is satisfied or false
63	Returns the number of waiters in the queue.
64	Signal the next waiter.
65	Signal all waiters.
66	Adds a guard to the list of active guards.
67	Ends waiting for the given guard.
68	Await the given number of nanoseconds for the guard to be satisfied.
69	Shuts down the ExecutorService and waits for all tasks to terminate.
70	Writes a character sequence to the output stream.
71	Executes all the runnables in the queue.
72	Load 64 bit values from the given byte array.
73	Store a 64 - bit long into the given byte array at the given offset.
74	Load 32 - bit integer from the given byte array at the given offset.
75	Creates a new media type with the given type and subtype.
76	Parses a media type from a string.
77	Capture the type of the superclass.
78	Removes all elements from the set.
79	Escapes all characters in the given string.
80	Grows the buffer by the given size.
81	Sets the concurrency level.
82	Builds a cache with the current configuration.
83	Allocates the arrays.
84	Adds the given value to the current value.
85	Calculate the new mean for a given value.
86	Rebuilds the hash table.
87	Selects a table size to be used for the given size.
88	Returns an immutable table with an empty table.
89	Creates an immutable table with the specified row key column key and value.
90	Creates an immutable table with the same cell set as the given table.
91	Returns a converter that converts objects to their identity.
92	Creates an immutable table for the given cell list.
93	Returns an immutable multiset containing the specified element.
94	Returns a builder that reverses the natural order of the elements in descending order.
95	This method is used to modify the given multiset to retain the occurrences of the given multis
96	Traverses the tree starting at the given root and then traverses all its children.
97	Creates a new StringBuilder that can hold a collection of bytes.
98	Returns a new TypeResolver that resolves all types in the given context type to the invariant types
99	Sets the map.
100	Removes all values for the given key from the map.
101	Creates a FluentIterable that combines the given input iterators without defensive copy.
102	Creates a FluentIterable that iterates over the elements in the given order.
103	Returns an array of the elements of this sequence in the specified type.
104	Returns an immutable multimap containing the specified entries.
105	Returns an immutable collection of all entries in this map.
106	Count the number of bytes skipped by skipping the stream.
107	Reads the contents of the file into a byte array.
108	Hashes the contents of this file using the given hash function.
109	Returns true if this source is equal to the other source.
110	Returns an immutable map.
111	Returns an immutable map containing the specified range and value.
112	Returns a new hash function that concatenates the given functions.
113	Returns an immutable sorted set containing the specified element.
114	Sets the expected number of nodes to be expected.
115	Returns a lexicographical ordering.
116	Starts the Finalizer thread.
117	Returns an immutable sorted map.
118	Returns an immutable sorted map with the specified keys and values.
119	Returns an immutable sorted map with the specified entries.
120	Returns an immutable view of the specified map.
121	Weak hash length 32 with seeds.
122	Checks the current state of the service.
123	Returns all files in the given directory.
124	Returns true if the given directory contains a file with the given name.
125	Returns true if the two paths are equal.
126	Creates a file at the given path.
127	Returns the parent of the given path.
128	Checks whether the path allows insecure deletion.
129	Throw a FileSystemException that indicates that a file was deleted.
130	Rehashes a hash value.
131	Returns the segment for the given hash.
132	Returns an immutable list that delegates to the given list.
133	Returns the coalesced range with the given value.
134	Unregister all subscribers on the given listener.
135	Returns all subscribers for the given event.
136	Finds all subscribers annotated with the given listener.
137	Returns an immutable list containing the elements in the specified iterable sorted by natural natural order.
138	Returns an immutable list containing the specified elements.
139	Returns an immutable list containing the specified elements.
140	Creates a builder that will create an immutable list of the specified size.
141	Concatenates two arrays of the given type.
142	Returns an array containing all elements from the given collection.
143	Checks that the element is not null.
144	Returns the JavaLangAccess object for the current thread.
145	Canonicalizes a wildcard type.
146	Returns an immutable list containing the specified elements.
147	Creates an immutable sorted map builder with the specified expected size.
148	Returns an immutable set of all entries in this map.
149	Finishes the line.
150	Returns a transformer that transforms a function to an entry.
151	Transforms an entry.
152	Returns a function that transforms an entry to an entry.
153	Creates an immutable map of the elements in the given collection.
154	Returns the string representation of the pending value.
155	Updates the contents of the given ByteBuffer.
156	Returns an immutable sorted set that delegates to the specified SortedSet.
157	Instantiates a Multimap.
158	Returns the sum of all values in this map.
159	Loads the finalizer from one of the given loaders.
160	Dispatches all listeners.
161	Copies the contents of the given URL to the given output stream.
162	Post an event to the dispatcher.
163	Sets the concurrency level.
164	Sets the delegate and inverse maps.
165	Returns an array of the values in this matrix.
166	Executes the given task on the worker.
167	Transforms a table of values.
168	Creates a new TreeMultiset containing all of the elements in the given Iterable.
169	Adds all causes of the given exception to the set of exceptions seen.
170	Expire the cache after a certain amount of time.
171	Sets the priority of the thread.
172	Parses a host and port string into a HostAndPort object.
173	Parses a host string and returns a HostAndPort object.
174	Parses a host and port string.
175	Extracts the host and port from a bracketed host - port string.
176	Returns a range of all values in the specified comparator.
177	Returns a range with the reverse order.
178	Returns an immutable view of the given set.
179	Returns an immutable map.
180	Check if the lock is currently acquired by the current thread.
181	Returns a new range set that contains all the elements of this set that intersect the given range
182	Creates an immutable entry.
183	Returns an immutable copy of the given entry.
184	Wrap the given char escaper in a thread safe manner.
185	Adds the given value to the current value.
186	Construct an immutable bimap with the specified entries.
187	Creates an immutable map from the given entries.
188	Returns a function that returns the identity value.
189	Creates a function that accepts a predicate.
190	Returns a reference to the unset value.
191	Returns true if the entry is expired.
192	Returns the wait length of the given number of milliseconds after the first available time.
193	Returns the code point at the given index in the given sequence.
194	Ensure that the internal data structures have at least the given capacity.
195	Inserts the given entry into the hash table.
196	Inserts the given entry into the hash table.
197	Deletes the entry from the table.
198	Deletes the entry from the table.
199	Removes the entry from the table.
200	Remove the entry with the given key hash from the map.
201	Remove the entry with the given value hash from the map.
202	Sets the expected number of nodes to be added to the network.
203	Sets the expected number of edges to be added to the network.
204	Returns the SQL statement with the values of the bind variables.
205	Sets the value of a named parameter.
206	Converts an object to a byte array.
207	Converts a byte array to an object of the given type.
208	lock data line
209	Saves the transaction undo log.
210	The function domain redis template.
211	Returns the application map.
212	Locates a file on the classpath.
213	Creates a new ConnectionInformation object with the given connection.
214	Map a throwable to a resource ID.
215	Checks if the given package is visible and if so checks if it is not visible.
216	Returns the default EventBus instance.
217	Subscribe a subscriber to a specific event type.
218	Unsubscribe all subscriptions for a given event type.
219	Unregisters a subscriber.
220	Post an event to the event bus.
221	Gets the sticky event.
222	Removes a sticky event from the event queue.
223	Removes a sticky event from the event queue.
224	Returns all event types of the given class.
225	Adds the interfaces to the list of event types.
226	Adds a subscriber info index.
227	Attaches the dialog to the activity.
228	Prepare the error fragment for the error dialog.
229	Returns the title for the given failure event.
230	Get the message for the throwable.
231	Post complete drain.
232	Get the value of the current thread blocking until the value is available or the timeout is reached
233	Returns the element at the given index or the default value if the element is not present.
234	On error resume.
235	Repeat the stream by the number of times the predicate returns true if the stream is full.
236	Converts a Callable to a Mono.
237	Gets the current value of the sequence and subtracts the given value.
238	Returns the given subscription as a QueueSubscription.
239	Emits an error when the subscriber is closed.
240	Returns the value produced by the updater.
241	Creates a new subscription for a single value.
242	Shifts the last Publisher to the end of the list.
243	Returns a strategy that waits for a number of seconds to occur in phase.
244	Combines this Publisher with another Publisher.
245	Returns a Mono that is empty if the value is null.
246	Returns the result of applying the specified Mono to this one.
247	On error resume.
248	Gets the onEachOperatorHooks.
249	Creates a new Mono that will delay until the given trigger generator completes.
250	Drain the queue until all items are available.
251	Try to subscribe to a single value using a function.
252	Convert the current Flux into a single value.
253	Applies a parallel collect operation to all elements of this Flux using the provided Supplier and Bi
254	Concatenates the contents of this Flux into a single one using the provided Function.
255	Cancels the task.
256	Executes the given Runnable on all the items in the parallel stream.
257	Executes the provided onError on all errors in the parallel stream.
258	Executes the provided action on each request.
259	Perform a parallel flat map operation on this Flux.
260	Merge the contents of this Flux into a sequential Flux.
261	Validates the given subscribers.
262	Returns a new Flux that is backed by this Flux using the provided prefetch size.
263	Creates a new Flux by applying the provided function to each element of the resulting Flux
264	Returns the current value of the given field.
265	Log a signal.
266	Starts the download.
267	Pause all running tasks.
268	Get the size of the file in bytes for the given download id.
269	Unbinds the service if it is idle.
270	Set the maximum number of threads that can be used to download the file.
271	Pause all download ids.
272	Start the download.
273	Liefert die die Liste ausgebene Liste.
274	Add a task to the list.
275	Pause the download queue.
276	Resumes the download.
277	Checks if the response code is a range response.
278	Find instance length for trial.
279	Sets whether the animation should be animated.
280	Set the elevation of the shadow.
281	Set the color of the label.
282	Add configuration properties.
283	Add the comment for the model class.
284	Add a comment to an enum.
285	Add the comment for the getter method.
286	Add the comment for the general method.
287	Add a comment to an existing XML element.
288	Returns the fully qualified name of this type.
289	Gets the select key element.
290	Creates a new resource table for the framework resources.
291	Creates a new resource table for the given package and resource paths.
292	Adds missing styleable attributes to the resource table.
293	Set WiFi on.
294	Add the smallest screen width to the qualifiers if it is not already present.
295	Instrument a native method.
296	Rewrite the body of a method.
297	Checks if the given method is a java. util. GregorianCalendar constructor.
298	Make the class public.
299	Make the given method public.
300	Make a private method private.
301	Sets the node that is being traversed after this node.
302	Sets the accessibility node that is before this node.
303	Adds a child node to this node.
304	Pushes a default return value to the stack.
305	Returns the mode of a file or directory.
306	Creates a new activity controller and starts it.
307	Changes the configuration of the activity.
308	Recreates the activity.
309	Sets the call state.
310	Expect a message to be logged.
311	Returns whether the intent filters should be exported.
312	Get the shape end point for a given shape type
313	Computes the point at the given length.
314	Creates a ResTable_config object from the given buffer.
315	Compare two ResTable_config objects.
316	Returns true if this locale is default.
317	Returns the application restrictions for the given package.
318	Adds a user profile to the user list.
319	Adds a user to the user manager.
320	Connects to the socket.
321	Intercepts a invoke virtual method with invoke dynamic.
322	Adds the mappings from the given dynamic reference table to this lookup table.
323	Adds a package ID mapping to the given package name.
324	Grants the specified permissions to the specified process.
325	Deny the specified permissions.
326	Selects the available sdks from the configuration.
327	Reads the file from zip.
328	Get the next sent request.
329	Adds a response rule to the FakeHttpLayer.
330	Adds a response rule to the HTTP layer.
331	Stops the output stream associated with the given native object.
332	Adds a response rule to the list of responses.
333	Add a new Bluetooth audio route to the router.
334	Sets the priority of a thread.
335	Returns the priority of the specified thread.
336	Returns the index of the n - bit in this bit set.
337	Set the mode of the specified operation.
338	Converts a string representation of a color to a color code.
339	Returns the color type of the given string.
340	Parse a float attribute.
341	Create an image decoder for the given asset.
342	Create an image decoder for the given source.
343	Clicks a menu item.
344	Call onActivityResult method.
345	Starts the lock task.
346	Stops the lock task.
347	Add a runnable to the scheduled queue.
348	Post a runnable to the queue at the front of the queue.
349	Removes the given runnable from the queue.
350	Advance the current time to the last scheduled runnable.
351	Advance the cursor by the given amount.
352	Advance the current time to the given time.
353	Run one task.
354	Bind a service to a user.
355	Sets the current time in milliseconds.
356	Returns true if the queue is idle.
357	Reset the queue.
358	Builds an activity controller.
359	Builds an activity controller.
360	Creates an activity instance with the given class.
361	Build a new FragmentController instance.
362	Speak a text.
363	Returns the size of the default display.
364	Get the FileSystem for a given jar file.
365	Returns all logs for a given tag.
366	Returns all the known manifest files.
367	Get a broadcast receiver by class name.
368	Deletes a channel group.
369	Returns the Java version of the JVM.
370	Applies a transformation to the motion event.
371	Returns the value associated with the given key.
372	Load a resource bag value.
373	Add a runnable to the queue.
374	Post a runnable to the front of the queue.
375	Adds an activity to the list of activities.
376	Adds a service to the list of services for the given component.
377	Adds receiver to the activity if it is not already present.
378	Adds a provider to the list of providers for the given component.
379	Adds or updates an activity to the list of activities.
380	Adds or updates the service.
381	Adds or updates the receiver to the list of receivers.
382	Adds or updates a provider to the list of providers.
383	Removes an activity from the list of activities.
384	Remove a service from the registry.
385	Remove a provider from the registry.
386	Removes all receivers for a component.
387	Set the list of resolve infos for an intent.
388	Add a resolve info for an intent.
389	Adds a package to the application.
390	Adds an intent filter for an activity.
391	Add an intent filter for a service.
392	Adds an intent filter to the receiver of the specified component.
393	Add an intent filter for a component.
394	Finds the parent of the script in the given packed_locale.
395	Finds all the ancestors of a script in a packed_locale.
396	Call the PackageParser to parse the package file.
397	Returns an intent that can be used to launch an activity.
398	Verify the type of a ResTable_type.
399	Finds all libraries in the specified resource directory.
400	Returns the name of the organization that the user is currently authenticated.
401	Set the list of package names that are permitted to access accessibility services.
402	Set the list of input methods that are permitted to be called by the user.
403	Activates a reset token for the given component.
404	Returns a set of resource configurations.
405	Returns the set of resource locales.
406	Opens an asset from the assets list.
407	Adds a list of packages to the restore data.
408	Run the given runnable if the thread is paused.
409	Execute the given runnable on the main thread.
410	Implementation of the Parcelable interface.
411	Writes a blob to the buffer.
412	Writes a blob to the native buffer.
413	Returns the contents of the buffer as a byte array.
414	Sets the data position.
415	Checks that the item is consistent with the data in the buffer.
416	Returns the next element in the buffer.
417	Reads the next item from the buffer.
418	Reads a value from the stream.
419	Read zeroes.
420	Reads a primitive value.
421	Writes an item to the buffer.
422	Reads the contents of an input stream into a byte array.
423	Returns the native object id for the given object.
424	Returns the native object with the given id.
425	Call attach method on the real application.
426	Sets whether the network is active.
427	Play a sound.
428	Loads a sound from the specified path.
429	Reconstructs the widget view as if the phone was rotated.
430	Creates widgets for the given app widget provider.
431	Invokes the seek complete listener.
432	Invoke info listener.
433	Invoke the error listener.
434	Returns the default display.
435	Sets the density of the display.
436	Set the XDPI of the shadow display.
437	Set the ydpi of the shadow.
438	Sets the name of the display.
439	Sets the flags of the display.
440	Set the width of the application.
441	Set the height of the application.
442	Sets the width of the display.
443	Sets the height of the view.
444	Sets the rotation of the shadow.
445	Set the state of the shadow display.
446	Releases the connection to the connection manager.
447	Establishes a connection to the given route.
448	Returns the common super class of two types.
449	Qualifies a string value.
450	Navigate to the next node in the document.
451	Checks if the given name is supported by Android.
452	Adds an asset to the asset store.
453	Returns the qualifier string for the given configuration.
454	Sets the qualifiers for the application.
455	Builds a string from a char array.
456	Loads a service from the given class loader.
457	Loads a service from the classpath.
458	Loads a service from the system property.
459	Check if the given device has permission to access the given package.
460	Revokes a USB device permission.
461	Adds or updates a USB device.
462	Removes a USB device from the system.
463	Adds a port to the USB manager.
464	Opens a USB accessory.
465	Adds a data entry to the DropBox.
466	Creates a media item.
467	Creates a deep proxy for the given class.
468	Gets the value of the field with the given name.
469	Calls a method on an instance.
470	Call a method on an instance.
471	Call a static method on a class.
472	Call a static method on a class.
473	Creates a new instance of the given class.
474	Call the constructor of the given class.
475	Starts the ranging process.
476	Get the font for the specified request.
477	Get the compile time sdk resource table.
478	Dumps the contents of a view.
479	Gets the inner text of a view.
480	Get the list of registered receivers that match the given intent.
481	Post an intent to the broadcast receiver.
482	Convert RGB RGB to HSV.
483	Adds a new section to the list of sections.
484	Ends the current trace section.
485	Get a provider for the given key.
486	Creates a new file.
487	Runs all tasks in the queue.
488	Executes the next task in the queue.
489	Request audio focus.
490	Abandon an audio focus request.
491	Starts the native output format.
492	Returns the buffer at the specified index.
493	Queue an input buffer for processing.
494	Releases the output buffer for the specified index.
495	Simulates the time change of all events in the event store.
496	Converts a map of meta data to a Bundle.
497	Converts a SQL statement with a localized unicode collator.
498	Creates a new PackageInfo object from the given PackageInfo object.
499	Checks if the given package is granted permissions for backwards compatibility.
500	Apply the given flags to the given component info.
501	Returns the index of the requested permission in the package.
502	Returns the badged icon for the user.
503	Checks if the current user has profile owner or device owner on current user.
504	Extracts the characters corresponding to the given code point.
505	Create a new instance of the specified class using reflection.
506	Get the status for the given account and authority.
507	Returns the content observers that have been registered for the given URI.
508	Adds a display to the shadow display manager.
509	Change display configuration.
510	Fixes the trace path.
511	Finds the next set bit in the given bit set.
512	Resets the calendar to the beginning of the given fields.
513	Parse the cron expression.
514	Returns the index of the argument.
515	Generates the load instruction.
516	Stores a variable to the stack.
517	Load the given number of arguments into the instruction.
518	Load an array of arguments.
519	Load a local variable.
520	Stores a local variable.
521	Swap the type with the given type.
522	Box a type.
523	Unbox a number type.
524	Compare a type to a given mode.
525	Generates an instruction to access a field.
526	Gets a static field.
527	Puts a static field to a field of a class.
528	Gets a field.
529	Puts a field to a class.
530	Generates an instruction to invoke a method.
531	Invokes a virtual method on the given object.
532	Invokes a constructor on the class.
533	Invokes a static method on the given class.
534	Invokes an interface method on the given object.
535	Throw an exception of the specified type.
536	Checks if the given type is a cast to the given type.
537	Visits the first frame of the class.
538	Start the frame.
539	Creates a new method item.
540	Creates a new float item in the pool.
541	Creates a new string item.
542	Create a new name type item.
543	Returns the item with the given key.
544	Put two shorts into the pool.
545	Put a short into the pool.
546	Visit an enum.
547	Visits an annotation.
548	Returns the position of the twist in the given phase.
549	Create a jpeg image from a raster.
550	Visits a parameter.
551	Visits an annotation.
552	Visits a parameter annotation.
553	Visits a type instruction.
554	Visits a field instruction.
555	implement the visitor to add instructions to the method.
556	Visits a table switch instruction.
557	Visits a lookup switch instruction.
558	Generates an instruction to create a multi - array of arrays.
559	Visits a local variable annotation.
560	Visits a line number.
561	Reads the type of the frame.
562	Sets the stack to the given values.
563	Returns the type of the given local.
564	Sets the local variable.
565	Pushes the type of the given class descriptor.
566	Extracts the type of a class descriptor.
567	Pop elements from the output stack.
568	Pop a method argument from the stack.
569	Initializes the array with the given variable.
570	Initializes the given type.
571	Visit a source.
572	Visit an outer class.
573	Visits an annotation.
574	Visits a type annotation.
575	Extract bits from a bit array.
576	Gets the object type.
577	Returns the argument types of the given method descriptor.
578	Returns the return type of the given method descriptor.
579	Returns the number of arguments and return sizes in the given descriptor.
580	Returns the type of the given character at the given offset.
581	Appends the descriptor to the buffer.
582	Returns the descriptor for the given class.
583	Returns the opcode for the given opcode.
584	Puts a single byte into the vector.
585	Put two bytes into the byte vector.
586	Puts a short into the byte vector.
587	Put a 12 byte integer into the byte vector.
588	Puts an integer into the byte vector.
589	Puts a long into the vector.
590	Writes a string to the byte vector.
591	Puts a byte array into the end of the vector.
592	Enlarges the buffer by the given size.
593	Returns the column name for the given column.
594	Sets the column mapping.
595	Returns the value of the property with the given name.
596	Initializes all configuration values.
597	Returns the IOCase object for the given name.
598	Converts the given string to lower case.
599	Gets the current value of the parameter.
600	Sets the value of the parameter.
601	Creates an array of objects if the given array is null.
602	Creates a new set if the current value is null.
603	Returns the global parameter.
604	Attaches the parameters to the prepared statement.
605	Returns the absolute path of the given file.
606	Parse a checksum value.
607	Computes the checksum of the given string.
608	Returns a classloader that will load the project s classpath.
609	Prints the settings.
610	Parse the properties file.
611	Checks to see if the current value of the field is not null and if so checks to
612	Writes the next line.
613	Checks if a string contains special characters.
614	Process a line.
615	Process a single character.
616	Execute the update.
617	Converts the given value to the appropriate type.
618	Gets the value of this property.
619	Sets the value of the property.
620	Adds a list of aliases to the configuration property.
621	Sets the default value.
622	Generates the SQL for creating an index.
623	Applies the heuristic to the expression to check if it is a computed expression.
624	Tag the database.
625	Returns a list of all the database change log locks.
626	Returns the change status for the given contexts and label expression.
627	Clears all the checksums for all changes in the database.
628	Parse CSV data from a reader.
629	Process a line of text.
630	Returns the property editor for the given property descriptor.
631	Loads the classes in a jar.
632	Adds a class to the set of classes that match the given filter.
633	Returns the type of the property on the given object.
634	Checks if the given object has a property with the given name.
635	Sets the property value of the given object.
636	Returns the read method for the given property name.
637	Returns the setter method for the given property name.
638	Returns all methods of the given object.
639	Undo the undo of a collection.
640	Gets the outgoing foreign keys.
641	Creates a new CDI liquibase configuration.
642	Acquires the file lock.
643	Gets the simple path for a resource.
644	Checks if the change set is filtered by the given filter type.
645	Get the value of the column with the given name.
646	Initializes the configuration value providers.
647	Initializes the database.
648	Checks if the given database objects have the same name.
649	Sets the validate option if available.
650	Adds a type to the snapshot.
651	After the bean has been set the Liquibase instance is created and created.
652	Check if the given string is trimmable and if so trim the string if it is
653	Converts the given value to the property value.
654	Main method for the test.
655	Split the argument into a list of arguments.
656	Checks if the given command is a valid command.
657	Checks if the given command is a no - arg command.
658	Extracts a single entry from a jar file.
659	Parse the default property file from a resource.
660	Fix up the arguments.
661	check setup.
662	Checks for missing parameters.
663	Checks for malformed command parameters.
664	Parse the properties file.
665	Print the help message.
666	Print the help text.
667	Parse command line arguments.
668	Get the value of a command parameter.
669	Read integer.
670	Checks if the given labels match the current runtime labels.
671	Checks if the given example is present in the database.
672	Creates a snapshot of the database.
673	Creates a snapshot of the given example.
674	Generate the children of this table.
675	Deletes all files in the given directory.
676	Split SQL into multiple lines.
677	Pads a string to the specified length.
678	Left pad the string to the right if necessary.
679	Generates a random identifier of the specified length.
680	Removes all SQL comments and whitespaces from the end of the string.
681	Concatenates the given string with the given addition.
682	Returns the catalog names of the given database.
683	Appends a clause to the string list.
684	Appends a new clause to the list of clauses.
685	Prepend a clause to the beginning of the list.
686	Inserts a new string clause before an existing key.
687	Inserts a new string clause after an existing key.
688	Returns the value of the specified key in the context.
689	Returns the subclause for the given key.
690	Print the changes to the given output stream.
691	Returns all the implemented databases.
692	Returns all internal databases.
693	Validates the type.
694	Converts this data type to a database data type.
695	Converts an object to a SQL string.
696	Checks if the given string is the current date time function.
697	Returns true if this database supports boolean data types.
698	Returns the SQL to concatenate the values.
699	Generate statements volatile.
700	Adds an artifact to the set of URLs.
701	Returns the field with the given name in the given class or the parent class if it is
702	Returns the alternate paths for the given path.
703	Checks if the given contexts match the current contexts.
704	Creates a ResourceAccessor for the given ClassLoader.
705	Closes the database.
706	Appends the next character and advances the loop.
707	Checks if the next character is an escaped quote.
708	Checks if the next character is escaped.
709	Returns all children of the given node in the given namespace and nodename.
710	Sets the value of this node.
711	Returns the value of the node as an object of the given type.
712	Returns the child node with the given namespace and name.
713	Get the value of a child node.
714	Get the value of the child node with the given namespace and name.
715	Closes all the streams.
716	Returns true if this field is auto - increment.
717	Checks if the given path is a jar file or a zip file.
718	Returns the column with the given name or null if not found.
719	Returns the singleton object for the given type.
720	Tag the database.
721	Create a precondition instance.
722	Checks if the given string is a valid date time or today.
723	Returns the value of the parameter with the given key.
724	Sets the validate option if available.
725	Get the SQL statement for the unique constraints.
726	Returns the parameters that are set for the given change.
727	Returns all required parameters for the given database.
728	Converts the given value to a SQL string.
729	Returns the set of fields that are serializable for this change.
730	Get the full path of a file.
731	Create the index lookup.
732	Returns the index of the column with the given name.
733	Returns the descriptor for the column.
734	Returns the field with the specified column name or null if the column does not exist.
735	Returns the column name.
736	Finds a descriptor by its name.
737	Finds a field by name.
738	Checks if the given property name matches the given property descriptor.
739	Loads the descriptors for the type.
740	Returns the column name for the given column.
741	Sets the column mapping.
742	Returns the size of the parameter.
743	Returns true if the given column type supports the given default value.
744	Returns a list of all change sets that will be run.
745	Escape the given object name.
746	Sets the numeric value.
747	set the value of the boolean column.
748	set the value of the default value boolean
749	Unregisters all changes with the given name.
750	Returns all the names of all changes defined in this repository.
751	Creates a new change instance.
752	Prompt for a non - local database migration.
753	Get the schema name for the current connection.
754	Checks if the database is safe to run update.
755	Filters the given list of visitors to apply to rollback.
756	Returns the maximum number of fractional digits that can be used to represent a timestamp.
757	Checks a string for illegal characters.
758	Create a new node in the current change log.
759	Checks that the given object is not null.
760	Checks if the given database product name is a sybase product name.
761	Create a SqlVisitor for a given tag.
762	Gets the local host address.
763	Gets the local hostname.
764	surround with schema sets
765	Adds a schema to a procedure text.
766	Encodes the given byte array into a hex string.
767	Returns the names of all the schema names in the given database.
768	Reads the next line from the input stream.
769	Reads the next line from the underlying reader.
770	Returns true if the reader is closed.
771	Starts polling for configuration.
772	Starts the configuration watcher.
773	Sets the app conf folder from the configuration file.
774	Gets a property that is a int.
775	Gets a long property.
776	Gets a boolean property.
777	Gets a float property.
778	Gets a double property.
779	Load properties from a table.
780	Returns a DynamicProperty instance for the given property name.
781	Updates all properties.
782	Adds a callback to the property.
783	Removes all callbacks from the property.
784	Get the HttpVerbUriRegexPropertyValue from a String value.
785	Load properties from a file.
786	Adds a property to the map.
787	Updates the properties in the given configuration.
788	Adds or changes a property.
789	Deletes a property from the configuration.
790	Clears all the elements in the map.
791	Returns a copy of the properties.
792	Loads the properties from the given source.
793	Adds a configuration at the specified index.
794	Removes a configuration from the container.
795	Remove configuration by name
796	Returns an iterator of all keys in the configuration.
797	Returns all keys with the given prefix.
798	Checks if a key is present in the configuration.
799	Returns a list of values from the configuration.
800	Returns the string array of the property values.
801	Loads the specified configuration from the classpath.
802	Loads properties from configuration.
803	Loads properties from the properties file.
804	Poll for configuration values.
805	Returns the angle of the given location.
806	Returns the value associated with the given key or null if the key does not exist.
807	Main method to generate CloudBalance objects.
808	Gets the property name of a getter method.
809	Checks if the given method is a getter method.
810	Adds a hard constraint match.
811	Adds a medium constraint match.
812	Adds a soft constraint match.
813	Clean the path of a URL.
814	Calculates the standard deviation squared of the average of the average standard deviation of the asset classes in
815	Checks if problem facts exist.
816	Returns the problem scale for the given solution.
817	Generates a task name for the given request.
818	Checks if the request context has a timeout attribute.
819	Returns true if the task timeout is not configured in the request context.
820	Creates a task that will send the request to the server with the given timeout.
821	Builds a single file from a given hash.
822	Creates a build task for the given hash.
823	Creates a new build task.
824	Write generic failure info.
825	Creates a single trace from a ShallowTrace.
826	Batch a key into a single batch.
827	Returns the name of the batch.
828	Harvest a histogram.
829	Creates a default configuration for the REST service.
830	Compose a chain of promises.
831	Creates a new task with the given name and a given propagator.
832	Sets a property for the engine.
833	Returns a resolved value for the given value.
834	Propagate result to destination.
835	Creates a resilient summary for a member.
836	Creates a responsive summary for a member.
837	Creates the connections summaries for a single person.
838	Creates a new task that will be executed when the parent task is executed.
839	Timeout with a given time.
840	Finds the node with the next lowest SN.
841	Appends the stack trace of the task to the stack trace.
842	Monitor the current thread.
843	Check the stall for the given time.
844	Create a new task with retry policy.
845	Wrap the task in a retry task.
846	Attempts a single attempt.
847	Starts the task.
848	Throws an exception if the conversion fails.
849	Sets the REST client.
850	Acquires a lock on the cluster.
851	Releases the lock.
852	Attempts to acquire a permit for the given plan class.
853	Returns the client.
854	Initializes the async http client with the given configuration.
855	Consumes the characters in the buffer until one of the given characters is found.
856	Throws an IllegalArgumentException if all elements are null.
857	Throws an IllegalArgumentException if the given string is null or empty.
858	Parse a transform string.
859	Get a list of files matching the given query and sort.
860	Finds all files with the given filename and sort.
861	Find files matching the given query and sort.
862	Removes a file from the database.
863	Remove all files matching the given query.
864	Put a value into the map.
865	Returns the value associated with the specified key.
866	Creates a new builder for the given type.
867	Gets the maximum time in the given time unit.
868	Adds a property to the compressor.
869	Returns the name of the server.
870	Returns the master address of the cluster.
871	Checks if the given server address is the master of this node.
872	Returns the maximum size of the Bson object to be used for this cluster.
873	Adds a key to the query.
874	Applies majority write concern to the transaction options.
875	Returns true if the request was successful.
876	Gets the message message.
877	Sets the annotations to read.
878	Returns a list of index names.
879	Generates the index name from the given document.
880	Validates the MD5 of the file.
881	Returns the codec for the given BSON type.
882	Calculates the batch size.
883	Parse a string into an unsigned long.
884	Decode the given reader with the default context.
885	Check if the state of the node is in the given list.
886	This method will pipe the given reader to the current document.
887	Writes the given extra elements to the output.
888	Returns the bytes of this object id.
889	Puts the object id to the given buffer.
890	Converts the object id to a hexadecimal string.
891	Returns a short description of the message.
892	Creates a new BasicDBObjectBuilder from the given document as a map.
893	Pushes a new object onto the top of the stack.
894	Adds a bulk write result to the batch.
895	Adds the error result.
896	Adds a write error result to the result.
897	Adds the error result to the index.
898	Gets the error.
899	CAS next node.
900	Returns the next non - marker node.
901	Returns the successor of this node.
902	Returns the predecessor of this node.
903	Returns the successor of the current node or null if there is no successor.
904	Returns the previous node in the list.
905	Append the specified element to the end of the list.
906	Prepends the specified element to this node.
907	Deletes this node and all its children.
908	Replaces the first node with the given element.
909	Executes the unlock command.
910	Selects the server for the given cluster.
911	Creates a read preference for a primary.
912	Creates a secondary read preference.
913	Creates a secondary preferred read preference.
914	Creates a read preference that allows to read the most recent tags.
915	Creates a read preference for a tag set with a primary staleness.
916	Creates a secondary read preference.
917	Creates a secondary preferred read preference.
918	Creates a new read preference that allows to find tags in a tag set that is nearest to
919	Creates a read preference for a list of tag sets.
920	Creates a new read preference that will only return tags that are nearest to the given tag set
921	Returns the ReadPreference with the given name.
922	Creates a new read preference with the given name and tag set list.
923	Create a new read preference with the given name and tag set list.
924	Reads the contents of the given input stream into the given buffer starting at the given offset.
925	Reads an int from the given input stream.
926	Reads an int from the given buffer at the given offset.
927	Read a big - endian integer from the given byte array at the given offset.
928	Read a long from the given input stream.
929	Returns the credential list.
930	Returns a random server from the given list of servers.
931	Creates a new MongoClient with the given connection string and optional mongo driver information.
932	Returns a copy of this list.
933	Creates a new ClassModelBuilder for the given type.
934	Returns the collection with the given name.
935	Drops the database.
936	Returns the names of all collections in this collection.
937	Executes a command on the server.
938	Executes the given command on the database.
939	Checks if a collection exists.
940	Executes a code in the database.
941	Get the current db statistics.
942	Removes a user from the collection.
943	Returns the read preference for the given command.
944	Returns a codec for the given class.
945	Inserts the given document into the collection.
946	Executes an update operation.
947	Find a single document.
948	Rename the collection.
949	Perform a map - reduce operation.
950	Explain the given pipeline with the given options.
951	Creates a new index for the given keys.
952	Creates a new index.
953	Find and remove the object from the collection.
954	Sets the DBDecoderFactory to use.
955	Sets the DBEncoderFactory to use.
956	Returns the indexes of this collection.
957	Drop an index.
958	Drop an index.
959	Returns true if the command is capped.
960	Set the class of the object at the given path.
961	Gets the class for the given path.
962	Creates a new update that sets the value of the given field.
963	Sets the value of an existing field to be inserted into the collection.
964	Rename the field with the given name.
965	Increments the value of the specified field by the specified number.
966	Multiply the given number by the current value of the field.
967	Updates a document that has a minimum value.
968	Updates a document that has a maximum value.
969	Adds a new value to the set.
970	Adds each value to the collection of values.
971	Adds a new value to the collection.
972	Pushes each value to the collection of values.
973	Creates a new update that will pull the given value from the collection.
974	Creates a Bson document that is a copy of the document that is a copy of the document
975	Creates a Bson object that will pull all the given values from the collection.
976	Writes the cursor flag and skip fields to the output.
977	Increment the generation counter on socket exception.
978	Gets the ancestry of the given class.
979	Creates a replace options.
980	Decodes a string into a byte array.
981	Encodes the given byte array into a Base64 encoded string.
982	Returns the address of the cluster.
983	Returns the replica set s status.
984	Returns a list of all databases in this collection.
985	Sync the admin database.
986	Sync and lock the admin database.
987	Unlocks the object.
988	Returns the value as a number.
989	Returns a copy of this connection id with the specified server value.
990	Computes the hierarchy of the given class.
991	Converts the object to JSON.
992	Executes the command.
993	Gets the expire after.
994	Returns the group object.
995	Gets the logical session timeout minutes.
996	Returns all server descriptions.
997	Get a server description by its address.
998	Gets all primary servers.
999	Gets all secondary servers.
1000	Gets all secondary servers with the given tag set.
1001	Returns any servers that are ok.
1002	Returns any server that is a primary or a secondary server.
1003	Returns any servers with the given tag set.
1004	Returns a short description of this server.
1005	Creates a new MongoCredential.
1006	Creates a new SCRAM - SHA - 256 credential.
1007	Creates a plain credential.
1008	Adds a mechanism property to the credential.
1009	Sets the authentication mechanism.
1010	Returns the mechanism property with the specified key or the default value if the mechanism property is not
1011	Returns the contents of this stream as a byte array.
1012	Add an object serializer to the registry.
1013	Sets whether or not the update is to be performed as a multi update.
1014	Encodes the message.
1015	Writes the message prologue.
1016	Adds a document to the document collection.
1017	Adds a collection of fields to the document.
1018	Backpatch the length of the message.
1019	Creates a new chunk.
1020	Returns a copy of this cursor.
1021	Returns true if there is more data to read.
1022	Returns the next object in the cursor.
1023	Returns an array of the elements in this collection.
1024	Returns the first object in the collection.
1025	Returns the read preference for this query.
1026	Gets the read concern.
1027	Puts a value into the current context.
1028	Put a DBRef into the MongoDB.
1029	Returns a BulkWriteResult that is unacknowledged.
1030	Returns the address of the socket.
1031	Returns the list of socket addresses.
1032	Creates a filter that only accepts documents that have a value equal to the given value.
1033	Creates a filter that returns true if the given value is greater than the given value.
1034	Creates a filter that returns true if the given value is less than the given value.
1035	Creates a filter that matches documents that have a value greater than or equal to the given value
1036	Creates a filter that filters documents by field name to be less than or equal to the given
1037	Creates a new filter that matches all of the given filters in the current collection.
1038	Creates a filter that matches all the given filters.
1039	Creates a filter that only accepts documents that exist in the given field.
1040	Creates a Bson document that matches the given text in the given language.
1041	Creates a Bson filter that matches documents that contain text matching the given string.
1042	Returns a Bson object that represents a document whose field name matches the given filter.
1043	Creates a filter that matches documents that are within a certain box.
1044	Creates a filter that matches documents that are contained within a polygon.
1045	Matches documents that are within the center of the specified coordinates.
1046	Matches documents that are near the given geometry.
1047	Creates a document that represents a near - intersecting document.
1048	Returns the regex flags for a given string.
1049	Returns the regex flag for the given character.
1050	Returns a string representation of the given flags.
1051	Sets the text version.
1052	Sets the sphere version.
1053	Copy the options.
1054	Convert an object to a given type.
1055	Encodes the given document to the given writer.
1056	Executes the bulk write.
1057	Create a bulk update request builder.
1058	Request that sets the array filters.
1059	Executes the command.
1060	Initializes the mongo embedded library.
1061	Creates a new MongoClient instance.
1062	Closes the mongo embedded library.
1063	Enable SNI support for the given host.
1064	Returns the type of the given object.
1065	Returns the DBObject representation of this command.
1066	Returns a short description of this ClusterConfiguration.
1067	Creates an acknowledged update result.
1068	Gets the content type of the file.
1069	Returns the aliases for this file.
1070	Returns the first key in the document.
1071	Encodes the given value using the default context.
1072	Returns the read concern as a BsonDocument.
1073	Compresses a list of ByteBufs to a single byte array.
1074	Gets a string value.
1075	Returns the boolean value for the given key.
1076	Returns the value of the field as a ObjectId. If the field does not exist in the
1077	Returns the value of the field as a Date.
1078	Canonicalizes the given object.
1079	Gets the credential.
1080	Starts a new session.
1081	Get the WTimeout in the given time unit.
1082	Returns the contents of this object as a BsonDocument.
1083	Returns true if the journal or fsync is acknowledged.
1084	Returns a copy of this write concern with the given write concern.
1085	Returns a copy of this write concern with the given write name.
1086	Sets the write timeout.
1087	Create a majority write concern.
1088	Inserts the given document into the collection.
1089	Creates a bulk request builder for a find operation.
1090	Executes the bulk write operation.
1091	Returns a copy of this object.
1092	Returns a geo - haystack index with additional fields added.
1093	Returns the names of the indexes.
1094	Returns the value associated with the given key or the given default value if the key does not
1095	Returns the value associated with the given key as a BsonDocument. If the key does not
1096	Returns the value mapped to the given key as an array.
1097	Returns the value associated with the given key as a number.
1098	Returns the value mapped to a BsonInt32.
1099	Returns the value mapped to a BsonInt64.
1100	Returns the decimal128 value for the given key.
1101	Returns the value mapped to the given key as a double.
1102	Returns the value associated with the given key as a boolean. If the key does not exist
1103	Returns the value of the given key as a BsonString. If the key does not exist
1104	Returns the value mapped to the given key as a BsonDateTime.
1105	Returns the value associated with the given key as a timestamp.
1106	Returns the value of the given key as a BsonObjectId. If the key does not exist
1107	Returns the value associated with the given key as a BsonBinary.
1108	Returns the value of the given key as a regular expression.
1109	Writes the buffer to the socket.
1110	Converts the given object to a BsonDocument.
1111	Check if the value is not null.
1112	Check if the given condition is true.
1113	Gets the property builder with the given name.
1114	Builds the class model.
1115	Returns the update options.
1116	Gets the wrapper if the class is a reflection object.
1117	Gets the wrapper for a class.
1118	Returns the UUID representation of the document.
1119	Returns the UUID represented by this BsonBinaryValue as a UUID.
1120	Parse a string value.
1121	Reads a hex number from the stream.
1122	Skips all whitespace characters in the string.
1123	Parse a JSON string.
1124	Parse a number.
1125	Parse the exponent.
1126	Parses an array.
1127	Updates one document in the collection.
1128	Returns a copy of this description with the specified connection id.
1129	Returns a new acknowledged result.
1130	Returns an unacknowledged write result.
1131	Gets the embedded value.
1132	Construct a list of values from the map.
1133	Merges the given options with the given default options.
1134	Releases an item to the pool.
1135	Returns the next available item from the pool.
1136	Closes all the available objects.
1137	Pipe the buffer to the given output stream.
1138	Throws an exception when the given context type is not valid.
1139	Throws an exception when the state is invalid.
1140	Verifies that the current BSONType is the expected type.
1141	Verifies that the element name is the expected one.
1142	Checks the preconditions for the given method name and type.
1143	Parse a decimal value.
1144	Returns the BigDecimal value of this Decimal128.
1145	Returns the bytes of the high and low bits in big endian order.
1146	Sets the hint to be explained.
1147	Converts the collation definition to a BsonDocument.
1148	Write the contents of this buffer to the given file.
1149	Writes the contents of this buffer to the given output stream.
1150	Removes the file from the database.
1151	Sets the sort option.
1152	Sets the sort document to be used.
1153	Returns the namespace of the document.
1154	Gets the database name.
1155	Creates a new codec for the given document class.
1156	Creates a builder for the given client session options.
1157	Resets the connection to the default state.
1158	Returns a copy of this options.
1159	Returns the write concern.
1160	Returns the user agent for the given service.
1161	Populate the properties.
1162	Is matching user group key.
1163	Convert a list of UserGroup s to a set of GrantedAuthorities.
1164	Returns the service endpoints for the given environment.
1165	AADJwtTokenFilter bean.
1166	Get all todo items
1167	Registers a path to be loaded.
1168	Builds the project.
1169	Returns a summary of the pipeline and the output directory.
1170	Registers a directory for changes.
1171	Adds a property to the type.
1172	Create a RamlType object from a string.
1173	Sets the kind of the event.
1174	Executes the template with the given configuration.
1175	Configure the micrometer with the given configurer.
1176	Executes the given callback with the template engine.
1177	Bind a form filter to the given authenticator.
1178	Bind a basic authentication filter.
1179	Resolves the given value.
1180	Returns the path for the given pattern.
1181	Define a type.
1182	Serialize the object to YAML.
1183	Returns the status of the request.
1184	Returns the HTTP status code.
1185	Sets the status of the route.
1186	Sets the media type.
1187	Creates a runnable that enhances the current thread.
1188	Sets the media type.
1189	Gets a query parameter.
1190	Gets a form parameter.
1191	Gets the header parameter.
1192	Returns the response for the given status code.
1193	Apply configurer callback to Hibernate validator.
1194	Reads bytes from the underlying input stream.
1195	Create a new reactive query.
1196	Create a reactor.
1197	Create a new requery with a given model.
1198	Create a new Requery instance.
1199	Sets the JavaScript escape type.
1200	Sets the HTML escape type and level.
1201	Sets the JSON escape type.
1202	Sets the CSS string escape type.
1203	Returns the attributes for the given path.
1204	Returns the CSS for the given SVG element.
1205	Parse a size value.
1206	Writes a sequence to a file.
1207	Sets the handle key.
1208	Sets the required property on the given model.
1209	Get the last event id as an optional.
1210	Sends a message to the server.
1211	Adds a model to the view.
1212	Adds a map of values to the view.
1213	Creates a new class loader for the current user.
1214	Creates a class loader for the given project directory.
1215	Sets the attributes for this route method.
1216	Sets the attribute for this route method.
1217	Customizes a parameter.
1218	Returns a Status object for the given HTTP status code.
1219	Do with Jdbi3
1220	Rewrite a SQL statement.
1221	Send the asset to the client.
1222	Do with a configurer.
1223	Do with configuration.
1224	Adds a job to the Quartz.
1225	Creates a new Quartz instance with the given job class and configuration.
1226	Shuts down the given iterator of executor groups.
1227	Do with cluster.
1228	Create a new result with the given HTTP status.
1229	Add a module to the Jackson module.
1230	Unauthenticated Pac4j request.
1231	Create a form client with a login page.
1232	Parse the given application and return the list of methods that match the filter.
1233	Scan for service types.
1234	Adds a Swagger API to the API.
1235	Sets the Swagger API.
1236	Adds a RAML file to the API.
1237	Sets the raml options.
1238	Process the given source using the given configuration.
1239	Receives a result of a CteRecepcaoOS call.
1240	Recepcao lote.
1241	Receives a resultcte inutilizacaoCT message.
1242	Recepcao evento do resultmdfe.
1243	Receives a result of Cte ConsultaCT request.
1244	Receives a result of consultanaoencerrado. ConsultaEncStub.
1245	Converts the given factory to a SOAP envelope.
1246	Get the namespace names and URIs of the namespaces declared in the given SOAP envelope.
1247	Receives result of NFE ConsultaNF
1248	Adiciona o lote assinado.
1249	Envia Lote.
1250	Consulta retorno da DF UnidadeFederativa.
1251	Correcao correcao do NFEnviaEventoRetorno.
1252	Cancela nota.
1253	Inutiliza no evento no novo no banco do modelo
1254	Consulta cadastro da DFUnidadeFederativa
1255	Recepcao lote.
1256	Receives a resultcte retRecepcao.
1257	Liefert o xml assinado.
1258	Recepcao evento.
1259	Cancela nota.
1260	Receives a result of consulta mdf
1261	Recepcao a retornorecepcao
1262	Cancela a mdfe
1263	Methode encerra Mdfe.
1264	Methode encerramento assinado.
1265	Receives a result of a MDFeStatusServicoMDF request.
1266	Consulta status bahia.
1267	Computes the Xu matrix that is updated by the given value.
1268	Returns the cosine similarity of two vectors.
1269	Compute the solver.
1270	Deletes all files and directories under the given root directory.
1271	Loads an instance of the given class.
1272	Publishes the data for the PMML model to the PMML topic.
1273	Opens a custom tab.
1274	Get the package name to use for the current app.
1275	Checks if the given intent has specialized handlers.
1276	Load the current session.
1277	Executes the custom tab.
1278	Validates the session configuration.
1279	Creates an intent to send a response to the user.
1280	Edit configuration handler map.
1281	Main method for testing.
1282	Shuts down the MesosScheduler driver.
1283	Evaluate the task.
1284	Evaluate the attribute on the target VM.
1285	Evaluate the task.
1286	Sets the auto scale callback.
1287	Disable a VM.
1288	Disable a VM by its ID.
1289	Enables a VM.
1290	Shuts down the executor service.
1291	Returns true if the object has any of the given properties.
1292	Read the demo file info for a given source.
1293	Read the CDOTAMatchMetadataFile from the given stream.
1294	Reads a packet from the given source.
1295	Reads a varint from the stream.
1296	Reads a fixed 32 - bit integer from the stream.
1297	Reads the engine type.
1298	Appends a child tag to this tag.
1299	Adds the children to the container tag.
1300	If optional is present return the result of applying ifFunction.
1301	Renders the given HTML - tag into a HTML document.
1302	Sets the value of an attribute.
1303	Sets the value of an attribute.
1304	Adds an Attribute to the list of Attributes.
1305	Set the class attribute of the element.
1306	Compresses JS code.
1307	Parse the properties from the contents.
1308	Parse the contents of a property value.
1309	Called when the menu items width has changed.
1310	Set the left action icon color.
1311	Set the background color of the card.
1312	Opens the menu.
1313	Close the menu.
1314	Inflates the overflow menu.
1315	Set whether the search key should be shown or not.
1316	Enables or disables the dismissing of the suggestions section when the user clicks outside the search.
1317	Sets whether the search is focused.
1318	Update the height of the suggestion list container.
1319	Calculates the height of all the items in the suggestions list.
1320	Set the callback to be called when the suggestion of the adapter is changed.
1321	Returns the MD5 checksum of the given file.
1322	Configure the OkHttpClient to ignore SSL certificates.
1323	Reads the value of the type.
1324	Returns the name forms for the abstract type of this protoclass.
1325	Returns the name of the package in which the given name is contained in the given package.
1326	Returns the name forms for the type immutable.
1327	Creates a new TypeAdapter for the given type.
1328	Returns an immutable set containing all elements in the set.
1329	Returns an iterator over the elements in this list.
1330	Returns a key for a value attribute.
1331	Gets the serialized name.
1332	Returns the name of the property.
1333	Creates a predicate that evaluates the given expression.
1334	Creates a new fluent future that wraps the given future.
1335	Returns the immutable map.
1336	Converts a declared type to a string.
1337	Returns a token buffer that can be used to read the next token.
1338	Closes the connection.
1339	Executes a JavaScript script.
1340	Sets the proxy settings.
1341	Set the proxy configuration for HTTP requests.
1342	Sets the auto proxy URL.
1343	Gets a Box Developer Edition API connection for a user.
1344	Updates the modified fields of the given entity from the given process definition.
1345	Adds a fourEyesTaskListener to the usertask.
1346	Deploys the process definitions deployed to the default tenants.
1347	Check if the task is selected via bridge.
1348	Gets the servlet path for the given process definition.
1349	Gets the path to the context for the given process definition.
1350	Get the process application information for a given process definition.
1351	Returns the process application with the given process definition id.
1352	The user details service.
1353	Casts the given value to a Serializable type.
1354	Add camunda - bpm component to Camel context
1355	Checks that the given variable is set.
1356	Checks that the given variable is set in the given execution.
1357	Opens the menu.
1358	Closes the menu.
1359	Updates the position of the items in the menu.
1360	Returns the coordinates of the main action view.
1361	Returns the center of the action view.
1362	Calculates the position of the sub - action items in the view.
1363	Returns the content view of the activity which is used to show the menu.
1364	Returns the screen size.
1365	Restore the sub action view after an animation.
1366	Set the content view to be displayed.
1367	Set the position of the view.
1368	Attaches this dialog to the activity s content view.
1369	Permits a state to be assigned to the given trigger.
1370	Permits a state to be assigned to the given destination state.
1371	Permits the given state if the given trigger is not already satisfied by the given guard.
1372	Ignore if the given trigger is true.
1373	Returns the state representation for the given state or creates a new one if it doesn t exist
1374	Adds an instance to the managed instances.
1375	Sets the overflow value for the given bucket.
1376	Merges two HLLs into one.
1377	Encodes a sequence of bytes.
1378	Decodes a sequence of bytes.
1379	Decodes an optional sequence element.
1380	Encodes a bit string.
1381	Encodes an octal string.
1382	Encodes a length into a byte array.
1383	Get a logger with the given name.
1384	Log a debug message.
1385	Log a warning message.
1386	Log an error message.
1387	Replaces the path of the URI.
1388	Decode a percent encoded string.
1389	Processes the list of timestamp values for the response.
1390	Builds a configuration instance using the given configuration provider.
1391	Updates the value of the given timestamp.
1392	Encodes a byte array into a base64 encoded string.
1393	Decode a base64 encoded string into a byte array.
1394	Flushes the output stream.
1395	Dumps the destination information for the given URI.
1396	Computes the alpha value for a given target weight and age in seconds.
1397	Propagates cancellation to the destination Future.
1398	Returns an unmodifiable copy of the given future.
1399	Returns an unmodifiable version of the given future.
1400	Creates a new CompletableFuture that completes when the given throwable is thrown.
1401	Get the value of the given Future.
1402	Tries to get the value of the given future. If the future is not complete or timed
1403	Tries to get the value of the given future. If the future is interrupted or timed out
1404	Returns the value of the given future.
1405	Checks that the given future is done and throws an exception if it is not.
1406	Returns a future that is completed when all of the given futures complete.
1407	Returns the first completed future of the given collection of futures.
1408	Returns the first completed future of the given collection of futures.
1409	Returns a CompletableFuture that completes when all the given futures complete.
1410	Converts a ListenableFuture to a CompletableFuture.
1411	Returns a ListenableFuture that can be used to complete a CompletableFuture.
1412	Adds an exception callback to the given future.
1413	Gets histogram.
1414	Removes the node from the tree.
1415	Computes the maximum path weight for a given node.
1416	Adds a hash to the hash table.
1417	Loads properties from a file.
1418	Binds global configuration defaults.
1419	Returns the next duration in the current time interval.
1420	Returns the fibrated value of the given value.
1421	Multiply this duration by the given amount.
1422	Returns a new duration that is the result of applying the given amount to this duration.
1423	Finds a single field using the given strategy.
1424	Checks if the given field is a static field.
1425	Throws a FieldNotFoundException if the field was not found.
1426	Returns the field annotated with the given annotation type on the given object.
1427	Creates a new condition factory.
1428	Creates a new condition factory using the given executor service.
1429	Waits until the current element is true.
1430	Waits until the current element is false.
1431	Creates a new condition factory that catch uncaught exceptions.
1432	Sets the default timeout for the current thread.
1433	Sets the default timeout for the current thread.
1434	Tokenize a string.
1435	Escapes all quotes and backslashes in the given string.
1436	Serve static assets.
1437	Loads the configuration from the given file or URL.
1438	Loads all the messages. properties files for the registered languages.
1439	Get the URL for the given logback configuration file.
1440	Generates a random secret.
1441	Build a RunClassInSeparateJvmMachine.
1442	Returns all artifacts that are coming from ninja standalone.
1443	Resolves the standalone class.
1444	Encrypt the given data.
1445	Decrypts the given data.
1446	Read the ninja version from the ninja. builtin. properties file.
1447	Registers the given path as a watch service.
1448	Determines the mode from system properties or prod if not set.
1449	Checks if the given mime type is valid.
1450	Builds a route.
1451	Starts the server and waits for it to finish.
1452	Creates the server URL.
1453	Initializes the controller.
1454	Processes the found methods and generates the paths for the controller class.
1455	Sort methods by order.
1456	Finds all methods annotated with the controller.
1457	Configures reflections.
1458	Checks if the given method is allowed to be used in a Ninja route.
1459	Returns the HTTP method annotation value for the given method.
1460	Builds a controller method invoker for the given functional method and implementation method.
1461	Gets the real class name lower camel case.
1462	Checks if the class exists in the classpath.
1463	Gets the source code relative path for a stack trace element.
1464	Adds a value to the cache.
1465	Get the value from the cache.
1466	Checks that the given value is serializable.
1467	Render a single entry.
1468	Renders a string as a JSON string.
1469	Renders the given bytes as a raw text.
1470	Gets a cookie by name.
1471	Sets the cache control header to no - cache.
1472	Checks that the application secret is set in the composite configuration.
1473	Adds all items from a collection to the list.
1474	Returns the position of the view which contains the given item id.
1475	Switch views.
1476	Removes the active index from the queue.
1477	Returns the active indexes.
1478	Returns the title view for the given position.
1479	Returns the content view for the given position.
1480	Expand the item at the given position.
1481	Collapse the item at the given position.
1482	Returns the content parent for the given position.
1483	Returns an array of additional animations which should be used to hide the dialog.
1484	Creates a bitmap from a view.
1485	Checks if the item at the given position is dismissable.
1486	Resets the velocity tracking.
1487	Resets the animation to the initial state.
1488	Cancels an existing animation.
1489	Animates a view at a specific position.
1490	Calculates the delay to be used to animate the list view at the specified position.
1491	Concatenates two animators together.
1492	Handle non - CORS requests.
1493	Adds a stream of literal words to the buffer.
1494	Materialize RLW to bitmap storage.
1495	Polls the element and returns it.
1496	Resize the buffer to the given number.
1497	Returns the new size in words.
1498	Returns the logical or of the given bitmaps.
1499	Adds a stream of literal words to the stream.
1500	Fills the given list with the contents of the literal lists.
1501	Returns a new BitSet containing all the bits in this BitSet.
1502	Returns the cardinality of the set.
1503	Returns true if all elements in the buffer are 0.
1504	Returns an iterator over the elements of this set.
1505	Returns true if this bit set intersects the given bit set.
1506	Returns an iterator over the values of the elements in this set.
1507	Parse the next run.
1508	Opens the tap bar menu.
1509	Close the button.
1510	Sets the background color of the menu.
1511	Fetch the database name range index from the URL for file mode.
1512	Fetch database name range index from URL for H2 memory mode.
1513	Parses the given jdbc url.
1514	Register a connection parser for a given URL prefix.
1515	Fetch database name from URL.
1516	Starts the daemon service.
1517	Copy the contents of an InputStream to a file.
1518	Copy assets to a file.
1519	Installs a binary to the given directory.
1520	Handles missing fields.
1521	Get the enum value from the JSON object.
1522	Patch all unresolved references.
1523	Traverses the given JSON object and stores the result in the given stack.
1524	Converts a JSON string to a Java object.
1525	Converts a JSON object to a Java object.
1526	Traverses the given object and assigns all fields in the given object to the given stack.
1527	Stores a missing field.
1528	Get the raw type of the given type.
1529	Reads an array.
1530	Reads a number.
1531	Reads a string from the input.
1532	Returns the field with the given name in the given class.
1533	Removes leading and trailing quotes from a string.
1534	Converts an object to a JSON string.
1535	Formats a JSON string.
1536	Writes a tab to the output.
1537	Writes an object as an array element if the class of the object matches the class of the
1538	Writes a custom object to the given writer.
1539	Returns the custom writer for the given class.
1540	Writes the given object to the JSON stream.
1541	Trace all references in the given object.
1542	Trace fields on the given object.
1543	Ensures that all keys in the map are of primitive types.
1544	Write a collection element.
1545	Create a map from a list of strings.
1546	Gets the source.
1547	Gets the value of the topics property.
1548	Gets the value of the hjid property.
1549	Gets the value of the documentDetailList property.
1550	Creates the axes for date and float.
1551	Creates a default grid.
1552	Creates a legend that shows the series in the NORTH_WEST region.
1553	Creates a legend that shows the series in the horizontal grid and displays it as an enhanced legend
1554	Creates a legend that shows the series outside one column.
1555	Sets the legend styling.
1556	Creates a high lighter highlighting.
1557	Creates a high lighter highlighting for the top left corner of the chart.
1558	Create the default series for the PIE chart.
1559	Create the default donout series.
1560	Gets the value of the documentAttachmentList property.
1561	Create the committee ranking menu bar.
1562	Create the committee ranking topics.
1563	Create the overview page.
1564	Creates the overview content.
1565	Gets the value of the kommunvalkrets property.
1566	Configure authentication.
1567	Sets the list of compliance checks.
1568	Sets the status map.
1569	Sets the resource type map.
1570	Gets the value of the kommun property.
1571	Gets the value of the uppdrag property.
1572	Gets the value of the proposal property.
1573	Returns the path to the page.
1574	Update ballot.
1575	Gets the maximum size of the view roadot party summary.
1576	Initializes the party map.
1577	Add party data to a DataSeries.
1578	Create the party ballot chart.
1579	Add the ballot data for a data set.
1580	Create org ministry map.
1581	Adds a result for a given month.
1582	Creates a field for the given property.
1583	Creates the display property converters.
1584	Gets the converter for the given type.
1585	Gets the type of the property.
1586	Gets the value of the documentActivities property.
1587	Gets the user account from the SecurityContext.
1588	Gets the value of the countyRegions property.
1589	Gets the value of the againstProposalContainer property.
1590	Gets the value of the committeeProposalContainer property.
1591	Gets the value of the events property.
1592	Gets the page id from the parameters.
1593	Get the page number from the parameters.
1594	Creates the content of the panel.
1595	Creates the page visit history.
1596	Add data for the politician indicator.
1597	Add data for the politican.
1598	Sets the google auth scratch codes.
1599	Create the role guant.
1600	Create a generic gantt.
1601	Sorts the entries by values.
1602	Adds a sub step for the view generic role member.
1603	Strip dates after current date.
1604	Creates a Gantt instance.
1605	Converts a total days in years to a string.
1606	Load the XA DataSource for the Secret.
1607	Send the message to all data sources.
1608	Gets the value of the documentPersonReferenceList property.
1609	Clean up the decision string.
1610	Gets the document name.
1611	Gets the committtee short name.
1612	Blocks the user for failed login attempts.
1613	Blocks by session or ip failed login attempts.
1614	Navigate to the page of the violation.
1615	Gets the application manager.
1616	Shows a notification.
1617	Gets the value of the topic property.
1618	Adds source indicators to the menu.
1619	Gets the indicator map.
1620	Gets the address.
1621	Add cache hints.
1622	Gets the string ids.
1623	Reads the content of a ZIP file.
1624	Creates the paging controls.
1625	Add a paging link to the page.
1626	Insert politician.
1627	Insert party data into the db.
1628	Gets the value of the againstProposalList property.
1629	Add a data serie value.
1630	Add an annual summary chart.
1631	Add an annual summary data to a data series
1632	Add an annual data chart.
1633	Add entry data to a data series.
1634	Create ministry summary.
1635	Create the role list.
1636	Process all documents using the given data strategy.
1637	Load and process document list.
1638	Load document list.
1639	Read a string from a reader.
1640	Read the contents of the given URL.
1641	Gets the value of the votering property.
1642	Gets the government body list.
1643	Gets the value of the personAssignmentElement property.
1644	Gets the value of the personDetailElement property.
1645	Creates a UserAccount object from the given RegisterUserRequest.
1646	Creates a row item.
1647	Creates a layout for the grid panel.
1648	Send work order for indicators that have not been saved.
1649	Gets the value of the documentProposal property.
1650	Gets the value of the documentActivityContainer property.
1651	Gets the value of the documentDetailContainer property.
1652	Gets the value of the documentAttachmentContainer property.
1653	Gets the value of the documentReferenceContainer property.
1654	Gets the value of the documentPersonReferenceContainer property.
1655	Gets the view roksdagen party document daily summary map.
1656	Add document history by party data.
1657	Read the person list file.
1658	Append object presentation.
1659	Adds the fallback value to the builder.
1660	Reencrypt the vault values.
1661	Gets the value of the landstingsvalkrets property.
1662	Adds the CommiteeSummary to the StringBuilder.
1663	Add a single entry to the string builder.
1664	Adds decision data rows.
1665	Adds doc type data rows.
1666	Adds the doc type decision data rows.
1667	Gets the user id from the SecurityContext.
1668	Gets the request URL.
1669	Allow role in SecurityContext.
1670	Gets the application action event page daily summary map.
1671	Gets the application action event page mode daily summary map.
1672	Gets the application action event page element daily summary list.
1673	Add a list of view application action event page element daily summaries to a series for a data
1674	Updates the person assignment data.
1675	Updates the assignment data.
1676	Validates the input of the given service request.
1677	Creates the base application event request.
1678	Validates the given request.
1679	Gets the human - readable message for the given set of constraint violations.
1680	Handles input violations.
1681	Create the indicator summary chart panel.
1682	Initialize the application menu bar.
1683	Create admin menu.
1684	Creates a link to the user.
1685	Sets the result element.
1686	The KieContainer bean.
1687	Gets the Javers.
1688	Javers auditable aspect.
1689	Author provider.
1690	Creates the role summary.
1691	Adds ministry per year to the map.
1692	Adds the government body annual summary to a list of government
1693	Returns an integer value from a string.
1694	Adds data for a given year to the given map.
1695	Adds the government body annual summary to the map.
1696	Creates a GovernmentBodyAnnualSummary object from a GovernmentBody
1697	Gets the value of the personAssignmentData property.
1698	Gets the value of the personDetailData property.
1699	Gets the committee decision type map.
1700	Gets the committee decision type organities.
1701	Add decision type by org data.
1702	Display document attachments.
1703	Creates the header 2 label.
1704	Builds a key for a user.
1705	Gets the rule summary.
1706	Adds a new rule violation to the map.
1707	Create map from list of VoteDataEmbeddedIds.
1708	Check if the given date is included in the document.
1709	Get a date from a string.
1710	Gets the value of the parties property.
1711	Creates the enable google auth button.
1712	Creates the button for disabling Google authentication.
1713	Creates the change password button.
1714	Gets the value of the documentReferenceList property.
1715	Guess the best guess date for the vote.
1716	Check if the vote date is in the same format.
1717	Try to find a valid vote date.
1718	Gets the IP information of the given web browser.
1719	Gets the operating system name and version of the given web browser.
1720	Gets the value of the committeeProposalList property.
1721	Gets the value of the parliamentElectoralRegions property.
1722	Gets the view roksdagen org document daily summary map.
1723	Add document history by org data.
1724	Add a new data serie to a data series
1725	Add data item.
1726	Initialize the user command map.
1727	Perform an account operation.
1728	Gets the value of the voteDataList property.
1729	Gets the value of the assignmentList property.
1730	Configures the column order and hidden fields.
1731	Configures the listeners for the selection events.
1732	Creates a grid cell filter.
1733	Sets the column converters.
1734	Gets document type summary.
1735	Add a series for a data set.
1736	Gets the value of the electionTypes property.
1737	Gets the ballot summary item.
1738	Gets the adminregion.
1739	Gets the income level.
1740	Gets the lending type.
1741	Gets the value of the ballotDocumentData property.
1742	Gets the value of the ballotDocumentElement property.
1743	Main method to run the encrypt property.
1744	Encrypt a value using the specified symmetric key.
1745	Get encryptor.
1746	Decrypt a value.
1747	Gets the value of the countyElectoralRegions property.
1748	Gets the JobContextHolder.
1749	Gets the value of the portals property.
1750	Gets the active user account.
1751	Gets the value of the dokument property.
1752	Creates the basic layout for the page mode.
1753	Create the top header actions for the user context.
1754	Creates a vertical layout for the full size.
1755	Adds the logo to the header.
1756	Creates the top title header.
1757	Gets the mail sender.
1758	Gets the SMTP port.
1759	Find language by locale.
1760	Gets supported locales language data.
1761	Creates a map of issue and concern party summaries.
1762	Sets the namespace on the input stream.
1763	Add a chart to the layout.
1764	Gets the height of the chart window.
1765	Gets the name of the party.
1766	Gets the view roadsummaries.
1767	Override login to use the cached authentication.
1768	Checks if the operating system is Windows.
1769	Starts the Android Debug Bridge emulator.
1770	Unlock the emulator.
1771	Writes the emulator start script windows.
1772	Writes the emulator start script to the unix path.
1773	Stops all Android emulator devices.
1774	Stops the emulator.
1775	Send a command to the emulator.
1776	Assembles the command line for the Android emulator.
1777	Determines the executable path to the emulator.
1778	Determines the wait time for the emulator.
1779	Determines the options to use for the emulator.
1780	Determine the AVD for the emulator.
1781	Determines the location of the emulator.
1782	Unjar a jar file.
1783	Calculates the source and destination mappings.
1784	Recursively collect dependencies for the given node.
1785	Resolves an artifact.
1786	Waits until the device is connected.
1787	Waits for the initial device list from the Android Debug Bridge.
1788	Deploys an apk file to the device.
1789	Deploys the built apk if the project packaging is apk.
1790	Undeploys an apk.
1791	Undeploys an appk.
1792	Extracts the package name from the given apk file.
1793	Extracts the package name from an artifact.
1794	Extracts the instrumentation runner from the AndroidManifest. xml file.
1795	Generate the R. txt file for all the libraries.
1796	Execute the plugin.
1797	Copy the contents of the input stream to the output stream without closing the stream.
1798	Copy the gdbserver binary to the given directory.
1799	Returns the java executable.
1800	Returns the path to the proguard. jar file.
1801	Gets the path to the shrinked Android jar.
1802	Returns the path to the build tools library directory.
1803	Returns the path to the main DexClasses. rules file.
1804	Get the path to the Android executable.
1805	Gets the Android jar file.
1806	Returns the platform directory.
1807	Loads the major version of the SDK tools from the SDK source. properties file.
1808	Execute the APK.
1809	Copy the manifest file to the destination directory.
1810	Extract the apksources dependencies from the dependencies.
1811	Extract the apklib from the apklib archive.
1812	Extracts the AAR library from the given artifact.
1813	Checks for APKLIB dependencies.
1814	Returns a map of package name to set of artifacts that are compatible with the AndroidManifest.
1815	Generate correct R. java for the APKLIB dependencies.
1816	Generate correct R. java for AAR dependencies.
1817	Generate the R file for the given apklib dependency.
1818	Checks if the build configuration is present in the given artifact.
1819	Checks if the BuildConfig class is present in the Aar classes jar.
1820	Returns the set of input files for the dex.
1821	Execute the zipalign plugin.
1822	Check client secret file.
1823	Adds all jar files under the libs folder to the classpath.
1824	Adds the classes jar to the classpath.
1825	Executes the Android Lint.
1826	Returns the GAV.
1827	Collect JVM arguments.
1828	Returns the Java library file for the given name.
1829	Resolves the NDK toolchain for the given file.
1830	Gets the ndk - build path.
1831	Read the manifest file.
1832	Write the manifest file.
1833	Export the properties of the manifest file.
1834	Updates the versionCode attribute of the manifest element.
1835	Extracts the architecture from an artifact.
1836	Returns the names of the files in the given base directory.
1837	Encrypt a string using the specified key
1838	Decrypts a string using the specified key.
1839	Reads a name from the given byte array.
1840	Converts a character to a digit.
1841	Try to move the view to the next position.
1842	Starts listening to the device.
1843	Stops listening to the network.
1844	Send data to server.
1845	Adds a form data to the request.
1846	Adds a file part to the multipart upload.
1847	Creates a BitmapDrawable based on the given bitmap.
1848	Preload images.
1849	Detaches an image view from an image task.
1850	Add an image task to the image loader.
1851	Query the cache for the image.
1852	Recover all load work.
1853	Stop the work.
1854	Destroy the work.
1855	Attaches the image loader to a cube fragment.
1856	Invalidates the cache with the given key.
1857	Clear the disk cache.
1858	Creates a new table with the specified capacity.
1859	Returns a new array with the most recent entries in the hash table.
1860	Add a bitmap to the disk cache.
1861	Returns the contents of the file as a String.
1862	Set the value of the key in UTF - 8 encoding.
1863	Deletes the cache entry.
1864	Commits the cache entry to disk.
1865	Adds a file to the request data.
1866	Clears all memory from the cache.
1867	Try to resume the cache.
1868	Processes the journal file.
1869	Rebuilds the journal file.
1870	Removes all entries from the cache to the capacity.
1871	Called when the user presses the back button.
1872	Called when the user has finished loading the list.
1873	Create a reuse info object.
1874	Performs a synchronous request.
1875	Notify the handler that the request has finished.
1876	Reads the response from the server and writes it to the given StringBuilder.
1877	Set the loading bitmap.
1878	Set the right view to be displayed in the bottom sheet.
1879	Download the image from the URL to the output stream.
1880	Add an image view to the list.
1881	Remove an image view from the list.
1882	Load the first image view in the list.
1883	Called when the image is loaded.
1884	Join size info to key.
1885	Join size tag to key.
1886	Open the disk cache asynchronously.
1887	Flushes the disk cache asynchronously.
1888	Get the disk cache.
1889	Delete a directory recursively.
1890	Returns the path to the external cache folder.
1891	Returns the number of bytes that can be used to store the given file.
1892	Notify the drawable that it is being displayed.
1893	Override onResume to call back on the first resume.
1894	Returns the last item in the list.
1895	Hide the FAB.
1896	Align the sheet with the FAB.
1897	Morphs the sheet from a fab view.
1898	Morphs the sheet into the fab view.
1899	Hides the overlay.
1900	Show the current sheet.
1901	Setup the toolbar which allows to show the activity s content.
1902	Setup the drawer.
1903	Setup the tabs layout
1904	Setup the FAB
1905	Updates the fab of the sheet.
1906	Updates the snackbar.
1907	Morphs the current sheet into the sheet.
1908	Morphs the view from the sheet.
1909	Hides suggestions if the current query is not waiting for results.
1910	Returns all suggestions that match the given query token.
1911	Checks if a CharSequence contains any explicit characters.
1912	Checks if a CharSequence contains any word breaking characters.
1913	Checks if the given number of characters are either letters or digits.
1914	Returns the index of the start of the first span that is closer to the cursor.
1915	Returns the index of the end of the text after the cursor.
1916	Display the text counter.
1917	Disable spelling suggestions.
1918	Updates the text count of the editor.
1919	Sets the factory which should be used to create the mention spans.
1920	Copies the text from the start to the end of the text.
1921	Paste the text in the text area.
1922	Paste the text in the clipboard.
1923	Updates the selection if required.
1924	Called when the cursor is changed.
1925	Deselect all spans.
1926	Parse a duration string.
1927	Escape the given string for use in XML.
1928	Write the SVG element to a file.
1929	Creates a new image that is compatible with the current color model.
1930	Create a new image that is compatible with this image.
1931	Returns the value as a string.
1932	Maps a font family to an alternate font family.
1933	Sets the shape rendering.
1934	Sets the text rendering.
1935	Appends the element id from the hint.
1936	Get the SVG path data.
1937	Convert a color to a string representation of the RGB color.
1938	Converts a color to a string representation of an rgba color.
1939	Get the stroke style.
1940	Get the SVG fill style.
1941	Returns the SVG font style.
1942	Get the font metrics for the image.
1943	Scales the transformation by the given scale.
1944	Concatenates the current transformation with another transformation.
1945	Sets the transform used to draw the clip.
1946	Sets the clip to be applied to the current shape.
1947	Registers a new clip.
1948	Sets the clip of the shape.
1949	Clip the current rectangle.
1950	Sets the clip to the specified coordinates.
1951	Converts an image to a PNG file.
1952	Draws the rendered image.
1953	Draws the specified image using the default rendering.
1954	Gets the radial gradient element.
1955	Get the clip path reference.
1956	Gets the parts of a string.
1957	Record the level of a stat.
1958	Record timing for the given stat key.
1959	Track timeouts.
1960	Checks the client.
1961	Handles the request.
1962	Creates a new HTTP request and forwards it to the backend client.
1963	Handles the error for the given HTTP request.
1964	Handles the backend client responses.
1965	Process the queue.
1966	Creates a Lokate Service Discovery.
1967	Handles a method call.
1968	Send a method call to the service bundle.
1969	Creates a proxy for the given service.
1970	Apply before method call.
1971	Transform the argument transformer before the method call.
1972	Stops the service bundle.
1973	Start up the method call queue.
1974	Find service name.
1975	Load service endpoints by service name.
1976	Convert SrvRecord to EndpointDefinition.
1977	Checks the request type.
1978	Handle HTTP request.
1979	Handle a method call.
1980	Creates a new Consul instance with the given host and port.
1981	Get the DNS client.
1982	Returns a ReceiveQueue for this thread.
1983	Get the send queue.
1984	Converts a Promise to a Callback.
1985	Converts a Promise to a Callback.
1986	Creates a new callback that will be executed when the promise is resolved.
1987	Loads all health services from the service pool.
1988	Load healthy services from the backup provider.
1989	Get the DNS client.
1990	Add a task to be executed after a certain time.
1991	Processes the task.
1992	Removes the given AsyncFutureCallback from the queue.
1993	coordinate with timeout.
1994	Monitor the callbacks.
1995	Monitor callback coordinator.
1996	Wraps a callback with a timeout.
1997	Builds the proxy service.
1998	Builds a proxy service.
1999	Handle a WebSocket call.
2000	Starts the proxy server.
2001	Adds an event listener to the channel.
2002	Creates a DNS service discovery.
2003	Converts a JSON string to an object.
2004	Converts a JSON string to a list of objects.
2005	Serialize the given object to JSON.
2006	Converts a JSON string to a Map.
2007	Converts a value map to a value.
2008	Returns true if the given callback has been registered.
2009	Sets the callback to be called when the builder is constructed.
2010	Wrap the given callback in a new callback.
2011	Sets the callback to be called when the list of components is constructed.
2012	Sets the callback to be called when the component is created.
2013	Sets the callback to be called when the collection is created.
2014	Sets the callback to be used when the map is constructed.
2015	Sets the optional callback.
2016	Add a header to the response.
2017	Checks if a service is registered.
2018	Ping the agent.
2019	Register a new service with Consul.
2020	Deregisters a service with Consul.
2021	Deregisters a check from Consul.
2022	Checks a given check.
2023	Passes a check on the given check id.
2024	Record a warning condition.
2025	Stop the server.
2026	Handles a response asynchronously.
2027	Send a message to the server.
2028	Create a new proxy with a random name.
2029	Creates a listener which allows to handle responses from the service bundle.
2030	Returns a receive queue.
2031	Creates a SendQueue that sends JSON data to the client.
2032	Starts a listener for the queue.
2033	Builds a service queue.
2034	Check in OK
2035	Fail the service with an error.
2036	Enable logging for mapped diagnostic context.
2037	Enable consul service discovery.
2038	Get the AdminBuilder.
2039	Returns the ContextMetaBuilder instance.
2040	Adds an endpoint service with a service management bundle.
2041	Adds an endpoint service with alias and service management bundle.
2042	Adds an endpoint service to the managed service.
2043	Adds an endpoint service to the managed service.
2044	Gets the service endpoint server.
2045	Configure the interceptors.
2046	Destroy a session.
2047	Load all the services for the given service name.
2048	Delete a key from the store.
2049	Handle request.
2050	Process the queue of messages.
2051	Send item to event manager.
2052	Starts the adapter.
2053	Gets the request.
2054	Remove an event connector from the registry.
2055	Sends an event to all event connectors.
2056	Flushes all event connectors to the event bus.
2057	Read the config from the file system or the classpath if not found on the classpath.
2058	Registers a handler callback for a method call.
2059	Extract request info and put it into mapped diagnostic context.
2060	Extract request information and put it into mapped diagnostic context.
2061	Extract headers from request.
2062	Handle a REST call.
2063	Handles a response from a service to a response.
2064	Add a request to the outstanding request map.
2065	Adds the given integer to the end of the array.
2066	Adds a value to the list.
2067	Adds the given values to the end of the array.
2068	Sets the element at the specified index.
2069	Reduce the values of this stream by a function.
2070	Before method sent.
2071	Notify the listener of a change notification.
2072	Add default serializers to the given Kryo instance.
2073	Get the parseFrom method.
2074	Verify that there are no leading zeroes.
2075	Parse an unquoted field name.
2076	Handles an unexpected value.
2077	Skips a string value.
2078	Match a token.
2079	Decode a base64 encoded value.
2080	Checks if the given string is a valid ID.
2081	Checks if the given string is a valid ID.
2082	Write a string to the output.
2083	Prepends the given escape character to the beginning of the buffer or writes the given escape character
2084	Appends a character escape sequence to the output.
2085	Set the conversion properties
2086	Generates a Pig script for a thrift class.
2087	Converts a schema to a string representation.
2088	Open an index file.
2089	Returns the progress of the current path iterator.
2090	Converts a message to a Pig tuple.
2091	Converts a protobuf message to a protobuf tuple.
2092	Converts a single field to a single - item tuple.
2093	Coerces the given field value to the Pig types.
2094	Convert a message descriptor to a schema.
2095	Convert a message field descriptor to a schema.
2096	Convert a single field descriptor to a schema.
2097	Generates a Pig script for the input files.
2098	Converts a message descriptor to a pig script.
2099	Generates the Pig script for a message.
2100	Generates a PigScript for a single field.
2101	Returns a TStructDescriptor for the given class.
2102	Extract a map of enum constants to their corresponding enum values.
2103	Creates a new path filter to filter out directories that start with index -.
2104	Returns true if the given proto class is a dynamic proto message.
2105	Returns a TypeRef for the given proto class name.
2106	Returns the progress of the animation.
2107	Serialize the message.
2108	Set the input format class.
2109	Sets the thrift class for the given configuration key.
2110	Write a list of strings to a configuration
2111	Read a String list from a configuration as a JSON array.
2112	Write a list of strings to a configuration as Base64 encoded string.
2113	Read a list of strings from a configuration as base64.
2114	Verify that the given class is a Thrift class.
2115	Gets the value of the field with the given name from the given object.
2116	Gets the value of the field with the given name from the given class.
2117	Returns the type of the value of the given field.
2118	Writes a single field without tag.
2119	Converts a Tuple to a Message.
2120	Convert a tuple field to a single field.
2121	Adds a field to the descriptor.
2122	Converts a Pig type to a Protobuf type.
2123	Convert a tuple to a thrift object.
2124	Converts a value to a thrift value.
2125	Creates a new instance of the given class.
2126	Sets the CombinedInputFormatDelegate class to be used for the Hadoop job.
2127	Finds the splits for the input paths.
2128	Sets the input paths.
2129	Get the input paths from the configuration.
2130	Adds a new input split to the list.
2131	Returns the locations of the input splits.
2132	Evaluate the delimiter.
2133	Creates a resource field schema.
2134	Reads all bytes from the input stream into the output stream.
2135	Reads the next line from the input stream.
2136	Creates a standard Base64 object.
2137	Creates a new ProtobufConverter instance for the given proto class.
2138	Reads the next message from the stream.
2139	Reads the next proto blob from the current block.
2140	Reads the next proto bytes from the stream.
2141	Create a new TaskAttemptContext instance.
2142	Create a new MapContext instance.
2143	Create a new instance of the given class.
2144	Creates a new instance of this class.
2145	Creates a new instance of this class.
2146	Get a message builder for the given thrift class.
2147	Map a proto message builder for a given field.
2148	Creates a builder for a map descriptor.
2149	Resolves the message type name for the given descriptor.
2150	Convert a thrift object to a message.
2151	Converts a thrift object to a message.
2152	Builds a map entry message.
2153	Maps the proto type name to the field name.
2154	Walks a path recursively.
2155	Collect all files in the given path and all subdirectories in the given directory and all subdirectories in
2156	Returns the size of a directory.
2157	Set the column number in the configuration
2158	Update job conf for local settings.
2159	Returns the parseDelimitedFrom method for the given class.
2160	Parse a message from the given input stream.
2161	Parse a message from an input stream.
2162	Writes the next tuple to the JSON file.
2163	Sets the class configuration for the LzoProtobufB64LineOutputFormat.
2164	Sets the type reference.
2165	Checks the container size.
2166	Sets the pattern.
2167	Convert a word to underscore.
2168	Returns the ordinal representation of the given number.
2169	Creates a new ProtobufWritable instance of the given class.
2170	Creates a new instance of LzoW3CLogInputFormat.
2171	Set the output format class.
2172	Returns true if the given word matches the pattern.
2173	Replaces the given word with the given replacement.
2174	Pluralizes a word.
2175	Returns true if the given word is uncountable.
2176	Get the output stream for the current job.
2177	Verify that the given WritableConverter has a valid class.
2178	Create a new instance of the converter.
2179	Returns the class with the given name.
2180	Gets the Thrift type reference for the given thrift class name.
2181	Finds the columns to read from the given field ids.
2182	Sets the thrift class configuration.
2183	Execute the given request and return the response as a string.
2184	Add authorization header to request
2185	Validates the response.
2186	Parses a thing from a JSON object.
2187	Parses a JSON string and returns a list of mixed elements.
2188	Format a comma separated list of strings.
2189	Waits for the next request to complete.
2190	Add basic authentication header to the request
2191	Refresh the token.
2192	Print a list of comments.
2193	Convert a JSON object to an Integer.
2194	Convert a JSON object to a Double.
2195	Converts a JSON object to a Boolean.
2196	Convert a JSON object to a Long.
2197	Recursive method to parse a JSON tree.
2198	Parses a JSON string and returns a list of subreddits.
2199	Generates a signature for an Instagram endpoint.
2200	Sorts the given map by their keys.
2201	Get OEmbed information for an instagram URL.
2202	Create an instagram object from Instagram API.
2203	Converts a JSON response to an object.
2204	Checks that two objects are not null.
2205	Checks that the given string is not empty.
2206	Check that the given URL is a valid URL.
2207	Check that the given URL is a valid OAuth callback URL.
2208	Get an Instagram client for the given access token and IP address.
2209	Configures the connection settings for the request.
2210	Gets the body contents.
2211	Pretty prints a JSON response.
2212	Sets the callback URL for the Instagram API call.
2213	Sets the client ID for the Instagram client.
2214	Sets the client secret for the Instagram API.
2215	Set the type of subscription.
2216	Sets the verify token for the Instagram subscription.
2217	Sets the Instagram aspect.
2218	Sets the latitude of the instagram subscription.
2219	Set the Instagram s longitude.
2220	Set the radius for the subscription.
2221	Deletes a subscription.
2222	Deletes all subscriptions.
2223	Get the list of all subscriptions.
2224	Encodes a map of strings to be encoded using the URL encoding scheme.
2225	Percent encodes a string.
2226	Appends the given parameters to the given URL.
2227	Concatenates the given parameters sorted by percent encoded.
2228	Converts a query string to a map.
2229	Throw an InstagramException with the error metadata.
2230	Adds a trade to the trade.
2231	Increases the length of the list to the given length.
2232	Calculates the maximum drawdown value for a series.
2233	Gets the begin indexes of a split.
2234	Calculates the regression line.
2235	Operates on the order.
2236	Builds a chart time series.
2237	Returns a random decimal between min and max.
2238	Generates a random tick.
2239	Increments the acceleration.
2240	Calculates the SAR value for the given index.
2241	Calculates the close values for a given trade.
2242	Fills the values list to the end of the time series.
2243	Loads the logback configuration file.
2244	Creates an OHLC dataset from a TimeSeries.
2245	Creates a dataset for the Btc price chart.
2246	Add the cash flow axis.
2247	Display a chart.
2248	Removes ticks that are greater than the maximum number of ticks.
2249	Builds an empty list of ticks.
2250	Destroy the group.
2251	Saves the state of the observable manager to a Bundle.
2252	Signal a watch event.
2253	Creates a CompletableFuture that will watch the file system for changes.
2254	Registers a directory with the watch service.
2255	Returns the class loader for the main class.
2256	Adds the dependencies of the plugin dependencies to the classpath.
2257	Adds the project dependencies to the classpath.
2258	Resolves the dependencies of the executable.
2259	Finds the executable tool artifact.
2260	Handle the working directory.
2261	Get the start date of the calendar service range.
2262	Returns the bounds of the stops in the feed.
2263	Checks the distance and travel time.
2264	Loads the contents of the given table.
2265	Returns the size of the table. txt file in bytes.
2266	Sets the value of the given field to null.
2267	Copy all tables in the feed.
2268	Checks if a table exists in the database.
2269	Adds the editor specific fields to the given table.
2270	Registers a new snapshot namespace in the feeds table.
2271	Returns the trip id.
2272	Executes the prepared statement and returns the number of records processed.
2273	Clean up the empty files in the zip file.
2274	Export a table to a CSV file.
2275	Registers an error for an entity.
2276	Registers an error for an entity.
2277	Export the data source to a file.
2278	Load the data from the given file.
2279	Validates a feed.
2280	Deletes all tables for the given feed namespace.
2281	Creates a data source.
2282	Add a new error info entry.
2283	Creates a new GTFSError for a given line number and error type and bad value.
2284	Creates a new GTFSError for the given entity.
2285	Creates a new GTFSError for a feed.
2286	Gets the average speed for a given pattern.
2287	Get average speed for a set of trips.
2288	Get the start time for a set of trips.
2289	Get the end time for a set of trips.
2290	Returns the distance between the first triple of the pattern and the last one.
2291	Returns the average stop spacing for a given pattern.
2292	Copy the given entities to the given table.
2293	Creates a new result from the given result.
2294	Returns the number of errors in the table.
2295	Commit the transaction.
2296	Validates the given hhmmss and converts it to seconds.
2297	Compares this GTFSError to the given one.
2298	Calculates the orthodromic distance between the points in the LineString.
2299	Creates a new field definition for a row count.
2300	Creates a field that is grouped by the pattern_id.
2301	Returns a new int array with the same elements as the original.
2302	Get all trip for a given date
2303	Get the average headway for a stop
2304	Get the headways for a stop
2305	Get the headway for a stop by route
2306	Converts a JSON string to a JsonNode.
2307	Create a new record in the database.
2308	Update the stop times for a pattern stop.
2309	Checks that references exist in the given table.
2310	Verify that the stops in the original list are identical to the ones in the new list.
2311	Insert blank stop times for the given pattern.
2312	Deletes the entity with the specified id.
2313	Execute the prepared statement and return the ID of the last generated ID.
2314	Get the number of rows in a table
2315	Returns the set of tables that are referencing the specified table.
2316	Gets the value for the given id.
2317	Put a feed file to the feed store.
2318	Put a feed file to the GTFS.
2319	Returns true if the given date is active on this calendar.
2320	Initialize the GTFSGraphQL instance.
2321	Returns the editor fields.
2322	Returns the required fields.
2323	Returns the fields that are required or optional.
2324	Creates the SQL table.
2325	Generates the insert sql.
2326	Returns a comma separated list of field names.
2327	Generate update sql.
2328	Generates the SQL to select the fields of the table.
2329	Generates a SQL statement to select all existing fields in a table.
2330	Generate delete sql.
2331	Create a new SQL table from the given connection.
2332	Normalizes the stop times in the given table.
2333	Returns the index of the key field in the given fields array.
2334	Ensure that the given namespace is a valid namespace name.
2335	Returns the index of the field with the given name.
2336	Returns the keys in the map.
2337	Loads a GTFS feed from a zip file.
2338	Finds all patterns for all trips.
2339	Get the distance between a trip and a straight line
2340	Get the trip speed in meters.
2341	Get the stop times for a given stop
2342	Returns the services for a given date.
2343	Returns the time zone for a given stop
2344	Creates a list of Pattern objects for each TripPatternKey.
2345	Set the idle timer to be used when the activity is idle.
2346	Enable the receiver.
2347	Report the idle state of all jobs in the job store.
2348	Adds a job to the set.
2349	Returns true if the job id is contained in the job set.
2350	Removes a job from the set.
2351	Reschedule a failed job.
2352	Clears the contents of the array.
2353	Called when a job is started.
2354	Called when a job is stopped.
2355	Returns true if the job can stop tracking.
2356	Writes a string value to the bundle.
2357	Puts a String array value into the Bundle replacing any existing value for the given key.
2358	Returns a string value from the bundle.
2359	Put a PersistableBundle into the Bundle.
2360	Write the message to a Parcel.
2361	Returns the height of the view.
2362	Print a string to the console.
2363	Check the properties for validity
2364	Check the properties for validity
2365	Prepare for export.
2366	Sets a property.
2367	Convert a string to HTML entities.
2368	Get the real path of the file from the servletUrl and the extUrl.
2369	Verify the request against the secret.
2370	Verify the parameters.
2371	Validates the request for validity.
2372	Launch the profile.
2373	Builds a tool consumer profile.
2374	Validate the service offered list
2375	Validate the capabilities of the tools in the provider profile
2376	Adds custom properties to the launch.
2377	Toogle list view.
2378	On list scroll.
2379	Converts a SafeUrl to a proto.
2380	Converts a SafeStyle to a proto.
2381	Converts a SafeScript to a proto.
2382	Converts a style sheet to a proto.
2383	Converts a TrustedResourceUrl to a proto object.
2384	Converts SafeHtml to a proto.
2385	Wrap angle in radians.
2386	Round a number to the specified number of decimals.
2387	Lerp function.
2388	Slerp quaternion a and b by a percentage.
2389	Bi - Lerp function.
2390	Returns the lerp function of the triangular line.
2391	Blends the given color.
2392	Clamp a value to the given range.
2393	Returns the inverse square of the given double.
2394	Casts a Object to a Float.
2395	Casts a Object to a Byte.
2396	Casts a Object to a Short.
2397	Casts a Object to an Integer.
2398	Casts a Object to a Double.
2399	Casts a Object to a Long.
2400	Casts a Boolean to a Boolean.
2401	Returns the mean of the given values.
2402	Modulo a number.
2403	Returns the shift of the given multiply by the given number of bits.
2404	Multiply this quaternion by another.
2405	Divides this quaternion by the given amount.
2406	Rotate this quaternion by the specified x y and z axis.
2407	Returns the length squared of this quaternion.
2408	Normalizes this quaternion so that it is normalized to the length of its components.
2409	Creates a quaternion from the given imaginary components.
2410	Creates a new quaternion with the specified x y z and w.
2411	Converts a rotation matrix from axes angles to radians.
2412	Converts a rotation matrix from axes angles to radians.
2413	Creates a quaternion that rotates a rotation about a given angle and a rotation axis.
2414	Creates a quaternion that rotates about a given angle radians.
2415	Returns the minimum axis of the vector.
2416	Multiply this Complexf by another.
2417	Divide this Complexf by another.
2418	Rotate this vector by the specified amount.
2419	Normalizes the complex.
2420	Converts this quaternion to a given x y z coordinate.
2421	Creates a new Complexf object from the given x y coordinates.
2422	Creates a new Complexf object from the given angle.
2423	Returns the maximum axis of the vector.
2424	Hashes a double value.
2425	Adds the given values to this quaternion.
2426	Multiply this quaternion by another.
2427	Divides this quaternion by the given amount.
2428	Returns the axis of this quaternion.
2429	Gets the angle of the plane in radians.
2430	Creates a quaternion from an imaginary.
2431	Creates a new quaternion with the specified x y z and w.
2432	Converts a rotation from axes angles to radians.
2433	Converts a rotation from radians radians to radians radians.
2434	Creates a quaternion that rotates about a given angle and axis.
2435	Creates a quaternion that rotates about a given angle radians.
2436	Multiply this complex number by another.
2437	Divide this complex number by another.
2438	Rotate this vector by the specified x y axis.
2439	Converts this quaternion to a given x y z coordinate.
2440	Creates a new complex number from the given x and y values.
2441	Creates a complex number from the given angle in radians.
2442	Move the child view to the right and bottom.
2443	Move the child view to the right.
2444	Sets the span of the given object to be a block of text.
2445	Reduces the set of constraints to a bound set.
2446	Transforms the type parameters of this type.
2447	Creates a symbol reference for a solved symbol.
2448	Returns an unsolvable symbol reference for the given class.
2449	Returns true if the given type is a proper type.
2450	Returns the least upper bound of the given set of types.
2451	Returns the ground target type of the given lambda expression.
2452	Returns a reference type that is not a wildcard.
2453	Returns a new type that is compatible with the given set of types.
2454	Solves a dot expression type.
2455	Solves the constructor for the given object creation expression.
2456	Solves a method call expression.
2457	Finds the resolved type for the given lambda expression.
2458	Returns the name of the class or interface type.
2459	Returns the type of this in the given node.
2460	Exit the statement.
2461	Returns true if the given statement can complete normally.
2462	Solves a type in a type.
2463	Solves a method in a type.
2464	Create a new value from a value declaration.
2465	Checks if the given invocation expression is a valid invocation.
2466	Tests whether the given method call is more specific than the given method call.
2467	Returns true if the given expression appears in the assignment context.
2468	Predicts a feature.
2469	Load the model from a model reader.
2470	Returns the index of the leaf node in the tree.
2471	Returns the value of the leaf node of the given feature.
2472	Unflatten the JSON object.
2473	Flattens the source object into a JSON string.
2474	Flatten the source as a map.
2475	Creates a view of the given lists.
2476	Returns an event stream that emits invalidations of the given observable.
2477	Creates a stream that is a stream that is repeated when the input observable is invalidated.
2478	Returns a stream of animation frames.
2479	Merges the given set into a new stream.
2480	Wraps an ObservableList.
2481	Executes the given function while the guard is satisfied.
2482	Adds an observer to the underlying observable list.
2483	Returns a copy of this metadata.
2484	Strip a prefix from a string.
2485	Configures the given digester.
2486	Processes all class annotations and returns a list of mapping IDs found.
2487	Joins the given values with the given separator.
2488	Initialize device scan.
2489	Detects if the device is an iPhone device.
2490	Detects if the browser supports Webkit.
2491	Detects if the user agent is a Windows Mobile device.
2492	Detects if the device is a BlackBerry device.
2493	Detects if the browser is a S60 OSS browser.
2494	Detects if the device is PalmOS or not.
2495	Detects if the current device is an Opera Android phone.
2496	Detects Opera Android and Tablet devices.
2497	Detects if the device is a Maemo or Android device.
2498	Detects if the device is a mobile device.
2499	Detects if the device is a tier iphone.
2500	Detects if the device is on the other phone.
2501	Checks if the given string is an EL expression.
2502	Checks if the given string contains an EL expression.
2503	Build the script to be used in the browser.
2504	Create an element that represents a method.
2505	Checks if the given string contains any of the field descriptors.
2506	Copy response headers from proxy response to servlet response
2507	Encodes the given CharSequence as a URI query.
2508	Returns the URI of the URL.
2509	Build a query string from a URL.
2510	Gets the value of a parameter.
2511	Returns the values of the parameter with the given name.
2512	Adds the query parameters to the request.
2513	Derives the view id from the given raw view id.
2514	Returns the URLPatternParser to use for parsing.
2515	Gets validators for a path parameter.
2516	Creates a new QueryStringBuilder from the given encoded string.
2517	Extracts the query part from the url.
2518	Adds a parameter to the request.
2519	Get the list of dispatcher type providers.
2520	Returns the number of negation steps in the given context.
2521	Adds a parameter to the navigation.
2522	Builds the standard outcome.
2523	Processes a class file.
2524	Parse a query literal.
2525	Exclude the given parameters from the query.
2526	Builds a URL for the given UrlMapping.
2527	Sends an error to the client.
2528	Scans the given class and all its superclasses and methods.
2529	Prepends the context path to the URL.
2530	Strip the context path from the URI.
2531	Translate a string.
2532	Builds the DynaViewId from the given facesServletMapping.
2533	Process the DynaView.
2534	Returns the type of the given class.
2535	Creates a proxy for the given annotation.
2536	Returns all fields that are filtered by the size of filter.
2537	Returns all fields of the given class including static fields.
2538	Puts the given value into the cache.
2539	Removes the value associated with the given key from the cache.
2540	Loads the agent.
2541	Returns true if the sizeof agent is available.
2542	Copy the contents of the given resource to the given file.
2543	Checks if the given resource is the same as the given file.
2544	Adds a web - inf directory to the archive.
2545	Initialize the zip output stream.
2546	Adds a file to the archive.
2547	Returns the default manifest.
2548	Adds a section to the manifest.
2549	Writes the contents of this buffer to the specified print writer.
2550	Returns the warnings in the main section.
2551	Returns an existing section with the given name.
2552	Copy a file to a directory.
2553	Adds a new manifest to the configuration.
2554	Override this method to write the contents of the given file to the given ZipArchiveOutputStream.
2555	clean up the manifest.
2556	Resets the configuration.
2557	Write the index like list.
2558	Grab files and directories from a jar file.
2559	Decompresses the input stream.
2560	Compress the source file to the destination file.
2561	Merges the attributes in the given section into the target.
2562	Sets the application. xml file.
2563	Adds an archive to the archive.
2564	Adds a directory to the archive.
2565	Compress the source file to the destination file.
2566	Adds the resources to the archive.
2567	Adds all parent directories to the archive.
2568	Adds a new ZIP file to the archive.
2569	Creates an empty ZIP archive.
2570	Resets the archive to the initial state.
2571	Compresses the contents of the given input stream to the output stream.
2572	Compresses a Plexus IO resource.
2573	Sets the maximum size of the dynamic table used for the encoder.
2574	Decode a UL128 encoded integer.
2575	Returns the index of the static field with the given name.
2576	Returns the index of the first entry with the given name and value.
2577	Creates a map of header names to the smallest index in the table.
2578	Returns the length of the given byte array.
2579	Returns the number of bytes in the header.
2580	Adds a new header field to the end of the list.
2581	Sets the capacity of the array.
2582	Encodes a header field.
2583	Set the maximum size of the table to be used for the header.
2584	Encodes an integer into a binary stream.
2585	Encodes a string value.
2586	Encode a literal.
2587	Ensures that the buffer has enough space to hold the given header size.
2588	Returns the header field at the given index.
2589	Returns the header entry for the given name and value.
2590	Returns the index of the field with the given name.
2591	Adds a new header field to the dynamic table.
2592	Hashes a name.
2593	Decodes a byte array.
2594	Set the default script names.
2595	Assert that two shorts are equal.
2596	Asserts that two shorts are NOT equal.
2597	Asserts that actual short is greater than expected.
2598	Asserts that actual float is greater than expected float.
2599	Assert that actual character is equal to expected character.
2600	Asserts that two characters are NOT equal.
2601	Asserts that two characters are less than the expected one.
2602	Asserts that actual character is not greater than other.
2603	Asserts that two characters are greater than the other character.
2604	Asserts that two characters are NOT less than the expected one.
2605	Assert that the character is lower case.
2606	Asserts that the character is upper case.
2607	Asserts that the given array has the expected size.
2608	Asserts that the given array contains all of the given values.
2609	Asserts that the map contains the given key.
2610	Asserts that the map does not contain the key.
2611	Asserts that the map contains the given value.
2612	Asserts that the map does not contain the given value.
2613	Asserts that the given map does not contain duplicate values.
2614	Assert that two numbers are equal.
2615	Asserts that actual is zero.
2616	Asserts that actual is not zero.
2617	Asserts that actual is positive.
2618	Asserts that actual is less than zero.
2619	Asserts that actual float is equal to expected float.
2620	Asserts that the byte array contains the given value at the given index.
2621	Asserts that two numbers are NOT equal.
2622	Asserts that actual value is not greater than expected value.
2623	Asserts that two numbers are less than the expected.
2624	Asserts that actual value is not less than expected value.
2625	Asserts that the given byte arrays contain only the given values.
2626	Asserts that the given byte array contains the given sequence.
2627	Assert that two objects are equal.
2628	Asserts that two objects are not equal.
2629	Assert that two objects refer to the same instance.
2630	Asserts that two objects are not the same.
2631	Asserts that the given char arrays do not contain any of the given values.
2632	Assert that the char array is sorted.
2633	Creates a matcher that matches the given name.
2634	Matches a String that is not empty.
2635	Returns the middle name for the given field name.
2636	Checks if the given field exists in the given type.
2637	Returns the list of annotation resolvers to be used.
2638	Expect the method to be called.
2639	Reduce the name of a class by adding the given suffix to the class name.
2640	Returns the boolean value of the property with the given name.
2641	Remove callbacks from cache and call them.
2642	Returns an array of String names of all annotations in the given class array.
2643	Send the request to the URL.
2644	Process the request.
2645	Handles a token response.
2646	Handle the authorization decision.
2647	Process the end - user and return a response.
2648	Collect claims for a subject.
2649	Handles the authorization decision.
2650	Call the API to get the user info issue.
2651	Computes the login id from the AuthorizationResponse.
2652	Handle the request.
2653	Handle the request.
2654	Creates the service owner credentials.
2655	Creates the service credentials.
2656	Returns a JAX - RS client.
2657	Creates a javax. ws. rs. client. Client.
2658	Sets the connection timeout.
2659	Sets the read timeout.
2660	Executes the given API call.
2661	Handle the request.
2662	Process the request.
2663	Process the response from the Authlete API.
2664	Handles the request.
2665	Process the authorization request.
2666	If the current user has not been authenticated then the current user must be logged in.
2667	Process the request.
2668	Extract the client certificate from the request.
2669	Update implied - repository stores.
2670	Generates a X509Certificate from a KeyPair.
2671	Returns the name of the node with the given prefix and suffix.
2672	Generate the. rel file for the given transfer.
2673	Commits the current changelog to the git repository.
2674	Adds the snapshot data object to the list of data objects.
2675	Gets the remote repository name.
2676	Returns the next name in the list.
2677	Send a message to Kafka.
2678	Sends a message to a topic.
2679	Sends a message to Kafka.
2680	Returns the names of the caches to use.
2681	Writes a set of tracked content to a zip file.
2682	Reads all records from a ZIP input stream and passes them to the consumer.
2683	Gets the target key.
2684	Checks if a path is present in a directory listing.
2685	Removes obsolete files from the given item.
2686	Parse the name of a repository.
2687	Checks if a given store exists.
2688	Load the store from disk and store the changes in the given consumer.
2689	Load the store from disk and store the changes.
2690	Create a hosted repository by arc.
2691	Create a new http client context for the given site.
2692	Create a new http client for the given site.
2693	Performs repair on the remote repository.
2694	Handles a group membership change.
2695	Sets the system properties.
2696	Get the file ranges from the given input stream.
2697	Read messages from a stream.
2698	Creates the table if it does not already exist.
2699	Deletes the table.
2700	Deletes the table if it exists.
2701	Uploads the given permissions to the Storage.
2702	Downloads permissions for this table.
2703	Apply base defaults internal.
2704	Get the extended error information from the given input stream.
2705	Generates an access condition for an ifSequenceNumberLessThanOrEqual operation.
2706	Generates an access condition that checks if the given sequence number is less than the current one.
2707	Generate an access condition for an ifSequenceNumberEqual operation.
2708	Apply the condition to the given HTTP request.
2709	Apply the source condition to the given HTTP request.
2710	Apply the append condition to the request.
2711	Apply the lease condition to the given request.
2712	Apply the sequence condition to the request.
2713	Verifies whether the ETag and Last - Modified date matches the ETag and If - Match headers are
2714	Combine two filters.
2715	Sets the storage URI.
2716	Write shared access identifiers to a stream.
2717	Generates a request body for a message.
2718	Adds the canonicalized headers to the given string.
2719	Appends a canonicalized element to the given string builder.
2720	Canonicalizes the given HTTP request.
2721	Canonicalizes the given HTTP request.
2722	Compute the HMAC - 256 hash of the given string.
2723	Signs a request for a table.
2724	Gets the first message in the given list or null if none.
2725	Adds a message to the queue.
2726	Clears the queue.
2727	Creates a queue.
2728	Creates a queue if it does not already exist.
2729	Deletes the queue.
2730	Deletes the queue if it exists.
2731	Deletes a message.
2732	Download attributes from the queue.
2733	Checks if the queue exists.
2734	Returns the first message in the queue.
2735	Returns an iterable of messages from the queue.
2736	Returns a list of messages from the queue.
2737	Retrieves a message from the queue.
2738	Retrieves a number of messages from the queue.
2739	Retrieves a number of messages from the queue.
2740	Updates the visibility of a message.
2741	Updates a message in the queue.
2742	Upload the permissions for this queue.
2743	Download permissions for this queue.
2744	Gets the transformed storage URI.
2745	Get the metrics table for the given service and location.
2746	Get the metrics table for the given service and location.
2747	Gets the message content as a byte array.
2748	Gets the message content as a string.
2749	Gets a list of files and directories.
2750	Applies the continuation to the UriQueryBuilder.
2751	Create a merge request to the given table.
2752	Query the given table.
2753	Update a table.
2754	Sets the ACL for the given table.
2755	Serialize the ServiceProperties object to a byte array.
2756	Write retention policy.
2757	Write CORS properties.
2758	Write metrics properties.
2759	Write logging properties.
2760	Aborts a copy of the given file.
2761	Adds the share snapshot query parameter to the URI query builder.
2762	Creates a PUT request to the given URI.
2763	Create a new file share request.
2764	Perform a delete share request.
2765	Get a file s ACL.
2766	Gets a file.
2767	Gets the properties of a file.
2768	Gets the file ranges.
2769	Gets the share properties.
2770	Get the share stats.
2771	Get the UriQueryBuilder for the share resource.
2772	Gets the properties for the given file.
2773	List shares.
2774	Sets the share metadata for the given URI.
2775	Sets the metadata for a directory.
2776	Create a directory request.
2777	Perform a DELETE request to the given URI.
2778	Gets the properties of a directory.
2779	List all the files and directories in the given URI.
2780	Create a PUT request.
2781	Create a PUT request to the given URI with the given options and range.
2782	Resize the given file.
2783	Sets the metadata for the given URI.
2784	Sets the metadata for the given URI.
2785	Creates a HTTP PUT request to the given URI.
2786	Sets the file properties for the given URI.
2787	Closes the underlying stream.
2788	Dispatches a read request to the parent file.
2789	Reads a single byte from the stream.
2790	Read data from the stream.
2791	Resets the file to its initial state.
2792	Skips the specified number of bytes from the current position.
2793	Run the task that gets the blob from the server.
2794	Runs the task that gets queued for getting.
2795	Runs the task that gets started on the table.
2796	Run the sample of the payload format of the table.
2797	Output text to view.
2798	Print an exception to the textView.
2799	Prints the start info of a sample.
2800	Prints the complete information about a sample.
2801	Canonicalizes the given request.
2802	Returns the last request result.
2803	Checks if the current item is a valid log type.
2804	Updates the iterator.
2805	Start a copy of the source blob.
2806	Copy a blob from one location to another.
2807	Start a copy of the source file.
2808	Starts a copy of a file.
2809	Start a copy of the source URI.
2810	Copy the source file to the destination file.
2811	Creates a new file in the storage.
2812	Creates a new file in this storage.
2813	Delete empty file on exception.
2814	Downloads the file and returns the content as a string.
2815	Download all file ranges in this file.
2816	Opens a new output stream for writing to this file.
2817	Opens a new file output stream for writing to this file.
2818	Opens a new file output stream.
2819	Uploads a file to the server.
2820	Uploads a file to the storage.
2821	Uploads a text file to the storage.
2822	Uploads a text file to the Storage.
2823	Upload a range of bytes from the given input stream.
2824	Upload a range of bytes from the source stream.
2825	Performs a put operation on the file.
2826	Resizes the file to the specified size.
2827	Uploads a file to the storage.
2828	Upload a file to this storage.
2829	Gets the parent name from a URI.
2830	Gets the share for this file.
2831	Appends a path to a URI.
2832	Gets the blob name from a URI.
2833	Gets the canonical path from the credentials.
2834	Gets container name from URI.
2835	Returns the filename of the given resource address.
2836	Gets the share name from the given resource address.
2837	Gets the table name from the given resource address.
2838	Gets the resource name from a URI.
2839	Gets the container URI.
2840	Get the share URI for a file.
2841	Parses a query string into a map of key - value pairs.
2842	Generates a shared access signature for a blob and file.
2843	Generates a shared access signature hash for a queue.
2844	Generates a shared access signature for a table.
2845	Creates a new file in the file system.
2846	Creates the file if it does not already exist.
2847	Deletes the file if it exists.
2848	Checks if the file exists.
2849	List all files and directories in this directory and all subdirectories.
2850	Gets the share reference for this file.
2851	Deletes all messages from the queue.
2852	Delete a message.
2853	Download attributes from the given URI.
2854	Gets a list request.
2855	Gets the next N messages from the queue.
2856	Gets a list of messages from the queue.
2857	Update a message.
2858	Sets the ACL for the given queue.
2859	Gets the ACL for the given URI.
2860	Split a string into a list of strings.
2861	Split a string into an enum set of CORS methods.
2862	Updates the key.
2863	Gets the HMAC - SHA256 Mac.
2864	Validate an IP address.
2865	Decodes a string into a byte array.
2866	Encodes a byte array into a Base64 encoded string.
2867	Validate that the given string is a valid Base64 encoded string.
2868	Validate container name.
2869	Validates the given string for validity of a blob file.
2870	Validates the given file name.
2871	Validates the table name.
2872	Retrieves all shares with the given prefix.
2873	Retrieves a list of shares in the Cloud File system that match the given prefix.
2874	Lists all shares in the current account and segments them together.
2875	Lists shares with the given prefix.
2876	Returns a list of shares with the given prefix.
2877	Disable the cache of reflected entities.
2878	Gets the date header.
2879	Gets the metadata from the request.
2880	Checks if the given request is encrypted.
2881	Reads the extended error information from the given reader.
2882	Parses the error details from the request.
2883	Parses the JSON error details.
2884	Get access identifiers from a stream.
2885	Get the copy state from the HTTP request.
2886	Gets the file share attributes.
2887	Gets the file directory attributes from the given HTTP request.
2888	Get the file attributes from the request.
2889	Returns the HTTP verb for the given operation type.
2890	Fires an event to all listeners.
2891	Fire a sending request event.
2892	Fire response received event.
2893	Fire an error receiving response event.
2894	Fire a request completed event.
2895	Fire a retrying event.
2896	Assert continuation type.
2897	Assert that a value is in the range of the given range.
2898	Assert that a value is greater or equal to a minimum value.
2899	Validate the max execution timeout.
2900	Returns the remaining time in milliseconds for a read operation.
2901	Determines if the given URI is a path - style URI.
2902	Checks if the URI is a DNS name.
2903	Format the given etag.
2904	Generate a new unexpected storage exception.
2905	Gets the standard header value for the given header name.
2906	Parse date from string.
2907	Parse RFC1123 date from string in GMT time zone.
2908	Relativize the base URI to the toUri.
2909	Logs an error response.
2910	Log the response headers of the given http connection.
2911	Trims the end of the string.
2912	Trims the start of a string.
2913	Parse a date string.
2914	Returns the location mode for a given continuation.
2915	Populates the given options with the default values and applies the client s default request options.
2916	Read a string from the input stream.
2917	Read a quoted string.
2918	Read a boolean.
2919	Read a date from the input stream.
2920	Read a double.
2921	Read a UUID from the stream.
2922	Read an integer from the input stream.
2923	Read a long.
2924	Read a URI from the input stream.
2925	Reads a delimiter from the stream.
2926	Try to peek a delimiter.
2927	Reads a field.
2928	Creates the instance of the retry policy.
2929	Returns true if there are more results to retrieve.
2930	Sets the class type.
2931	Sets the entity resolver.
2932	Write a MIME boundary.
2933	Write a MIME boundary closure.
2934	Write the MIME content type.
2935	Add a new key - value pair to the storage.
2936	Adds the query and fragment to the URI.
2937	Adds a header to the given request.
2938	Create a connection to the given URI.
2939	Create a HTTP DELETE request.
2940	Get the properties of a service.
2941	Gets the user agent.
2942	Sets the metadata for the given URI.
2943	Sets the service properties.
2944	Closes the file.
2945	Commit the file.
2946	Dispatches a write to the file.
2947	Flushes the current buffered bytes to the output stream.
2948	Waits for a task to complete.
2949	Writes a byte array to the output stream.
2950	Writes the contents of the given stream to this file.
2951	Writes a chunk of data to the output stream.
2952	Returns the DNS name for the given service and base.
2953	Try to configure the dev store.
2954	Try to configure the Cloud Storage account.
2955	Creates a Cloud Analytics client.
2956	Creates a CloudBlobClient instance.
2957	Creates a CloudFileClient based on the configuration.
2958	Creates a CloudQueueClient.
2959	Creates a CloudTableClient based on the configuration.
2960	Generate a shared access signature for the account.
2961	Generates the request identity string for the operation.
2962	Generates a request identity string with the given table name.
2963	Initializes the request result.
2964	Materialize the exception.
2965	Post process response.
2966	Parse error details.
2967	Deletes the given table entity.
2968	Inserts the given entity into the table.
2969	Inserts the given entity into the table.
2970	Insert or replace the given entity in the table.
2971	Merge the given entity into this table.
2972	Removes the entity at the specified index.
2973	Removes all of the elements from the collection.
2974	Replaces the given entity with the given one.
2975	Checks that a single query operation is allowed per batch.
2976	Lock the batch to the given partition key.
2977	Creates a new file in the file system.
2978	Deletes the file if it exists.
2979	Download permissions for this file.
2980	Generate a shared access signature for the file.
2981	Upload the given permissions to this file.
2982	Uploads the permissions of this file to the storage.
2983	Returns the URI that is the full path to the file.
2984	Insert a new entity in the table.
2985	Creates a batch operation for the table.
2986	Query the table service for a single entity.
2987	Upserts the specific entity in the storage.
2988	Deletes the entity.
2989	List all tables.
2990	Generate list tables query.
2991	Executes a query and returns a result segment.
2992	Generates an iterable for a table query.
2993	Populates the version 1 log.
2994	Gets a list of queues from a stream.
2995	Translate a HTTP status code to a StorageException.
2996	List all queues.
2997	List all queues in the cloud.
2998	Lists all queues in the queue store.
2999	Lists all queues in the current region.
3000	Lists all queues in the current account and returns a list of queues in a single segment.
3001	Add a new XML catalog to the configuration.
3002	Get the unique ID for the passed ID.
3003	Set the phase of the schema to be used.
3004	Set the error handler for this schema.
3005	Set the variable resolver to use for the schema.
3006	Set the function resolver to use for the schema.
3007	Set the entity resolver to use for the schema.
3008	Get or create the bound schema if it doesn t exist.
3009	Validate the schema using the provided error handler.
3010	Apply the Schematron validation to the passed XML node.
3011	Resolve the given rule content.
3012	Get the provided schema as a minimal schema.
3013	Get the passed schema as a preprocessed schema.
3014	Get a new schema that is pre - processed by this preprocessor.
3015	Read the schema from the passed resource.
3016	Get the query binding for the passed schema
3017	Create a pre - processed schema with the passed query binding.
3018	Write the passed IPS element to the passed file.
3019	Write the passed IPS element to the passed output stream.
3020	Write the passed IPS element to the passed writer.
3021	Apply Schematron on the passed XML resource.
3022	Apply a Schematron to the passed DOM node.
3023	Remove the specified variable from the binding.
3024	Remove all variables from the map.
3025	Get all failed assertions from the passed Schematron output.
3026	Get all failed assertions that are more than the provided error level.
3027	Get all successful reports from the passed Schematron output.
3028	Get all successful reports more than the provided error level.
3029	Get all the failed assertions and successful reports from the passed Schematron output.
3030	Set the error level determinator.
3031	Get the query binding of the passed name.
3032	Get the query binding implementation for the passed name throwing an exception if no implementation is present.
3033	Load an XPath query.
3034	Format the given string with the given argument.
3035	Format the given message using the given format.
3036	Check if the passed MicroNode is a valid SAX SAX document.
3037	Check if the passed node is a valid SAX SAX 2. 0 transformation.
3038	Check if the passed resource is a valid Schematron file.
3039	Check if the passed source is valid in the RNC schema.
3040	Create a new Schematron provider based on the passed Schematron resource.
3041	Get a Schematron provider for the passed SCH resource.
3042	Get the error text for the passed elements.
3043	Get the location of the passed element.
3044	Log a warning message.
3045	Read an active element.
3046	Read the assert report element.
3047	Read a diagnostic from an XML document.
3048	Read the diagnostic information from the passed XML element.
3049	Read a dir from an XML document.
3050	Read an EMPH document from the passed XML document.
3051	Read the extends element from the XML.
3052	Read an include from the passed micro element.
3053	Read a Schematron declaration from an XML node.
3054	Read a name from the XML.
3055	Read a Schematron namespace from the passed XML element.
3056	Read a PSP object from an XML document.
3057	Read the passed parameter from the XML.
3058	Read a pattern from the XML.
3059	Read a phase from the XML.
3060	Read a rule from the XML.
3061	Read the schema from the XML document.
3062	Read a span from an XML document.
3063	Read the title from the passed XML element.
3064	Read a value of element from the XML.
3065	Create a new namespace mapping for the passed schema.
3066	Returns a completion stage for a regex.
3067	Marks the request as authorised.
3068	Checks if the given request is authorised.
3069	Defer deadbolt action.
3070	Get the deferred action for the given request.
3071	Execute the action with the given request.
3072	Checks if an action is left in the action chain.
3073	Gets the role names.
3074	Checks if the given subject option has the given role.
3075	Checks if a subject is present.
3076	Returns the names of the roles.
3077	Converts an array of permissions to a string array.
3078	Returns a list of all of the arguments in a group.
3079	Restrict the view to the given roles.
3080	Overwrites the input buffer to contain the characters at the specified positions.
3081	Overflow method.
3082	Sets the bits to be set to the given values.
3083	Encodes the given string using the given encoder.
3084	Encodes the given string using the given encoder.
3085	Map a encoder to the given name.
3086	Returns the encoder for the given context name.
3087	Appends the contents of the given array to the given output array at the given index.
3088	Encodes the given string using the first encoder and the last encoder.
3089	Flushes the buffer to the output stream.
3090	Flushes the left over buffer to the underlying output stream.
3091	Observe a sensor.
3092	Returns the text value of the given property.
3093	Executes a query on the Sonar server.
3094	Builds a URL to the Sonar API.
3095	Fetch the sonar status from the given URL and wait for it to finish.
3096	Fetch the Sonar status from the given URL.
3097	Parses the response and returns the result.
3098	Extract build artifacts from Folo.
3099	Process uploads.
3100	Compute the identifier for a tracked content entry.
3101	Compute the generic identifier for the given URL.
3102	Validates an artifact.
3103	Checks if the given build task has a configuration dependency on this build configuration.
3104	Checks if the given build task has a direct configuration dependency on this build configuration.
3105	Parses the given JSON configuration content and returns the corresponding config object.
3106	Monitor the deletion of the repository.
3107	Updates the status of the build set to the final state.
3108	Gets the build task with the given build configuration.
3109	Promote repository to group
3110	Merges two graphs.
3111	Read file as string.
3112	Reads the contents of an input stream into a string.
3113	Start a release for a given milestone.
3114	Cleanup the bpm manager tasks.
3115	Get the id of the task with the given build id.
3116	Collect to flat list.
3117	Cleanup expired temporary builds.
3118	Setup the build repositories.
3119	Callback method to be called when a BC creation is successful.
3120	Add listeners to the repository creation task.
3121	Creates an artifact with the given id.
3122	Sets whether SSL is required.
3123	Deletes a temporary build.
3124	Deletes a temporary build config set record.
3125	Build the build with the given user and options.
3126	Checks if the build set task is empty.
3127	Returns an environment driver for the given system image type.
3128	Returns true if the build configuration is not archived.
3129	Loads the build configurations from the project.
3130	Store the build result.
3131	Initializes a build record builder.
3132	Predicate to find ProductVersion by build configuration id
3133	Checks if the Jenkins server is secured with CSRF.
3134	Save the artifacts in the database.
3135	Saves a build config set record.
3136	Gets all build configurations for a given build configuration set
3137	Checks if the latest successful build record has an implicit dependency.
3138	Checks if a dependency has been rebuilt.
3139	Adds a listener to the list of listeners for the given event type.
3140	Returns the process related parameters for the task.
3141	Recursively collect dependencies of a configuration.
3142	Create a build set task.
3143	Create a BuildSetTask.
3144	Fill the build task set with the build configuration.
3145	Get artifacts for a specific build record
3146	Adds a trailing slash to the end of the string.
3147	Deserialize integer array.
3148	Serialize an array of integers to a comma separated string.
3149	Adds a ready task to the queue.
3150	Adds a task to the list of waiting tasks.
3151	Executes all the ready tasks.
3152	Get the task for a given build configuration.
3153	Checks if the artifact origin url is trusted.
3154	Adds a build record to the list of build records.
3155	Removes a build record from the list of build records.
3156	Deletes a temporary build.
3157	Returns a set of all the dependencies of this build.
3158	Adds a dependency to the build configuration.
3159	Remove a dependency from this build configuration.
3160	Retrieve the clone name from the given bcName.
3161	Get the module configuration from the configuration provider.
3162	Creates an instance of the given class.
3163	Registers the embedded server.
3164	Unregister embedded server.
3165	Puts the value in the store.
3166	Finds an extension in the store.
3167	Concatenates the path and endpoint.
3168	Create a new context.
3169	Read a cookie from a raw cookie value.
3170	Creates a new header with the given name and value.
3171	Creates a new header with the given name and values.
3172	Creates the WebAppContext object.
3173	Executes all registered hooks.
3174	Processes all annotations on the target object.
3175	Processes the given field.
3176	Creates a new ApacheHttpClient instance.
3177	Creates a default ApacheHttpClient for the given EmbeddedServer.
3178	Handles the body of the request.
3179	Create the URI for the request.
3180	Adds the headers to the given HTTP request.
3181	Sets the form parameters.
3182	Sets the body of the request.
3183	Adds the cookies to the request.
3184	Creates an AsyncHttpClient configured with the default configuration.
3185	Parse the Java version.
3186	Maps a collection of inputs to a list of outputs.
3187	Concatenates the given inputs with the given new value.
3188	Returns a list of elements that match the given predicate.
3189	Creates a new response with the given duration status code and body.
3190	Creates a new instance of the given class.
3191	Creates a default OkHttpClient for the given EmbeddedServer.
3192	Creates a new OkHttpClient with the given server and client.
3193	Finds all fields of a class.
3194	Finds all static fields of a class.
3195	Finds all static methods of a class.
3196	Finds all static fields annotated with the given annotation.
3197	Finds all static methods annotated with the given annotation.
3198	Sets the value of the field of the given object.
3199	Gets the value of a field.
3200	Invokes the given method.
3201	Formats a date using the given pattern.
3202	Format a time with the given pattern.
3203	Adds the headers to the request.
3204	Checks if the given string is blank.
3205	Removes the prefix from the given value.
3206	Joins the given collection of strings using the given separator.
3207	Adds the query parameters to the RequestBuilder.
3208	Handles the request body.
3209	Adds all form parameters to the request.
3210	Adds the cookies to the request.
3211	Adds the headers to the request.
3212	Append a map to the output.
3213	Append a list of values to the output.
3214	Append formatted value.
3215	Gets the dialog from the distributed cache.
3216	Put the given dialog into the distributed cache.
3217	Removes the dialog from the distributed cache.
3218	Initialize the transaction stack after the load of the SIP stack.
3219	Adds a transaction to the list of transactions to be sent to the server.
3220	Print an entry to the output stream.
3221	Loads the contents of the given input stream into the given connection.
3222	Dump a directory to an output stream.
3223	Execute the dump.
3224	Configures the given component.
3225	Adds server dependencies to the container realm.
3226	Builds the URLs for the given dependencies.
3227	Resolves the dependencies of the given server type.
3228	Creates the artifact for the server.
3229	Gets the server type.
3230	Creates a DSML format writer.
3231	Open a DSML format reader.
3232	Configures the directory server.
3233	Starts the server.
3234	Stops the UnboundID server.
3235	Returns the next record in the LDIFChangeRecords object.
3236	Execute the plugin.
3237	Starts the ApacheDS server.
3238	Stops the server.
3239	Creates the root of the partition.
3240	Starts the server.
3241	Stops the OpenDJ server.
3242	Prints an entry.
3243	Get the server type.
3244	Get the configuration for the server.
3245	Send metrics to Kairos DB.
3246	Sends a metric to the client.
3247	Read a geometry type information.
3248	Reads a point from the stream.
3249	Read a line string.
3250	Read a polygon.
3251	Read a multipoint.
3252	Read a multi - line string.
3253	Read a multipolygon.
3254	Read a geometry collection.
3255	Reads a circular string.
3256	Read a compound curve.
3257	Read a polygon.
3258	Read a polyhedral surface from a byte stream.
3259	Read a TIN object.
3260	Read a triangle.
3261	Write a geometry to the specified ByteWriter
3262	Write a point to the stream.
3263	Write a LineString to the ByteWriter.
3264	Write a polygon to the stream.
3265	Write a multipoint to the output stream
3266	Write a multi - line string.
3267	Write a multi polygon.
3268	Write a geometry collection to a byte writer.
3269	Writes a circular string to the given ByteWriter.
3270	Write a compound curve.
3271	Write a curve polygon.
3272	Write a polyhedral surface to a byte stream.
3273	Write a TIN object to a ByteWriter.
3274	Write a triangle to the specified ByteWriter.
3275	Returns the code of a geometry.
3276	Retrieve the code for a given geometry type.
3277	Returns the geometry type for the given geometry code.
3278	Returns true if the file exists.
3279	Returns the greatest element of the given list.
3280	Abbreviates a string to a maximum length.
3281	Converts a string to a JsonValue.
3282	Returns a new JSON object.
3283	Parse a JSON string.
3284	Get a string value from a map.
3285	Read a JSON object from a string.
3286	Returns the value of the named property.
3287	Returns an iterator over the members in this object.
3288	Resolves the placeholder for the given property.
3289	Get the version info.
3290	Read a JSON array from a string.
3291	Adds a value to the array.
3292	Sets the value at the specified index.
3293	Returns the value at the given index.
3294	Returns an immutable list of values.
3295	Returns an iterator over the values in this list.
3296	Process an event.
3297	Publish an event to all registered event busses.
3298	Publish an event to the event bus.
3299	Remove a child element.
3300	Adds all children of the given tag to the tag by WFF ID map.
3301	Adds a value to the attribute value map.
3302	Invoke the value change listeners.
3303	Adds all values from the given map to the attribute value map.
3304	Removes all the values with the given keys from the attribute value map.
3305	Pushes the given shared objects to the push queue.
3306	Removes the value from the attribute value map.
3307	Adds the given value to the attribute value set.
3308	Adds all values to the attribute value set.
3309	Removes all values from the attribute value set.
3310	Removes all values from the attribute value set.
3311	Adds a value change listener to the list of value change listeners.
3312	Checks if the attribute contains a valid regular expression.
3313	Sets the color of the gauge.
3314	Sets the color of the gauge.
3315	Sets the value of the b parameter.
3316	Sets the alpha value.
3317	Loads all tag classes.
3318	Gets the first substring of a string.
3319	Clone the given array.
3320	Checks if the given string contains any whitespace.
3321	Removes all whitespace from a string.
3322	Removes all children from this tag.
3323	Adds the given inner htmls to the list of children.
3324	Removes all children from this element.
3325	Removes a child tag from this tag.
3326	Appends the specified children to the end of the current tag.
3327	Initialize the attributes.
3328	Returns the attribute with the given name.
3329	Marks the attributes as owner of this tag.
3330	Initialize the StringBuilder for the HTML tag.
3331	Returns the children of this element as an array.
3332	Returns the first child element in the list.
3333	Returns the number of children.
3334	Returns true if the given tag is a child of this tag.
3335	Returns the opening tag.
3336	Inserts the given HTML elements before the current one.
3337	Replace all values in the attribute value set.
3338	Replaces all values in the attribute set with the given values.
3339	Adds a new WebSocketPushListener to the session.
3340	Remove a websocket listener for a given session id.
3341	Remove from browser context.
3342	Gets the tag repository.
3343	Sets the nonce for the WFF script tag.
3344	Sets the border style.
3345	Sets the value of the attribute.
3346	Merges the given data arrays into one.
3347	Removes all css properties from the map.
3348	Checks if the given CSS property is in the list of properties.
3349	Get the CSS properties as a map.
3350	Finds all tags that have an attribute.
3351	Find one tag by attribute.
3352	Find all attributes.
3353	Build all attributes stream.
3354	Find all attributes from the given tags.
3355	Checks if the given tag exists in the browser page.
3356	Checks if an attribute exists in the browser page.
3357	Build all attributes stream.
3358	Gets the text of all children.
3359	Writes a chunk of bytes to the output stream.
3360	Sets the context path.
3361	Sets the context file to be used for the embedded tomcat.
3362	Add a context environment and resource from a file.
3363	Creates a new filter that matches the given path filter.
3364	Returns a new filter that matches either of the given filters.
3365	Checks that the token is not end of file.
3366	Checks if the token is a line space or a line comment.
3367	Parse a string.
3368	Scans the input for tokens.
3369	Parse the command line arguments.
3370	Parse data.
3371	Prints the usage of the command.
3372	Determines the width of the command name.
3373	Creates a zip file from a list of files.
3374	Read the contents of a file.
3375	Create a filter from a string.
3376	Writes a single byte to the output stream.
3377	Write a 32 - bit integer to the stream.
3378	Write n bits to the output stream.
3379	Print out all syntactic markers in the target directory.
3380	Print a syntactic item marker.
3381	Extract the syntactic markers from the given binaries.
3382	Returns the parent of this item.
3383	Returns all parents of this item.
3384	Returns the ancestor of this item.
3385	Appends the given array to the end of the existing array.
3386	Appends two integers to the end of the array.
3387	Appends the given array to the end of the existing array.
3388	Appends the first element of the given array to the end of the given array.
3389	Adds all elements from the given array to the given collection.
3390	Converts a collection of Strings to an array of Strings.
3391	Convert a collection of Integer objects to an array of integers.
3392	Sorts the given array and removes duplicates.
3393	Checks if the array of children is sorted and unique.
3394	Compares two arrays of comparable objects.
3395	Returns the configuration schema for the current build platform.
3396	Create the command extension point.
3397	Activates the default plugins.
3398	Determines the system root.
3399	Determines the local root.
3400	Read a configuration file from the given directory.
3401	Get the module instance.
3402	Starts the module loader.
3403	Activates all modules in the given classloader.
3404	Outputs a syntax error to the given output stream.
3405	Returns true if the given task is ready to be run.
3406	Parse the arguments and return a map of options.
3407	Split the given string into a map of options.
3408	Returns the parent of the given child item.
3409	Returns the ancestor of the given child item.
3410	Substitute the given item in the given mapping.
3411	Returns the content type for the given file.
3412	Get the path entry for a file.
3413	Inspects a file.
3414	Inspects a binary file.
3415	Reads the items.
3416	Convert a path ID to a Trie.
3417	Returns a command descriptor for the Whiley Compiler Collection.
3418	Returns the root of the repository.
3419	Resolve all the package dependencies.
3420	Scans the input for tokens.
3421	Throw a syntax error.
3422	Log the stack trace of the current thread.
3423	Returns the indent string for the current level.
3424	Execute an instruction on the given frame.
3425	Adds a string to an array.
3426	Replies the name of the attribute.
3427	Replies the attribute that is the stack map table.
3428	Replies the local variable type table attribute.
3429	Find the stack map entry that matches the given offset.
3430	Find the index of the stack map entry before the given offset.
3431	Find the index of the stack map entry after the given offset.
3432	Builds a new stack map.
3433	Update the new object stack map entries.
3434	Update the offsets of the new objects.
3435	Sets the current stack map table.
3436	Prints the stack map table.
3437	Generate the new StackMap attribute.
3438	Converts a Java type to a ClassGetName.
3439	Generates a StackMapType from a Java Type.
3440	Generates the Type of a StackMapType.
3441	Creates a new local variable in the method scope.
3442	Calculates the stack types for a method.
3443	Returns a string representation of the access flags of a method.
3444	Converts a list of instructions to a string.
3445	Returns the name of the attribute as a UTF - 8 string.
3446	Checks a method.
3447	Checks the methods in the given class.
3448	Prints the current stack trace.
3449	Prints out the methods of a class.
3450	Adds the given code to the start of the method.
3451	Get a constant from the constant pool and return its string representation.
3452	Resets the local variables to formals.
3453	Converts a Java type to a Java class.
3454	Post - appends the given type to the end of the given array.
3455	Sets the frame at the given offset.
3456	Inserts a new instruction list at the start of the method.
3457	Prints the instructions in the given instruction handle.
3458	Builds an instruction list from the given instructions.
3459	Calculate the stack types for a given operand stack.
3460	Finds the first character in the string that matches the toFind character.
3461	Reads bytes from the stream.
3462	Flushes the output stream.
3463	Creates a new WebSocket client.
3464	Checks if the ad can be used by this dialog.
3465	Returns the ad view for the given index.
3466	Called when the fetch failed to load the ad.
3467	Get the ad request.
3468	Returns the number of items to publish.
3469	Gets the original position of the content of the given position.
3470	Returns the index of the ad in the list
3471	Checks if an ad is available for the given position.
3472	Checks if the given position has to be fetched.
3473	Gets the wildcard type.
3474	Checks if the given element has a generic type argument.
3475	Emit a package declaration.
3476	Compress a type.
3477	Begin a new initializer.
3478	End a type declaration.
3479	Emit a single line comment.
3480	Emit an annotation value.
3481	End a method.
3482	Returns a string representation of the given type.
3483	Emit the modifiers.
3484	Gets the PsiClass from the context.
3485	Finds and removes a method with the given name and arguments.
3486	Generates the parcelable class.
3487	Make the class implement Parcelable.
3488	Checks if the given element is a class.
3489	Checks if the TypeMirror is of the given class.
3490	Returns the first class in the list that is a type of the given type.
3491	Gets the package name of the given type.
3492	Gets the binary name of a type.
3493	Generates the writeToParcel method.
3494	Returns true if the given type is public.
3495	Checks if the given type has a public constructor with no parameters.
3496	Returns the determinant of 3x3 matrix.
3497	Searches the given class file using the given configuration and criteria.
3498	Creates an orthogonal matrix.
3499	Gets a multi bulk reply.
3500	Get the set of tuples from the server.
3501	Serialize a key to a byte array.
3502	Serialize a hash key to a byte array.
3503	Deserialize a set of typed tuples.
3504	Deserialize hash keys.
3505	Deserialize hash values.
3506	Deserialize a hash map.
3507	Deserialize hash list.
3508	Deserialize a set of entries.
3509	Returns a list of all addresses in the given domain.
3510	Parse the host part of an address.
3511	Parse the port number from an address.
3512	Set a value for a key.
3513	Sync the response.
3514	Get the set of tuples that have all the members with their scores.
3515	Stops the leader election.
3516	Returns a string with the information about the execution of the gateway.
3517	Set the quorum of the master.
3518	Check if the given path has permission to lock the given lock type.
3519	Joins the parameters.
3520	Expire the given key in milliseconds.
3521	Decrements the value stored at key by integer.
3522	Increments the value of a key by a given number.
3523	ZADD binary command.
3524	Send a ZRANGEBYSCORE command.
3525	Send a ZRANGEBYSCORE command.
3526	Tell the server that the slave of the current node is no one.
3527	Sets a configuration parameter.
3528	Gets a bit from a key.
3529	Get a range of the specified key.
3530	Shuts down the event selector.
3531	Process the main process.
3532	Process the IO.
3533	Process the loop process.
3534	Registers a session with the selector.
3535	Adds a default header to the response.
3536	Checks the number of received requests that match the given predicate.
3537	Gets the first value for the given key.
3538	Returns the values for the given key.
3539	Adds the encoding to the request.
3540	Create a stubbing object.
3541	Encode a JWT token.
3542	Copy the given date to a new date.
3543	Creates a token.
3544	Get a dialog with the specified error code and request code.
3545	Connect to Google account if not already connected.
3546	Logout and clear the client.
3547	Invalidate the cache if the request is valid.
3548	Returns the status of the baragon service.
3549	Returns the global state of the service.
3550	Get all load balancer groups
3551	Get all base paths occupied by a load balancer group
3552	Returns the response for a single request.
3553	Returns all queued requests.
3554	Checks that all baragon agents are associated with a target on target group.
3555	Removes all removable targets from the target group.
3556	Checks that the agents and load balancers are on the same VPC.
3557	Checks if the given baragon agents have all the targets in the given target group.
3558	Sets the URI template to use.
3559	Creates a new instance of a member key.
3560	Called when a new line separator is found.
3561	Flushes the tag.
3562	Extracts the content of a tag.
3563	Read the lines of a segment.
3564	Creates a regex pattern for the mustache tags.
3565	Decorates the delegate object with the given mappings.
3566	Unwrap the given instance.
3567	Builds the Mustache engine.
3568	Adds a template locator to the engine.
3569	Adds a resolver to the engine.
3570	Registers a built callback for the engine.
3571	Adds a value converter to the engine.
3572	Adds a context converter to the engine.
3573	Capitalizes the given text by the given delimiter.
3574	Appends the given sequence to the given options.
3575	Builds the source cache.
3576	Push a container onto the stack.
3577	Adds a new segment to the container.
3578	Validates the last segment on the stack.
3579	Splits a name into parts.
3580	Decorates the given object to be an instance of the given type.
3581	Flushes the buffer to the parent.
3582	Finds a field by its name.
3583	Registers the given helpers to the given configuration extension builder.
3584	Registers a helper to the configuration extension builder.
3585	Read the segments lines before rendering.
3586	Invalidates the fragments with the given key.
3587	Returns the formattable object for the given value.
3588	Get the local storage.
3589	Gets the session storage.
3590	Clears all storage and cache.
3591	Returns true if the storage item with the given key exists.
3592	Put a value into the cache.
3593	Removes the item from the cache.
3594	Returns a StorageKey for an object.
3595	Creates a StorageKey that represents a key that is a Serializable object.
3596	Creates a serializable storage key.
3597	Obtains the size of the floating action button from a specific typed array.
3598	Obtains the color of the button which is shown by the preference from a specific typed array.
3599	Obtains the color which should be used to activate the button from a specific typed array.
3600	Obtains the color which should be used to show the pressed button of the button from a specific
3601	Obtains the disabled color from a specific typed array.
3602	Obtains the icon of the button which is shown by the preference from a specific typed array.
3603	Obtains the duration of the animation which is shown by the view from a specific typed array.
3604	Adapts the shadow of the activity s dialog.
3605	Adapts the size of the dialog s image button.
3606	Adapts the background of the button which is shown by the dialog.
3607	Creates a background drawable for the state list.
3608	Creates the background drawable for the activation of the layer.
3609	Creates a background drawable that is used to show the pressed state of the button.
3610	Creates a background drawable that is used to hide the layer.
3611	Creates a background drawable.
3612	Returns the size of the button.
3613	Animates the view to be visible.
3614	Creates and returns a listener which allows to change the visibility of the button.
3615	Sets the size of the dialog which is shown by the preference.
3616	Obtains the thickness of the circular progress bar from a specific typed array.
3617	Initializes the paint.
3618	Initializes the angle animator.
3619	Creates a property which allows to control the current global angle of a progress drawable.
3620	Initializes the animation which will be used to animate the sweep of the view.
3621	Creates the property which allows to sweep the progress drawable.
3622	Creates and returns a listener which allows to animate the sweep animation.
3623	Initializes the floating action buttons.
3624	Creates and returns a listener which allows to show a toast when the activity is clicked.
3625	Initializes the button which allows to hide the floating action buttons.
3626	Creates and returns a listener which allows to hide the floating action buttons.
3627	Initializes the chips.
3628	Creates and returns a listener which allows to hide the chip when it is closed.
3629	Handles the saved state of the activity.
3630	Obtains the text of the chip from a specific typed array.
3631	Obtains the color of the text which is shown by the preference from a specific typed array.
3632	Obtains the color of the chip from a specific typed array.
3633	Obtains the icon of the chip from a specific typed array.
3634	Obtains whether the chips should be closable from a specific typed array.
3635	Obtains the icon which should be used to close the dialog from a specific typed array.
3636	Adds a new listener which should be notified when the dialog s content is closed.
3637	Removes a specific listener which should not be notified when the dialog is closed.
3638	Sets the color of the gauge.
3639	Sets whether the button should be closed.
3640	Returns the partial aliases.
3641	Returns a new engine for the given scripts.
3642	Returns the layout mappings.
3643	Checks if the class is present.
3644	Returns the value of an annotation.
3645	Returns an input stream for the given name.
3646	Returns the first available stream for the given names.
3647	Renders a template with the given model.
3648	Adds the given aliases to the registry.
3649	Adds an alias to the configuration.
3650	Returns a listener which is registered with the specified id.
3651	Runs a ChronosOperation synchronously.
3652	Checks if a method is a callback.
3653	Called when the application is resumed.
3654	Called by the main thread of the ChronosOperationManager.
3655	Invokes an operation asynchronously.
3656	Invokes the given operation on the ChronosService.
3657	Cancels a request.
3658	Cancels a request with the given tag.
3659	Returns whether the request with the given tag is running or not.
3660	Called when an operation is finished.
3661	Stores the given delivery in the list of stored results.
3662	Deliver the result of an operation to all registered listeners.
3663	Send the given operation result to all registered listeners.
3664	Logs a message at the DEBUG level.
3665	Cancels a running operation.
3666	Registers an operation that is started.
3667	Cancel all running operations.
3668	Returns true if the given operation is cancelled.
3669	Runs the given operation on the given operation result.
3670	Creates an empty result.
3671	Runs the given operation asynchronously.
3672	Runs a Chronos operation synchronously.
3673	Called when the operation is finished.
3674	Main method.
3675	Returns the modules to be used in the application.
3676	Main method for the application.
3677	Check the end of the line.
3678	Initialize the event listener.
3679	Get the JMX connection for the given child.
3680	Closes the connection to the specified MBeanServer.
3681	Initializes the view which contains the text which is used to search.
3682	Main method for the plugin.
3683	Gets the validator.
3684	Returns a list of columns that can be used to find the columns in the table.
3685	Returns the list of columns that should be inserted into the table.
3686	Returns all packages.
3687	Gets the not overridden content.
3688	Writes the not overridden content.
3689	Finds a table by its name in this package.
3690	Finds a bean for a table.
3691	Returns all the view properties of the given bean.
3692	Gets the visible properties.
3693	Updates the target versionable with the contents of the source versionable.
3694	Adds a history to the list of history items.
3695	Customize the session.
3696	Adds a new requirement spec node to the database.
3697	Write the VM to the database.
3698	Gets the issue type with the given name.
3699	Get a VmSetting by its name.
3700	Returns a DataEntry for a string field.
3701	Returns a DataEntry for a boolean field.
3702	Get numeric field.
3703	Display a workflow
3704	Refreshes the graph of the current workflow.
3705	Walks the component tree.
3706	Receive an upload.
3707	Returns the address risk.
3708	Converts a descriptor to a file descriptor.
3709	Returns the blockscore error from the RetrofitError.
3710	Score the question set.
3711	Digests the given stream using the given operation.
3712	Checks if the given path accepts the given file patterns.
3713	Adds an answer to the question.
3714	Returns the matching info.
3715	Returns the address of the address.
3716	Creates a question set for this person.
3717	Retrieve a question set.
3718	Returns the date of birth.
3719	Returns the address of the address.
3720	Returns the incorporation date.
3721	Gets the history of the revisions.
3722	Search for the watchlists for the given entity type and similarity threshold.
3723	Sets the date of birth.
3724	Sets the address of the candidate.
3725	Retrieve a person.
3726	Retrieve a candidate from the rest adapter.
3727	Returns the encoded authorization header.
3728	Gets the date of birth end.
3729	Returns the type parameter of the given class.
3730	Returns the value of the property with the given name as a String.
3731	Returns the value of the named property as a Boolean.
3732	Returns the relative path of the given entry in the given directory.
3733	Returns the error type.
3734	Returns the validation error code.
3735	Flushes the file structure.
3736	Synchronize the given collection of files with the given map.
3737	Returns a cache of the given file descriptors.
3738	Creates the hierarchy of the contained files.
3739	Finds an unused port.
3740	Returns the value of the parameter with the given name.
3741	Sets the values of a parameter.
3742	Sets the parameter value.
3743	Add a parameter to the context.
3744	Get the target command.
3745	Gets the value for the given key from the wizard.
3746	Registers an OID.
3747	Factory method for creating the node.
3748	Factory method for creating the SubElement.
3749	Returns the complement of the given set of index flavors.
3750	Creates a set of index flavors.
3751	Adds a new entry to the cache.
3752	Removes the value associated with the specified key.
3753	Get a random 4 - byte ID.
3754	Gets the user widths.
3755	Sets the sort direction.
3756	Sets the column order.
3757	Gets the user sorted columns.
3758	Override onComponentTag to add the class attribute to the tag.
3759	Called when the component tag body is found.
3760	Method to sort the structur browser.
3761	Returns a Config instance by its name.
3762	Render the header items.
3763	Render combined require scripts.
3764	Create the script for creating a new node.
3765	Gets the data line.
3766	Execute the method.
3767	Expand the UI Classification.
3768	Add children.
3769	Gets the class instance keys.
3770	Returns the cache key for this classification.
3771	Adds the highlight expressions to the request.
3772	Adds start tags.
3773	Adds end tags.
3774	Get lazy load component.
3775	Gets the loading component.
3776	Closes the modal window.
3777	Insert the given element before the current element.
3778	Gets the previous element.
3779	Adds the given parameters to the current wizard.
3780	Evaluate the instance.
3781	Adds all elements from a class.
3782	Update the elements of the form.
3783	Adds a cell to the form row.
3784	Evaluate the UI provider.
3785	Evaluate the field set.
3786	Gets the elements for a given classification.
3787	Generates the JavaScript code to create a sub menu item.
3788	Gets the javascript code for the event.
3789	Gets the image.
3790	Gets the behavior.
3791	Add the components for the UIHeading.
3792	Returns an iterator of children of the given node.
3793	Make a request to the Hod API.
3794	Make a request to the Hod API.
3795	Creates an input stream for a single request.
3796	Make a request to the Hod API.
3797	Converts the typed input to an object of the given type.
3798	Override renderHead to render the header.
3799	Override onError in order to handle errors.
3800	Launch the given job.
3801	Adds reference prefixes.
3802	Add additional metadata to the request.
3803	Adds a list of promotion categories to the list of categories to be promoted.
3804	Add synonym categories.
3805	Add blacklist categories.
3806	Initiate the partial page request.
3807	Called when the request is received.
3808	Get the resource stream.
3809	Gets the javascript code to call when the browser is loaded.
3810	Send keepalive message to all connections.
3811	Init keep alive.
3812	Gets all user sessions.
3813	Called when the component s body is being rendered.
3814	Render the component.
3815	Gets the dashboard link.
3816	Parses a response.
3817	Parses a response.
3818	Parse the response body and return the result as the given type.
3819	Parses the response body and returns the input stream.
3820	Returns the list of events for the given event type.
3821	On component tag internal.
3822	Run the job.
3823	Override onComponentTag to add the class attribute to the tag.
3824	Render the head of the component.
3825	Sets the default menu item.
3826	Get the label for the given button.
3827	Gets the editable component.
3828	Override onAfterRender to set the markup id.
3829	Gets the date as string.
3830	Gets the date list.
3831	Add this component to the parent container.
3832	Destroy the executor service.
3833	Override onClick to load in the target.
3834	Override this method to set the actionUrl.
3835	Override handleMultiPart to add file parameters to the request.
3836	Resets the counter of all sets.
3837	Initialize the filter.
3838	Checks if the user is logged in.
3839	Check login.
3840	This method is called when the user clicks on the form.
3841	Gets the persistence script.
3842	Returns the menu items for the given dojo classes.
3843	Gets the menu.
3844	Gets the sub menu.
3845	Gets the JS code for the data.
3846	Gets the javascript code to reload the data.
3847	Creates the page.
3848	Show the modal window.
3849	Adds a new UIFieldSetValue to the row.
3850	Gets the index for the given input name.
3851	Add a new row to the set.
3852	Adds the children of the given UIClassification to the model.
3853	Get the help for a command
3854	Method to get a new UIStructurBrowser.
3855	Initialise the fields.
3856	Expand the children.
3857	Sort the model.
3858	Check to see if the column is hidden.
3859	Check if the instance is allowed to be added to the UI.
3860	Execute the UI table event.
3861	Requery the label.
3862	Bind the handler to the given component.
3863	Gets the data table.
3864	Execute the events for this field.
3865	Gets the rendered content.
3866	Returns the command with the given UUID.
3867	Gets the label.
3868	Prune all finished tasks from the execution bridge list.
3869	Gets a page of execution bridges.
3870	Returns the bridge for the given job name.
3871	Checks if the user is logged in.
3872	Lazy login.
3873	Login the user.
3874	Logout the current user.
3875	Adds indexes to the query.
3876	Gets the model.
3877	Add the components.
3878	Adds the given components to the page.
3879	Convert the date field values.
3880	Convert the values of the form fields.
3881	Called when the user fails to submit the form.
3882	Validate the field values.
3883	Evaluate the form element.
3884	Validates the form.
3885	Checks if all required components are present in the form.
3886	Gets the list of FormPanels in the form.
3887	Show the dialog.
3888	Register the login providers.
3889	Returns the complement of the given set of resource types.
3890	Creates a set of the given types.
3891	Check out.
3892	Checks if the access to the menu is allowed to access the given field.
3893	Gets the type image.
3894	Initializes the menu.
3895	Requery the label.
3896	Remove pages from the cache.
3897	Override onComponentTagInternal to add a tag to the tag.
3898	Override onClick to handle the click.
3899	Get the EFapsSession for the given request
3900	Called when the request is started.
3901	Close the context of the current request.
3902	Registers a new user session in the cache.
3903	Registers an activity for a given EFapsSession.
3904	Adds a new Message Connection to the cache.
3905	Invalidates the session.
3906	Removes a user session from the cache.
3907	Gets all users.
3908	Gets connections for a user.
3909	Gets the connection for a session.
3910	Get the cache for the session.
3911	Initializes the UIItem.
3912	Returns the calling command.
3913	Execute the given events.
3914	Add the behaviors.
3915	Returns the width weight of the form.
3916	Evaluate the label.
3917	Checks if the field is a table field.
3918	Gets the field configuration.
3919	Returns true if the snipplet is visible.
3920	Set the position of the splitter.
3921	Initialize the button.
3922	Gets the choices.
3923	Gets the date time formatter.
3924	Get the file.
3925	Gets the menu.
3926	Gets the SubMenues for a given Instance.
3927	Initialise the table.
3928	Gets the list of instances.
3929	Add a list of filters to this table.
3930	Add a filter classifcation.
3931	Gets the filter.
3932	Gets the filter pick list.
3933	Get all status for a type.
3934	Stores the filters in the session.
3935	Remove this filter from this table.
3936	Gets the cell.
3937	Gets the instances.
3938	Gets the filter for a field.
3939	Returns the command that is currently registered.
3940	Get the title of the current command.
3941	Checks if the given filter is a date filter.
3942	Gets the row with the given ID.
3943	Print the grid.
3944	Gets the query.
3945	Gets the excluded values.
3946	Recursively apply the dimensions to the nodes.
3947	Fill the dimension provider.
3948	Builds the parameters for a hierarchy.
3949	Checks if the root element matches the expected root element.
3950	touch the cache if it is expired
3951	Refresh TTL of the cache entry
3952	Tries to clone the given object.
3953	Initialize the cache.
3954	Sets the cache properties.
3955	Returns the value of the cache property.
3956	Calculates the cache key for the given key.
3957	Returns the cache properties for the given name.
3958	Set an entry in the cache.
3959	Deletes the entry from the cache.
3960	Deletes a key from the local cache.
3961	Deletes all entries from the cache.
3962	Deletes all entries from the local cache.
3963	Returns the label for the given element.
3964	Sort the elements by tab index.
3965	Generates a generic form for the given form action.
3966	Generates the HTML for the given element.
3967	Returns the HTML representation of the input element.
3968	Gets the HTML for the given element.
3969	Registers an application context.
3970	Creates a new SelectInput with the given name and possible names.
3971	Builds all the attributes for the form element.
3972	Builds the max length attribute.
3973	Gets the list of accepted content types.
3974	Returns true if the callback is the same session.
3975	Returns a cursor converter that converts a list of documents to a list.
3976	Initialize all loaders that are started.
3977	Returns a new profile object for the specified person.
3978	Set the listener to be notified when the tag is changed.
3979	Gets the document builder factory.
3980	Create a DOMSource from an XML file.
3981	Get the schema for the given xsd file.
3982	Parse the given XML file.
3983	Validate the XML using the given XSD.
3984	Validate the XML schema.
3985	Adds a child tag to this tag.
3986	Removes an attribute from the element.
3987	Returns a string representation of this velocity template.
3988	Returns the XML representation of this tag.
3989	Adds a service to the list if it is not already present.
3990	Get service by device
3991	Start the proximity service.
3992	Returns all triggers for the given app.
3993	Delete all triggers of the given application package.
3994	Delete the trigger for the given id.
3995	Returns the trigger with the given id and app package name.
3996	Validate access to an app.
3997	Converts an XML string to an object using XStream.
3998	Converts an XML string to an object using an XStream.
3999	Convert an XML string to a JSON string.
4000	Invokes a method on the service.
4001	Check if the current thread is the main thread.
4002	Log a method call.
4003	Load object from input stream.
4004	Create a new XML tag with the specified name and value and attributes.
4005	Checks if the given query matches the current query.
4006	Dispatch an invocation to the service registry.
4007	Unregister a service interface.
4008	Generate a unique query id.
4009	Called when an instance is lost.
4010	Stops a search.
4011	Stop all searches for the given app.
4012	Connects to the device.
4013	Creates a view which can be used to display a single profile field.
4014	Creates the spinner which will show the value of the selected item in the list.
4015	Creates a view which displays a date in the view.
4016	Creates a view which can be used to display a tag.
4017	Creates the standard edit view.
4018	Send a notification to the server.
4019	Serialize this object to an XML string.
4020	Set the contentView with minimal elements.
4021	Returns the friendly name of the field.
4022	Kills the scheduler.
4023	Initializes the SPF context.
4024	Broadcast an event to all registered listeners.
4025	Creates a ProfileFragment that displays the current view of the current activity.
4026	Called when the profile data is available.
4027	Starts cropping the image.
4028	Handle crop image.
4029	Convert an object to a JSON string.
4030	Add a tag to the list of tags.
4031	Sets the tags to be displayed.
4032	Save a trigger to the trigger table.
4033	Delete a trigger.
4034	Start the notification handler thread.
4035	Start the registration of the service.
4036	Adds an attribute to the current element.
4037	Invokes the method with the given name.
4038	Set the selection of the list.
4039	Sets the selection of the specified indicators.
4040	Returns the selected strings.
4041	Returns the selected indicies.
4042	Refreshes the view container.
4043	Shutdown the service.
4044	Insert a new line.
4045	Write the string to the output stream.
4046	Converts the given object to a JSON string ignoring any errors.
4047	Load a connection to the service.
4048	Bind to service.
4049	Disconnect from the service.
4050	Handles the error.
4051	Refreshes the triggers list.
4052	Adds a new persona to the database.
4053	Removes a persona from the database.
4054	Registers a service as an Activity consumer.
4055	Returns the AppAuth object for the given app identifier.
4056	Registers an application.
4057	Unregister an application.
4058	Returns the SPFPersona object for the given app identifier.
4059	Called when a message is received from the server.
4060	Adds a client to the list if it isn t already present.
4061	Connect to the server.
4062	Returns the value of the specified field in this profile.
4063	Returns true if the field is modified.
4064	Stops a search.
4065	Stops all the searches.
4066	Lookup a person by its identifier.
4067	Get a list of fields from the profile table.
4068	Get the base info for the given persona.
4069	Gets the node list.
4070	Creates a proxy to the given callback interface.
4071	Get the PersonAuth object for the given Tkn.
4072	Creates an entry for a sent request.
4073	Creates an entry for a received request.
4074	Checks if an entry exists for the given user.
4075	Confirm a request to the user with the given UID.
4076	Adds a closing tag to the XML.
4077	Adds an empty tag to the XML document.
4078	Adds an opening tag.
4079	Deletes a file and all its sub - directories.
4080	Creates a temporary directory.
4081	Get the proxied object.
4082	Loads a class from the given class loader.
4083	Compute the signature of a method.
4084	Creates a new instance of the given one - way codec.
4085	Resets the connection to the initial state.
4086	Creates a new URLBuilder with the given path.
4087	Adds a query parameter to the URL.
4088	Returns the first value of the given parameter.
4089	Adds a query parameter to the query string.
4090	Adds the given parameters to the request.
4091	Adds a parameter with the specified index to the request.
4092	Adds a query to the query string.
4093	Validate the query.
4094	Adds a query to the query list.
4095	Rebuilds the query instance.
4096	Replaces the parameter with the given value.
4097	Invokes the given method on the given object.
4098	Creates a proxy to shutdown the given object.
4099	Converts a String or Boolean to a Boolean.
4100	Get the stack trace of the given exception.
4101	Removes trailing slash from a path.
4102	Waits for the call to shutdown.
4103	Adds an empty tag to the end of the document.
4104	Add an attribute to the XML document.
4105	Adds the attributes from the given map to the current attributes.
4106	Extract the information from the given URL.
4107	Chroot the given resource to the root of the directory.
4108	List resources in the directory.
4109	Chroot the resource at the given path.
4110	Creates a resource from a file.
4111	Starts the process.
4112	Create an external command.
4113	Starts a command.
4114	Executes the given command with the given arguments.
4115	Returns the time since the last call.
4116	Returns the elapsed time in milliseconds.
4117	Add a tag to the document.
4118	Add a tag with the specified tag name and value.
4119	Indent a block of text.
4120	Converts a timeout to a time in milliseconds.
4121	Adds a new entry to the directory.
4122	Creates a new directory.
4123	Encodes a string using the given one - way codec.
4124	Decode a string using the given codec.
4125	Create a leaf resource from a resource.
4126	Reverses the elements in the array.
4127	Converts an array of Enums to an EnumSet.
4128	Load properties from a file.
4129	Load properties from a reader.
4130	Returns the time units as a string.
4131	Compares this timespan with another timespan.
4132	Truncate the size to the given unit.
4133	Add the given size to this one.
4134	Compares this memory size with the given memory size.
4135	Create a new MemorySize object.
4136	Executes the given callable and returns a Future that is ready to be executed.
4137	Add a marker to the map.
4138	Remove a marker from the cache.
4139	Creates a bitmap descriptor from a view.
4140	Returns a function that checks if the given file is related to the given file.
4141	Emits events from the given watch service to the given subscriber.
4142	Get the selection drawable.
4143	Initialize with a ViewPager.
4144	Adds the views to the view pager.
4145	Returns the message for the given exception.
4146	Sets the sequential counter to true.
4147	Parse a UUID character into an integer.
4148	Maps two characters into a byte.
4149	Returns the timestamp.
4150	Get the MAC fragment.
4151	Sets a property.
4152	Set Facebook user credentials.
4153	Sets the Socialize credentials.
4154	Merges the properties from another properties object.
4155	Adds a share to the share system.
4156	Handles a non - network share.
4157	Adds a comment to an entity.
4158	Delete a comment.
4159	Adds a comment to an entity.
4160	Get a comment.
4161	Get comments from a list of ids.
4162	Get comments by user.
4163	Get comments by entity.
4164	Get comments by application.
4165	Show comment view.
4166	Parse a JSON string.
4167	Open a URL with the given parameters.
4168	Parses a JSON string.
4169	Shows an alert with the given title and text.
4170	Log a message at level DEBUG.
4171	If the type is more specific than the value type the value is returned.
4172	Sets the entity to be used in the request.
4173	Build the URL to the profile image.
4174	Called when the image of the profile is changed.
4175	Generates a request URL.
4176	Normalize request parameters.
4177	Authorizes the user to access the user s activity.
4178	Start the authentication process.
4179	Validates the signature of an intent.
4180	Logout the current user.
4181	Shows a dialog with the given parameters.
4182	Serializes a date to JSON.
4183	Link the current user to the given activity.
4184	Link to the given permissions.
4185	Link to the given token.
4186	Post a entity to the Facebook server.
4187	Extend the access token.
4188	Get current permissions for the given token.
4189	Get the hash keys from the package
4190	Save an entity to the database.
4191	Get an entity from the server.
4192	Get an entity.
4193	Get a list of entities in the specified range.
4194	Get a list of entities in the order of creation date.
4195	Override this method to create a ContextMenu.
4196	Subscribe to a specific entity.
4197	Check if the entity is subscribed to the given type.
4198	Checks the registration state of the user.
4199	Returns the next token in the JSON stream.
4200	Advances to the next null.
4201	Reads an escape character from the input stream.
4202	Show a share dialog for the given entity.
4203	Shows a share dialog with the given entity.
4204	Share the entity via email.
4205	Share the given entity via GooglePlus.
4206	Share the given entity via the other entity.
4207	Share the given entity via SMS.
4208	Share the given entity via the specified social networks.
4209	Get a share.
4210	Get a list of share ids.
4211	Get a list of all shares owned by a user.
4212	Get a list of shares for a given entity.
4213	Get the list of shares that are shared by the given application.
4214	Add like listener to the given entity.
4215	Like a specific entity.
4216	Delete like entity.
4217	Get like for a specific entity
4218	Get a like object.
4219	Gets the liked state of an entity.
4220	Get likes for a user.
4221	Get likes by entity.
4222	Get the Facebook instance.
4223	Collect the header parameters from the request.
4224	Collect the body parameters from the request.
4225	Collect the query parameters from the URL.
4226	Creates a new JsonWriter for the given writer.
4227	Creates a default implementation of the given type.
4228	Replaces all new lines in the source string with new lines.
4229	Reloads the action bar.
4230	Gets the simple location of the given address.
4231	Get user object.
4232	Get the actions for the given application.
4233	Get the actions for a user.
4234	Get the actions that are associated with an entity.
4235	Get the actions for a specific user and entity.
4236	Closes the current scope.
4237	Set the name of the property.
4238	Parses the given JSON document and returns the corresponding JsonElement.
4239	Parses the given JSON source.
4240	Link to the Socialize server.
4241	Sets the credentials for the proxy.
4242	Tweet a single entity.
4243	Get a resource from the twitter server.
4244	Tweet to the user.
4245	Tweet photo to the user.
4246	Scales the bitmap to the specified width and height.
4247	Asynchronously put the object to the server.
4248	Set the text size of the text view.
4249	Called when the image is changed.
4250	Save user asynchronously.
4251	Get a user.
4252	Save user settings.
4253	Set the auto post preferences to the given networks.
4254	Authenticate with Facebook.
4255	Authenticate for read.
4256	Returns the value of a static field.
4257	Returns the name of the field that is the value of the static field.
4258	Handles the intent received from the client.
4259	Handles a broadcast intent.
4260	Encodes a byte array into a byte array.
4261	Decode a base64 encoded value.
4262	Add a view to the entity.
4263	Called when the user changes the profile.
4264	Decode the form parameters.
4265	Convert a collection of Map. Entry to a Map.
4266	Converts a header element to a string.
4267	Put the object in the cache.
4268	Put the object in the cache.
4269	Puts the specified object into the cache.
4270	Get the raw object for this key.
4271	Gets an object from the cache.
4272	Checks if the given key exists in the cache.
4273	Extend the TTL of this object.
4274	Loads an image from the specified URL using the specified width and height.
4275	Loads an image from a URL.
4276	Parses a tag string into a map of tag names to tag values.
4277	Formats a map of tags to a string.
4278	Fix encoded tags in metric name.
4279	Creates a new metric builder with the given metric name.
4280	Returns a string representation of this metric.
4281	Converts the domain name to human readable string.
4282	Percent - decodes a string.
4283	Returns the value of the query parameter with the given name.
4284	Returns the query parameters with the given name.
4285	Returns the relative path of the given URL.
4286	Builds a hierarchical URL.
4287	Builds a URL with the opaque scheme.
4288	Returns a human - readable representation of this URI.
4289	Query stream with ordinal params.
4290	Query stream with named parameters.
4291	Gets the fields of a class.
4292	Fetch the next row.
4293	Returns the value of the designated column as a LocalDateTime.
4294	Returns the value of the designated column as a LocalDate.
4295	Returns the value of the designated column as a LocalTime.
4296	Get a Timestamp object as a ZonedDateTime.
4297	Returns the value of the designated column as an OffsetDateTime.
4298	Returns the value of the designated column as an offset time.
4299	Gets the value of a column.
4300	Crop the path.
4301	Crop the path to the center of the image.
4302	Crop the path.
4303	Resize the path to the specified width.
4304	Resize the path.
4305	Scale the path to be cropped.
4306	Scale the path to be cropped to the center of the image.
4307	Blur the path.
4308	Add sharp path.
4309	Add a preview to the path.
4310	Returns the current project.
4311	Get a file.
4312	Deletes a file.
4313	Saves the contents of a file to the storage.
4314	Execute a request and check the response status.
4315	Checks the response status code and throws an appropriate exception if it is not a 200 or a
4316	Creates a trusted URI for uploading a file from a source URL.
4317	Injects the given target object into the object graph.
4318	Creates a new Builder for the given theme.
4319	Finds the class with the given name.
4320	Loads a class by name.
4321	Search for a character in the buffer.
4322	Adds a word to the trie.
4323	Appends a character to the end of the string.
4324	Get and set the value.
4325	Checks if the given class is assignable to the given type.
4326	Copy parse info to the zip file.
4327	Hashes a group and sets the name of the group.
4328	Matches a character ignoring case.
4329	Matches a Unicode code point.
4330	Matches a range of characters.
4331	Matches any of the given characters.
4332	Matches any of the given characters.
4333	Rule that accepts a string.
4334	Matches a string.
4335	Match a string as a case insensitive string.
4336	Returns a new rule that matches the given rule if it is not null.
4337	Creates a rule that matches the given rule and the given rules.
4338	Matches a sequence of rules.
4339	Creates a rule that is the minimum of the given rules.
4340	Creates a new rule from a string literal.
4341	Converts an array of objects to rules.
4342	Converts an object to a rule.
4343	Pushes a value onto the stack.
4344	Pop and cast the element to the specified type.
4345	Pop the element and cast it to the specified class.
4346	Peek the next element of this queue as an instance of the specified class.
4347	Poke a value down to the top of the stack.
4348	Match the given context.
4349	Checks if this range overlaps with the given range.
4350	Checks if this range touches the given range.
4351	Merges this range with the given range.
4352	Generates a byte code for a parser.
4353	Add a word to the trie.
4354	Unwrap a Matcher.
4355	Registers a listener to the bus.
4356	Post an object to the bus.
4357	Returns the sub context of the given context.
4358	Returns a rule that is at least the specified number of cycles.
4359	Returns a rule that is at most the specified number of cycles.
4360	Creates a repetition rule.
4361	Creates a repetition rule.
4362	Returns a rule that matches the given range.
4363	Returns a new instance with all characters but the given characters.
4364	Gets the value of the deploymentDescriptor property.
4365	Gets the value of the authenticationConfiguration property.
4366	Gets the BW services.
4367	Add monitoring events to all services.
4368	Gets the value of the globalVariable property.
4369	Gets the value of the baseService property.
4370	Gets the value of the event property.
4371	Checks if the project exists and is a directory.
4372	Reads the dependencies from a file.
4373	Launches the given TIBCO binary.
4374	Gets the value of the action property.
4375	Deletes the given directory.
4376	Gets the value of the final property.
4377	Gets the value of the rulebase property.
4378	Adds an alias to the list.
4379	Processes the given file.
4380	Gets the value of the rest property.
4381	Gets the value of the nvPair property.
4382	Adds a dependency to the pom.
4383	Removes a dependency from a pom.
4384	Checks if the dependency exists in the list of dependencies.
4385	Checks if the given dependency exists in the given pom.
4386	Adds a project as a module.
4387	Checks if a module exists in the model or profile
4388	Returns the artifact file for the given name and classifier.
4389	Execute the goal.
4390	Extracts the content of a file.
4391	Updates the repository instances.
4392	Gets the value of the any property.
4393	Creates a new instance of the given class.
4394	Creates a proxy class for this class.
4395	Creates a constructor for the proxy.
4396	Start a statement execute timer.
4397	Start a callable statement life timer.
4398	Start a result set life timer.
4399	Mark a result set row meter.
4400	Creates a new proxy instance.
4401	Wrap a connection.
4402	Wraps a statement.
4403	Wraps a prepared statement.
4404	Wraps a callable statement.
4405	Returns the result set type.
4406	Build the command line arguments.
4407	Build the face arguments.
4408	Executes the command.
4409	Execute the task.
4410	Sets the language.
4411	Gets the message for the given key.
4412	Say or think.
4413	Format the given COW to be HTML.
4414	Get the cow face by mode.
4415	Get the cowFace from the command line.
4416	Extracts the template from a COW string.
4417	Loads a COW file from the given path or resource.
4418	Converts a COW input stream to a string.
4419	Returns an InputStream for a COW file.
4420	Gets the COW input stream from the COWPATH environment variable or resources.
4421	Checks if the given file is a COW file.
4422	Converts a COW file to an input stream.
4423	Gets the cow file with the given name in the given folder.
4424	Returns all cow files in the given folder.
4425	Gets the face by mode.
4426	Sets the eyes.
4427	Sets the tongue of the message.
4428	Checks if the given mode is known.
4429	Parses the command line arguments.
4430	Show the command line help.
4431	Format a message with the given bubble.
4432	Wraps the given message with a new line.
4433	Format the given message.
4434	Sets the wordwrap option.
4435	Returns the longest line length of the given message.
4436	Log a message to the log.
4437	Log a message to the loggly server.
4438	Logs a collection of messages in a bulk format.
4439	Joins the given collection of strings into a single string.
4440	Main method to run the Loggly API.
4441	Get all the schemas in the database.
4442	Get a schema by name.
4443	This method is called when the context is initialized.
4444	Resync all the registered watch keys.
4445	Returns a map of table names to tables.
4446	Returns the table with the given name.
4447	Writes the contents of the file to the given writer.
4448	Returns a map of all the catalog names to the corresponding catalog objects.
4449	Returns the catalog with the given name.
4450	Returns a new buffer with the specified number of characters.
4451	Writes the class name of the encoder to the log.
4452	Writes the given writer to the log.
4453	Returns a LexicalPosition with zero and a file.
4454	Appends the segment value to the given buffer.
4455	Writes a segment to the output stream.
4456	Returns the character value for the given type and char index.
4457	Get the SQL data types.
4458	Returns a map of column names to columns.
4459	Returns the column with the given name.
4460	Returns the list of columns in this table.
4461	Returns the column at the given ordinal position.
4462	Returns the set of imported tables.
4463	Returns the set of exported tables.
4464	Adds a segment to the end of the segment list.
4465	Writes a character to the log.
4466	Writes a string to the log.
4467	Adds the values to the given ContentValues.
4468	Moves the camera to the last location in the map.
4469	Animate the camera to include the given position.
4470	Animates a circle to a rectangular view.
4471	Creates a circle animation which animates to a specific view.
4472	Inflates the arc motion transition.
4473	Returns a bold style span with the specified index.
4474	Scales a view in the enter screen animation.
4475	Scales the view to 0. 0f to the screen.
4476	Scales the view to show the next animation.
4477	Get the count of the items in the given Uri.
4478	Concatenates the address lines into a single string.
4479	Connect to Google API.
4480	Creates a transaction to perform a specific transition.
4481	Returns the foreground color.
4482	Sets the listener on all views.
4483	Returns the name of the given log level.
4484	Creates an animation that scales the view up to the specified height.
4485	Show the given View as a soft input.
4486	Hide the soft input from the given view.
4487	Checks if the cursor has the given position.
4488	Count the number of rows in the cursor.
4489	Returns the first int in the cursor or Integer. MIN_VALUE if the cursor is exhausted
4490	Returns the first long in the cursor or Long. MIN_VALUE if the cursor is not
4491	Returns the first string in the cursor or null if no string is available.
4492	Read all ints from a cursor.
4493	Read all the long values from a cursor.
4494	Returns all the strings in the cursor.
4495	Load image from a placeholder.
4496	Get the orientation of the given RecyclerView.
4497	Returns the number of spans in the given RecyclerView.
4498	Add a rule to the view.
4499	Returns true if the current position was read.
4500	Get the main thread or the main thread if it is not already running.
4501	Returns a list of all values in the given sparse array.
4502	Returns a list containing all the values of the given long - sparse array.
4503	Checks if the adapter is the same as the one currently set.
4504	Check the Drawable and update the matrix if necessary.
4505	Updates the matrix of the view to match the specified position and offset.
4506	Updates or deletes the records in the table.
4507	Returns the SQL for the given query.
4508	Returns the number of bytes in the image.
4509	Returns a mutable bitmap.
4510	Checks if the given intent is an activity in the current context.
4511	Send a message to a list of emails.
4512	Set the default content view.
4513	Finds a fragment by its pane.
4514	Creates a Bundle with two ints.
4515	Create an intent with the given action and data and content values.
4516	Creates an intent to update an existing object.
4517	Creates an intent to delete an existing resource.
4518	Create an intent to delete an object.
4519	Returns the size of the action bar.
4520	Obtains the background drawable of the action bar.
4521	Checks if the current context is connected to the network.
4522	This method is used to cleanup the difference.
4523	Creates a list of patches for the given text.
4524	Apply a ThrowableFunction1 to the Option
4525	Converts a SOAP message to a string.
4526	Gets or creates the tracee profile properties file.
4527	Checks if the given element is a method.
4528	Checks if the given method is a getter method.
4529	Get the value of the specified property.
4530	Checks if the given class has noargs constructor.
4531	Gets annotation from type.
4532	Checks if a method has a non - void return type.
4533	Apply the given output element to the given StringBuilder.
4534	Returns all wrapper classes.
4535	Gets all implicit context data providers.
4536	Gets the available wrapper types.
4537	Initialize the connector configurations.
4538	Send error report to all connectors.
4539	Returns a set of connector configuration names.
4540	Gets the properties for a connector configuration name.
4541	Create a connector instance.
4542	Checks if a connector is configured.
4543	Checks if the given method has a getter prefix in it.
4544	Returns true if the given method is public non - static.
4545	Checks if the given method has a return type compatible with the given type.
4546	Returns the corresponding field for the given method.
4547	Checks if the given method name is a getter method.
4548	Capitalizes the first character of a string.
4549	Decapitalize first character of string.
4550	Removes the getter prefix from the input string.
4551	Send error report to connectors
4552	Given an instance of the context logger configuration create a wrapper instance.
4553	Creates an instance of the given class.
4554	Get current profile.
4555	Opens a properties file.
4556	Fill the manual context override map with the given boolean value.
4557	Creates a TraceeContextStringRepresentationBuilderImpl for the context string representation log.
4558	Checks if the given proceeding join point has a thrown exception.
4559	Checks if a class is defined in the given exception.
4560	Gets the defined throws from method signature.
4561	Checks if watchdog aspect processing is activated by annotation.
4562	Asserts that the group has the given number of elements.
4563	Asserts that the actual object does not contain duplicate values.
4564	Get the view to be used for the drop down.
4565	Reserves a term name for use in a query.
4566	Registers a term.
4567	Initializes the vocabulary.
4568	Returns a data set containing the individual references.
4569	Resolve a relative URI to a relative URI.
4570	Merges the given path with the given path.
4571	Removes all dot segments from the given path.
4572	Returns a new name with the given name and names.
4573	Returns a name for the given class.
4574	Creates a wildcard media type.
4575	Creates a new media type with a wildcard suffix.
4576	Creates a new media type with the given type and subtype.
4577	Converts a media type to a header string.
4578	Runs the resolution process.
4579	Compares two terms.
4580	Returns a list of names that have been pending for an attachment.
4581	Adds a new attachment name to the name source.
4582	Returns the next name for an attachment.
4583	Creates a new name provider for the given owner name.
4584	Parse the suffix of a media type.
4585	Checks that the given string is a valid quoted - string.
4586	Returns the next code point in the CharSequence.
4587	Update the resource.
4588	Returns the URI representation of this URI.
4589	Closes the input stream.
4590	Checks if a character is a name start character.
4591	Checks if a character is a name character.
4592	Validates the given token.
4593	Creates a new data transformer that transforms the data to the given media type.
4594	Registers an adapter class.
4595	Creates a new type adapter for the given source type and target type.
4596	Adapt an object to a new instance of the given result class.
4597	Returns a new namespace map with the given prefix and namespace URI.
4598	Returns a new namespace with the given prefixes removed.
4599	Escape a CharSequence to be used in an XML document.
4600	Returns a DataSet for the given resource query.
4601	Add a name provider to the container.
4602	Returns the name provider for the given container name.
4603	Unwrap this instance of the given class.
4604	Returns true if the path is out of scope.
4605	Creates a new path with the specified directory.
4606	Creates a new path with the specified file.
4607	Assembles relative path segments.
4608	Returns the type parameter of the given class.
4609	Creates a primitive object factory.
4610	Creates a list of variants for the given media types.
4611	Resolves this individual from the given data set.
4612	Matches a ViewGroup s children count as equal to the given value.
4613	Matches a ViewGroup that has a child with a higher priority than the given value.
4614	Matches a ViewGroup that has more children than or equal to the given value.
4615	Matches a ViewGroup that has a minimum child of its children.
4616	Matches a ViewGroup that has a less than or equal to the given value.
4617	Retrieves all measurements for a given year and state.
4618	Retrieves the specified measure.
4619	Gets the rating for a candidate.
4620	Retrieves the specified rating.
4621	Get all elections in a given year.
4622	Get election by zip.
4623	Retrieves candidate votes for a specific stage.
4624	Get an address by its office id.
4625	Get all offices by its type.
4626	Retrieves all offices in a level.
4627	Retrieves all offices for a given office type and office level.
4628	Retrieves all offices for a branch and level.
4629	Retrieves the counties for the given state.
4630	Retrieves the cities for the given state.
4631	Retrieves all of the officials for the given local.
4632	Query the Vote Smart API.
4633	Returns a list of all the candidate states in the specified state.
4634	Get a list of candidate items for a given office type state.
4635	Get all candidate list for a given zip.
4636	Gets the addl bio for a candidate.
4637	Returns the detailed Bio for a candidate.
4638	Get a list of candidates for a given last name and election year.
4639	Returns a list of candidates for an election.
4640	Retrieves a list of candidates for a given election year.
4641	Get the committees for a specific type.
4642	Retrieves the committee with the given id.
4643	Retrieves the members of the committee.
4644	Returns the positions of the current state.
4645	Retrieves all of the officials of the given leadership.
4646	Sleep for a given amount of milliseconds.
4647	Starts the timer.
4648	Waits for the task to finish.
4649	Close the connection.
4650	Merge the contents of a stream into a new map using the supplied map supplier.
4651	Splits a map into several maps.
4652	Collect a map to a list of maps.
4653	Sorts the given map by the given comparator.
4654	Returns the first value in the map.
4655	Checks that the given test object is null.
4656	Checks that the given test object is not null.
4657	Checks that the given String is not null and is not empty trimmed.
4658	Checks that the set is not null and that it has at least one element.
4659	Checks that the given array is not null and has no elements.
4660	Get the contents of a resource file as a string.
4661	Get a set of words from a resource file.
4662	Get last modified time of resource file
4663	Read the contents of an input stream into a String.
4664	Read the contents of an input stream into a byte array.
4665	Read a file and return it as a String.
4666	Gets the absolute path of a resource.
4667	Generates a random string of the specified length.
4668	Generates a long with the specified length.
4669	Joins two arrays.
4670	Splits the given set into smaller sets.
4671	Returns the start of the month.
4672	Returns the month end of the given date time.
4673	Trims the given string and returns the result as a String. If the given string is
4674	Capitalizes a string.
4675	Joins the given arguments using the given separator.
4676	Joins a set of objects using the given separator.
4677	Returns a list of words from the given text.
4678	Trims text down to the specified size.
4679	Trims text down to the specified size.
4680	Returns a list of all characters in the given string.
4681	Returns the relevance of the first occurrence of the search string in the given value.
4682	Unquotes the given text.
4683	Get the time in the given timezone.
4684	Returns the state of the tags with the specified ID.
4685	Checks if the given severity is a violation.
4686	Shows the severity icon for the specified level.
4687	Writes an icon for the given severity level.
4688	Returns a list of tags sorted by category.
4689	Set the next node and clean it up.
4690	Sets the previous node and sets the next node to this node.
4691	Find a node by host and port.
4692	Finds all nodes that have the given host.
4693	Returns all nodes that are not dead.
4694	Adds a node to the list of nodes.
4695	Removes a node from the cluster.
4696	Marks the given node as alive.
4697	Marks a node as dead.
4698	Send node event to all registered handlers.
4699	Gets the checkstyle version.
4700	Configures the resource locator.
4701	Builds a new instance of the factory.
4702	Creates a map of property values for the given attributes.
4703	Returns the current sequence for the given name.
4704	Compares two nodes.
4705	Returns the events list.
4706	Find all packages in the JavaDoc run.
4707	Sets the value of a property on the target object.
4708	Sets the value of a field on the target object.
4709	Gets all methods annotated with the given annotation.
4710	Invokes a method on the target object.
4711	Main method to start the cache server.
4712	Get the value of the given attribute from the given configuration.
4713	Writes the summary of the rules.
4714	Checks if the given audit event matches the given rule.
4715	Creates a key to be used for the received at event.
4716	Initializes the cache.
4717	Waits for other clusters to start.
4718	Waits for other clusters to be sent.
4719	Waits for all the clusters to connect.
4720	Waits for the task to finish and returns true if it is connected.
4721	Closes the cache.
4722	Prints the state of the cluster.
4723	Main method to run the GuestNode.
4724	Returns a list of all properties in the class sorted by natural natural order.
4725	Returns the hash code of the class fields in the order of the property version.
4726	Get the total number of pages.
4727	Get values from the query region.
4728	Prepares the result data.
4729	Stores the results in the page.
4730	Creates a new instance of this factory.
4731	Compares two categories.
4732	Migrate broken locales.
4733	Recalculate min hash for a topic.
4734	Get the min hashes from the given XML.
4735	Clean the given XML for the minimum hash.
4736	Validate and fix relationships to a topic.
4737	Updates the content hash of a topic.
4738	Validate the tags that are applied to a topic and fix the tags.
4739	Sorts the given ClassDocs in the order of the package name.
4740	Execute the EnforcerRule.
4741	Splice a comma separated list of strings into a list.
4742	Splice a string into a list of Patterns.
4743	Checks if the provided string is contained within the source list.
4744	Returns the factory class for the given class.
4745	Sends a message to the configured mail.
4746	Sends a message to a recipient.
4747	Executes the zero function.
4748	Executes the function.
4749	Handles the exception.
4750	Formats the results.
4751	Adds a message to the error list.
4752	Returns the message.
4753	Checks if a socket is alive.
4754	Executes the given thread and waits for the given timeout.
4755	Checks if the given list of resources exists.
4756	Merge deprecated information.
4757	Add LIMIT to query string.
4758	Get the first locator from the locators string.
4759	Returns the size of the region.
4760	Returns true if the cache is a GemFire client.
4761	Removes all the keys from the given region.
4762	Retry the given operation with exponential backoff.
4763	Generates a buffered image.
4764	Paints the icon.
4765	Get the reader.
4766	Waits for enter.
4767	Executes the check replication tool.
4768	Parse the command - line arguments.
4769	Prints the help for the check - replication command.
4770	Construct the Gnu options.
4771	Aggregate single cluster member data.
4772	Checks that the given property is not null.
4773	Parses the command line arguments.
4774	Prints the help for the command.
4775	Construct the Gnu options.
4776	Finds the index of the command in the command line.
4777	Extract launcher arguments from the given arguments.
4778	Extracts the command arguments from the given arguments.
4779	Main method for the launcher.
4780	Debug method.
4781	Starts the timer.
4782	Creates a set of regions from the given region names.
4783	Process the given region and policy.
4784	Sets the indentation token.
4785	Returns the package statement for the given source file.
4786	Emit the start event.
4787	Extract the set of ports from the system member.
4788	Find or create a pool.
4789	Gets the name of the event source.
4790	Returns the category of the given event source name.
4791	Enter a class name in the current stack.
4792	Exit the current frame of the method.
4793	Returns a string containing the names of the classes that should be used to generate the method frame
4794	Sets the package extractors.
4795	Recursively add all the packages to the map.
4796	Updates the image data.
4797	Sets the ui original file name.
4798	Extract the limit from the query string.
4799	Format the list of query results into a SelectResults object.
4800	Checks that the given object is allowed in the real time.
4801	Runs a process with the given arguments and waits for the process to finish.
4802	Runs the given class with the given arguments and waits for the process to start up.
4803	Runs the given class with the given arguments and waits for the process to start.
4804	Stops the process by sending a new line to the output stream.
4805	Starts a process.
4806	Redirect process streams to parent process.
4807	Waits for a process to finish before returning.
4808	Generates a file from a template.
4809	Starts the replication process.
4810	Checks if the given parameter type is a class.
4811	Checks if the given method is compatible with the given interface method.
4812	Returns the method that implements the given interface.
4813	Gets the type argument.
4814	Resolves a type variable.
4815	Returns the actual type arguments of an interface.
4816	Populate the pool with the initial state.
4817	Adds the return annotation description to the return builder.
4818	Return the given object to the pool.
4819	Gets the destination.
4820	Gets the message consumer for the given destination.
4821	Gets the message producer for the given destination.
4822	Gets the session.
4823	Get the connection.
4824	Sends a text message to a destination.
4825	Register a listener for text messages on a destination.
4826	Receive text message from destination with timeout.
4827	Stops the consumer.
4828	Handles the load from user data service.
4829	Returns the configuration of the object pool.
4830	Sets the id of the model.
4831	Sets the model file.
4832	Adds or updates the given WekaModelConfig to the pool.
4833	Remove a model from the cache.
4834	Clustered event manager service queue.
4835	Clustered event manager.
4836	Encodes the given string to a string suitable for use in a URL.
4837	Decode the given multivalued map.
4838	Create a ServiceGroup for the given resource classes.
4839	Closes the server.
4840	Forward an event to the event connector.
4841	Returns all annotations on the given method.
4842	Finds an annotation from an array of annotations.
4843	Creates a resource constructor for the given class.
4844	Creates a resource class from the annotations of the given class.
4845	Sets up the bagging classifiers.
4846	Get the object from the serialized object.
4847	Returns the serialized representation of this object.
4848	Writes the serialized object to the given file.
4849	Returns the leaf score of the class distribution.
4850	Returns the provider URL.
4851	Returns the context.
4852	Gets the connection supplier.
4853	Builds the JMS service.
4854	Gets the type for the given type.
4855	Get the type for the given JavaType.
4856	Introspects the given serializer.
4857	Introspects the serializer and adds all the properties to the custom type
4858	Introspects the given serializer and adds the values to the given custom type.
4859	Introspects the serializer and sets the type.
4860	frame1.
4861	Frame 3.
4862	Frame 4.
4863	Randomly selects a random element in the array.
4864	Returns the next number in the array.
4865	Main method to run the benchmark.
4866	Make a last name from a number of distinct last values.
4867	Choose a random number from the distribution.
4868	Gets the relative path of the given file to the given repository.
4869	Add the file to the working tree.
4870	Commits the file to the working tree.
4871	Copies the file to the destination.
4872	Executes git rm command.
4873	Checks if the given file exists.
4874	Checks if two lists are equal.
4875	Checks that an integer is in the range of the specified range.
4876	Get the client instance for the given client type.
4877	Sets the preferred client type.
4878	Add a list of files to a repository.
4879	Adds a list of files to the repository.
4880	Adds a file to the repository.
4881	Adds a file to the repository.
4882	Adds a list of files to the repository.
4883	Adds a list of files to the repository in verbose mode.
4884	Adds a list of files to the repository with the force flag set to true.
4885	Adds a dry run if it is set.
4886	Compare the release minor number of the two versions.
4887	Add a list of files to a repository.
4888	Add a list of files to a repository in verbose mode.
4889	Processes a git commit.
4890	Sets the path to the git repository.
4891	Creates a list of parameters from a method.
4892	Returns an array of the function definition values for the given function offset.
4893	Get the value array for the parameters.
4894	Checks if the given file exists in the registry.
4895	Creates a new branch in the repository.
4896	Deletes the specified branch.
4897	Rename a branch.
4898	Returns an iterator over all branches in the repository.
4899	Commits all changes to a repository.
4900	Convert the given object to the given type.
4901	Converts an integer to a Boolean.
4902	Converts a Boolean to an Integer.
4903	Converts a long date to a string.
4904	Returns the message for the given error code.
4905	Get the file that needs to be updated.
4906	Adds a file to be deleted to commit.
4907	Adds a file to the list of deleted files not updated.
4908	Adds a file to be committed.
4909	Adds a file to the list of modified files not updated.
4910	Adds a file to the list of new files to commit.
4911	Adds a file to be renamed to commit.
4912	Adds a file to the list of untracked files.
4913	Creates a parameter with the given name and type.
4914	Get the value of the parameter from the data binder.
4915	Sets whether or not the command line option is verbose.
4916	Sets whether or not the delete option is to be used.
4917	Sets whether or not the delete option is to be used.
4918	Sets whether or not the renaming option is to be performed.
4919	Sets whether or not the M - Upper option is used.
4920	Returns the return type of the given function.
4921	Evaluate a function.
4922	Gets the injected values for the given method.
4923	Runs a function method.
4924	Converts the return value of a function to a Java type.
4925	Evaluate a single variable.
4926	Get a branch of a repository.
4927	Delete a branch from a repository.
4928	Delete a list of branches from a repository.
4929	Rename a branch.
4930	Commits the current commit to the remote.
4931	Gets the current branch of the current file.
4932	Checkout the working tree.
4933	Get status information for the git repository.
4934	Deletes a file from a repository.
4935	Get the file from the newFilesToCommit list.
4936	Get the file from deletedFilesToCommit.
4937	Get the file from the modifiedFilesToCommit list.
4938	Get the file from deletedFilesNotUpdated.
4939	Get the file from the modifiedFilesNotUpdated list.
4940	Get the file at the specified index from the list of untracked files.
4941	Get the file from the renamedFilesToCommit.
4942	Returns the error at the given index.
4943	Returns a string representation of the errors.
4944	Reset the git repository.
4945	Adds a file to the list of added files.
4946	Adds a copied file to the list of copied files.
4947	Adds a deleted file to the list of deleted files.
4948	Sets the number of files changed.
4949	Sets the number of lines deleted.
4950	Sets the number of lines inserted.
4951	Executes a git mv command.
4952	Returns the index of the first occurrence of the specified character in the specified string starting from the
4953	Get the result set.
4954	Get the commit log from a repository.
4955	Adds a commit to the list of commits.
4956	Adds a file to the commit.
4957	Checkout a remote file.
4958	Checkout a repository.
4959	Checkout a repository to a specific branch.
4960	Checkout a list of files in a repository.
4961	Checkout a list of files in a repository.
4962	Checkout a file.
4963	Checks if a ref is of the given type.
4964	Returns all the children of this directory.
4965	Get the file that was removed from the file list.
4966	Checkout a list of paths in a repository.
4967	Checkout a list of files in a repository.
4968	Sets the comment for the given line number.
4969	Sets the delete options.
4970	Injects service methods from the given class.
4971	Inject a service method into the service data.
4972	Set the branch name of the option.
4973	Executes a git clone.
4974	This method is called to perform the filter.
4975	Get all the properties of a given config file in the given class loader.
4976	Sets up the reset.
4977	Adds a method to the list of methods.
4978	This method is used to filter the data.
4979	Decrements the number of open connections by one.
4980	Consume database.
4981	Query for rows in a table.
4982	Executes a raw query.
4983	Builds the command line for the git rm.
4984	Get the file that was added at the given index.
4985	Get the deleted file at the given index.
4986	Get the modified file at the given index.
4987	Get the status of the file.
4988	Get the head element.
4989	Get the files in the element.
4990	Returns the number of files in the element.
4991	Returns true if the given string matches this glob pattern.
4992	Updates the list after a hit.
4993	Removes the last entry from the cache.
4994	Removes expired entries from the cache.
4995	Updates the list after a hit.
4996	Checks if the source string starts with the given string.
4997	Get an access token from the proxy.
4998	Signs the request with the given access token.
4999	Returns the authorization URL.
5000	Finishes the container.
5001	Finishes the project creation.
5002	Creates the control for this artifact.
5003	Returns the default Java package for the current project.
5004	Set the visibility of the JGroupsGroup.
5005	Creates a debug string for the query.
5006	Returns all parameters of the query.
5007	Creates the control for the part.
5008	Adds a palette item to the palette.
5009	Get the palette items for a given category.
5010	Configures the table to resizes the columns.
5011	Returns the currently selected template.
5012	Returns the template string for the currently selected template.
5013	Loads the last saved template name and id from the preferences.
5014	Saves the last saved preferences.
5015	Selects the template in the table viewer.
5016	Updates the input of the viewer.
5017	Creates a Criterion that matches the given values.
5018	Creates a member of the given object.
5019	Creates a Criterion that requires a value to be not a member of the given object.
5020	Create the field editors.
5021	Returns the last path component in the path.
5022	Populate the container name field.
5023	Validates the page.
5024	Checks if the given file has an extension that is associated with the current content type.
5025	Returns the default file extension for the given file.
5026	Get the project from the given path.
5027	Gets the userId from the session.
5028	Create a new page with the source part.
5029	Saves the current editor to the file.
5030	Called when a resource changes.
5031	Show the page.
5032	Creates a log message for a JPQL query.
5033	Converts an object to a string.
5034	Insert a new timeline item.
5035	Insert a new timeline item.
5036	Insert a timeline item with an attachment.
5037	Validates the response message against the given keyword.
5038	Returns the absolute path of the file to be used in the query.
5039	Returns the template store.
5040	Returns the context registry.
5041	Returns the action with the given ID.
5042	Creates a new DBI instance.
5043	Append limit and offset set.
5044	Creates a new named property.
5045	Creates a named property.
5046	Creates a named property.
5047	Creates a literal from a string.
5048	Create a new URI literal.
5049	Create a typed literal.
5050	Create a new QName object.
5051	Initializes the CORS filter.
5052	Sets the entity id.
5053	Initialize the parser.
5054	Updates the entity with the given UUID.
5055	Closes all sockets listening to the given port.
5056	Starts the server.
5057	Validates the options.
5058	Validates the arguments.
5059	Subscribes to a named destination.
5060	Unsubscribe a listener from a named channel.
5061	Unsubscribe a listener.
5062	Unsubscribe a channel.
5063	Send message to a destination
5064	Returns the next message in the queue.
5065	Returns true if the receipt with the given id exists in the list of receipts.
5066	Removes a receipt from the list of receipts.
5067	Logs a dead event.
5068	Converts the given source value to the given target class.
5069	Returns the priority of the given line number.
5070	Executes the command.
5071	Inject options from the parser.
5072	Adjusts the arguments for a method.
5073	Migrates the given personality to the given target version.
5074	Tag the request with CORS information.
5075	Handle an actual CORS request.
5076	Handle a preflight CORS request.
5077	Sets the options.
5078	Checks the input.
5079	Filters the given lines by the given regular expression.
5080	Returns a regular expression that matches all packages in the current directory.
5081	Output the dependencies to a file.
5082	Compares this instance provider with the given instance provider.
5083	Get the IOUtils instance.
5084	Get the ImageUtils instance.
5085	Get the price util.
5086	Get the resource utils.
5087	Get the ZipUtils instance.
5088	Returns the DigestUtils instance.
5089	Gets the StringUtils instance.
5090	Get the resource service.
5091	Get the pricing service.
5092	Get the instance service.
5093	Returns the object id of the uploaded file.
5094	Creates a digital object from a file.
5095	Stores list of values in properties.
5096	Ensure the metadata table exists.
5097	Creates a source detail object for a dry run.
5098	Validates the threshold values.
5099	Validate arguments.
5100	Validate the options on the given instance.
5101	Checks if the class is on the classpath.
5102	Checks if the given URI is accepted by this migration loader.
5103	Loads the file from the given URI.
5104	Runs the command.
5105	Reads all commands from the classpath.
5106	Post process the request.
5107	Pre - processes the request.
5108	Execute a migration on the database.
5109	Validate the database.
5110	Get the database history for the given personalities.
5111	Initializes the database.
5112	Converts a list of lines of SQL statements to a list of SqlStatements.
5113	region > findByNotableAndCalendarName
5114	region > updateLink
5115	Parse the command line options.
5116	Transmits a message to the server.
5117	Converts the source code to HTML.
5118	Returns the link with the given hash code.
5119	Transmits a message to the client.
5120	Get a JAXBContext for the given context path.
5121	Creates a list of BoxNodes for the given root box.
5122	Creates a tree of the box nodes.
5123	Recursively compute the backgrounds of the root node.
5124	Set the file to be used for mapping.
5125	Get the mapping file for the given url.
5126	Parse a version specification and return a VersionRange object.
5127	Concatenates two transforms.
5128	Transforms a rectangle.
5129	Returns the minimal bounds of the box.
5130	Recompute the visual bounds of this node.
5131	Recompute the bounds of all children.
5132	Computes the bounds of the content box.
5133	Returns the top border of the box.
5134	Returns the bottom border of the box.
5135	Returns the left border of the box.
5136	Returns the right border of the box.
5137	Returns the color of the box.
5138	Checks if the given child node is inside the parent.
5139	Takes a list of children and adds them to this node.
5140	Process the given command.
5141	The HSQL datasource.
5142	The data source for plain database.
5143	Sets up the platform.
5144	Query OpenStates API.
5145	Registers a command with the registry.
5146	Registers a command with the given name.
5147	Unregister a command.
5148	Execute a command.
5149	Starts the process.
5150	Search by state and chamber
5151	Get the details of a committee
5152	Connect to the JMX server.
5153	Returns the value of the property with the given key.
5154	Invoke the method on the JMX MBean.
5155	Search districts by state
5156	Search districts for a chamber
5157	Lookup a boundary
5158	Get the metadata for a specific state.
5159	Create an object from the given class.
5160	Registers an interface with the platform MBean server.
5161	Unregisters the MBean with the platform MBean server.
5162	Validate the MBean.
5163	Gets a random string.
5164	Adds a value to the parameter.
5165	Search for legislators in a state.
5166	Search for legislators in a state.
5167	Search for legislators in a state.
5168	Search for a specific legislators.
5169	Returns the detail of a legislator.
5170	Compares this enum to the specified enum.
5171	Sets the mapped class.
5172	Invokes the method with the given arguments.
5173	Returns the total time spent in the current time.
5174	Builds the client.
5175	Creates a request to the URL.
5176	Converts the response text to a pid.
5177	Evaluate XPath expression on XML.
5178	Gets the pid from the minter.
5179	Creates a new ConfigurationBinder for the given class.
5180	Bind configuration instance.
5181	Creates a new instance of the filter pattern.
5182	Proceeds the constructor with the given arguments.
