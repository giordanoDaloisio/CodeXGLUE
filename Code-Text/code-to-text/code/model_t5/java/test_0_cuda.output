0	Copies the contents of this stream to the given sink.
1	Reads the contents of the file into a String.
2	Reads the contents of the file into a list of lines.
3	Reads bytes from the input stream.
4	Grows the buffer to a smaller size.
5	Reads more characters from the input stream.
6	Start draining.
7	Returns an array of the given type.
8	Returns true if the given iterable is empty.
9	Converts an iterable to an iterator.
10	Returns an iterator that consumes the elements of an array.
11	Concatenates the given iterators into a single iterator.
12	Removes all elements from the iterator.
13	Writes the given bytes to the stream.
14	Parses the given cache builder specification.
15	Creates a new CacheBuilder instance.
16	Skips null values from the given parts.
17	Creates an immutable array containing the elements of the given array.
18	Returns a new immutable array containing the elements from this array starting from the specified index and ending
19	Reads a byte from the input stream.
20	Reads bytes from the input stream.
21	Write a map to a stream.
22	Writes a Multiset to a stream.
23	Gets a FieldSetter for the given field name.
24	Starts the stopwatch.
25	Adds the specified number of occurrences to the specified element.
26	Resizes the array if the size is bigger than the given size.
27	Converts a byte array to an InetAddress.
28	Compress the hextets to the longest run of zeroes.
29	Convert an array of hextets to an IPv6 address string.
30	Returns an InetAddress for the given host address.
31	Checks if the given Inet6Address is compatible with IPv4.
32	Returns the compat IPv4 address of the given IPv6 address.
33	Returns true if the given Inet6Address is a Teredo address.
34	Returns true if the given address is a ISATAP address.
35	Returns an IPv4 address for the given ISATAP address.
36	Returns the embedded IPv4 client address.
37	Checks if the given string is a mapped IPv4 address.
38	Decrements the address by one.
39	Creates a new BufferedReader for reading the contents of the given file using the specified charset.
40	Writes the given byte array to the given file.
41	Copies the contents of the given file to the given output stream.
42	Copies the contents of the source file to the destination file.
43	Creates a file and updates its modification time.
44	Reads the first line of the file.
45	Creates a builder with the given expected size.
46	Force a put operation.
47	Creates a new MinMaxPriorityQueue with the given initial contents.
48	Calculates the new capacity for the queue.
49	Fmix a hash code.
50	Returns an element order that is natural.
51	Enter the lock.
52	Enter the lock in interruptibly.
53	Enter the guard.
54	Enter a guard when the given guard is satisfied.
55	Enter a guard when it is satisfied.
56	Enter a guard.
57	Enter a guard if it is satisfied.
58	Enter a guard if it is satisfied.
59	Try to enter the monitor if the guard is satisfied.
60	Waits for the given guard to be satisfied.
61	Waits for the given guard to be satisfied and then blocks until it is satisfied.
62	Waits for guard to be satisfied or interrupted.
63	Returns the number of wait queues in the guard.
64	Signal the next waiter.
65	Signal all waiters.
66	Adds a guard to the list of active guards.
67	End waiting for a guard.
68	Waits for the guard to be satisfied.
69	Shuts down the given ExecutorService and waits for all tasks to terminate.
70	Writes the given character sequence to the stream.
71	Executes the queue.
72	Load 64 bit values from the byte array.
73	Stores a 64 - bit long value into the given byte array at the given offset.
74	Loads a 32 - bit integer from the given byte array at the given offset.
75	Creates a new media type with the given type and subtype.
76	Parses a media type from a string.
77	Capture the type of the superclass.
78	Removes all elements from the set.
79	Escapes the given string.
80	Grows the char array to the specified size.
81	Sets the concurrency level.
82	Build a cache with the given weight and weight.
83	Allocates the array of objects.
84	Adds the given value to the mean.
85	Calculates the new mean of the given value.
86	Rebuilds the hash table.
87	Returns the table size that can be used to store the data.
88	Creates an immutable table with an empty table.
89	Creates an immutable table with the specified values.
90	Creates a new table with the same cell set as the given table.
91	Returns a converter that converts identity values to their corresponding values.
92	Creates an immutable table for the given cell list.
93	Creates an immutable sorted multiset from the specified element.
94	Returns a builder that sorts the elements in reverse order.
95	Retains occurrences from the given multiset.
96	Returns a FluentIterable that traverses the tree in pre - order.
97	Creates a new StringBuilder for a collection of bytes.
98	Returns a TypeResolver that resolves the given type to the invariant of the given context type.
99	Sets the map of values.
100	Removes all values for the given key from the map.
101	Creates a FluentIterable that will return the input iterators.
102	Creates a FluentIterable from an empty list.
103	Returns an array of the elements of this sequence as an array of the specified type.
104	Creates an immutable multimap with the given keys and values.
105	Returns an immutable collection of all entries in this map.
106	Count the number of bytes skipped by the skipping.
107	Reads the contents of the file into a byte array.
108	Hashes the contents of this file using the given hash function.
109	Returns true if this byte source content equals the given source.
110	Returns an immutable immutable range map.
111	Creates an immutable range map with the specified range and value.
112	Concatenates two HashFunctions together.
113	Creates an immutable sorted set with the specified element.
114	Sets the expected number of nodes to be added to the graph.
115	Returns a lexicographical ordering.
116	Starts the finalizer.
117	Returns an immutable immutable map with the specified comparator.
118	Creates an immutable sorted map with the specified keys and values.
119	Returns an immutable sorted map with the specified keys and values.
120	Returns a new immutable sorted map with the same keys as the given map.
121	Weak hash length 32 with seeds.
122	Checks the current state of the service.
123	Returns a list of all files in the given directory.
124	Checks if the given directory is a directory.
125	Returns true if the two paths are equal.
126	Creates a file in the given path and sets its last modified time to the current time.
127	Returns the parent path of the given path.
128	Checks if the given options allow insecure deletion.
129	Throw a FileSystemException that indicates that a file was deleted.
130	Rehashes a hash value.
131	Returns the segment for the given hash.
132	Returns a new immutable list that delegates to the given list.
133	Coalesced range.
134	Unregister a listener.
135	Returns the subscribers for the given event.
136	Find all subscribers of the given listener.
137	Returns an immutable copy of the given elements sorted by their natural order.
138	Returns an immutable list containing the specified elements.
139	Returns an immutable list containing the specified elements.
140	Creates a builder with the specified expected size.
141	Concatenates two arrays of the given type.
142	Returns an array of the elements of the given collection.
143	Checks that the element is not null.
144	Returns the JavaLangAccess object for the AppEngine.
145	Canonicalizes a wildcard type.
146	Returns an immutable list of the specified length.
147	Returns an immutable sorted map builder with the specified expected size.
148	Returns the set of entries in this map.
149	Finishes the current line.
150	Creates a transformer that transforms a value to a value.
151	Transforms an entry into a map entry.
152	Returns a function that transforms an entry to a new entry.
153	Returns a map of elements to their index.
154	Returns the string representation of the pending value.
155	Updates the contents of the given ByteBuffer.
156	Returns an immutable copy of the given delegate sorted set.
157	Obtains an instance of the ImmutableSetMultimap.
158	Returns the sum of all the values in this map.
159	Loads the finalizer class from the given loaders.
160	Dispatches all listeners.
161	Copies the contents of the given URL to the given output stream.
162	Post an event to all registered subscribers.
163	Sets the concurrency level.
164	Sets the delegate and inverse map.
165	Returns an array of values of this row.
166	Executes the given Runnable on the worker.
167	Transforms a table of values.
168	Creates a new TreeMultiset from the given elements.
169	Add all causes to the set.
170	Expire the cache after a given duration.
171	Sets the priority of the thread.
172	Creates a new HostAndPort from the given host and port.
173	Parses a host string into a HostAndPort object.
174	Parses a host and port string into a HostAndPort object.
175	Returns the host and port from a bracketed host - port string.
176	Returns a range of all elements in the range.
177	Returns a new range that is reversed.
178	Returns an immutable set that is unsafe to use.
179	Creates an immutable type to instance map.
180	Check if the lock is about to be acquired by the current thread.
181	Returns a new range set that contains all elements in this set that intersect the given range.
182	Creates an immutable entry from the given entry.
183	Creates an immutable entry from the given entry.
184	Wrap the given CharEscaper in a new UnicodeEscaper.
185	Adds the given value to the vector.
186	Creates an immutable map with the given keys and values.
187	Creates a new immutable map from the given entries.
188	Returns a function that returns the identity of the object.
189	Creates a function that returns true if the given predicate evaluates to true.
190	Returns the UNSET value.
191	Returns true if the given entry is expired.
192	Returns the wait length of the given permits.
193	Returns the code point at the given index in the given sequence.
194	Ensure that the bucket has at least the given capacity.
195	Inserts the given entry into the hash table.
196	Inserts the given entry into the hash table.
197	Deletes the entry from the hash table.
198	Deletes the given entry from the hash table.
199	Removes the entry from the table.
200	Removes the entry with the given key hash known.
201	Removes the entry with the given value hash known.
202	Sets the expected number of nodes to be added to the network.
203	Sets the number of expected edges to be added to the network.
204	Returns the SQL statement with the values of the bind variables.
205	Sets a named parameter value.
206	Converts an object to a byte array.
207	Converts a blob to a specific type.
208	Lock the data line.
209	Save the undo log for a given unit.
210	The function domain redis template.
211	Returns the app map.
212	Locates a file on the classpath.
213	Creates a new ConnectionInformation object from the given connection.
214	Map a throwable to a message resource ID.
215	Checks for methods that are not visible in the package.
216	Returns the default EventBus instance.
217	Subscribe to a subscriber.
218	Unsubscribes a subscriber from the given event type.
219	Unregisters a subscriber.
220	Post an event to the event bus.
221	Returns the sticky event for the given event type.
222	Removes a sticky event from the event queue.
223	Removes a sticky event from the event queue.
224	Lookup all event types.
225	Adds all interfaces to the list of event types.
226	Adds a subscriber info index to the list of indexes.
227	Attaches the activity to the activity s execution scope.
228	Prepare the fragment to be displayed in the error dialog.
229	Returns the title for the given event.
230	Returns the message for the given ThrowableFailureEvent.
231	Post complete drain.
232	Returns the next value from the queue.
233	Returns the element at the given index or the default value if the element is not present.
234	Creates a Flux that emits the error from the source Publisher when the source Publisher completes.
235	Repeat the Flux by the specified number of times using the supplied predicate.
236	Converts a callable to a Mono.
237	Returns the value of the sequence and subtracts the given value.
238	Returns the given subscription as a QueueSubscription.
239	Error handler.
240	Returns the value of the given AtomicLongFieldUpdater that is produced by the given instance.
241	Creates a subscription that allows to subscribe to a single value.
242	Shifts the last Publisher to the new one.
243	Creates a strategy that will wait until the next phase of the wait is completed.
244	Returns a new Mono that is the same as this one but with the given Publisher.
245	Returns a Mono that is the default value if the value is null.
246	Returns the first Mono or the other Mono.
247	Creates a new Mono that will throw the exception when the operation fails.
248	Returns an unmodifiable map of the onEachOperatorHooks.
249	Creates a new MonoDelayUntil that will delay until the given trigger generator returns a new
250	Drain the queue.
251	Try to subscribe to a scalar value using a mapper.
252	Convert the input to a single value.
253	Collect the elements of this Flux using the supplied collection supplier and a consumer.
254	Concatenates the input values into a single value using the provided function.
255	Executes the given Runnable on the parallel task.
256	Executes the given Runnable on the current task.
257	Executes the given onError on each emitted value.
258	Executes the given onRequest callback on all the items in the parallel Flux.
259	Flat map the source Flux into a single value using the supplied function.
260	Returns a sequential merge of this Flux with the specified prefetch size.
261	Validates the number of subscribers.
262	Creates a new Flux that is a parallel stream that is a series of values that are
263	Creates a new Flux that accumulates the results of applying the given function to each item
264	Returns the current value of the given field.
265	Log a signal.
266	Starts the task.
267	Pause all running tasks.
268	Get the Sofar of the given download id.
269	Unbinds the service if it is idle.
270	Sets the maximum number of threads that can be used to download the file.
271	Pause all the tasks in the pool.
272	Start the download.
273	Diverts the list of running tasks into the destination list.
274	Add a task to the list.
275	Pause the queue.
276	Resumes the download queue.
277	Checks if the response code is a range response.
278	Find the instance length for trial.
279	Sets whether the animation should be animated.
280	Set the elevation of the shadow.
281	Sets the color of the label.
282	Add configuration properties.
283	Add a model class comment.
284	Add a comment to an enum node.
285	Add getter comment.
286	Add a comment to a general method.
287	Add a comment to an element.
288	Returns the fully qualified name of this type.
289	Get the select key element for the given introspected column and generated key.
290	Creates a new resource table for the given resource path.
291	Creates a new resource table for the given package and resource paths.
292	Add missing styleable attributes to the resource table.
293	Sets the WiFi on flag.
294	Add the smallest screen width to the qualifiers string.
295	Instrument a native method.
296	Rewrite the method body.
297	Checks if the given method is a boolean constructor.
298	Make the class public.
299	Make a method public.
300	Make a private method.
301	Sets the traversal after the given node.
302	Sets the accessibility information that is before the current traversal.
303	Adds a child node to this node.
304	Push a default return value to the stack.
305	Returns the file mode for the given path.
306	Setup the activity controller.
307	Change the configuration of the activity.
308	Recreates the activity.
309	Sets the call state.
310	Expects a log message.
311	Returns whether the intent is exported.
312	Get the shape end point for a segment type
313	Returns the point at the given length.
314	Creates a ResTable_config object from the given buffer.
315	Returns the difference between two ResTable_config objects.
316	Returns true if this instance is default.
317	Returns the application restrictions for the given package.
318	Adds a user profile to the user profiles map.
319	Adds a user to the user profile.
320	Connect to the socket.
321	Intercept a virtual method with a invoke dynamic instruction.
322	Adds mappings from the given dynamic reference table to this lookup table.
323	Adds a package to the lookup table.
324	Grant permissions to a user.
325	Deny the specified permissions.
326	Selects the available sdks.
327	Get the file from zip.
328	Get the next sent HTTP request.
329	Adds a new HTTP response rule to the FakeHttpLayer.
330	Adds a response rule to the FakeHttpLayer.
331	Stop the output stream associated with the native object.
332	Adds a response rule to the list of responses.
333	Add a new Bluetooth Audio Route to the device.
334	Sets the priority of a thread.
335	Returns the priority of the specified thread.
336	Returns the index of the bit n in the bitmap.
337	Set the mode of the specified operation.
338	Converts a color value to a color value.
339	Returns the color type of the given string.
340	Parse a float attribute.
341	Create an image decoder for the given asset.
342	Create an image decoder.
343	Clicks a menu item.
344	Call onActivityResult to call onActivityResult
345	Start the lock task.
346	Stops the lock task.
347	Post a runnable after a delay.
348	Post a runnable to the queue.
349	Removes the given runnable from the scheduled runnables.
350	Advance to the last posted runnable.
351	Advance the current time by the given amount.
352	Advance the current task to the given time.
353	Run one task.
354	Bind a service to a user.
355	Sets the current time in milliseconds.
356	Returns true if the queue is idle.
357	Reset the queue.
358	Build an activity controller.
359	Build an activity controller.
360	Setup an activity.
361	Build a new instance of the given fragment class.
362	Speak a text.
363	Returns the size of the default display.
364	Get the FileSystem for the given JAR file.
365	Returns the list of logs for a given tag.
366	Returns all the manifests that are currently loaded.
367	Returns the broadcast receiver with the given name.
368	Deletes a notification channel group.
369	Returns the Java version.
370	Transforms the current motion event with the given matrix.
371	Returns the value associated with the given key.
372	Load a resource bag value.
373	Post a runnable to the scheduler.
374	Post a runnable to the front of the queue.
375	Adds an activity to the list of activities.
376	Adds a service to the list of services.
377	Adds a receiver to the activity.
378	Adds a provider to the list of providers.
379	Adds or updates an activity to the list of activities.
380	Adds or updates a service to the list of services.
381	Adds or updates the receiver to the filter.
382	Adds or updates a provider to the list of providers.
383	Removes an activity from the activity list.
384	Removes a service from the registry.
385	Removes a provider from the registry.
386	Removes a receiver from the activity.
387	Set the list of resolve infos for an intent.
388	Add a resolve info for an intent.
389	Adds a package to the package list.
390	Adds an intent filter for an activity.
391	Adds an intent filter for a service.
392	Adds an intent filter to the receiver.
393	Adds an intent filter for a provider.
394	Find the parent of the script in the given packed_locale.
395	Find the ancestors of the given script.
396	Parse a package from the given apk file.
397	Returns an intent that can be used to launch an activity.
398	Verify that the given ResTable_type is valid.
399	Find all libraries in the given resource directory.
400	Returns the name of the organization.
401	Set the list of accessibility services that are permitted to access the device.
402	Set the list of input methods that are permitted to be called by the user.
403	Activate a reset token for the given admin.
404	Get the resource configurations.
405	Returns the resource locales.
406	Open an asset.
407	Adds a list of packages to the restore data.
408	Run the given runnable if the thread is paused.
409	Execute a control runnable on the main thread.
410	Read a Parcelable from the real object using the specified ClassLoader.
411	Writes a blob to the underlying byte array.
412	Write a blob.
413	Returns the data in the buffer as a byte array.
414	Sets the data position.
415	Check that the item is consistent with the data.
416	Peek the next element.
417	Reads the next item from the buffer.
418	Reads a value from the Parcel.
419	Read zeroes.
420	Reads a primitive value from the stream.
421	Writes an item to the buffer.
422	Reads a byte array from an input stream.
423	Returns the native object id for the given object.
424	Returns the native object with the given native id.
425	Call the attach method on the application.
426	Sets whether the default network is active.
427	Play a sound.
428	Loads a sound from the specified path.
429	Reconstructs the widget view as if the phone was rotated.
430	Creates widgets for the given app widget provider.
431	Invoke the seek complete listener.
432	Invoke the info listener.
433	Invoke the error listener.
434	Returns the default display.
435	Sets the density of the display.
436	Sets the XDPI of the display.
437	Sets the y - axis density of the display.
438	Sets the name of the display.
439	Sets the display flags.
440	Sets the width of the application.
441	Sets the height of the application.
442	Sets the width of the display.
443	Sets the height of the display.
444	Sets the rotation of the shadow.
445	Sets the state of the display.
446	Release the connection.
447	Establishes a route.
448	Returns the common super class of the two given types.
449	Qualifies a string value.
450	Navigate to the next node.
451	Checks if the given feature is supported by Android.
452	Add an asset to the asset store.
453	Returns the qualifier string for the given configuration.
454	Sets the qualifiers for the application.
455	Build a string from a char array.
456	Loads a service from the given class loader.
457	Loads a service from the system class loader.
458	Load a service from the system property.
459	Check if the given device has the given permission for the given package.
460	Revoke a permission to a USB device.
461	Adds a USB device to the list of USB devices.
462	Removes a USB device from the system.
463	Adds a port to the list of ports.
464	Opens a USB accessory.
465	Adds a data entry to the DropBoxManager.
466	Creates a new MediaItem.
467	Creates a deep proxy for the given class.
468	Gets the value of the field with the given name.
469	Calls an instance method on the given instance.
470	Calls a method on the given class with the given name and parameters.
471	Calls a static method on a class.
472	Calls a static method on the given class.
473	Creates a new instance of the given class.
474	Call a constructor on the given class with the given parameters.
475	Start the ranging.
476	Returns a sync font for the specified request.
477	Get the resource table for the compile time sdk.
478	Dumps the given view.
479	Gets the inner text of the given view.
480	Returns a list of all registered wrappers that match the given intent.
481	Post an intent to the broadcast receiver.
482	Convert RGB to HSV.
483	Begin a new section.
484	End the current trace section.
485	Returns a provider for the given key.
486	Creates a new file descriptor.
487	Run all tasks in the queue.
488	Run the next task in the queue.
489	Request audio focus.
490	Abandon an audio focus request.
491	Starts the native output.
492	Returns the buffer at the specified index.
493	Queue an input buffer.
494	Release the output buffer for the specified index.
495	Simulates a time change.
496	Converts a map of meta data to a Bundle.
497	Convert a SQL string with a localized unicode collator.
498	Creates a new PackageInfo object from the given PackageInfo.
499	Checks if the given package is granted for backwards compatibility.
500	Apply the given flags to the given component info.
501	Returns the index of the requested permission in the package.
502	Returns the badged icon for the user.
503	Checks if the current user has profile owner or device owner on the current user.
504	Extract a Unicode code point from a string.
505	Create a reflector for the given class and target object.
506	Get the status for the given account.
507	Returns the content observers that have been registered for the given URI.
508	Add a display to the shadow display manager.
509	Change display configuration.
510	Fixes the trace path.
511	Find the next set bit in the given bit set.
512	Resets the calendar to the default value.
513	Parses the given cron expression.
514	Returns the index of the argument.
515	Loads a variable from the given type.
516	Stores a variable in the current instruction.
517	Loads the given number of arguments into the instruction.
518	Load an array of arguments.
519	Loads a local variable.
520	Store a local variable.
521	Swap the elements of the stack.
522	Box a type.
523	Unbox a number type.
524	If a type is comparable to a given comparison mode.
525	Method to add a field instruction to the current method.
526	Gets a static field.
527	Put a static field on a class.
528	Gets a field from a class.
529	Puts a field on the given object.
530	Invoke an instruction on the stack.
531	Invoke a virtual method on a class.
532	Invokes a constructor on the current stack.
533	Invokes a static method on the given class.
534	Invoke an interface method on the given owner.
535	Throw an exception.
536	Checks if the given type is a cast to the given type.
537	Visit the first frame of the class.
538	Start a new frame.
539	Create a new method item.
540	Creates a new float item.
541	Creates a new string item.
542	Create a new name type item.
543	Returns the item with the given key.
544	Put a 12 - byte value into the pool.
545	Put a short into the pool.
546	Visit an enum.
547	Visit an annotation.
548	Returns the position of the twist in the given phase.
549	Create a jpeg image from a raster.
550	Visit a parameter.
551	Visit an annotation.
552	Visit a parameter annotation.
553	Visit a type instruction.
554	Visit a field instruction.
555	Method instruction.
556	Visit a table switch instruction.
557	Visit a lookup switch instruction.
558	Visit a multi - array instruction.
559	Visit a local variable annotation.
560	Visit a line number.
561	Reads the type of a frame.
562	Set the stack to the given values.
563	Returns the type of the given local.
564	Sets the local variable.
565	Push a type to the stack.
566	Returns the type of the given descriptor.
567	Pop the specified number of elements from the output stack.
568	Pop a type from the stack.
569	Initializes the variable type.
570	Initializes the given type.
571	Visit the given source.
572	Visit an outer class.
573	Visit an annotation.
574	Visit a type annotation.
575	Extract a bit value from a bit string.
576	Returns the type of the given object.
577	Returns the argument types of the given method descriptor.
578	Returns the return type of the given method descriptor.
579	Returns the number of arguments and return sizes.
580	Returns the type of the given char array at the given offset.
581	Returns the descriptor of the type.
582	Returns the class descriptor for the given class.
583	Returns the opcode of the instruction.
584	Puts a byte into the vector.
585	Put a 11 - byte value into the byte vector.
586	Put a short into the vector.
587	Put a 12 byte integer into the byte vector.
588	Put an int into the vector.
589	Put a long into the vector.
590	Put a string in the byte vector.
591	Puts a byte array into the vector.
592	Enlarges the buffer by the given size.
593	Returns the column name for the given column.
594	Sets the column mapping.
595	Returns the value of the property with the given name.
596	Initialize all configuration properties.
597	Returns the IOCase for the given name.
598	Convert case insensitive string to lower case.
599	Returns the current value of the parameter.
600	Set the value of the parameter.
601	Creates an array of arguments if the argument array is null.
602	Creates a new set if the current value is null.
603	Returns the global parameter.
604	Attaches the parameters to the prepared statement.
605	Returns the absolute path of the given path.
606	Parses a checksum value.
607	Compute the checksum of a string.
608	Returns a classloader that will be used to load the project s classpath.
609	Prints the settings for the current command line.
610	Parse the properties file.
611	Checks if the current value of the field is not null and if so checks if the user
612	Writes the next line of text.
613	Checks if the given string contains special characters.
614	Process a line.
615	Process a character.
616	Execute the update.
617	Converts the given value to the appropriate type.
618	Returns the value of the property.
619	Sets the value of the property.
620	Adds the given aliases to the configuration property.
621	Sets the default value of the property.
622	Generate the SQL for a CREATE INDEX statement.
623	Applies the heuristic to determine if the expression is a computed expression.
624	Tag the database with the given string.
625	Returns a list of all the locks that are associated with this database.
626	Returns the status of changes in the database.
627	Clear the database change log checksums.
628	Parses the CSV file using the given mapping strategy.
629	Process a line of text.
630	Get the property editor for the given property descriptor.
631	Loads the implementations in a jar.
632	Add a class to the set of classes that match the given filter.
633	Returns the type of the property of the given object.
634	Checks if the given object has a property with the given name.
635	Sets the value of a property on the given object.
636	Returns the read method for the given property name.
637	Returns the write method for the given property name.
638	Returns the methods of the given object.
639	Undo a collection.
640	Returns the outgoing foreign keys.
641	Creates a new CDI liquibase configuration.
642	Acquires a file lock.
643	Returns the path to the resource.
644	Returns true if the change set is filtered by the given filter type.
645	Get the value for a column.
646	Initializes the configuration value provider.
647	Initialize the database.
648	Checks if the given database object matches the given database object.
649	Set the validate option if available.
650	Adds a type to the snapshot.
651	After the bean has been set to true the Liquibase will be run.
652	Check if the given string is trimmable.
653	Convert the given value to a Java value.
654	Main method.
655	Split the argument into an array of arguments.
656	Checks if the given command is a command.
657	Checks if the given command is a no - arg command.
658	Extract a file from a jar file.
659	Parse the default properties file from the classpath.
660	Fix up the command line arguments.
661	Check setup.
662	Checks if the command is missing parameters.
663	Check for malformed command parameters.
664	Parses the properties file.
665	Print the help message for the error messages.
666	Print the help text.
667	Parse the command line options.
668	Get the value of a command parameter.
669	Read an integer from a string.
670	Returns true if the given runtime labels match.
671	Checks if the given example is present in the database.
672	Creates a snapshot for the given database.
673	Creates a snapshot of the given example.
674	Generate the children of the table.
675	Clean the directory.
676	Split multi line SQL into multiple lines.
677	Pads a string to a specified length.
678	Left pad the given string to the specified length.
679	Generate a random identifier.
680	Removes all SQL comments and whitespaces from the end of the string.
681	Concatenate the base string with the addition.
682	Get the catalog names of the database.
683	Appends a clause to the list of clauses.
684	Appends a new clause to the list of clauses.
685	Prepend a clause to the beginning of the given key.
686	Insert a new string into the set.
687	Inserts a new string value after the existing key.
688	Returns the value of the specified key.
689	Returns the subclause for the given key.
690	Print the change log to the given stream.
691	Returns a list of all the databases implemented by this instance.
692	Returns a list of all internal databases.
693	Validates the parameters of the type.
694	Converts this data type to a database data type.
695	Converts an object to a SQL string.
696	Checks if the given string is a current date time function.
697	Returns true if the database supports boolean data type.
698	Returns the concatenation of the values.
699	Generate statements volatile.
700	Adds an artifact to the set of URLs.
701	Returns the field with the given name.
702	Get the alternate paths for the given path.
703	Checks if the given runtime contexts match the current contexts.
704	Create a ResourceAccessor for the given ClassLoader.
705	Closes the database.
706	Append the next character and advance the loop.
707	Checks if the next character is escaped.
708	Checks if the next character is escaped.
709	Returns all children of the given namespace and nodename.
710	Sets the value of this node.
711	Returns the value as an object of the given type.
712	Returns the child node with the given namespace and name.
713	Get the value of a child node.
714	Get the value of a child node.
715	Closes all streams.
716	Returns true if the type is auto increment.
717	Checks if the given path is a compressed file.
718	Returns the column with the given name.
719	Get singleton instance of given type.
720	Tag the change log.
721	Creates a precondition instance for the given tag name.
722	Checks if the given value is a valid date or a date in the past format.
723	Returns the value of the parameter with the given key.
724	Set the validate option if available.
725	Generate the SQL to select the unique constraints.
726	Returns the parameters for the given change.
727	Returns the required parameters for the given database.
728	Convert the given value to a SQL string.
729	Returns the set of fields that are serializable for this change.
730	Get the full path of a file.
731	Create the index lookup for the given values.
732	Returns the index of the column with the given name.
733	Returns the descriptor for the column with the given index.
734	Returns the bean field for the specified column.
735	Returns the column name.
736	Finds a descriptor by name.
737	Find a bean field by name.
738	Checks if the given property name matches the given descriptor.
739	Loads the descriptor map.
740	Returns the column name for the given column.
741	Sets the column mapping.
742	Returns the size of the parameter.
743	Returns true if the given column type supports the default value computed.
744	Returns a list of all change sets that are to be run.
745	Escape the given object name.
746	Sets the value of the column as a numeric value.
747	Sets the value of the boolean column.
748	Sets the default value of the column.
749	Unregister a change by its name.
750	Returns a sorted set of all changes defined in this repository.
751	Creates a new change instance.
752	Prompt for a migration against a non - local database.
753	Get the schema name of the connection.
754	Check if the database is safe to run update.
755	Filter out rollback visitors.
756	Returns the maximum number of fractional digits for the timestamp.
757	Checks the given string for valid characters.
758	Create a new node in the current change log.
759	Checks if the object is null.
760	Checks if the given database product name is a sybase product name.
761	Creates a SqlVisitor for the given tag name.
762	Returns the local host address.
763	Returns the hostname of the local host.
764	Surround with schema sets.
765	Add a schema to a procedure text.
766	Encodes a byte array into a hex string.
767	Get the schema names of the given database.
768	Reads the next line from the input stream.
769	Reads the next line from the input stream.
770	Returns true if the reader is closed.
771	Starts polling for configuration.
772	Start the watcher.
773	Sets the app conf folder from the configuration file.
774	Get a dynamic int property.
775	Get a long property.
776	Returns a property that will be set to a boolean value.
777	Get a float property.
778	Gets a double property.
779	Loads the properties from the given table.
780	Returns a DynamicProperty instance for the given property name.
781	Updates all properties.
782	Add a callback to the property.
783	Removes all callbacks from the property.
784	Get the verb uri regex property value.
785	Loads properties from a stream.
786	Adds a property to the map.
787	Updates the properties of the given configuration.
788	Adds or updates a property.
789	Delete a property from the configuration.
790	Clears the map.
791	Returns the properties of this object.
792	Loads the properties from the given configuration source.
793	Adds a configuration at the given index.
794	Removes the given configuration from the container.
795	Removes a configuration from the container.
796	Returns an iterator over all keys in the configuration.
797	Returns all keys that are prefixed with the given prefix.
798	Returns true if the given key is present in the configuration.
799	Returns the value of the specified key in the configuration.
800	Returns the value of the property as a String array.
801	Loads the specified configuration from the classpath.
802	Loads properties from configuration.
803	Loads the properties from the given properties file.
804	Poll for configuration files.
805	Returns the angle of the given location.
806	Returns the value associated with the given key or null if the key does not exist.
807	Main method to generate CloudBalance objects.
808	Returns the property name of the given member.
809	Checks if the given method is a getter method.
810	Adds a constraint match to the hard score.
811	Adds a medium constraint match to the score.
812	Adds a soft constraint match to the score.
813	Clean the path from the given URL.
814	Calculates the standard deviation squared of the average of the average of the average of the average of
815	Checks if problem facts exist.
816	Returns the problem scale for the given solution.
817	Generate the task name for the given request.
818	Checks if the request context has a timeout attribute.
819	Returns true if the task should be applied to the request context.
820	Creates a task that will execute the request with the given timeout.
821	Build a file.
822	Gets a build task for the given hash.
823	Creates a new build task.
824	Write generic failure info.
825	Creates a single trace from a ShallowTrace.
826	Create a batchable task.
827	Returns the name of the batch.
828	Harvest the interval histogram.
829	Creates a default configuration for the Restli server.
830	Compose a transformation chain.
831	Creates a new FusionTask.
832	Sets a property for the engine.
833	Returns a resolved value for the given value.
834	Propagate the result of the given promise to the destination settable.
835	Creates a task that returns the resilient summary of the given member.
836	Creates a responsive summary for a member.
837	Creates a list of connections summaries for a given person.
838	Creates a new task that will be executed when the parent task is executed.
839	Returns a task that will fail if the task has timed out.
840	Finds the node with the next lowest SN.
841	Append the stack trace of the given exception to the task stack trace.
842	Monitor the log.
843	Check if the current time is stalling.
844	Creates a new task with the given retry policy.
845	Wrap the original task with a retry task.
846	Attempts to retry the given attempt.
847	Starts the task.
848	Throws an exception if the given object is not a valid type.
849	Sets the RestClient to use for the request.
850	Acquire a lock.
851	Releases the lock.
852	Try to acquire a permit for a given plan class.
853	Returns the client.
854	Initializes the async http client.
855	Consume the string to any of the given characters.
856	Throws an IllegalArgumentException if any of the given objects are null.
857	Throws an IllegalArgumentException if the string is null or empty.
858	Parse a transform string.
859	Get a list of files matching the given query and sort.
860	Find files by filename.
861	Find all files in the collection.
862	Removes a file from the collection.
863	Removes all files matching the given query.
864	Put an object in the map.
865	Returns the value associated with the given key.
866	Creates a builder for the given type.
867	Returns the maximum time in milliseconds.
868	Adds a property to the compressor.
869	Returns the name of the server.
870	Returns the master address of the cluster.
871	Returns true if the server is the master of the server.
872	Returns the maximum number of documents that can be stored in the database.
873	Adds a key to the query.
874	Apply majority write concern to transaction options.
875	Returns true if the response is ok.
876	Returns the error message.
877	Read annotations.
878	Returns the names of the indexes.
879	Generates the index name from the given document.
880	Validates the md5 of the file.
881	Returns the codec for the given BSON type.
882	Calculates the batch size.
883	Parse a long from a string.
884	Decode a BsonDocument using the default context.
885	Checks if the current state is in the given array.
886	Pipe the given reader to the underlying document.
887	Writes the extra elements.
888	Returns the object id as a byte array.
889	Writes the object id to the given buffer.
890	Returns the hex string representation of this object.
891	Returns a short description of this message.
892	Creates a new BasicDBObjectBuilder from the given document as a map.
893	Push a new object onto the current object.
894	Adds the result to the result set.
895	Adds the error result to the result.
896	Adds a write error result to the result.
897	Adds the error result to the index map.
898	Returns the last error.
899	CAS next node.
900	Returns the next nonmarker node.
901	Returns the successor of this node.
902	Returns the predecessor of this node.
903	Returns the successor of this node or null if there is no successor.
904	Returns the previous node in the tree.
905	Append an element to the end of the list.
906	Prepends the given element to this node.
907	Deletes the node from the list.
908	Replaces the current node with the given element.
909	Executes the FSYNC unlock command.
910	Choose a server from a cluster.
911	Creates a read preference that allows to read a single primary tag.
912	Creates a secondary read preference.
913	Creates a secondary preferred read preference.
914	Creates a read preference that is nearest to the specified maximum staleness.
915	Creates a read preference for a primary tag set.
916	Creates a secondary read preference.
917	Creates a secondary preferred read preference.
918	Creates a read preference that will only be used for tagging.
919	Creates a read preference for a list of tag sets.
920	Creates a read preference that will only be used for tagging.
921	Returns the ReadPreference with the given name.
922	Creates a read preference with the specified name and tag set.
923	Creates a new read preference with the specified name and tag set list.
924	Reads the specified number of bytes from the input stream into the specified buffer.
925	Reads an int from the given input stream.
926	Reads an int from the given byte array starting at the given offset.
927	Reads an int from the given byte array starting at the given offset.
928	Reads a long from the given input stream.
929	Returns the credential list.
930	Get a random server from a list of servers.
931	Creates a new MongoClient instance using the given connection string and driver information.
932	Returns a copy of this list.
933	Creates a new ClassModelBuilder for the given type.
934	Get a collection.
935	Drop the database.
936	Returns the names of all collections in this collection.
937	Executes a command.
938	Executes a command on the database.
939	Checks if a collection exists.
940	Execute a JavaScript expression.
941	Get the current database statistics.
942	Removes a user from the collection.
943	Returns the read preference for the given command.
944	Returns a codec for the given class.
945	Inserts a document into the collection.
946	Executes an update operation.
947	Find a single document by id.
948	Rename the collection.
949	Map a map reduce and return the result.
950	Explain the aggregate of the given pipeline.
951	Create an index.
952	Create an index.
953	Find and remove objects from the collection.
954	Sets the DBDecoderFactory to use.
955	Sets the DBEncoderFactory to use.
956	Returns the index info for this collection.
957	Drop an index.
958	Drop an index.
959	Returns true if the command is capped.
960	Set the internal class of the object.
961	Get the internal class for the given path.
962	Creates a new update with a single value.
963	Creates a new update that sets the value on insert.
964	Creates a new update that will be applied to the given field.
965	Increments the specified field by the given number.
966	Creates a new update that will be a multiple of the given number.
967	Creates a Bson update that matches the minimum value of the given field.
968	Creates a Bson update that updates the specified field with the specified value.
969	Adds a new value to a set field.
970	Adds each value to the collection.
971	Creates a new update that will push the given value to the collection.
972	Push each item to the collection.
973	Creates a pull operation.
974	Pulls documents by filter.
975	Creates a pull all update.
976	Writes the cursor flag and numberToReturn to the given output stream.
977	Increment generation counter on socket exception.
978	Returns the class ancestry of the given class.
979	Creates a replace options.
980	Decodes a string into a byte array.
981	Encodes a byte array into a string.
982	Returns the address of the server.
983	Returns the status of the replica set.
984	Returns a list of all databases in the database.
985	Sync the database.
986	Fsync and lock the database.
987	Unlocks the sync.
988	Returns the value as a number.
989	Returns a new connection id with the specified server value.
990	Compute the hierarchy of the given class.
991	Converts the object to a JSON string.
992	Execute the command.
993	Gets the expire after seconds.
994	Converts the group into a DBObject.
995	Get the maximum number of minutes of the logical session to be used.
996	Returns a set of all server descriptions.
997	Returns the server description with the given address.
998	Returns a list of all primary servers.
999	Returns a list of secondary servers.
1000	Get secondary servers with the given tag set.
1001	Returns all servers that are ok.
1002	Returns a list of servers that are either primary or secondary.
1003	Returns all servers that have any of the specified tags in the given tag set.
1004	Returns a short description of this server.
1005	Creates a new MongoCredential.
1006	Creates a new SCRAM - SHA256 credential.
1007	Creates a plain credential.
1008	Adds a mechanism property to the credential.
1009	Sets the authentication mechanism.
1010	Returns the mechanism property with the specified key or the default value if the key is not found
1011	Returns the contents of this stream as a byte array.
1012	Add an object serializer to the registry.
1013	Sets whether or not the update is multi.
1014	Encodes the message.
1015	Writes the message prologue.
1016	Add a document to the document document document document document document document document document document document document document
1017	Add a collection of documents to the document.
1018	Backpatch the message length.
1019	Creates a new chunk.
1020	Returns a copy of this cursor.
1021	Returns true if the cursor has more data.
1022	Try to get the next object in the cursor.
1023	Returns an array of objects.
1024	Returns the first object in the collection.
1025	Returns the read preference.
1026	Returns the read concern.
1027	Adds a value to the current document.
1028	Put a DBRef.
1029	Returns a BulkWriteResult that is unacknowledged.
1030	Returns the address of the socket.
1031	Returns a list of all the socket addresses.
1032	Creates a filter that only applies to documents that have a value that is not equal to the
1033	Creates a filter that filters documents by the given field name to be greater than the given value
1034	Creates a filter that filters documents by the given field name to be less than the given value
1035	Creates a filter that filters documents by field name greater than or equal to the given value.
1036	Creates a filter that filters documents by field name less than or equal to the given value.
1037	Creates a filter that matches the specified filters.
1038	Creates a filter that matches all of the given filters.
1039	Creates a filter that filters on a field that returns true if it exists.
1040	Returns a Bson object that contains the text of the given search string.
1041	Creates a filter that matches the given text.
1042	Creates a Bson that matches documents in the given field with the given filter.
1043	Creates a filter that filters documents by geo within box.
1044	Creates a filter that filters documents by geo within a polygon.
1045	Returns a filter that filters documents by the given coordinates within the center of the specified field.
1046	Create a filter that filters on a point in the specified field.
1047	Create a filter document that matches the specified point.
1048	Returns the regex flags for the given string.
1049	Returns the regex flag for the given character.
1050	Returns a regex pattern with the given flags.
1051	Sets the text version.
1052	Sets the sphere index version.
1053	Returns a copy of this collection s options.
1054	Converts the given value to the given type.
1055	Encode the given document to the given writer.
1056	Executes the write operation.
1057	Create a bulk update request.
1058	Create a bulk update request that allows to filter the objects in the array.
1059	Execute the command.
1060	Initializes the mongo embedded library.
1061	Creates a new MongoClient instance.
1062	Closes the embedded library.
1063	Enable SNI for the given host.
1064	Returns the type of the given object.
1065	Convert the command to a DBObject.
1066	Returns a short description of this cluster.
1067	Creates an acknowledged update result.
1068	Returns the content type of the file.
1069	Returns the aliases for this GridFS file.
1070	Returns the first key in the document.
1071	Encodes the given value with the default context.
1072	Returns the read concern as a document.
1073	Compresses the given list of buffers to the given output stream.
1074	Returns the value of the specified key as a String.
1075	Returns the value of the specified key as a boolean or the default value if the key is
1076	Get the value of the field as a ObjectId or the default value if the field does not
1077	Get a field as a Date.
1078	Canonicalizes the given object.
1079	Gets the first credential in the list.
1080	Starts a new session.
1081	Get the WTimeout in milliseconds.
1082	Returns the current request as a BsonDocument.
1083	Returns true if the journal or fsync is acknowledged.
1084	Sets the write concern to the given value.
1085	Returns a new WriteConcern with the given write - timeout.
1086	Sets the write timeout.
1087	Create a majority write concern.
1088	Inserts the given document into the collection.
1089	Find documents.
1090	Executes the bulk write operation.
1091	Returns a copy of this object.
1092	Creates a geo - haystack index.
1093	Returns the list of index names.
1094	Returns the value associated with the given key or the default value if the key is not present
1095	Returns the value of the specified key as a document.
1096	Returns the value of the specified key as an array.
1097	Returns the value associated with the given key as a number or the default value if the key
1098	Gets the value of the specified key as an int32.
1099	Gets the value of the specified key as an int64.
1100	Returns the value of the specified key as a decimal128 value.
1101	Gets the double value associated with the given key or the default value if the key does not
1102	Returns the value associated with the given key as a boolean or the given default value if the
1103	Returns the value associated with the given key as a string.
1104	Returns the value associated with the given key as a BsonDateTime.
1105	Gets the timestamp value for the given key.
1106	Returns the value of the specified key as an ObjectId.
1107	Returns the value associated with the given key as a binary value.
1108	Returns the value of the specified key as a regular expression.
1109	Write the buffer to the socket.
1110	Converts the given document to a BsonDocument.
1111	Throws an IllegalArgumentException if the value is null.
1112	Checks if the given condition is true.
1113	Returns the property model builder for the given property name.
1114	Build the class model.
1115	Returns the update options.
1116	Returns the wrapper for the given class if it is a reflection object.
1117	Get a wrapper for a class.
1118	Returns the UUID representation of this object.
1119	Converts this BsonBinary to a UUID.
1120	Parses a value from the input stream.
1121	Reads a hex number from the stream.
1122	Skips all whitespace characters from the current position.
1123	Parse a string.
1124	Parse a number.
1125	Parse the exponent.
1126	Parses an array.
1127	Updates one document.
1128	Returns a copy of this description with the specified connection id.
1129	Returns a WriteConcernResult that indicates whether the given WriteConcernResult was acknowledged.
1130	Returns a new unacknowledged write result.
1131	Get the embedded value.
1132	Construct a list value from the map.
1133	Merge the given options with the given default options.
1134	Releases the given item to the pool.
1135	Returns the next available item from the pool.
1136	Closes all the available objects.
1137	Pipe the buffer to the given output stream.
1138	Throws an exception if the given method is not valid.
1139	Throws an exception if the method is not valid.
1140	Verify that the current BSONType is the required type.
1141	Verifies that the element name is the expected one.
1142	Checks the preconditions for the given method.
1143	Parses a decimal value.
1144	Returns the value of this Decimal128 as a BigDecimal.
1145	Returns the bytes of the range of the range.
1146	Sets the hint for the explain operation.
1147	Returns the collation as a BsonDocument.
1148	Writes the message to the given file.
1149	Writes the contents of this buffer to the given output stream.
1150	Remove the file from the database.
1151	Sets the sort order.
1152	Sets the sort document to be used for the push operation.
1153	Returns the namespace of the document.
1154	Returns the database name.
1155	Creates a new codec for the given document class.
1156	Creates a new builder with the given options.
1157	Resets the connection state.
1158	Returns a copy of this options.
1159	Returns the write concern.
1160	Returns the user agent for the given service.
1161	Populate the properties for the given pojos.
1162	Is the given node a matching user group key?
1163	Convert the list of groups to GrantedAuthorities.
1164	Returns the service endpoints for the given environment.
1165	AAD authentication filter.
1166	Get all todo items
1167	Registers a path to be loaded.
1168	Build the given distribution.
1169	Prints the summary of the pipeline and filesets.
1170	Registers a directory.
1171	Creates a new property.
1172	Returns a RamlType instance for the given name.
1173	Adds a kind to the list of kind events.
1174	Do with a callback.
1175	Override this method to configure the meter registry.
1176	Executes the given callback with the template engine.
1177	Bind a form filter to the given pattern.
1178	Bind a basic authentication filter to the given pattern.
1179	Resolve the given value.
1180	Returns a path for the given pattern.
1181	Define a type.
1182	Convert the object to a YAML string.
1183	Returns the status of the request.
1184	Returns the status code of the response.
1185	Sets the status of the response.
1186	Sets the media type.
1187	Run the enhancer.
1188	Sets the media type.
1189	Gets a query parameter.
1190	Gets a form parameter.
1191	Gets the header parameter.
1192	Returns the response for the given status.
1193	Do with the given configuration callback.
1194	Reads bytes from the input stream.
1195	Creates a new Requery instance with the given name and model.
1196	Creates a new ReactorEntityStore with the given name and entity model.
1197	Create a new requery with a completion stage.
1198	Creates a new Requery instance with the given name and entity model.
1199	Sets the JavaScript escape level and type.
1200	Sets the HTML escape level and type.
1201	Sets the JSON escape level and type.
1202	Sets the CSS string escape level and type.
1203	Returns the attributes for the given path.
1204	Returns the CSS for the given SVG element.
1205	Parse the size value.
1206	Writes the given sequence to the given path.
1207	Sets the handle key for the request.
1208	Set required property on the model.
1209	Returns the last event id of the event.
1210	Sends an event.
1211	Adds a model value to the view.
1212	Adds a map of values to the view.
1213	Creates a new class loader with the specified parent.
1214	Creates a new class loader for the given project directory.
1215	Sets the attributes for this route method.
1216	Adds an attribute to the route method.
1217	Add a custom parameter to the route method.
1218	Returns a Status object for the given status code.
1219	Do with a consumer.
1220	Rewrite a SQL statement.
1221	Send the asset to the client.
1222	Do with a consumer.
1223	Do with a configuration consumer.
1224	Adds a job to the Quartz.
1225	Creates a new Quartz instance with the given job class and a consumer for each trigger.
1226	Shutdown the given iterator of event executor groups.
1227	Do with cluster.
1228	Returns a new result with the specified HTTP status.
1229	Add a module to the Jackson module.
1230	Returns a new Pac4j instance with the specified provider.
1231	Creates a form client with a given pattern.
1232	Parse the given application and return the list of methods that match the filter.
1233	Scan for service types.
1234	Adds a Swagger request to the API.
1235	Sets the Swagger options.
1236	Creates a new ApiTool with the specified path and a consumer for RAML.
1237	Set the RAML options.
1238	Process a file using the given configuration.
1239	Recepcao os result.
1240	Recepcao lote de resultmdfe.
1241	Receives a resultcteInutilizacaoCT from the server.
1242	Describando um resultmdfe recepcao evento.
1243	Handles a result of a CteConsultaCT call.
1244	This method is called when a response from the MDFeConsNaoEnc service is received
1245	Converts the default envelope to a SOAP envelope.
1246	Get the namespace map for the given SOAP envelope.
1247	Handles a result of a nfeConsultaNF.
1248	Adiciona a lote assinado.
1249	Envia a lote.
1250	Consulta a status de Servico
1251	Correcao a partir de acesso no NF
1252	Cancela a nota
1253	Informa a NFRetornoEventoInutilizacao.
1254	Consulta Cadastro da DF UnidadeFederativa
1255	Recepcao lote result.
1256	Calls the method in the interface implementation to handle the resultcteRetRecepcao event
1257	Atribución de XML assinado.
1258	Describar a resultcteRecepcaoEvento for this CteRecepc
1259	Cancela a nota de chave
1260	This method is called when a response from the MDFeConsultaMDF service has
1261	Describer um resultmdfe retornorecepcao de MdfeRet
1262	Cancela a MDFe
1263	Encerra mdfe de encerramento
1264	Encerramento acesso do evento assinado xml
1265	This method is called by the MDF service to receive the result of a status servid
1266	Consulta a status bahia.
1267	Computes the updated Xu vector.
1268	Returns the cosine similarity of two vectors.
1269	Compute the solver.
1270	Delete all files in the given directory recursively.
1271	Loads an instance of the specified class.
1272	Publish additional model data.
1273	Opens a custom tab with the given Uri.
1274	Returns the packageName to use for the current application.
1275	Checks if the intent has any specialized handlers.
1276	Load the session.
1277	Opens the custom tab.
1278	Validates the session configuration.
1279	Creates an intent to send a response to the user.
1280	Edit a configuration handler.
1281	Main method.
1282	Shuts down the driver.
1283	Checks if the target VM has tasks running on it and if so returns true.
1284	Evaluate the task.
1285	Evaluate the task.
1286	Sets the callback to be called when the auto scale is started.
1287	Disable a VM.
1288	Disable a VM by its VM ID.
1289	Enables a VM.
1290	Shuts down the executor.
1291	Checks if the object has the specified properties.
1292	Read the info for a given source.
1293	Read the metadata from the given stream.
1294	Reads a packet from the given source.
1295	Reads a varint from the stream.
1296	Reads a fixed 4 byte integer from the stream.
1297	Reads the engine type from the stream.
1298	Adds a child tag to this tag.
1299	Adds the specified children to the container tag.
1300	If the optional is present returns the result of applying the given function.
1301	Renders the given HTML - tag into a document.
1302	Sets the value of an attribute.
1303	Sets the attribute value.
1304	Adds an Attribute to the list of Attributes.
1305	Adds a class attribute to the element.
1306	Compress a JS code.
1307	Parses the properties from the given string.
1308	Parses the contents of a property into a list of Part objects.
1309	Handles the onVisibleMenuItemsWidthChanged event.
1310	Sets the color of the left action icon.
1311	Sets the background color of the suggestions list.
1312	Opens the menu.
1313	Closes the menu.
1314	Inflates the overflow menu.
1315	Sets whether the search key should be shown or not.
1316	Enables or disables the dismiss on outside click.
1317	Sets the search focused state.
1318	Update the height of the suggestions section.
1319	Calculates the height of the items in the suggestions list.
1320	Sets the callback which is called when the suggestion is bound.
1321	Returns the MD5 checksum of the given filename.
1322	Configure the OkHttpClient to ignore SSL certificates.
1323	Reads a value from the given JsonReader.
1324	Returns the name forms for the abstract type of this class.
1325	Returns the path to the package in the given nested package.
1326	Returns the name forms for the type of this class.
1327	Creates an adapter for the given type.
1328	Returns an immutable set containing all of the elements in the set.
1329	Returns an iterator over the elements in this list.
1330	Returns the key for the given value attribute.
1331	Returns the serialized name of the element.
1332	Returns the name of the property.
1333	Creates a predicate that evaluates to true if the expression is not null.
1334	Creates a new FluentFuture from a ListenableFuture.
1335	Returns the immutable map.
1336	Converts a type to a string.
1337	Returns a token buffer that is used to read the next token from the input stream.
1338	Closes the connection.
1339	Executes a JavaScript script.
1340	Sets the proxy settings.
1341	Sets the HTTP proxy.
1342	Sets the auto proxy url.
1343	Get a Box Developer Edition API connection for a user.
1344	Updates the modified fields from an existing entity.
1345	Add a four - eyes task listener to the usertask.
1346	This method is called to deploy the process definitions to all tenants.
1347	Check if the task is selected via bridge.
1348	Gets the context path for the given process definition.
1349	Gets the servlet context path for the given process definition.
1350	Get the process application information for a given process definition.
1351	Get the process application info for a given process definition id
1352	The user details service.
1353	Casts the given value to a Serializable.
1354	Initialize the Camunda BPM component.
1355	Checks if the given variable is set.
1356	Checks that the given variable is set.
1357	Opens the menu.
1358	Closes the menu.
1359	Updates the position of the items in the menu.
1360	Returns the coordinates of the main action view.
1361	Returns the center of the action view.
1362	Calculate the position of the item in the action view.
1363	Gets the content view of the activity which is used to show the content of the main action
1364	Get the screen size.
1365	Restore the sub action view after animation.
1366	Sets the content view to be used for the sub - action button.
1367	Sets the position of the view.
1368	Attaches this alert window to the activity content view.
1369	Permits the given trigger to the given destination state.
1370	Permits the given trigger if the destination state is not an identity transition.
1371	Permits the given trigger if the destination state is not already in the current state.
1372	Ignore the given trigger if the guard is true.
1373	Returns the state representation for the given state.
1374	Adds an instance to the managed instances.
1375	Sets the overflow value for the given bucket.
1376	Merges this HLL with another HLL.
1377	Encodes a sequence of bytes.
1378	Decodes a sequence of bytes.
1379	Decodes an optional sequence element.
1380	Encodes a bit string.
1381	Encodes an octet string.
1382	Encodes a length into a byte array.
1383	Returns a logger with the given name.
1384	Log a message with a level of DEBUG.
1385	Log a warning message.
1386	Log an error message.
1387	Replaces the path of the URI.
1388	Decode a percent encoded string.
1389	Process the list of content timestamps.
1390	Builds a configuration instance using the given configuration provider.
1391	Updates the value of the histogram.
1392	Encodes a byte array into a base64 encoded string.
1393	Decode a base64 encoded string into a byte array.
1394	Flushes the current record.
1395	Dump the destination for the given URI.
1396	Computes the alpha value of the target weight.
1397	Propagates cancellation to the destination future.
1398	Returns an unmodifiable version of the given future.
1399	Returns an unmodifiable future that is not necessarily a future.
1400	Creates a new CompletableFuture that completes when the given throwable is thrown.
1401	Returns the value of the given future.
1402	Try to get the value of the given future.
1403	Try to get the value of the given future.
1404	Try to get the value of the given Future.
1405	Checks that the given future is successful.
1406	Returns a future that is completed when any of the given futures complete.
1407	Returns the first completed future from the given futures.
1408	Returns the first completed future from the given futures.
1409	Returns a future that completes all of the given futures.
1410	Converts a ListenableFuture to a CompletableFuture.
1411	Creates a ListenableFuture from a CompletableFuture.
1412	Adds an exception callback to the given future.
1413	Returns the histogram of buckets in the given bucket upper bounds.
1414	Removes the given node from the tree.
1415	Computes the maximum weight of a node.
1416	Adds a hash to the hash table.
1417	Loads the properties from the given file.
1418	Bind global defaults for the given configuration class.
1419	Returns the next duration in the interval.
1420	Returns the fibrated value of the given value.
1421	Multiply this duration by the given amount.
1422	Divides this duration by the given amount.
1423	Finds a field using the given strategy.
1424	Checks if the field is static or not.
1425	Throws a FieldNotFoundException if the field was not found.
1426	Returns the field annotated with the given annotation.
1427	Creates a new ConditionFactory that will listen to the given condition evaluation listener.
1428	Creates a new ConditionFactory that polls the given executor service.
1429	Waits until the current element is true.
1430	Waits until the current element is false.
1431	Creates a new ConditionFactory that catches uncaught exceptions.
1432	Sets the default timeout for the wait constraint.
1433	Sets the default timeout for the wait constraint.
1434	Tokenizes the given string.
1435	Escape all quotes and backslashes in the given string.
1436	Serve static assets.
1437	Loads the configuration from the given file or URL.
1438	Load all the messages. properties file for all registered languages.
1439	Get the URL for the given logback configuration file.
1440	Generate a random secret.
1441	Build a RunClassInSeparateJvmMachine instance.
1442	Returns all artifacts that are coming from ninja - standalone.
1443	Resolve the standalone class.
1444	Encrypt the given data using the configured secret key.
1445	Decrypts the given data using the specified secret key.
1446	Read the ninja version from the properties file.
1447	Registers the given path as a watch service.
1448	Determine the mode from system properties or prod if not set.
1449	Checks if the given mime type is valid.
1450	Builds a route.
1451	Starts the server and joins it.
1452	Creates a server URL.
1453	Initializes the controller.
1454	Processes the found methods.
1455	Sort methods by controller and method name.
1456	Finds all methods annotated with the controller.
1457	Configure reflections.
1458	Checks if the given method is allowed to be used by the Ninja server.
1459	Get the HTTP method.
1460	Builds a controller method invoker.
1461	Returns the real class name lower - cased.
1462	Checks if a class exists in the given package.
1463	Returns the source code relative path for the given stack trace element.
1464	Adds a value to the cache.
1465	Returns the value of the specified key from the cache.
1466	Checks if the value is serializable.
1467	Renders a single value.
1468	Renders a raw string.
1469	Renders the given raw bytes.
1470	Returns the cookie with the given name.
1471	Sets the cache control header to no - cache.
1472	Checks that the application secret is set.
1473	Adds all items from the given collection to the list.
1474	Returns the position of the item with the given id.
1475	Switch views.
1476	Removes the active index from the queue.
1477	Returns the active indexes.
1478	Returns the title view for the given position.
1479	Returns the content view for the given position.
1480	Expand the item at the given position.
1481	Collapse the item at the given position.
1482	Gets the content parent for the given position.
1483	Returns additional animations for the view.
1484	Returns a bitmap from a view.
1485	Returns true if the item is dismissable.
1486	Resets the velocity tracking.
1487	Resets the animation to the initial state.
1488	Cancels an existing animation.
1489	Animates a view.
1490	Calculates the delay to be used to animate the specified position.
1491	Concatenates two animators together.
1492	Handle non - CORS requests.
1493	Add a stream of literal words to the buffer.
1494	Materialize the bitmap.
1495	Poll the queue.
1496	Resize the buffer to the given number.
1497	Returns the new size in words.
1498	Returns the xor of the given bitmaps.
1499	Adds a stream of literal words to the stream.
1500	Fill the given list with the literal pointers.
1501	Returns a new BitSet containing all the bits in this BitSet.
1502	Returns the cardinality of the set.
1503	Returns true if the buffer is empty.
1504	Returns an iterator over the elements of this set.
1505	Returns true if this bit set intersects the given bit set.
1506	Returns an iterator over the elements of this set.
1507	Parse the next run.
1508	Opens the button.
1509	Closes the icon.
1510	Sets the background color of the menu.
1511	Fetch the database name range index from the URL for H2 file mode.
1512	Fetch database name range index from the URL for H2 memory mode.
1513	Parses a jdbc url and returns the connection info.
1514	Register a connection parser for the given URL prefix.
1515	Fetch database name from URL.
1516	Starts the daemon service.
1517	Copy a file from an input stream to a file.
1518	Copy assets from the given assets filename to the given file.
1519	Installs a binary to the given directory.
1520	Handles missing fields.
1521	Returns the enum value from the given JSON object.
1522	Patch all unresolved references.
1523	Traverse the fields of the given object and add them to the stack.
1524	Converts a JSON string to a Java object.
1525	Convert a Json object to a Java object.
1526	Traverse the fields of the given object.
1527	Stores a missing field.
1528	Returns the raw type of the given type.
1529	Read an array from the given JSON object.
1530	Reads a number from the input stream.
1531	Reads a JSON string from the input stream.
1532	Returns the field of the given class.
1533	Removes leading and trailing quotes from a string.
1534	Converts an object to a JSON string.
1535	Format a JSON string.
1536	Writes a tab - separated line to the output.
1537	Write an array element if the given object is a custom object.
1538	Write a custom object.
1539	Returns the custom writer for the given class.
1540	Writes the given object to the JSON stream.
1541	Trace all references to the given object.
1542	Trace fields.
1543	Ensure that all keys are strings.
1544	Write a collection element.
1545	Create a map from a list of strings.
1546	Gets the source.
1547	Gets the value of the topics property.
1548	Gets the value of the hjid column.
1549	Gets the value of the documentDetailList property.
1550	Creates the axes for the date and float axis.
1551	Creates a default grid.
1552	Creates a legend that is placed inside the North West axis.
1553	Creates a legend that is placed inside the West axis.
1554	Creates a legend that shows the series outside one column.
1555	Sets the legend styling.
1556	Creates a highlighter.
1557	Creates a highlighter that shows the chart with the North axis.
1558	Creates a default series for the PIE chart.
1559	Creates a default series for donout.
1560	Gets the value of the documentAttachmentList property.
1561	Creates the committee ranking menu bar.
1562	Create the committee ranking topics.
1563	Create the overview page.
1564	Create overview content.
1565	Gets the value of the kommunvalkrets property.
1566	Configure authentication.
1567	Sets the list of compliance checks.
1568	Sets the status map.
1569	Sets the map of resource types to the rule violations.
1570	Gets the value of the kommun property.
1571	Gets the value of the uppdrag property.
1572	Gets the value of the proposal property.
1573	Returns the path to the page.
1574	Update ballot.
1575	Get the maximum size of the view roadot party summary.
1576	Initialize the party map.
1577	Add the party data.
1578	Create the party ballot chart.
1579	Add the ballot data.
1580	Create org ministry map.
1581	Adds the result for a given month.
1582	Creates a field for the given property.
1583	Creates the display property converters.
1584	Get a converter for the given type.
1585	Gets the type of the property.
1586	Gets the value of the documentActivities property.
1587	Gets the user account from the SecurityContext.
1588	Gets the value of the countyRegions property.
1589	Gets the value of the againstProposalContainer property.
1590	Gets the value of the committeeProposalContainer property.
1591	Gets the value of the events property.
1592	Get the page id from the parameters.
1593	Get the page number from the parameters.
1594	Creates the content of the panel.
1595	Creates the page visit history.
1596	Add politician indicator data.
1597	Add politican data.
1598	Sets the Google Auth ScratchCodes.
1599	Create the role gantt.
1600	Create a generic gantt.
1601	Sort the entries by values.
1602	Adds a view generic role member to a step.
1603	Removes dates after current date.
1604	Creates a Gantt object.
1605	Convert the given total days to years.
1606	Load the XA DataSource for the given SecretReference.
1607	Send the message to all registered data sources.
1608	Gets the value of the documentPersonReferenceList property.
1609	Removes the decision from the given string.
1610	Returns the name of the document.
1611	Get committtee short name.
1612	Block the user account for failed login attempts.
1613	Block by session or ip failed login attempts.
1614	Navigate to the page of the violation.
1615	Gets the application manager.
1616	Shows a notification.
1617	Gets the value of the topic property.
1618	Adds the source indicators to the menu.
1619	Gets the topic indicator map.
1620	Returns the address of the user account.
1621	Add cache hints.
1622	Gets the list of strings for the given property.
1623	Reads the CSV file from the given input stream.
1624	Creates the paging controls.
1625	Add a paging link.
1626	Insert a politician.
1627	Insert party data.
1628	Gets the value of the againstProposalList property.
1629	Adds a data serie value to the given data series.
1630	Adds an annual summary chart.
1631	Adds annual summary data.
1632	Add an annual data chart.
1633	Adds the entry data to the data series.
1634	Create the ministry summary.
1635	Create the role list.
1636	Process all documents.
1637	Load and process a DocumentList from the given URL.
1638	Load a list of documents from the given URL.
1639	Reads a string from a reader and returns it as a String.
1640	Reads the content of the given access URL.
1641	Gets the value of the votering property.
1642	Gets the list of GovernmentBodyAnnualOutcomeSummary objects.
1643	Gets the value of the personAssignmentElement property.
1644	Gets the value of the personDetailElement property.
1645	Creates a UserAccount object from the given RegisterUserRequest.
1646	Creates a row item.
1647	Creates a grid layout for the content overview panel.
1648	Send the work order for the given country.
1649	Gets the value of the documentProposal property.
1650	Gets the value of the documentActivityContainer property.
1651	Gets the value of the documentDetailContainer property.
1652	Gets the value of the documentAttachmentContainer property.
1653	Gets the value of the documentReferenceContainer property.
1654	Gets the value of the documentPersonReferenceContainer property.
1655	Gets the map of the view raksdagen party document daily summaries.
1656	Add document history by party data.
1657	Read the missing person list. txt file.
1658	Append object presentation.
1659	Add the fallback value to the builder.
1660	Reencrypt vault values.
1661	Gets the value of the landstingsvalkrets property.
1662	Add a summary of a committeee to the string builder.
1663	Add a single entry to the given string builder.
1664	Adds decision data rows.
1665	Adds the doc type data rows.
1666	Adds the doc type and decision data rows.
1667	Gets the user id from the SecurityContext.
1668	Gets the request URL.
1669	Check if the user has the given role.
1670	Gets the view application action event page daily summary map.
1671	Gets the view application action event page mode daily summary map.
1672	Gets the daily summary list for a specific element.
1673	Adds the view application action event page element daily summary values.
1674	Updates the person assignment data.
1675	Update assignment data.
1676	Validates the input request and processes the event.
1677	Creates the base application event request.
1678	Validates the request.
1679	Gets the human readable message for the given set of constraint violations.
1680	Handles input violations.
1681	Create the chart panel for the data indicator summary.
1682	Initialize the application menu bar.
1683	Creates the admin menu.
1684	Creates a button with the given text and icon and command.
1685	Sets the result element.
1686	Gets the KieContainer.
1687	Gets the Javers for the postgresql database.
1688	A Javers auditable aspect.
1689	Author provider.
1690	Creates the role summary.
1691	Adds the ministry per year to the map.
1692	Adds a GovernmentBodyAnnualSummary to a list of Government
1693	Converts a string to an integer.
1694	Adds data for a given year to the given map.
1695	Adds a GovernmentBodyAnnualSummary to a map.
1696	Create a GovernmentBodyAnnualSummary from a row.
1697	Gets the value of the personAssignmentData property.
1698	Gets the value of the personDetailData property.
1699	Get the decision type map.
1700	Gets the map of org to daily summary
1701	Add decision type by org data.
1702	Display document attachments.
1703	Creates a header 2 label.
1704	Build a key for a given user and password.
1705	Returns the rule summary.
1706	Add a new rule violation.
1707	Create map from list of VoteDataEmbeddedId
1708	Check if the given date is included in the document.
1709	Get a date from a string.
1710	Gets the value of the parties property.
1711	Creates the button which allows to enable Google authentication.
1712	Creates the button which allows to disable Google authentication.
1713	Creates the change password button.
1714	Gets the value of the documentReferenceList property.
1715	Returns the best guess date for the given ballot container.
1716	Check if the vote date is the same as the one in the list.
1717	Try to find a valid vote date.
1718	Gets the IP information of the web browser.
1719	Gets the operating system name and version of the web browser.
1720	Gets the value of the committeeProposalList property.
1721	Gets the value of the parliamentElectoralRegions property.
1722	Gets the view roksdagen org document daily summary map.
1723	Add document history by org data.
1724	Add a new data serie.
1725	Add data item.
1726	Initialize the user command map.
1727	Perform the account operation.
1728	Gets the value of the voteDataList property.
1729	Gets the value of the assignmentList property.
1730	Configures the column order and hidden fields.
1731	Configures the listener for selection events.
1732	Creates a grid cell filter.
1733	Sets the column converters.
1734	Gets the document type summary map.
1735	Add data series.
1736	Gets the value of the electionTypes property.
1737	Gets the ballot summary item.
1738	Gets the adminregion.
1739	Gets the IncomeLevel attribute.
1740	Gets the lending type.
1741	Gets the value of the ballotDocumentData property.
1742	Gets the value of the ballotDocumentElement property.
1743	Main method.
1744	Encrypt a value using the given symmetric key.
1745	Get the encryptor for the given symmetric key.
1746	Decrypt a value using the given symmetric key.
1747	Gets the value of the countyElectoralRegions property.
1748	Gets the JobContextHolder.
1749	Gets the value of the portals property.
1750	Gets the active user account.
1751	Gets the value of the dokument property.
1752	Creates the basic layout for the page mode.
1753	Creates the top header actions for the user context.
1754	Creates a vertical layout with full size.
1755	Adds the logo to the top header.
1756	Creates the top title header.
1757	Gets the mail sender.
1758	Get the SMTP port.
1759	Find language by locale.
1760	Gets the supported locales language data.
1761	Creates a map of issue and concern party summaries.
1762	Sets the namespace on the given XML stream.
1763	Add a chart to the layout.
1764	Get the height of the chart window.
1765	Gets the name of the party.
1766	Gets the view roksdagen politician document daily summary map.
1767	Login the user.
1768	Checks if the operating system is Windows.
1769	Start the Android emulator.
1770	Unlocks the emulator.
1771	Write the emulator start script windows.
1772	Write the emulator start script to the file.
1773	Stops the Android Debug Bridge emulator.
1774	Stops the emulator.
1775	Sends a command to the emulator.
1776	Assemble the start command line.
1777	Determine the executable to use for the emulator.
1778	Determine the wait time for the emulator.
1779	Determine the options to use for the emulator.
1780	Determine the avd for the emulator.
1781	Determine the location of the emulator.
1782	Unjar the given jar file and add the entries to the given output directory.
1783	Calculate the source and destination mappings.
1784	Visit a dependency node.
1785	Resolves the given artifact to a single target.
1786	Waits until the device is connected.
1787	Waits for the initial device list from the Android Debug Bridge.
1788	Installs an apk file.
1789	Deploy the built apk.
1790	Undeploy an apk.
1791	Undeploys an Apk package.
1792	Extract the package name from the given apk file.
1793	Extract the package name from the given artifact.
1794	Extract the instrumentation runner from the AndroidManifest. xml file.
1795	Generate the R. txt file for each library.
1796	Execute the command.
1797	Copy the stream without closing the stream.
1798	Copy the gdbserver binary to the specified directory.
1799	Returns the java executable.
1800	Returns the path to the proguard. jar file.
1801	Gets the path to the shrinked Android. jar file.
1802	Returns the directory path to the build tools library.
1803	Returns the path to the main DexClasses. rules file.
1804	Get the path to the Android tool.
1805	Gets the AndroidJar file.
1806	Returns the platform directory.
1807	Load the major version of the SDK tools.
1808	This method will copy the project s manifest and the assets folder to the target directory.
1809	Copy the manifest file to the destination manifest file.
1810	Extract the source dependencies.
1811	Extract the apklib from the artifact.
1812	Extract the AAR library from the given artifact.
1813	Checks for APKLIB dependencies.
1814	Gets the package compare map.
1815	Generate correct R. java for APKLIB dependencies.
1816	Generate correct R. java for AAR dependencies.
1817	Generate the R file for the given apklib dependency.
1818	Checks if the build config is present in the given artifact.
1819	Checks if the BuildConfig. class file is present in the jar.
1820	Returns the set of files to be used to read the dex input.
1821	Execute the zipalign plugin.
1822	Check if client secret is in resources / client_secrets. json.
1823	Adds the libs jar files from the artifact to the classpath.
1824	Adds the classes to the classpath.
1825	Execute the Android Lint.
1826	Returns the GAV version of the project.
1827	Collect the JVM arguments.
1828	Get the Java library file for the given name.
1829	Get the toolchain for the given file.
1830	Returns the path to the ndk - build. cmd.
1831	Read the manifest file.
1832	Write the manifest file.
1833	Export the properties of the project.
1834	Update the versionCode attribute of the manifest element.
1835	Extract the architecture from an artifact.
1836	Returns the names of the files in the given base directory.
1837	Encrypt a string using the specified key
1838	Decrypts the data using the specified key.
1839	Reads a name from the given byte array.
1840	Converts a hexadecimal character to a digit.
1841	Try to move the view to the specified position.
1842	Starts listening to the connectivity manager.
1843	Stop listening.
1844	Sends the request to the server.
1845	Adds a form field to the response.
1846	Add a file part to the multipart upload.
1847	Creates a BitmapDrawable from a Bitmap.
1848	Preload images.
1849	Detaches an image view from an image task.
1850	Add an image task to the image loader.
1851	Query the cache for the image.
1852	Recover all load work.
1853	Stop the work.
1854	Destroy the work.
1855	Attaches the image loader to a cube fragment.
1856	Invalidate the cache for the given key.
1857	Clear the disk cache.
1858	Creates a new table with the specified capacity.
1859	Returns a new array with the smallest capacity of the hash table.
1860	Write a bitmap to disk cache.
1861	Returns the contents of the stream as a String.
1862	Set the value of the key in the cache.
1863	Delete the cache entry.
1864	Commit the cache entry to disk.
1865	Adds a file to the request data.
1866	Clears the memory cache.
1867	Try to resume the cache.
1868	Process the journal.
1869	Rebuilds the journal file.
1870	Removes all entries from the cache to the capacity.
1871	Called when the user presses the back button.
1872	Called when the load more is finished.
1873	Creates a new ImageReuseInfo object with the given size.
1874	Sync the request.
1875	Notify the handler that a request has finished.
1876	Reads the response from the server and appends it to the given StringBuilder.
1877	Sets the loading bitmap.
1878	Add a customized right view to the right view container.
1879	Download the image to the given URL and write it to the given output stream.
1880	Adds an image view to the list of image views.
1881	Removes the given image view from the list of image views.
1882	Called when the image view is loaded.
1883	Called when the image load task is finished.
1884	Join size info to key.
1885	Join size tag to key
1886	Open the disk cache asynchronously.
1887	Flushes the disk cache asynchronously with a delay.
1888	Get the disk cache.
1889	Delete a directory recursively.
1890	Returns the external cache folder.
1891	Returns the free space of the given file.
1892	Notify the drawable that it is being displayed.
1893	Called when the activity is resumed.
1894	Returns the last item in the list.
1895	Hide the FAB.
1896	Aligns the sheet with the FAB.
1897	Morphs the sheet from a FAB view.
1898	Morphs the sheet into the specified Fab.
1899	Hide the overlay.
1900	Shows the sheet.
1901	Setup the action bar.
1902	Setup the drawer.
1903	Setup the tabs.
1904	Setup the FAB
1905	Updates the fab of the material sheet.
1906	Update the snackbar.
1907	Morphs the current sheet into the sheet.
1908	Morphs from sheet.
1909	Hide suggestions if the current query is not waiting for results.
1910	Returns a list of suggestions for a given query token.
1911	Checks if the CharSequence contains any explicit characters.
1912	Checks if the CharSequence contains a word breaking character.
1913	Returns true if the given number of characters are only letters or digits.
1914	Returns the index of the start of the search starting from the given cursor.
1915	Returns the index of the end of the search that is closest to the given cursor.
1916	Display the text counter.
1917	Disable spelling suggestions.
1918	Updates the text count of the editor.
1919	Sets the factory for the mentions.
1920	Copy the text from the text area to the clipboard.
1921	Paste the text in the text area.
1922	Paste the text in the clipboard.
1923	Updates the selection if required.
1924	Called when the cursor is changed.
1925	Deselect all spans.
1926	Parse a duration string.
1927	Escape the given source string for XML.
1928	Write the SVG element to a file.
1929	Creates a new image with the specified width and height.
1930	Create a new image with the specified width and height and transparency.
1931	Returns the value as a string.
1932	Map a font to a alternate font.
1933	Sets the shape rendering.
1934	Sets the text rendering.
1935	Append the element ID from the hint.
1936	Get the SVG path data.
1937	Convert a color to a string.
1938	Converts a color to a string.
1939	Returns the stroke style.
1940	Returns the SVG fill style.
1941	Returns the SVG font style.
1942	Get the font metrics for the given font.
1943	Scale the matrix by the given scale.
1944	Concatenates the current transform with the given transformation.
1945	Sets the transform used to transform the image.
1946	Sets the clip to the given shape.
1947	Register a clip.
1948	Set the clip to the given shape.
1949	Clip the current rectangle.
1950	Sets the rectangle to the specified coordinates.
1951	Convert an image to a PNG image.
1952	Draw the rendered image.
1953	Draw a rendered image using the default rendering.
1954	Gets the element for a radial gradient paint.
1955	Returns the clip path reference.
1956	Get the parts of a string.
1957	Record a stat level.
1958	Record a timing for a given stat key.
1959	Track the timeouts that have been sent.
1960	Check the client connection.
1961	Handle the request.
1962	Creates and forwards the given request to the backend client.
1963	Handles the error for the given client request.
1964	Handle backend client responses.
1965	Processes the queue.
1966	Creates a Lokate Service Discovery.
1967	Handles a method call.
1968	Sends a method call to the service bundle.
1969	Creates a local proxy for the given service.
1970	Transform a method call to the before method call.
1971	Transform before method call.
1972	Stops the service bundle.
1973	Start up the call queue.
1974	Find the service name for the given dns service name.
1975	Load service endpoints by service name.
1976	Convert a SrvRecord to an EndpointDefinition.
1977	Checks the request type.
1978	Handles an HTTP request.
1979	Handle a method call.
1980	Creates a new Consul instance with the given host and port.
1981	Get the DNS client.
1982	Returns a receive queue.
1983	Returns the send queue.
1984	Converts a Promise to a Callback.
1985	Converts a Promise to a Callback.
1986	Creates a new callback that will be invoked when the promise is resolved.
1987	Loads all health services from the service pool.
1988	Load the service from the service registry.
1989	Returns a new instance of the DnsClient.
1990	Adds a task to be executed once after a given time.
1991	Processes the queue.
1992	Removes the given AsyncFutureCallback from the queue.
1993	Returns a new callback coordinator that will be called when the callback is completed.
1994	Monitor the callbacks.
1995	Monitor the callback coordinator list.
1996	Wrap a callback with a timeout.
1997	Builds a proxy service.
1998	Build a proxy service.
1999	Handles a WebSocket call.
2000	Starts the proxy server.
2001	Adds an event listener to the channel.
2002	Creates a DNS service discovery.
2003	Parse a JSON string into an object of the specified type.
2004	Parse a JSON array into a List of objects.
2005	Converts the given object to a JSON string.
2006	Converts a JSON string into a Map.
2007	Converts a value map to a map.
2008	Returns true if the handler with the given name has been registered.
2009	Sets the callback for the given type.
2010	Wrap the given callback.
2011	Sets the callback to be called when the list of components is added.
2012	Sets the callback to be called when the component is set.
2013	Sets the callback to be called when the collection of the given component is instantiated.
2014	Sets the map callback.
2015	Sets the optional callback for the given class.
2016	Adds a header to the response.
2017	Returns true if the given service is registered.
2018	Ping the agent.
2019	Register a service with Consul.
2020	Deregisters a service with Consul.
2021	Deregisters a check with Consul.
2022	Checks a check.
2023	Passes a check.
2024	Log a warning message.
2025	Stop the http server.
2026	Handles a response asynchronously.
2027	Send a message to the server.
2028	Creates a new proxy for the given service interface.
2029	Creates a response queue listener.
2030	Returns a receive queue.
2031	Creates a SendQueue that sends JSON data to the given sendQueue.
2032	Starts the listener.
2033	Builds a service queue.
2034	Check in ok.
2035	Fail the service with the given name with the given error.
2036	Enable logging mapped diagnostic context.
2037	Enable Consul Service Discovery.
2038	Get the admin builder.
2039	Returns the context meta builder.
2040	Adds an endpoint service with a service management bundle.
2041	Adds an endpoint service with the given alias and service management bundle.
2042	Adds an endpoint service.
2043	Adds an endpoint service to the managed service.
2044	Returns the service endpoint server.
2045	Configure the interceptors.
2046	Destroy a session.
2047	Load the service.
2048	Delete a key.
2049	Handle a request.
2050	Process the message queue.
2051	Send the item to the event manager.
2052	Starts the queue.
2053	Returns the request object.
2054	Removes the given event connector from the list of event connectors.
2055	Sends an event to all connected event connectors.
2056	Flushes all event connectors.
2057	Read the config from the classpath or from the system.
2058	Register a handler callback for a client.
2059	This method is called before the method call is called.
2060	Extract request information and put it into mapped diagnostic context.
2061	Extract headers from the request.
2062	Handle a REST call.
2063	Handle a response from a service to a response.
2064	Adds a request to the outstanding request map.
2065	Adds an integer to the end of the list.
2066	Adds a value to the list.
2067	Adds the given values to the end of the array.
2068	Sets the element at the given index.
2069	Reduce the values by a function.
2070	Before method sent.
2071	Notify the listener that a change has been received.
2072	Add default serializers to the given Kryo.
2073	Get the parseFrom method.
2074	Verify that there are no leading zeroes.
2075	Parse a field name.
2076	Handles an unexpected value.
2077	Skips a string value.
2078	Matches a token.
2079	Decode a base64 encoded string.
2080	Checks if the given string is a valid ID.
2081	Checks if the given array contains only the id characters.
2082	Write a string to the output stream.
2083	Prepend or write the character to the end of the buffer.
2084	Appends a character escape character to the output.
2085	Set the conversion properties.
2086	Converts a thrift class to a Pig script.
2087	Converts a schema to a string representation.
2088	Open the index.
2089	Returns the progress of the current path iterator.
2090	Converts a message to a tuple.
2091	Converts a protobuf message to a protobuf tuple.
2092	Converts a single field to a single - item tuple.
2093	Coerces the given field value to the appropriate Pig type.
2094	Converts a message descriptor to a schema.
2095	Convert a message field descriptor to a field schema.
2096	Convert a single field descriptor to a field schema.
2097	Converts the input files to a Pig script.
2098	Converts a message descriptor to a Pig script.
2099	Converts a message to a PigScript.
2100	Convert a single field to a PigScript.
2101	Returns a TStructDescriptor for the given TBase class.
2102	Extract the enum map from the given enum class.
2103	Creates a new filter that filters out directories that start with index -.
2104	Returns true if the given proto class is a dynamic proto message.
2105	Returns a TypeRef for the given proto class name.
2106	Returns the progress of the animation.
2107	Serialize the message.
2108	Set the input format class.
2109	Sets the thrift class configuration.
2110	Write a list of strings to a configuration.
2111	Read a String list from a configuration.
2112	Write a list of strings to a configuration file as Base64 encoded string.
2113	Read a string list from a configuration as base64.
2114	Verify that the given class is a Thrift class.
2115	Gets the field value of the given object.
2116	Gets the field value of the given class.
2117	Returns the value of the given field.
2118	Writes a field without tag.
2119	Converts a tuple to a message.
2120	Converts a tuple field to a single field.
2121	Adds a field to the descriptor.
2122	Converts a Pig type to a Protobuf type.
2123	Converts a tuple to a thrift object.
2124	Converts a pig value to a thrift value.
2125	Creates a new instance of the given class.
2126	Sets the delegate for the combined input format.
2127	Find splits for all the input paths.
2128	Sets the input paths.
2129	Get the input paths.
2130	Adds a new input split to the list of splits.
2131	Returns the list of hosts that are used to connect to the server.
2132	Evaluate the delimiter.
2133	Create a resource field schema.
2134	Reads the contents of the given input stream into the given output stream.
2135	Returns the next tuple.
2136	Creates a standard Base64 object.
2137	Creates a new ProtobufConverter instance for the given proto class.
2138	Reads the next message from the stream.
2139	Reads the next proto blob from the current block.
2140	Reads the next proto bytes from the stream.
2141	Creates a new TaskAttemptContext instance.
2142	Creates a new MapContext instance.
2143	Creates a new instance of the given type.
2144	Creates a new instance of this class.
2145	Creates a new instance of this class.
2146	Gets the builder for the given thrift class.
2147	Map a proto message builder to a message builder.
2148	Creates a protobuf builder for a map field.
2149	Resolves the message type name from the given descriptor.
2150	Convert a thrift object to a message.
2151	Convert a thrift object to a message.
2152	Build a map entry message.
2153	Map the protoMessageType of the given field to a protobuf message type.
2154	Walks a path recursively.
2155	Collect all files in the given path and add them to the given list.
2156	Returns the size of the directory.
2157	Sets the column number in the configuration.
2158	Update job conf for local settings.
2159	Returns the parse method for the given class.
2160	Parse a message from the given input stream.
2161	Parses a message from the given stream.
2162	Put the next tuple into the JSON file.
2163	Sets the class configuration for the job.
2164	Sets the type ref for the class.
2165	Check the container size.
2166	Sets the pattern of the image.
2167	Convert a word to underscore.
2168	Returns the ordinal representation of the given integer.
2169	Creates a new ProtobufWritable instance of the given type.
2170	Creates a new instance of LzoW3CLogInputFormat.
2171	Set the output format class.
2172	Matches the given word against this pattern.
2173	Replaces the given word with the given replacement.
2174	Pluralizes a word.
2175	Returns true if the given word is uncountable.
2176	Get the output stream for the job.
2177	Verify that the given WritableConverter has a default Writable type.
2178	Creates a new instance of the given type.
2179	Returns the class with the given name.
2180	Get the Thrift type ref for the given thrift class name.
2181	Find the columns to read from the given field ids.
2182	Sets the class configuration for the thrift output format.
2183	Execute HTTP request.
2184	Add authorization header to request
2185	Validates the response.
2186	Parses a thing from a JSON object.
2187	Parses a JSON string and returns a list of mixed elements.
2188	Format comma separated list.
2189	Waits for the next request to complete.
2190	Add basic authentication header.
2191	Refresh the token.
2192	Print a list of comments.
2193	Convert a JSON object to an Integer.
2194	Convert a JSON object to a Double.
2195	Converts a JSON object to a Boolean.
2196	Convert a JSON object to a Long.
2197	Parses the comments in the given JSON object recursively.
2198	Parses a JSON string and returns a list of subreddits.
2199	Generates a signature for an endpoint using the given parameters and the client secret key.
2200	Sorts the given map by their keys.
2201	Get an OEmbed Information object.
2202	Create an instance of the given class using the given method name and parameters.
2203	Converts the response to an object.
2204	Checks that both objects are not null.
2205	Checks that the given string is not null and not empty.
2206	Validates that the given URL is a valid URL.
2207	Check that the given URL is valid for OAuth callback.
2208	Get the Instagram client for the given access token and IP address.
2209	Configure connection settings.
2210	Returns the body contents as a String.
2211	Pretty print the JSON response.
2212	Set the callback URL for the subscription.
2213	Sets the client id for the subscription.
2214	Sets the client secret for the subscription.
2215	Sets the subscription type.
2216	Verify the token for the subscription.
2217	Sets the aspect of the subscription.
2218	Sets the latitude of the subscription.
2219	Set the longitude of the subscription.
2220	Sets the radius of the subscription.
2221	Delete a subscription.
2222	Delete all subscriptions.
2223	Get the list of subscriptions.
2224	Form - url - encode a map.
2225	Percent encodes a string.
2226	Appends the given parameters to the given URL.
2227	Concatenates the given map of parameters sorted by percent encoded.
2228	Converts a query string to a map.
2229	Throw an InstagramException with the error metadata.
2230	Adds a trade to the trade.
2231	Increase the length of the cache to the given index.
2232	Calculates the maximum drawdown value for a series.
2233	Returns the indexes of the begin indexes of the split.
2234	Computes the regression line.
2235	Operates on the order at the given index.
2236	Builds a chart time series.
2237	Returns a random decimal between min and max.
2238	Generates a random tick.
2239	Increments the acceleration.
2240	Calculates the SAR for the given index.
2241	Calculate the price ratio of the trade.
2242	Fill the values list to the end of the time series.
2243	Load the Logback configuration file.
2244	Creates a OHLC dataset from a TimeSeries.
2245	Creates a dataset for the close price indicator.
2246	Adds the cash flow axis.
2247	Display a chart.
2248	Removes ticks that are greater than the maximum number of ticks.
2249	Build a list of empty ticks.
2250	Destroy the group.
2251	Called when the activity is saved to a Bundle.
2252	Signal the given event.
2253	Watches the file and returns a CompletableFuture that is completed asynchronously.
2254	Registers a directory.
2255	Returns the class loader for the main class.
2256	Adds the relevant plugin dependencies to the classpath.
2257	Add the project dependencies to the classpath.
2258	Resolves the dependencies of the executable.
2259	Finds the executable artifact.
2260	Handle working directory.
2261	Get the start date of the calendar service.
2262	Returns the bounds of the stops in the feed.
2263	Checks the distance and time of the stop time.
2264	Loads the given table.
2265	Returns the size of the table.
2266	Sets the field to null.
2267	Copy all tables in the feed.
2268	Checks if a table exists in the database.
2269	Adds any editor specific fields to the table.
2270	Register a snapshot namespace in the database.
2271	Returns the trip id.
2272	Execute the next batch of records.
2273	Clean up the ZIP file system
2274	Export a table to a CSV file.
2275	Registers an error for an entity.
2276	Registers an error for an entity.
2277	Export a feed to a file.
2278	Load the Gtfs file.
2279	Validates a feed.
2280	Deletes all tables for the given feed namespace.
2281	Creates a DataSource for the given database connection.
2282	Adds an error info entry to the error info map.
2283	Creates a new GTFSError for a line.
2284	Creates a new GTFSError for an entity.
2285	Creates a new GTFSError for a feed.
2286	Get the average speed for a pattern
2287	Get average speed for a collection of trips.
2288	Get the start time for the given trips.
2289	Get the end time for a set of trips.
2290	Returns the distance between the current trips and the pattern.
2291	Returns the average stop spacing for a given pattern.
2292	Copy entity to SQL table.
2293	Creates a ValidateFieldResult from a ValidateFieldResult.
2294	Returns the number of errors in the table.
2295	Commit the transaction.
2296	Validate and convert a string to a valid HMMS string.
2297	Compares this error with the other one.
2298	Returns the distance between the points in a trip geometry.
2299	Creates a field definition.
2300	Creates a GraphQLFieldDefinition that can be used to group rows by a given column.
2301	Returns the original int array.
2302	Get the trip for a stop with a given date.
2303	Get the average headway for a stop
2304	Get the headways for a stop
2305	Get the headway for a stop by route
2306	Get the JSON node from the given string.
2307	Create a new record.
2308	Update the stop times for a pattern stop.
2309	Checks if all references exist in the table.
2310	Verify that the interior stops are not changed.
2311	Insert blank stop times for the given trip ids.
2312	Deletes the entity with the specified id.
2313	Execute the given statement and return the new ID.
2314	Get the number of rows in a table
2315	Returns the set of tables that are referenced by the specified table.
2316	Get the value for the given id.
2317	Put a feed file to the feed store.
2318	Put a feed file into the GTFS.
2319	Returns true if the given date is active on the calendar.
2320	Initializes the GTFSGraphQL instance.
2321	Returns the list of editor fields.
2322	Returns the list of required fields.
2323	Returns the list of fields that are required or optional.
2324	Creates the SQL table.
2325	Generate insert sql.
2326	Returns a comma separated list of field names.
2327	Generate update sql.
2328	Generate the select SQL.
2329	Generate the SQL to select all existing fields from a table.
2330	Generate delete sql.
2331	Create a new table in the database.
2332	Creates a table and copies the stop times from the given table.
2333	Returns the index of the key field in the given fields array.
2334	Ensure that the given namespace is valid.
2335	Returns the index of the field with the given name.
2336	Returns the set of all the keys in the map.
2337	Loads a GTFS feed from a file.
2338	Find patterns for all trips.
2339	Get the distance between a trip and a straight line.
2340	Get the trip speed.
2341	Get the stop times for a given stop id.
2342	Returns a list of services for a given date.
2343	Get the agency timezone for a stop
2344	Create a list of Pattern objects for each TripPatternKey.
2345	Set the idle timer to be used when the activity is idle.
2346	Enable the receiver.
2347	Report a new idle state.
2348	Adds a job to the set.
2349	Returns true if the job id is contained in the job set.
2350	Removes a job from the set.
2351	Reschedule a failed job.
2352	Clears the cache.
2353	Called when a job is started.
2354	Called when a stop job is received.
2355	Checks whether the job can stop tracking.
2356	Writes a string value to the mapping of the underlying Bundle replacing any existing value for the given
2357	Sets the array value associated with the given key in this bundle.
2358	Returns the value mapped by the given key or the default value if the key is not found
2359	Put a PersistableBundle into the Bundle.
2360	Write this notification to a Parcel.
2361	Returns the height of the view.
2362	Print a string to the log.
2363	Check the properties for validity.
2364	Check the properties of the request.
2365	Prepare for export.
2366	Sets a property.
2367	Convert a string to HTML entities.
2368	Get the real path from the servletUrl and extUrl
2369	Verify the message against the provided secret.
2370	Verify the parameters.
2371	Validates the request.
2372	Launch the provider.
2373	Build the tool consumer profile.
2374	Validate the service offered list of tool services.
2375	Validate the capabilities of the specified consumer.
2376	Adds custom properties to launch.
2377	Toogle the list view.
2378	On list scroll.
2379	Converts a SafeUrl to a proto.
2380	Converts a SafeStyle to a proto.
2381	Converts a SafeScript to a proto.
2382	Converts a style sheet to a proto.
2383	Converts a TrustedResourceUrl to a proto.
2384	Converts SafeHtml to a proto.
2385	Wrap angle in radians.
2386	Round a number to the specified number of decimals.
2387	Lerp function.
2388	Slerp the two quaternion vectors.
2389	Bi - Lerp function.
2390	Lerps a triangle.
2391	Blend a color with a color and b.
2392	Clamp a value to the given range.
2393	Returns the inverse square root of the given double.
2394	Casts an object to a Float.
2395	Casts an object to a Byte.
2396	Casts an object to a Short.
2397	Casts an object to an Integer.
2398	Casts a Object to a Double.
2399	Casts a Object to a Long.
2400	Casts an object to a Boolean.
2401	Returns the mean of the given values.
2402	Modulo a number by a number of times div.
2403	Returns the shift of the given multiplicand.
2404	Multiply this quaternion by the given scalar.
2405	Divides this quaternion by the given scalar.
2406	Rotate this quaternion by the given x y and z coordinates.
2407	Returns the length of this vector.
2408	Normalize this quaternion by the length of the quaternion.
2409	Creates a quaternion from an imaginary value.
2410	Creates a new quaternion from the given x y z and w.
2411	Convert the axes angles to a Quaterniond.
2412	Convert the axes angles to radians in radians in radians.
2413	Creates a quaternion from a angle and a 3 - dimensional axis.
2414	Creates a quaternion from a angle in degrees.
2415	Returns the minimum axis of the curve.
2416	Multiply this Complexf by the given x and y.
2417	Divides this Complexf by the given x and y.
2418	Rotate this vector by the specified x and y coordinates.
2419	Normalize this complex to the normalized form.
2420	Converts this quaternion to a new quaternion.
2421	Creates a new Complexf object from the specified x and y coordinates.
2422	Creates a new Complexf object from the given angle.
2423	Returns the maximum axis of the curve.
2424	Returns a hash code for a double.
2425	Adds the given values to this quaternion.
2426	Multiply this quaternion by a scalar value.
2427	Divides this quaternion by a scalar.
2428	Returns the axis of this vector.
2429	Returns the angle of the plane in radians.
2430	Creates a Quaternion from an imaginary value.
2431	Creates a new quaternion from the given x y z and w.
2432	Returns a quaternion from the axes angles in degrees.
2433	Convert the axes angles to radians.
2434	Creates a quaternion from a angle and a 3 - dimensional axis.
2435	Creates a quaternion from an angle and radians.
2436	Multiply this complex number by the given x and y.
2437	Divide this complex number by the given two complex numbers.
2438	Rotate this vector by the specified x and y coordinates.
2439	Converts this quaternion to a quaternion.
2440	Creates a complex number from the given x and y.
2441	Creates a complex number from the given angle.
2442	Move a child view to the right.
2443	Move a child view to the right.
2444	Sets the span of the given object to the builder.
2445	Reduces the constraint formulas in the bound set.
2446	Transforms the type parameters of this type.
2447	Creates a symbol reference that is solved by the given symbol declaration.
2448	Returns a symbol reference that is not solved by the given class.
2449	Returns true if the given type is a proper type.
2450	Returns the type that is the least upper bound of the given set of types.
2451	Returns the ground target type of the given lambda expression.
2452	Returns a reference type that is not a wildcard type.
2453	Returns a type that is a intersection of the given types.
2454	Solves a dot expression type.
2455	Solve an object creation expression.
2456	Solves a method call expression.
2457	Find the type of the given lambda expression.
2458	Returns the name of the class or interface type.
2459	Returns the type of this in the given node.
2460	Exit the given statement.
2461	Returns true if the given statement can complete normally.
2462	Solves a type in a given type.
2463	Solves a method in a type.
2464	Creates a new value from a value declaration.
2465	Returns true if the given invocation is a partial invocation of the given method.
2466	Tests whether the given method call is more specific than the given method.
2467	Returns true if the given expression appears in the assignment context.
2468	Predicts a feature.
2469	Load the model from a model reader.
2470	Returns the index of the leaf node in the tree.
2471	Returns the value of the leaf node at the given root_id.
2472	Unflattens the JSON tree.
2473	Flatten the source object into a JSON string.
2474	Flatten the source into a map.
2475	Creates a view of the given lists.
2476	Creates a stream that emits invalidations of the given observable.
2477	Repeat the given observable on invalidation.
2478	Returns a stream of all the animation frames.
2479	Merge the given set of events into one.
2480	Wrap a list in a suspendable ObservableList.
2481	On the current thread while the current thread is not in the queue.
2482	Observe the given observer.
2483	Returns a copy of this metadata.
2484	Removes the prefix from the given string.
2485	Configures the digester to be used for the configuration.
2486	Process class mapping annotations.
2487	Join the values with the given separator.
2488	Detects the device scan.
2489	Detects if the device is an iPhone.
2490	Detects if the browser is Webkit.
2491	Detects if the device is a Windows Mobile device.
2492	Detects if the device is a BlackBerry 10 phone or not.
2493	Detects S60 OSS browser.
2494	Detects if the operating system is a Palm OS.
2495	Detects if the user agent is an operating system operating system and is a Android phone.
2496	Detects if the operating system is an operating system Android or a tablet.
2497	Detects the Maemo tablet.
2498	Detects if the device is a mobile device.
2499	Detects if the device is a tier iphone.
2500	Detects if the device is a other phone device.
2501	Checks if the given value is an EL expression.
2502	Checks if the given string contains an EL expression.
2503	Build the script to be used for the script.
2504	Creates an ElMethod object with the specified retrieve and submit parameters.
2505	Checks if the given string contains a field descriptor.
2506	Copy the response headers from the proxy response to the servlet response.
2507	Encodes the given CharSequence to a URI query string.
2508	Returns the URI of the URL.
2509	Build a query string from a URL.
2510	Returns the first value of the parameter with the given name.
2511	Returns the values of the named parameter.
2512	Add parameters from a URL.
2513	Derive the view id from the given raw view id.
2514	Returns the parser for the URL pattern.
2515	Returns the path validators for the given path parameter.
2516	Creates a new QueryStringBuilder from the given encoded string.
2517	Extract query string from url
2518	Adds a parameter to the request.
2519	Gets the list of dispatcher type providers.
2520	Returns the number of negations in the given context.
2521	Adds a parameter to the navigation.
2522	Build standard outcome.
2523	Process a class entry.
2524	Returns a query literal.
2525	Add the given parameters to the excluded query.
2526	Builds a URL from the given UrlMapping.
2527	Sends an error to the given response.
2528	Visit a class.
2529	Prepend the context path to the url.
2530	Removes the context path from the URI.
2531	Translate a string.
2532	Build the DynaViewId from the given facesServletMapping.
2533	Process the DynaView.
2534	Returns the required type for the given class.
2535	Creates a proxy for the given annotation.
2536	Returns the filtered fields of the given class.
2537	Returns all fields of the given class.
2538	Put a value into the cache.
2539	Removes the value associated with the given key from the map.
2540	Loads the agent from the file system.
2541	Checks if the agent is available.
2542	Copy a PlexusIoResource to a file.
2543	Checks if the given resource is the same as the given file.
2544	Adds a web - inf directory to the archive.
2545	Initialize the zip output stream.
2546	Adds the given file to the archive.
2547	Returns the default manifest.
2548	Adds a section to the manifest.
2549	Writes the contents of this buffer to the given PrintWriter.
2550	Returns the warnings of the main section.
2551	Returns the existing section with the given name.
2552	Copy a file to a directory.
2553	Adds a new manifest to the configured manifest.
2554	Zip a file.
2555	Clean up the manifest.
2556	Resets the configuration.
2557	Write the index like list.
2558	Grabs all files and directories from a zip file.
2559	Decompress a stream.
2560	Compress the source file to the destination file.
2561	Merge the attributes in the given section into the target.
2562	Sets the application. xml file for the deployment.
2563	Adds an archive to the archive.
2564	Adds a directory to the archive.
2565	Compress the source file to the destination file.
2566	Adds the resources to the archive.
2567	Add parent directories to the archive.
2568	Adds a zip entry to the archive.
2569	Creates an empty ZIP archive.
2570	Reset the archive.
2571	Compresses the given input stream to the given output stream.
2572	Compress the contents of the given resource to the given output stream.
2573	Sets the maximum size of the dynamic table.
2574	Decode a UL128 integer from the input stream.
2575	Returns the index of the static field with the given name.
2576	Returns the index of the header field with the given name and value.
2577	Creates a map of static fields.
2578	Returns the length of the given byte array.
2579	Returns the length of the header.
2580	Adds a header field to the header fields array.
2581	Sets the capacity of the header.
2582	Encode a header field.
2583	Set the maximum size of the header table.
2584	Encode an integer.
2585	Encode a string to the output stream.
2586	Encode a literal.
2587	Ensure that the buffer is at least at least the specified size.
2588	Returns the header field at the given index.
2589	Returns the header entry for the given name and value.
2590	Returns the index of the field with the given name.
2591	Adds a new header field to the table.
2592	Returns the hash value of the given name.
2593	Decodes a byte array into a byte array.
2594	Set the default script names.
2595	Asserts that two shorts are equal.
2596	Asserts that two shorts are not equal to the given short.
2597	Asserts that the given short value is greater than the given expected value.
2598	Asserts that the given float is greater than the given float.
2599	Asserts that the given character is equal to the given expected character.
2600	Asserts that the specified character is not equal to the specified character.
2601	Asserts that the specified character is less than the specified character.
2602	Asserts that the specified character is not greater than the specified character.
2603	Asserts that the specified character is greater than the specified character.
2604	Asserts that two characters are not less than or equal to the specified character.
2605	Asserts that the character is lower case.
2606	Asserts that the character is uppercase.
2607	Asserts that the given array has the expected size.
2608	Asserts that the given array contains the given values.
2609	Asserts that the map contains the given key.
2610	Asserts that the map does not contain the given key.
2611	Asserts that the map contains the given value.
2612	Asserts that the map does not contain the given value.
2613	Asserts that the map does not contain duplicate values.
2614	Asserts that two numbers are equal.
2615	Asserts that the given BigDecimal is zero.
2616	Asserts that the given BigDecimal is not zero.
2617	Asserts that the given BigDecimal is positive.
2618	Asserts that the given BigDecimal is less than zero.
2619	Asserts that the actual value is equal to the expected value.
2620	Asserts that the array contains the specified byte value.
2621	Asserts that two numbers are not equal.
2622	Asserts that the given double is not greater than the given double.
2623	Asserts that the given double is less than the given double.
2624	Asserts that the given double is not less than the given double.
2625	Asserts that the given byte array contains only the given values.
2626	Asserts that the given byte array contains the given sequence.
2627	Asserts that two objects are equal.
2628	Asserts that two objects are not equal.
2629	Asserts that two objects refer to the same instance.
2630	Asserts that two objects are not the same.
2631	Asserts that the given array does not contain the given values.
2632	Asserts that the given char array is sorted.
2633	Returns a matcher that matches the specified name.
2634	Matcher that matches a String that is not empty.
2635	Get the middle name for prefixing as accessor mutator java beans spec compliance.
2636	Checks if the given field exists in the given class.
2637	Returns a list of annotation resolvers to be used for the given context.
2638	Expects the given status to be one of the given statuses.
2639	Reduce the name of a class based on the suffix.
2640	Get a boolean property.
2641	Filter the response.
2642	Returns an array of annotation names as strings.
2643	Send the request to the resource.
2644	Process the request.
2645	Handles a password authentication response.
2646	Handles the authorization decision.
2647	Process the end - user authorization request.
2648	Collect claims from the given subject.
2649	Handles the authorization decision task.
2650	Issue a user s information to the Authlete.
2651	Compute the login id from the AuthorizationResponse.
2652	Handles the request.
2653	Handles the request.
2654	Returns the service owner credentials.
2655	Returns the service credentials.
2656	Get the JAX - RS client.
2657	Creates a javax. ws. rs. client. Client.
2658	Sets the connection timeout.
2659	Set the read timeout for the given client.
2660	Executes the given API call.
2661	Handles the request.
2662	Process the request.
2663	Process the request.
2664	Handles the request.
2665	Process the authorization request.
2666	Check if the current user has not been logged in.
2667	Process the request.
2668	Extract the client certificate from the request.
2669	Update implied - repository stores.
2670	Generates a X509Certificate from a KeyPair.
2671	Returns the name of the node with the given prefix and suffix.
2672	Generate the relationship file for the given transfer.
2673	Commits the changelog entries to the git repository.
2674	Adds a snapshot to the data object list.
2675	Returns the remote repository name.
2676	Get the next name in the list.
2677	Send a message to Kafka.
2678	Sends a message to a topic.
2679	Send a message to Kafka.
2680	Returns a set of cache names.
2681	Writes the sealed content to the given file.
2682	Reads a zip file and passes it to the consumer.
2683	Get the target key.
2684	Checks if the given path is present in the mask patterns.
2685	Removes obsolete files from the given item.
2686	Parse the repo name.
2687	Checks if a store exists.
2688	Load the artifact store from disk and store the change summary.
2689	Load the store from disk and store type. json and store. json.
2690	Create a hosted repository by arc.
2691	Creates a new http client context for the given site.
2692	Creates a new http client for the given site.
2693	Perform a Koji repair.
2694	Handles group membership changes.
2695	Sets the system properties for the Keycloak client.
2696	Get the file ranges from the given stream.
2697	Read a list of messages from the given stream.
2698	Creates a table if it does not exist.
2699	Deletes the table.
2700	Deletes the table if it exists.
2701	Uploads the given permissions to the storage.
2702	Download permissions from the table.
2703	Apply base defaults.
2704	Get the Extended Error Information from an input stream.
2705	Generate an AccessCondition that will be applied to the given sequence number.
2706	Generate an AccessCondition that is a Condition that is true if the sequence number is less than
2707	Generate an AccessCondition that is a Condition that is a Condition that is a Condition that is
2708	Apply the condition to the given HTTP request.
2709	Apply the source condition to the given request.
2710	Apply the append condition to the given request.
2711	Apply the lease condition to the given request.
2712	Apply the sequence condition to the given request.
2713	Verify if the ETag is valid for the given ETag and Last - Modified - Since header.
2714	Combine two filters.
2715	Sets the storage URI.
2716	Write shared access policies to a stream.
2717	Generate a request body for a message.
2718	Add the canonicalized headers to the given string.
2719	Appends a canonicalized element to the given builder.
2720	Canonicalizes the HTTP request.
2721	Canonicalizes the request.
2722	Compute the HMAC256 hash of the given string.
2723	Sign a table request.
2724	Returns the first message in the given iterable or null if none.
2725	Adds a message to the queue.
2726	Clears the queue.
2727	Creates a queue.
2728	Creates a queue if it does not exist.
2729	Deletes the queue.
2730	Deletes the queue if it exists.
2731	Deletes a message.
2732	Download the attributes of the queue.
2733	Returns true if the queue exists.
2734	Peek a message from the queue.
2735	Peeks a number of messages from the queue.
2736	Peek a number of messages from the queue.
2737	Retrieves a single message from the queue.
2738	Retrieves a number of messages from the queue.
2739	Retrieves a list of messages from the queue.
2740	Updates a message s visibility.
2741	Updates a message in the queue.
2742	Uploads the given permissions to the queue.
2743	Download the permissions of the queue.
2744	Returns the transformed address.
2745	Get the metrics table for the given storage service and location.
2746	Get the minute metrics table.
2747	Returns the message content as a byte array.
2748	Returns the message content as a string.
2749	Get a list of files and directories from an input stream.
2750	Apply continuation to query builder.
2751	Creates a merge request.
2752	Query the table using the given query builder and identity.
2753	Update a table.
2754	Set the ACL for the given table.
2755	Serialize the given ServiceProperties to a byte array.
2756	Write retention policy.
2757	Write CORS properties.
2758	Write metrics properties.
2759	Write logging properties.
2760	Aborts a copy.
2761	Add a share snapshot query parameter.
2762	Creates a PUT request to the given URI.
2763	Create a share request.
2764	Delete a share.
2765	Get the ACL for the given file.
2766	Get a file.
2767	Get the properties of a file.
2768	Get the file ranges.
2769	Get the properties of a share.
2770	Get the share stats.
2771	Create a UriQueryBuilder for the share resource.
2772	Get properties.
2773	List shares.
2774	Set share metadata.
2775	Sets the metadata for the given directory.
2776	Creates a directory request.
2777	Delete a directory.
2778	Get the properties of a directory.
2779	List all files and directories.
2780	Create a PUT request.
2781	Create a PUT request to the given URI with the given operation context.
2782	Resize the given file.
2783	Set the metadata for the given URI.
2784	Set the file metadata.
2785	Creates a REST API request to share a snapshot.
2786	Sets the file properties.
2787	Closes the stream.
2788	Dispatches a read request to the parent file.
2789	Reads a single byte from the stream.
2790	Read bytes from the stream.
2791	Resets the file to its initial state.
2792	Skips the specified number of bytes from the current position.
2793	Runs a sample of the sample.
2794	Runs the sample which is called when the queue gets started.
2795	Runs a sample of the table getting started.
2796	Runs the table payload format sample.
2797	Output a text to the view.
2798	Print an exception to the textView.
2799	Prints the start info of a sample.
2800	Prints the complete information about the sample.
2801	Canonicalizes the given connection.
2802	Returns the last request result.
2803	Checks if the current item is a valid log type.
2804	Updates the current iterator.
2805	Start a copy of a blob.
2806	Start a copy of a blob.
2807	Start a copy of a file.
2808	Start a copy of a file.
2809	Start a copy of the given source URI.
2810	Start a copy of the file.
2811	Creates a new file.
2812	Creates a new file.
2813	Delete empty file on exception.
2814	Download the file as a text file.
2815	Download the file ranges.
2816	Open a new write existing file.
2817	Open a new file output stream for writing.
2818	Open a new file stream.
2819	Uploads a file to the server.
2820	Uploads a file to the server.
2821	Uploads a text file to the storage.
2822	Upload a text file.
2823	Uploads a range of bytes from the given InputStream to the storage.
2824	Upload a range of bytes from the given stream.
2825	Put a range.
2826	Resize the file.
2827	Uploads the given stream to the storage.
2828	Uploads a file to the storage.
2829	Get the parent name from the given URI.
2830	Gets the share.
2831	Appends a path to a URI.
2832	Get the blob name from the given URI.
2833	Get canonical path from credentials.
2834	Returns the container name from the given resource address.
2835	Returns the filename from the given resource address.
2836	Get the share name from the given resource address.
2837	Returns the table name from the given resource address.
2838	Get the resource name from the given URI.
2839	Returns the container URI for the given blob address.
2840	Get the share URI for the given file address.
2841	Parses a query string into a map of key - value pairs.
2842	Generate a shared access signature hash for a blob and file.
2843	Generate a shared access signature hash for a queue.
2844	Generate a shared access signature hash for a table.
2845	Creates a new directory.
2846	Creates a new file if it does not already exist.
2847	Deletes the file if it exists.
2848	Checks if the file exists.
2849	Returns a list of all files and directories.
2850	Gets the CloudFileShare associated with this file.
2851	Clears all messages from the queue.
2852	Delete a message.
2853	Download the attributes of the given queue.
2854	List the queue.
2855	Get a request to peek messages.
2856	Retrieve messages from the queue.
2857	Update a message.
2858	Set the ACL for the given queue.
2859	Get the ACL for the given queue.
2860	Split a string into a list of strings.
2861	Split a string into an EnumSet of CORS HTTP methods.
2862	Updates the key.
2863	Gets the HMAC - SHA256 Mac.
2864	Validate an IP address.
2865	Decodes a string into a byte array.
2866	Encodes a byte array into a string.
2867	Validate that the given string is a base64 encoded string.
2868	Validates the container name.
2869	Validates the given blob name.
2870	Validates the given file name.
2871	Validates the given table name.
2872	Returns a list of shares with the given prefix.
2873	List shares with a prefix.
2874	List all shares in the current account.
2875	List shares with prefix segmented.
2876	Lists shares with the given prefix.
2877	Disable the reflected entity cache.
2878	Get the date header value from the request.
2879	Gets the metadata from the request.
2880	Returns true if the request is encrypted.
2881	Get extended error information from the given reader.
2882	Parses the error details from the request.
2883	Parses a JSON error message and additional details.
2884	Get the access identifiers from an input stream.
2885	Get the copy state from the HTTP request.
2886	Get the file share attributes from the HTTP request.
2887	Get the FileDirectoryAttributes from the given HTTP request.
2888	Get the file attributes from the request.
2889	Returns the HTTP verb for the given operation.
2890	Fires an event to all registered listeners.
2891	Fire a sending request event.
2892	Fire a response received event.
2893	Fire an error receiving response event.
2894	Fire a request completed event.
2895	Fire a retrying event.
2896	Asserts that the continuation type of the given continuation token is the expected type.
2897	Asserts that the given value is in the given range.
2898	Asserts that the given value is greater or equal to the given minimum value.
2899	Validate the max execution timeout.
2900	Returns the remaining timeout in milliseconds.
2901	Determine if the given URI is a path - style URI.
2902	Checks if the URI is a DNS name.
2903	Format the given etag string.
2904	Generate a new unexpected storage exception.
2905	Get the standard header value for the given header name.
2906	Parse a date from a string using the specified pattern and time zone.
2907	Parse RFC1123 date from string in GMT.
2908	Relativize the base URI to the toUri.
2909	Logs an error response.
2910	Logs the response code and message from the http response.
2911	Removes the last character from the end of the string.
2912	Removes the leading and trailing spaces from the beginning of the string.
2913	Parse a date string.
2914	Returns the location mode for the given result continuation.
2915	Populate the options and apply the default options.
2916	Read a String from the stream.
2917	Read a quoted string.
2918	Read a Boolean from the stream.
2919	Read a Date from the stream.
2920	Read a double.
2921	Read a UUID from the stream.
2922	Read an integer from the stream.
2923	Read a long from the stream.
2924	Read a URI from the input stream.
2925	Reads a character from the stream.
2926	Try to peek a delimiter.
2927	Reads a field from the stream.
2928	Creates a new instance of RetryPolicy.
2929	Returns true if the current segment has more results.
2930	Sets the class of the entity.
2931	Sets the entity resolver.
2932	Write a MIME boundary.
2933	Write a MIME boundary closure.
2934	Write the MIME content type.
2935	Adds a new key - value pair to the query.
2936	Adds the query and fragment to the URI.
2937	Adds a header to the given request.
2938	Creates an HttpURLConnection object for the given URI.
2939	Create a DELETE request.
2940	Get the properties of a service.
2941	Returns the user agent.
2942	Set the metadata for the given URI.
2943	Create a PUT request to the service.
2944	Closes the stream.
2945	Commit the file.
2946	Dispatches a write operation to the underlying file.
2947	Flushes the current buffered bytes to the stream.
2948	Waits for a task to complete.
2949	Writes the specified byte array to the underlying stream.
2950	Writes the contents of the given stream to the underlying storage.
2951	Writes the given data to the output stream.
2952	Returns the DNS name for the given service and base.
2953	Try to configure the dev store.
2954	Try to configure the Cloud Storage account.
2955	Creates a Cloud Analytics client.
2956	Creates a Cloud Blob client.
2957	Creates a CloudFileClient.
2958	Creates a CloudQueueClient.
2959	Creates a CloudTableClient.
2960	Generate a shared access signature for the current account.
2961	Generate the request identity for the operation.
2962	Generate a request identity with a table name.
2963	Initializes the operation.
2964	Materialize the exception.
2965	Post process response.
2966	Parse the error details from the connection.
2967	Deletes the given entity.
2968	Inserts the given entity into the table.
2969	Inserts or merges the given entity into the table.
2970	Inserts or replaces the given entity in the table.
2971	Merge the given entity into this table.
2972	Removes the entity at the given index.
2973	Removes all of the elements from the collection.
2974	Replaces the given entity with the given entity.
2975	Check that the given operation is a single query per batch.
2976	Lock the partition key.
2977	Creates a new file.
2978	Deletes the file if it exists.
2979	Download permissions for the file.
2980	Generate a shared access signature for the given policy.
2981	Uploads the given permissions to the storage.
2982	Uploads the given permissions to the storage.
2983	Returns the URI that represents the file.
2984	Insert a new customer entity.
2985	Creates a batch operation to the table.
2986	This method will perform a basic query on the table service.
2987	Updates the customer with a new phone number.
2988	Deletes the entity.
2989	List all tables.
2990	Generate a list of tables query.
2991	Execute a table query and return a result segment.
2992	Generate an iterator for a table query.
2993	Populate the version 1 log.
2994	Get the queues from the given stream.
2995	Translate a HTTP status code to a StorageException.
2996	Returns a list of all queues in the account.
2997	List all queues with the given prefix.
2998	List queues.
2999	List all queues in the current region.
3000	List queues in the specified prefix.
3001	Add a new XML catalog to the configuration.
3002	Get the unique ID for the passed ID.
3003	Set the phase of the schema.
3004	Set the error handler for this schema.
3005	Set the variable resolver for the schema.
3006	Set the function resolver to use when evaluating the schema.
3007	Set the entity resolver for this schema.
3008	Get the bound schema.
3009	Validate the schema and validate it.
3010	Apply the Schematron validation to the passed XML node.
3011	Resolve the rule content.
3012	Get the schema as minimal if it is not already preprocessed.
3013	Get the passed schema as preprocessed.
3014	Get the preprocessed schema.
3015	Read the schema from the passed resource.
3016	Get the query binding for the passed schema.
3017	Create a pre - processed schema.
3018	Write the passed IPS element to the passed file.
3019	Write the passed IPS element to the passed output stream.
3020	Write the passed IPS element to the passed writer.
3021	Apply Schematron validation to the passed XML resource.
3022	Apply a Schematron resource to the passed node.
3023	Remove a parameter from the query.
3024	Remove all variables from the map.
3025	Get all the failed assertions of the passed Schematron output.
3026	Get all failed assertions that are more than or equal to the passed error level.
3027	Get all successful reports for the passed Schematron output.
3028	Get all successful reports more than or equal to the passed error level.
3029	Get all the failed assertions and successful reports.
3030	Set the error level determinator.
3031	Get the query binding of the passed name.
3032	Get the query binding of the passed name or throw an exception.
3033	Load the XQuery and return a MapBasedXPathFunctionResolver.
3034	Format the message with the given format and argument.
3035	Format the message using the given format.
3036	Check if the passed node is a valid schematron node.
3037	Check if the passed node is a valid Schematron node.
3038	Check if the passed resource is a valid Schematron file.
3039	Check if the passed source is validchematron.
3040	Create a new Schematron provider instance.
3041	Get the XSLT provider for the passed Schematron resource.
3042	Get the error text.
3043	Get the location of the passed element.
3044	Log a warning message.
3045	Read the active element from the XML.
3046	Read the assertion report from the passed XML element.
3047	Read a diagnostic from an XML document.
3048	Read the diagnostic information from the passed XML element.
3049	Read a dir from an XML document.
3050	Read an EMPH element from the passed XML.
3051	Read the extended class from the XML.
3052	Read an include from an XML document.
3053	Read a Schematron Let from an XML document.
3054	Read a name from the passed XML element.
3055	Read the NS from the XML.
3056	Read a PSP from an XML document.
3057	Read a param from the XML.
3058	Read a pattern from the XML.
3059	Read a phase from the XML.
3060	Read a rule from the XML.
3061	Read the schema from the XML.
3062	Read a span from an XML document.
3063	Read the title from the passed XML element.
3064	Read a value of from an XML element.
3065	Create a mapping from the passed schema to the default namespace URI.
3066	Returns a completion stage that is completed when a regex is found.
3067	Mark this request as authorised.
3068	Checks if the request is authorised.
3069	Defer the given action.
3070	Returns the deferred action for the given request.
3071	Execute the given request and return the result.
3072	Checks if the given action is a deadbolt action.
3073	Gets the role names of the given subject.
3074	Checks if the given subject option has the given role.
3075	Filter function that checks if subject is present.
3076	Returns a list of roles.
3077	Returns the permissions as a String array.
3078	Returns a list of all of the arguments in the group.
3079	Restrict the view to the given roles.
3080	Overflow the input buffer.
3081	Underflow method.
3082	Sets the bits in this bitmap to the range specified.
3083	Encodes the given string using the given encoder.
3084	Encodes the given string using the given encoder.
3085	Map a encoder to a name.
3086	Returns the encoder for the given context name.
3087	Appends the specified character array to the specified array.
3088	Encodes the given string using the first encoder and the last encoder.
3089	Flushes the buffer to the writer.
3090	Flushes the left over buffer to the output stream.
3091	Observe a sensor.
3092	Gets the text value of the given property.
3093	Executes a query.
3094	Build a URL to the Sonar resource.
3095	Fetch the sonar status from the given URL and wait for it to be processed.
3096	Fetch the Sonar status from the given URL.
3097	Parse the response into a single QualityGateResult.
3098	Extract build artifacts.
3099	Process uploads.
3100	Compute the identifier for a transfer.
3101	Compute the generic identifier for the given repository.
3102	Validates an artifact.
3103	Check if the given build task has a configuration dependency on this build task.
3104	Checks if the given build task has a direct configuration dependency on this build configuration.
3105	Parses the given JSON PNC config.
3106	Delete the artifacts for the PNC build.
3107	Updates the status of the build set task to the final state.
3108	Get the build task with the given build configuration audited.
3109	Monitor the promotion of the repository.
3110	Merge two graphs.
3111	Read a file as a string.
3112	Reads the given stream as a string.
3113	Start a release for a given milestone.
3114	Cleanup the bpm manager tasks.
3115	Get the task id for a given build id.
3116	Returns a collector that accumulates all elements of the input collection into a flat list.
3117	Cleanup expired temporary builds.
3118	Setup the build repositories for the given build execution.
3119	On RC creation success.
3120	Add listeners to the task.
3121	Creates a mock artifact with the given id.
3122	Sets whether or not the SSL is required.
3123	Delete a temporary build.
3124	Delete a temporary build record set.
3125	Build the build configuration.
3126	Checks if the build set task is empty.
3127	Returns the environment driver for the given system image type.
3128	Predicate to check if build configuration is not archived
3129	Loads the build configurations from the project.
3130	Stores the build result.
3131	Initialize build record builder.
3132	Predicate for finding ProductVersions that have a buildConfiguration with the given id.
3133	Checks if the given url is secure with the CSRF token.
3134	Save artifacts to the cache.
3135	Saves a build config set record.
3136	Returns a set of all build configurations for a given build configuration set.
3137	Checks if the latest successful build record has a rebuilt implicit dependency.
3138	Checks if the latest successful build record has a rebuilt explicit dependency.
3139	Adds a listener to the notification.
3140	Returns the process parameters for the task.
3141	Collect dependent configurations.
3142	Create a build set task.
3143	Create a BuildSetTask.
3144	Fill the build task set with the information from the build configuration.
3145	Get the list of artifacts for a given build record.
3146	Adds a trailing slash to a string.
3147	Deserialize an integer from a string.
3148	Serialize an array of integers to a string.
3149	Adds a ready task to the queue.
3150	Adds a waiting task to the list of unfinished tasks.
3151	Execute the ready tasks.
3152	Returns the task that is currently running on the given build configuration.
3153	Checks if the artifact origin is trusted.
3154	Adds a build record to the build record list.
3155	Removes a build record from the list of build records.
3156	Delete a temporary build record.
3157	Returns all the dependencies of this build.
3158	Adds a dependency to this build configuration.
3159	Removes a dependency from this build configuration.
3160	Retrieve the clone name from the given bcName.
3161	Get the module configuration.
3162	Creates an instance of the given class.
3163	Register the embedded server.
3164	Unregister the embedded server.
3165	Put a value in the store.
3166	Find the extension in the store.
3167	Concatenates the path and the endpoint.
3168	Create a context.
3169	Read a cookie from a string.
3170	Creates a new header with the given name and value.
3171	Creates a new header with the given name and values.
3172	Creates the WebAppContext object.
3173	Executes all registered hooks.
3174	Process the given target object.
3175	Process a field.
3176	Creates a new ApacheHttpClient instance with the default configuration.
3177	Creates a default ApacheHttpClient for the given EmbeddedServer.
3178	Handles the body of the request.
3179	Create the request URI.
3180	Adds the headers to the request.
3181	Handles the form parameters.
3182	Sets the body of the request.
3183	Adds the cookies to the request.
3184	Creates an AsyncHttpClient using the default configuration.
3185	Parse the Java version.
3186	Map a collection of inputs to a list of outputs.
3187	Concatenates two lists of inputs with the given value.
3188	Filter the list by the predicate.
3189	Creates a new response with the given duration status and body.
3190	Creates a new instance of the given class.
3191	Creates a default OkHttpClient for the given EmbeddedServer.
3192	Creates a new OkHttpClient instance with the given server and client.
3193	Returns all fields of a class.
3194	Finds all static fields of a class.
3195	Finds all static methods of a given type.
3196	Find all static fields annotated with the given annotation.
3197	Find all static methods annotated with the given annotation.
3198	Set the value of a field on the given instance.
3199	Gets the value of a field.
3200	Invokes a method on the class.
3201	Formats a date using the specified pattern.
3202	Format a time in a format.
3203	Adds the headers to the request.
3204	Checks if the given string is blank.
3205	Removes the prefix from the given value.
3206	Join a collection of strings with a separator.
3207	Handles query parameters.
3208	Handles the request body.
3209	Adds the form parameters to the request.
3210	Adds the cookies to the request.
3211	Adds the headers to the request.
3212	Append a map to the string builder.
3213	Append a list of values to the string builder.
3214	Append a formatted value to the string builder.
3215	Get the dialog from the distributed cache.
3216	Put the given dialog into the distributed cache.
3217	Removes the dialog from the distributed cache.
3218	Initialize the transaction stack after the load.
3219	Add a transaction to the transaction list.
3220	Print an entry to the output stream.
3221	Loads the directory entry from the given input stream.
3222	Dump the directory entries.
3223	Execute the command.
3224	Configures the given component using the given configuration.
3225	Adds the server dependencies to the class realm.
3226	Build the URLs for the given classpath elements.
3227	Returns the dependencies of the specified server type.
3228	Creates a server artifact.
3229	Gets the server type.
3230	Create a DSML format writer.
3231	Open a format reader from an input stream.
3232	Configures the configuration of the directory server.
3233	Starts the server.
3234	Stops the UnboundID server.
3235	Returns the next LDIFChangeRecord.
3236	Executes the command.
3237	Start the ApacheDS server.
3238	Stops the ApacheDS server.
3239	Creates the root of the partition.
3240	Starts the server.
3241	Stop the OpenDJ server.
3242	Prints an entry.
3243	Returns the server type.
3244	Returns the configuration for the server.
3245	Send a metric to Kairos DB.
3246	Reports a metric to the Kairos server.
3247	Read a geometry type information from the given byte reader.
3248	Reads a point from a byte stream.
3249	Read a line string from a byte stream.
3250	Reads a polygon from a byte stream.
3251	Reads a MultiPoint from a ByteReader.
3252	Reads a multi line string from a byte stream.
3253	Reads a multi polygon from a byte stream.
3254	Read a geometry collection from a byte stream.
3255	Reads a circular string from the given byte reader.
3256	Reads a compound curve from a byte stream.
3257	Reads a polygon from a byte stream.
3258	Reads a polyhedral surface from a byte stream.
3259	Read a TIN from a byte stream.
3260	Reads a triangle from a byte stream.
3261	Write a geometry to the given byte writer.
3262	Write a point to the given byte writer.
3263	Write a LineString to the ByteWriter.
3264	Write a polygon to the ByteWriter.
3265	Write a MultiPoint to the specified ByteWriter.
3266	Write a MultiLineString to the ByteWriter.
3267	Write a MultiPolygon to the ByteWriter.
3268	Write a GeometryCollection to a ByteWriter.
3269	Writes a circular string to the given ByteWriter.
3270	Write a compound curve.
3271	Write a curve polygon.
3272	Write a PolyhedralSurface to a ByteWriter.
3273	Write a TIN.
3274	Write a triangle to the given ByteWriter.
3275	Returns the code for a geometry.
3276	Gets the code for a given geometry type.
3277	Returns the geometry type for the given code.
3278	Returns true if the file exists.
3279	Gcd of a list
3280	Abbreviates a string to a maximum length.
3281	Converts a string to a JsonValue.
3282	Creates a new JSON object.
3283	Parses a JSON string.
3284	Get a string value from a map.
3285	Read a JSON object from a string.
3286	Returns the value of the named property.
3287	Returns an iterator over the members in this object.
3288	Resolve the placeholder for the given property.
3289	Returns the version information of the agent.
3290	Read a JSON array from a string.
3291	Adds a JsonValue to the end of the array.
3292	Sets the value at the specified index in this array.
3293	Gets the value at the given index.
3294	Returns the values of this agent.
3295	Returns an iterator over the values in this set.
3296	Process an event.
3297	Publishes an event to all registered event busses.
3298	Publish an event to the specified event bus.
3299	Removes the specified child from the HTML.
3300	Adds the tag to the tag by WFF ID map.
3301	Adds a new attribute value to the attribute value map.
3302	Invoke the value change listeners for the given shared objects.
3303	Adds all values from the given map to the attribute value map.
3304	Removes the given keys from the attribute value map.
3305	Pushes all the shared objects to the push queue.
3306	Removes the given attribute from the attribute value map.
3307	Adds the given value to the attribute value set.
3308	Adds all values to the attribute value set.
3309	Removes all values from the attribute value set.
3310	Removes all the values from the attribute value set.
3311	Adds a value change listener to the list of value change listeners.
3312	Checks if the attribute contains a valid regular expression.
3313	Sets the color of the color.
3314	Sets the color of the color.
3315	Sets the value of the b property.
3316	Sets the alpha value.
3317	Loads all tag classes.
3318	Returns the first substring of the given string that starts with the given starting with and ending with
3319	Clone the given array.
3320	Checks if the string contains any whitespace.
3321	Removes all whitespace from the given string.
3322	Removes all children from this tag.
3323	Adds the given inner htmls to the list of children.
3324	Remove all children from this element.
3325	Removes the specified child tag from this tag.
3326	Append children to the tag.
3327	Initialize the attributes.
3328	Returns the attribute with the given name.
3329	Marks the owner tag of the given attributes.
3330	Initialize the StringBuilder for the HTML tag.
3331	Returns the children as an array.
3332	Returns the first child of this node.
3333	Returns the number of children in this node.
3334	Returns true if this tag contains the specified child tag.
3335	Returns the opening tag.
3336	Insert the given abstract htmls before this tag.
3337	Set the value of the attribute.
3338	Replaces all values in the attribute value set.
3339	Adds a new WebSocketPushListener to the session.
3340	Removes a listener for a given session id.
3341	Remove from context.
3342	Returns the tag repository.
3343	Sets the nonce for the WFF script tag.
3344	Sets the border style.
3345	Sets the value of the attribute.
3346	Merges the given data arrays into a single ByteBuffer.
3347	Removes all css properties from the attribute value map.
3348	Returns true if the css property is present in the css property list.
3349	Returns the CSS properties as a map.
3350	Find tags by attribute.
3351	Find one tag by attribute.
3352	Returns all attributes in the tag tree.
3353	Builds all attributes.
3354	Returns all attributes from the given tags.
3355	Checks if the given tag exists in the page.
3356	Checks if the given attribute exists in the page.
3357	Build all attributes stream.
3358	Returns the text of the children of this element.
3359	Writes the given bytes to the output stream by chunk.
3360	Sets the context path.
3361	Sets the context file to be used for the embedded tomcat.
3362	Add a context environment and resource from a file.
3363	Creates a filter that matches the given path filter and content type.
3364	Returns a filter that matches either the given filters.
3365	Check that the token is not end of file.
3366	Checks if the token is a line space.
3367	Parse a string.
3368	Scan the input for tokens.
3369	Parses the command line arguments.
3370	Parse the data from a string.
3371	Prints the usage of the command.
3372	Determine the width of the command name.
3373	Creates a zip file from a list of files.
3374	Read the contents of the given file.
3375	Create a filter from a filter string.
3376	Writes a byte to the output stream.
3377	Write a 32 - bit integer to the stream.
3378	Writes n bits to the stream.
3379	Print out all syntactic markers from the target path.
3380	Print a syntactic marker.
3381	Extract the syntactic markers from the given binary path.
3382	Returns the parent of this item.
3383	Returns the parents of this item.
3384	Returns the ancestor of this item.
3385	Appends an array of integers to the beginning of the given array.
3386	Appends two integers to the end of the array.
3387	Appends two int arrays to the beginning of the given array.
3388	Appends the given elements to the end of the given array.
3389	Adds all elements of the given array to the given collection.
3390	Converts a collection of Strings to an array of Strings.
3391	Converts a collection of Integer to an int array.
3392	Sorts the given array and removes duplicates.
3393	Returns the number of unique children in the given array.
3394	Compares two arrays.
3395	Returns the configuration schema for the build.
3396	Create the template extension point.
3397	Activates the default plugins.
3398	Determine the system root.
3399	Determine the local root directory.
3400	Read a configuration file from the given directory.
3401	Returns the module instance.
3402	Starts the module loader.
3403	Activates all modules in the given classloader.
3404	Output the error message for the source.
3405	Returns true if the given task is ready to be run.
3406	Parse options from command line arguments.
3407	Split the config string into a map of options.
3408	Returns the parent of the given child item.
3409	Returns the ancestor of the given child item or null if no such child item is found.
3410	Substitute the given item with the given from item and to item.
3411	Get the content type for the given file.
3412	Get the entry for the given file.
3413	Inspects a file.
3414	Inspects a binary file.
3415	Reads the items from the input stream.
3416	Converts a path. ID into a Trie.
3417	Returns a command descriptor for the Whiley Compiler Collection.
3418	Returns the root of the repository.
3419	Resolve all the package dependencies.
3420	Scan the input string for tokens.
3421	Throws a syntax error.
3422	Log the stack trace.
3423	Returns the indent string.
3424	Execute an instruction.
3425	Adds a string to an array.
3426	Replies the name of the attribute.
3427	Replies the stack map table attribute.
3428	Replies the local variable type table attribute.
3429	Find the stack map entry that matches the given offset.
3430	Find the index of the stack map entry before the given offset.
3431	Find the index of the stack map entry after the given offset.
3432	Build a new stack map.
3433	Update the new object stack map entries.
3434	Update the uninitialized new offsets.
3435	Set the current stack map table.
3436	Print the stack map table.
3437	Create a new StackMapTable attribute.
3438	Converts a type to a class name.
3439	Generate a StackMapType from a Java type.
3440	Generate a Type from a StackMapType.
3441	Creates a method scope local variable.
3442	Calculates the stack types for a method.
3443	Returns a string representation of the access flags of a method.
3444	Convert a InstructionList to a string.
3445	Returns the name of the attribute as a string.
3446	Checks a method.
3447	Checks the given class for methods.
3448	Prints the stack trace of the current thread.
3449	Prints the methods of a class.
3450	Adds a new instruction to the start of the method.
3451	Returns a string representation of a constant in the constant pool at the given index.
3452	Resets the local variables to formals.
3453	Converts a type to a class.
3454	Post - append a new type to the end of the array.
3455	Sets the value of a frame at the given offset.
3456	Inserts a new instruction list at the start of the method.
3457	Print an instruction handle.
3458	Build an instruction list from the given instructions.
3459	Calculate the stack types for the given operand stack.
3460	Find the first character in the string that is toFind.
3461	Reads the specified number of bytes from the stream into the specified byte array.
3462	Flushes the output stream.
3463	Creates a new WebSocket client.
3464	Checks if the ad can be used by this dialog.
3465	Returns the ad view for the given index.
3466	Called when the AdView is failed to load.
3467	Get the ad request.
3468	Returns the number of items to publish.
3469	Get the original position of the content of the given position.
3470	Returns the index of the ad at the given position.
3471	Checks if an ad is available for the given position.
3472	Checks if the given position is in the list of Ads to fetch.
3473	Returns the type of the given element type.
3474	Checks if the given element has a generic type argument of the given type.
3475	Emit a package declaration.
3476	Compress a type.
3477	Begin a new initializer.
3478	End a type declaration.
3479	Emit a single line comment.
3480	Emit an annotation value.
3481	End a method.
3482	Returns the type of the given class.
3483	Emit the modifiers.
3484	Get the PsiClass from the context.
3485	Finds and removes a method with the given name and arguments.
3486	Generates the class.
3487	Make the class implement Parcelable.
3488	Checks if the given element is a class.
3489	Checks if the given type is of the given class.
3490	Returns the first class that is a type of the given type.
3491	Get the package name of the given type.
3492	Returns the binary name of the given type.
3493	Generates the write to Parcel method.
3494	Returns true if the given type is public.
3495	Returns true if the given type has a public constructor with no parameters.
3496	Computes the determinant of 3x3 matrices.
3497	Find classes by criteria.
3498	Creates a generator that generates a matrix that is orthogonal to the current matrix.
3499	Reads a multi bulk reply from the given input.
3500	Get the set of tuples from the server.
3501	Returns the raw key for the given key.
3502	Serialize a hash key to a byte array.
3503	Deserialize a set of typed tuples.
3504	Deserialize hash keys.
3505	Deserialize hash values.
3506	Deserialize a map of hash keys and values.
3507	Deserialize hash list.
3508	Deserialize a set of entries into a map.
3509	Returns a list of GatewayAddresses from a domain address.
3510	Parse the host part of an address.
3511	Parse a port number from an address.
3512	Sets the value of the specified key.
3513	Sync the response.
3514	Get the set of tuples.
3515	Stops the leader election.
3516	Returns the execute info.
3517	Set the quorum of the master.
3518	Check if the given path has permission to lock the given lock type.
3519	Join the parameters of the first and the rest.
3520	Expire the given key at the given milliseconds.
3521	Decrements the value of the specified key by the given integer.
3522	Incr the value of a key by the given integer.
3523	Add a set of members to the sorted set.
3524	Send a ZRANGEBYSCORE command to the set with the given key.
3525	Send a ZRANGEBYSCORE command to the redis server.
3526	Send a slave of NO and ONE.
3527	Sets a configuration parameter.
3528	Gets a bit from the set stored at the given key.
3529	Get range.
3530	Shuts down the event selector.
3531	Processes the main process.
3532	Process the IO requests.
3533	Loop process.
3534	Registers a session with the selector.
3535	Adds a default header to the response.
3536	Checks if the given predicate matches the number of received times.
3537	Gets the value for the given key.
3538	Get the value for the given key.
3539	Adds the encoding to the request.
3540	Creates a new stubbing instance.
3541	Encodes the claims and returns the JWT encoded as a string.
3542	Copy a date to a new date.
3543	Creates a new token.
3544	Returns a dialog that shows the error message.
3545	Connect to Google account if not already connected.
3546	Logout and clear the state of the client.
3547	Invalidate the cache if the cache is not valid.
3548	Returns the status of the Baragon service.
3549	Returns the global state of the service.
3550	Returns the list of load balancer groups.
3551	Returns the base paths that were occupied by the specified load balancer group.
3552	Gets the response for a specific request.
3553	Returns a collection of all queued requests.
3554	Checks that all baragon agents are associated with a target group and that all targets are
3555	Deregisters all removable targets from the target group.
3556	Checks that the target group and the load balancers are on the same VPC.
3557	Checks if the given traffic source has all targets in the target group.
3558	Sets the href of the link.
3559	Creates a new member key from the given context object and name.
3560	Called when a line separator is found.
3561	Flushes the tag.
3562	Extract the content of the tag.
3563	Read the segments lines from the given container.
3564	Creates a regex to match the mustache tag.
3565	Decorates the given delegate with the given mappings.
3566	Unwraps the given instance.
3567	Builds the MustacheEngine.
3568	Adds a template locator to the engine.
3569	Adds a resolver to the engine.
3570	Registers a callback for engine ready events.
3571	Adds a value converter to the engine.
3572	Adds a context converter to the engine.
3573	Capitalizes the given text by the given delimiter.
3574	Appends the given sequence to the template.
3575	Build the source cache.
3576	Push a container to the stack.
3577	Adds a segment to the stack.
3578	Validates the last container segment on the stack.
3579	Splits a helper name into parts.
3580	Decorates the given object with the given delegate type.
3581	Flushes the buffer.
3582	Finds a field by name.
3583	Registers the given helpers.
3584	Registers a helper with the given name.
3585	Read the segments lines before rendering.
3586	Invalidate all fragments with the given key.
3587	Returns the formattable object for the given value.
3588	Returns the local storage.
3589	Gets the session storage.
3590	Clears the storage and caches.
3591	Returns true if the storage contains the specified key.
3592	Put a value into the storage.
3593	Removes the item from the cache.
3594	Returns a StorageKey for an object.
3595	Creates a StorageKey that represents a key that is a key that is a key that is
3596	Creates a serializable key.
3597	Obtains the size of the button from a specific typed array.
3598	Obtains the color which should be used to colorize the button s content from a specific typed array
3599	Obtains the color of the activated button from a specific typed array.
3600	Obtains the color which should be used to highlight the pressed button from a specific typed array.
3601	Obtains the disabled color from a specific typed array.
3602	Obtains the icon which should be used to show the icon of the button from a specific typed
3603	Obtains the duration of the animation which should be used to animate the visibility of the button from
3604	Adapts the shadow to the size of the button.
3605	Adapts the size of the image button.
3606	Adapts the background of the image button.
3607	Creates a background drawable which can be used to display the state list.
3608	Creates the background drawable that will be used to activate the layer.
3609	Creates a background drawable that is used to draw the pressed state of the layer.
3610	Creates a background drawable that is used to disable the layer.
3611	Creates a background drawable.
3612	Get the size of the button.
3613	Animate the visibility of the view.
3614	Creates and returns a listener which allows to set the visibility of the button.
3615	Sets the size of the dialog s shadow.
3616	Obtains the thickness from a specific typed array.
3617	Initialize the paint.
3618	Initializes the angle animation.
3619	Creates a property which allows to set the current global angle of the progress drawable.
3620	Initializes the animation for the sweep.
3621	Creates a property which allows to set the current sweep angle.
3622	Creates a listener which allows to animate the sweep animation.
3623	Initializes the buttons which are used to show the floating action buttons.
3624	Creates a listener which allows to show the toast of the floating action button.
3625	Initializes the hide floating action buttons button.
3626	Creates and returns a listener which allows to hide the floating action buttons.
3627	Initialize the chips.
3628	Creates and returns a listener which allows to close the chip.
3629	Handles the saved state of the activity.
3630	Obtains the text of the chip from a specific typed array.
3631	Obtains the color of the text which should be used to colorize the chip s text.
3632	Obtains the color of the chip from a specific typed array.
3633	Obtains the icon which should be used to draw the chips from a specific typed array.
3634	Obtains the closable state of the preference from a specific typed array.
3635	Obtains the icon which should be used to close the dialog s close button from a specific typed
3636	Adds a listener which allows to close the activity s content when the activity is closed.
3637	Removes a specific listener which should be notified when the activity is closed.
3638	Sets the color of the background.
3639	Sets whether the text view should be closed.
3640	Returns the map of all the partials that are defined in the model.
3641	Returns a new ScriptEngine instance with the given scripts.
3642	Returns the layout mappings.
3643	Checks if the given class is present.
3644	Returns the value of the annotation with the given name.
3645	Returns an input stream for the given name.
3646	Returns the first available stream for the given names.
3647	Renders the template with the given model.
3648	Adds the given aliases to the configuration.
3649	Adds an alias to the map.
3650	Gets a listener for the specified id.
3651	Runs a Chronos operation synchronously.
3652	Checks if the given method is a callback method.
3653	Called when the service is resumed.
3654	Called by the main thread when an operation is finished.
3655	Invokes an operation asynchronously.
3656	Executes an operation on the Chronos service.
3657	Cancels a request.
3658	Cancels a request with the given tag.
3659	Returns true if the request with the given tag is running.
3660	Called when an operation has finished.
3661	Store the given operation delivery.
3662	Deliver the result of the given operation delivery.
3663	Deliver the given operation result to the registered service listener.
3664	Log a message to the log.
3665	Cancels the operation with the given id.
3666	Registers an operation that has been started.
3667	Cancel all running operations.
3668	Returns true if the given operation is cancelled.
3669	Runs the given operation and sets the result to the given operation result.
3670	Creates an empty result.
3671	Runs the given operation asynchronously.
3672	Runs a ChronosOperation synchronously.
3673	Called when an operation is finished.
3674	Main method.
3675	Returns the modules that are used to create the event handlers.
3676	Main method.
3677	Check if the end of the line is the end of the buffer.
3678	Initialize the event listener.
3679	Get the JMX connection for the given child.
3680	Closes the connection to the MBeanServer.
3681	Initializes the view with the layout of the fake search view.
3682	Main method.
3683	Returns the validator for the current node.
3684	Returns the list of columns that are not in the table.
3685	Returns the insert column list.
3686	Returns all packages in the project.
3687	Get the content of the file that is not overridden by the file.
3688	Write the not - overridden content.
3689	Finds a table by its name.
3690	Finds a bean for a table.
3691	Returns the view properties of the given bean.
3692	Gets the visible properties of the given one to many.
3693	Updates the versionable object with the data from the source.
3694	Adds a history to the history list.
3695	Override this method to customize the session.
3696	Add a new node to the requirement spec.
3697	Write the VM to the database.
3698	Get the issue type with the given name.
3699	Get a VmSetting by its name.
3700	Get a string field.
3701	Returns a DataEntry with the specified name as a boolean field.
3702	Get a numeric field.
3703	Display a workflow.
3704	Refresh the workflow graph.
3705	Walks the component tree and invokes the visitor for each component.
3706	Receive an upload.
3707	Returns the address risk.
3708	Converts a descriptor to a file descriptor.
3709	Gets the blockscore error from the RetrofitError.
3710	Score the question set.
3711	Digest the given stream using the given operation.
3712	Checks if the given path matches the include file patterns.
3713	Adds an answer to the question.
3714	Returns the matching info.
3715	Returns the address.
3716	Creates a question set for this person.
3717	Retrieve a question set.
3718	Returns the date of the birth of this date.
3719	Returns the address.
3720	Returns the date of the incorporation.
3721	Gets the history of the revisions.
3722	Search for watchlists.
3723	Sets the date of birth.
3724	Sets the address of the candidate.
3725	Retrieve a person.
3726	Retrieve a candidate by id.
3727	Returns the encoded authorization header.
3728	Returns the date of the birth end of this calendar.
3729	Returns the type parameter of the given class.
3730	Get a property as a String.
3731	Returns the value of the named property as a Boolean.
3732	Returns the relative path of the given directory and entry.
3733	Returns the error type.
3734	Returns the validation error code.
3735	Flushes the file container.
3736	Syncs the files in the given collection.
3737	Returns a cache of all file descriptors.
3738	Create the hierarchy of the contained files.
3739	Finds an unused port.
3740	Gets the value of the named parameter.
3741	Set the parameter values.
3742	Sets the parameter value.
3743	Add a parameter value.
3744	Get the target command.
3745	Get the value of the given key from the wizard.
3746	Register an OID.
3747	Create a new node.
3748	Create a new subtree.
3749	Returns the complement of the given set.
3750	Returns a set containing all of the index flavors in the given order.
3751	Adds a new entry to the map.
3752	Removes the value associated with the given key from the map.
3753	Get a random 4 - byte ID.
3754	Get the user widths.
3755	Sets the sort direction.
3756	Set the column order.
3757	Get the user sorted columns.
3758	Override onComponentTag to add the class to the tag.
3759	On component tag body.
3760	Click the button.
3761	Returns a Config instance by name.
3762	Render the header items.
3763	Render the combined require scripts.
3764	Create the create tree node script.
3765	Get the data line.
3766	Execute the operation.
3767	Expand the UIClassification.
3768	Add children.
3769	Get the keys of the class instances of this class.
3770	Returns the cache key for this field.
3771	Adds the highlight expression to the list of highlight expressions.
3772	Adds start tag to the request.
3773	Adds end tag to the end tag list.
3774	Get lazy load component.
3775	Get loading component.
3776	Close the modal window.
3777	Insert a new element before the current element.
3778	Returns the previous element in the wizard.
3779	Adds the given element to the parameters map.
3780	Evaluate the instance.
3781	Add all elements for a given class.
3782	Update the class elements.
3783	Add a cell to a form row.
3784	Evaluate the UI provider.
3785	Evaluate the field set.
3786	Get the elements of the given UIClassification.
3787	Gets the JS code for a sub menu item.
3788	Gets the event javascript.
3789	Gets the image.
3790	Gets the behavior of the given class.
3791	Add components.
3792	Returns an iterator over all children of the given node.
3793	Make a request to the Hod API.
3794	Make a request to the Hod API.
3795	Make a request to the Hod API.
3796	Make a request to the Hod API.
3797	Converts the typed input to the given type.
3798	Render the header.
3799	Handle error handling.
3800	Launch a new execution bridge.
3801	Adds a reference prefix to the list of reference prefixes.
3802	Add additional metadata to the request.
3803	Add promotion categories.
3804	Add synonym categories.
3805	Add blacklist categories.
3806	Initiate the partial page request.
3807	Called when the request is received.
3808	Get the resource stream.
3809	Get the javascript code to call when the browser is loaded.
3810	Send a keepalive message to the given application.
3811	Init the keepAlive task.
3812	Gets all UIUserSessions.
3813	On the component tag body.
3814	Render the component.
3815	Create a dashboard link.
3816	Parses a response into a specific type.
3817	Parses a response into a specific type.
3818	Parse the response body and return the result as a Java object.
3819	Parses the response body and returns the input stream.
3820	Returns the list of events for the given event type.
3821	On component tag internal.
3822	This method is called by the job service to check the job status.
3823	Override this method to add the class attribute to the component tag.
3824	Render the header for the component.
3825	Sets the default menu item.
3826	Get the label for the given command name and key type.
3827	Get the editable component.
3828	Set the markup id for the header.
3829	Get date as string.
3830	Get a list of date objects.
3831	Add this component to the parent s component container.
3832	Shuts down the executor service.
3833	Click the link.
3834	Override this method to add the action to the tag.
3835	Handle multi part.
3836	Resets the counter of all elements in the form.
3837	Initialize the filter.
3838	Do the authentication.
3839	Check login.
3840	Execute the event on the page.
3841	Get the persistence script.
3842	Returns the menu items for the given dojo classes.
3843	Get the menu.
3844	Get the sub menu.
3845	Get the JS code for the data.
3846	Get data reload js.
3847	Creates the page.
3848	Show the modal window.
3849	Adds a new value to the row.
3850	Returns the index of the given input name.
3851	Add a new row.
3852	Adds the children of the given UIClassification to the model object.
3853	Get the help for the given command id.
3854	Get a new UIStructurBrowser.
3855	Initialise the menu.
3856	Expand the UI element.
3857	Sort the model.
3858	Check if the column is hidden.
3859	Check if the instance is allowed to be a child of the current instance.
3860	Execute the UI table event.
3861	Requery the label.
3862	Bind the given component to this handler.
3863	Get the data table.
3864	Execute the events for this field.
3865	Get rendered content.
3866	Get the command by UUID.
3867	Get the label for the given command.
3868	Prune all finished tasks.
3869	Returns a page of execution bridges.
3870	Get the bridge for the given job name.
3871	Checks if the user is logged in.
3872	Lazy login.
3873	Login the user.
3874	Logout the current user.
3875	Adds the indexes to the query.
3876	Get a model for a command.
3877	Add the components.
3878	Adds the given components to the body.
3879	Convert the date field values to HTML.
3880	Convert the values of the form field to their respective values.
3881	Handles the error.
3882	Validate field values.
3883	Evaluate the form element.
3884	Validate the form.
3885	Check if the form is required.
3886	Returns the list of FormPanels that are used to submit the dialog.
3887	Shows the dialog.
3888	Initialize the filter.
3889	Returns the complement of the given resource types.
3890	Returns a set containing the given resource types.
3891	Check out.
3892	Check if the access to the given field is allowed to be applied to the menu.
3893	Get the type image.
3894	Initializes the UI.
3895	Requery the label.
3896	Remove pages from the session.
3897	Override onComponentTagInternal to add a tag to the component.
3898	Click the menu.
3899	Get the EFapsSession from the session store.
3900	Called when the request is started.
3901	Called when the end of a request is received.
3902	Register a user session.
3903	Register the activity for the given EFapsSession.
3904	Add a Message Connection to the cache.
3905	Invalidate a session.
3906	Removes a user session from the registry.
3907	Returns all users in the registry.
3908	Get connections for a given user.
3909	Get a connection from the session.
3910	Get the cache for the user session.
3911	Initialize the UIItem.
3912	Returns the calling command.
3913	Execute events.
3914	Add the behaviors for the update.
3915	Returns the width weight of the field.
3916	Evaluate the label.
3917	Returns true if this field is a table field.
3918	Returns a field configuration for the given field name.
3919	Returns true if the snipplet is visible.
3920	Respond to the request.
3921	Initialize the button.
3922	Get the choices for the given input.
3923	Get the date time formatter.
3924	Get the file.
3925	Get the menu.
3926	Read Submenues for the given instance.
3927	Initialise the table.
3928	Get the list of instances that must be applied against the database.
3929	Add a filter list.
3930	Add a filter classifcation.
3931	Get a filter for the given table header.
3932	Get the filter pick list.
3933	Get all status for a given type.
3934	Stores the filter map for the table.
3935	Remove the filter from this table.
3936	Get the cell.
3937	Get the instances of this UIGrid.
3938	Get the filter for a field.
3939	Returns the command.
3940	Get the title of the call.
3941	Check if the given filter is a date filter.
3942	Get a row by its id.
3943	Print the UI Grid.
3944	Get the query.
3945	Returns the list of excluded dimensions.
3946	Returns true if all nodes are applied.
3947	Fill the dimension provider.
3948	Build the parameters for the hierarchy.
3949	Checks if the given file resource contains the expected root element.
3950	touch the cache if it is expired.
3951	Refresh the TTL of the cache entry.
3952	Try to clone the given object.
3953	Initialize the cache.
3954	Sets the cache properties.
3955	Returns the value of the specified cache property.
3956	Calculates the cache key for the given key.
3957	Returns the cache properties for the given name.
3958	Set the value of the given key in the cache.
3959	Deletes the given key from the cache.
3960	Deletes the given key from the local cache.
3961	Deletes all the cache entries.
3962	Deletes all the entries in the local cache.
3963	Returns the label for the given element.
3964	Sort the elements by their tab index.
3965	Generate a generic form.
3966	Generates HTML for the given element.
3967	Returns the complete rendered input for the given element.
3968	Returns the HTML for the given element.
3969	Register an application context.
3970	Build a SelectInput with the given name and possible names.
3971	Build all attributes for this element.
3972	Build the max length attribute.
3973	Returns the list of accepted content types for the method.
3974	Returns true if the callback is the same session.
3975	Creates a list converter.
3976	Initialize all registered loaders.
3977	Returns a profile that is associated with the specified person.
3978	Sets the listener which will be notified when the tag is removed from the TagViewer.
3979	Gets the document builder factory.
3980	Returns a DOMSource for the given XML file.
3981	Get the schema for the given xsd file.
3982	Parses the given XML file.
3983	Validate the given XML file against the given XSD.
3984	Validates the schema.
3985	Add a child tag.
3986	Removes the attribute with the given name.
3987	Returns a string representation of this element as a Velocity template.
3988	Returns the XML representation of this tag.
3989	Adds a service to the list of services.
3990	Get the service for the given device.
3991	Called when a command is received from the client.
3992	Get all triggers for the given app identifier
3993	Delete all triggers of the given app package.
3994	Delete a trigger.
3995	Get the trigger with the given id and app package name.
3996	Validate access.
3997	Converts an XML string to an object using XStream.
3998	Converts an XML string to an object using the given XStream.
3999	Converts an XML string to a JSON string.
4000	Executes a method on the service.
4001	Check if the current thread is the main thread.
4002	Log a method call.
4003	Load an object from an input stream.
4004	Creates a new XML tag with the given name and value and attributes.
4005	Returns true if the given query matches the current query.
4006	Dispatches an invocation to the service.
4007	Unregisters a service from the SPF.
4008	Generate a query id.
4009	Called when an instance is lost.
4010	Stop a search.
4011	Stop all search for the given app.
4012	Connect to the component.
4013	Creates a standard display view for the given field.
4014	Creates a spinner which can be used to display a single value of a field.
4015	Creates a view which displays a date in the profile edit view.
4016	Creates a tag view.
4017	Creates a standard edit view.
4018	Sends a notification to the specified unique identifier.
4019	Converts this object to an XML string.
4020	Set the contentView with minimal elements.
4021	Returns the friendly name of the given field.
4022	Kills the scheduler.
4023	Initializes the SPF context.
4024	Broadcasts an event to all registered listeners.
4025	Creates a new ProfileFragment that will show the view of the current user s profile.
4026	Called when the profile data is available.
4027	Starts the cropping of the given source image.
4028	Handles the crop request.
4029	Convert an object to a JSON string.
4030	Add a tag to the list of tags.
4031	Sets the tags to be displayed.
4032	Save a trigger to the database.
4033	Delete a trigger.
4034	Starts the SPF notification handler.
4035	Start the registration of the service.
4036	Adds an attribute to the element.
4037	Invoke the method with the given name.
4038	Sets the selection of the list items.
4039	Sets the selection of the specified indicators.
4040	Returns the list of strings that are currently selected.
4041	Returns the selected indicies.
4042	Called when the profile is refreshed.
4043	Shutdown the app service.
4044	Inserts a new line separator.
4045	Writes the string to the buffer.
4046	Converts the given object to a JSON string.
4047	Load the access token.
4048	Bind to service.
4049	Disconnects the connection from the service.
4050	Handle error.
4051	Refreshes the triggers.
4052	Add a persona to the profile.
4053	Removes the specified persona from the database.
4054	Register a service with the Activity consumer.
4055	Get the app authorization by app id
4056	Register a new application.
4057	Unregister a service from the service registry.
4058	Get the persona of the given app identifier.
4059	Handles a message received from the server.
4060	Adds a client to the list if it is not already present.
4061	Connect to the server.
4062	Gets the value of the specified field from the profile.
4063	Returns true if the field is modified.
4064	Stop a search for a specific tag.
4065	Stop all search callbacks.
4066	Lookup a person by its identifier.
4067	Get a profile field from the profile table.
4068	Get the base info for a persona.
4069	Get the NodeList from the given XML string.
4070	Creates a proxy that will execute the given callback on the main thread.
4071	Get the PersonAuth from the received TKN.
4072	Creates an entry for a sent request.
4073	Creates an entry for a received request.
4074	Returns the status of the entry for the given user.
4075	Confirm the request.
4076	Add a closing tag.
4077	Add an empty tag to the XML document.
4078	Adds an opening tag.
4079	Delete a file.
4080	Creates a temporary directory with the given namespace and name.
4081	Get the proxied object.
4082	Returns a class by name.
4083	Compute the signature of a method.
4084	Creates a new instance of OneWayMessageDigestCodec with the given algorithm password and codec.
4085	Resets the current query and fragment.
4086	Creates a new URLBuilder with the given path.
4087	Adds a query parameter to the given URL.
4088	Returns the first value of the named parameter.
4089	Add a query parameter.
4090	Adds the parameters to the request.
4091	Adds a parameter with the specified name and value indexed.
4092	Add a query to the query string.
4093	Validate the query.
4094	Add a query to the query string.
4095	Rebuilds the query instance.
4096	Replaces the parameter with the given value.
4097	Invoke the given method on the given object.
4098	Creates a proxy to shutdown the given object.
4099	Converts a Object to a Boolean.
4100	Returns the stack trace of the given exception.
4101	Removes the trailing slash from the path.
4102	Waits for the call to be shutdown.
4103	Adds an empty tag to the XML document.
4104	Add an attribute to the XML document.
4105	Adds the attributes from the given map to the current object.
4106	Extract the resource info from the given URL.
4107	Chroot the given resource to the root resource.
4108	List resources in the directory.
4109	Returns a new resource that is a child of this resource.
4110	Creates a resource from a file.
4111	Starts the process.
4112	Creates an ExternalCommand instance.
4113	Start a command.
4114	Executes the given command with the given arguments.
4115	Returns the time elapsed since the last call.
4116	Returns the elapsed time.
4117	Add a tag with a specific attribute and value.
4118	Add a tag with the specified name and value.
4119	Indent a block of text.
4120	Convert a timeout to a time - stamp.
4121	Adds a new entry to the directory.
4122	Creates a new directory.
4123	Encodes a string using the given one - way codec.
4124	Decode a string using the given codec.
4125	Creates a leaf resource from a resource.
4126	Reverse the elements of the given array.
4127	Converts an array of Enums to an EnumSet.
4128	Loads the properties from a file.
4129	Loads the properties from the given reader.
4130	Returns the time as a string.
4131	Compares this timespan with another.
4132	Truncate the size to the given unit.
4133	Add the given size to this size.
4134	Compares this MemorySize with another MemorySize.
4135	Creates a new MemorySize from the given array of memory sizes.
4136	Executes a callable and returns a Future.
4137	Adds a marker to the map.
4138	Removes a marker from the cache.
4139	Creates a BitmapDescriptor from a View.
4140	Returns a function that checks if the given file is related to the given file.
4141	Emit events from the given watch service.
4142	Returns the selection drawable.
4143	Initialize with a ViewPager.
4144	Adds the views to the pager.
4145	Returns the message for the given exception.
4146	Sets the counter to use sequential ids.
4147	Parses a UUID character into an integer.
4148	Convert a char to a byte.
4149	Returns the timestamp of the message.
4150	Returns the MAC fragment.
4151	Sets a property.
4152	Set Facebook user credentials.
4153	Sets the Socialize credentials.
4154	Merge the properties from another properties.
4155	Add a share to the share system.
4156	Handle a non - network share.
4157	Add a comment to an entity.
4158	Delete a comment.
4159	Add a comment to an entity.
4160	Get a comment by id.
4161	Get comments for a list of ids.
4162	Get comments for a user.
4163	Get comments by entity.
4164	Get comments by application.
4165	Show a comment view.
4166	Parse a JSON string into a JSONObject.
4167	Open a URL with the specified parameters.
4168	Parses the response from the Facebook API.
4169	Shows an alert with the given title and text.
4170	Log a message at the DEBUG level.
4171	Returns the runtime type if more specific.
4172	Sets the entity to be used as a key.
4173	Build the image URL for the profile.
4174	Called when the image is changed.
4175	Generate a request URL and parameters.
4176	Normalize the request parameters.
4177	Authorize the given activity with the default authentication code.
4178	Start the authentication dialog.
4179	Validates the intent for the app signature.
4180	Logout the current session.
4181	Shows a dialog with the given action and parameters.
4182	Serialize a Date object to JSON.
4183	Link the user to the given Activity.
4184	Link the user to the given permissions.
4185	Link the user to the given token.
4186	Post a entity to the Facebook server.
4187	Extend the access token.
4188	Get current permissions.
4189	Get the hash keys for the activity.
4190	Save an entity.
4191	Get an entity from the Activity.
4192	Get an entity by id.
4193	Get all entities in the specified range.
4194	Get the entities in the given keys.
4195	Called when the user creates a context menu.
4196	Subscribe to an entity.
4197	Check if the entity is subscribed to the given subscription type.
4198	Checks if the notification registration is enabled and if so checks the registration state.
4199	Returns the next token in the stack.
4200	Advance to the next null.
4201	Reads an escape character from the input stream.
4202	Shows a share dialog for the given entity.
4203	Shows a share dialog.
4204	Share the given entity via email.
4205	Share the given entity via GooglePlus.
4206	Share the given entity via the other Activity.
4207	Share the given entity via SMS.
4208	Share the given entity via social networks.
4209	Get a share.
4210	Get a list of shares for the specified ids.
4211	Get the list of shares for a user.
4212	Get the shares of the given entity.
4213	Get the shares of the specified application.
4214	Add a like listener to the given entity.
4215	Adds a like to an entity.
4216	Unlike the entity with the given key.
4217	Get like entity.
4218	Get a like object.
4219	Notify the listener that an entity is like.
4220	Get likes for a user.
4221	Get likes by entity.
4222	Get the Facebook instance.
4223	Collect header parameters from the request.
4224	Collect the body parameters from the request.
4225	Collect the query parameters from the URL.
4226	Creates a new JsonWriter.
4227	Creates a default implementation constructor for the given type.
4228	Replaces all new lines in the source string with new lines.
4229	Reloads the ActionBar.
4230	Returns a simple location string from an address.
4231	Get user from Graph API.
4232	Get actions by application.
4233	Get the actions for a user.
4234	Get actions for an entity.
4235	Get actions for a user and entity.
4236	Closes the current scope and writes the closing bracket.
4237	Sets the name of the writer.
4238	Parses the given JSON string.
4239	Parses the given JSON source.
4240	Link a user to a user s account.
4241	Sets the credentials for the client.
4242	Tweet an entity.
4243	Get a resource from the Twitter API.
4244	Send a tweet to the Twitter Twitter API.
4245	Tweet a photo.
4246	Returns a bitmap scaled to the specified width and height.
4247	Sends a PUT request to the Socialize API asynchronously.
4248	Sets the text size of the text view.
4249	Called when the image is changed.
4250	Save a user asynchronously.
4251	Get a user.
4252	Save user settings.
4253	Set the auto post preferences to true if the user is using Facebook or Twitter.
4254	Authenticate with Facebook.
4255	Authenticate for read.
4256	Returns the static field of the given class.
4257	Returns the name of the static field of the given class.
4258	Handles the intent received from the client.
4259	Handles a broadcast intent.
4260	Encodes a byte array into a byte array.
4261	Decode a base64 encoded value.
4262	Add a view to the specified entity.
4263	Called when the profile is updated.
4264	Decodes the given form string into a HttpParameters object.
4265	Convert a collection of Map. Entry to a Map. Entry.
4266	Converts a header element to a header element.
4267	Put an object in the cache.
4268	Put an object in the cache.
4269	Put an object into the cache.
4270	Get the raw value for the given key.
4271	Get an object from the cache.
4272	Checks if the given key exists in the cache.
4273	Extend the TTL of the specified key.
4274	Loads an image from the server using the specified encoded data.
4275	Load an image by URL.
4276	Parses the given tag string and returns a map of tag names to their values.
4277	Format a map of tags to a string.
4278	Fixes the tags in the name after the prefix.
4279	Returns a builder for a metric name.
4280	Returns a string representation of this metric.
4281	Returns the domain as a human readable string.
4282	Decode percent - encoded characters.
4283	Returns the value of the named query parameter.
4284	Returns the query parameters for the given name.
4285	Relativizes this URL to the given URL.
4286	Build a hierarchical URL from a scheme and host.
4287	Build a URL with the given scheme.
4288	Returns a human - readable representation of this URI.
4289	Query a stream using the given PreparedStatementSetter and handle the result.
4290	Query a stream using named parameters.
4291	Gets the fields of the given class.
4292	Fetch the next row from the result set.
4293	Get the value of the designated column as a LocalDateTime.
4294	Get the value of the designated column as a LocalDate.
4295	Get the value of the designated column as a LocalTime.
4296	Get the value of a Timestamp from a ResultSet.
4297	Get the value of the designated column as an OffsetDateTime.
4298	Get the value of the given column as an offset time.
4299	Gets the value of the column from the ResultSet.
4300	Crop the path.
4301	Crop the path to the center of the image.
4302	Crop a color to a specified width and height.
4303	Resize the path to the specified width.
4304	Resize the path.
4305	Scale the path to be cropped by the specified width and height.
4306	Scale the crop center of the path.
4307	Add a blur path.
4308	Add a sharp path.
4309	Add a preview to the path.
4310	Get the project.
4311	Get a file.
4312	Delete a file.
4313	Save a file to the storage.
4314	Execute a request and check the response status.
4315	Check the response status code.
4316	Creates a URI to upload a source from a source URL.
4317	Injects the given target object into the object graph.
4318	Creates a new Builder instance for the given theme.
4319	Finds a class by its name.
4320	Loads a class by name from the given bytecode.
4321	Search for a character in the buffer.
4322	Adds a word to the trie.
4323	Append a character to the end of the string.
4324	Get and set the value.
4325	Checks if the given class is assignable to the given type.
4326	Copy parse info to zip file.
4327	Hash a group and set its name.
4328	Matches a character in the case - insensitive form.
4329	Returns a rule that matches a Unicode character.
4330	Returns a matcher that matches a range of characters.
4331	Returns a rule that matches any of the given characters.
4332	Matches any of the given characters.
4333	Creates a rule that matches the given string.
4334	Returns a rule that matches the given characters.
4335	Returns a rule that matches the case insensitive of the given string.
4336	Returns a rule that matches the given rule.
4337	Returns a rule that is optional to the given rule and the given rules.
4338	Repeat the matcher with the given rule and more rules.
4339	Returns a rule that is the same as the given rule but with the given rules.
4340	Creates a rule from a string literal.
4341	Converts an array of objects to a rule array.
4342	Converts an object to a rule.
4343	Pushes a value onto the stack.
4344	Pop the element from the stack as the specified class.
4345	Pop a value from the stack as a specified class.
4346	Peek the current element as the specified class.
4347	Poke the value at the given index.
4348	Matches the given context.
4349	Checks if this range overlaps with another range.
4350	Checks if this range touches the specified range.
4351	Returns a new range that is merged with this range.
4352	Returns the byte code for the given parser class.
4353	Add a word to the trie.
4354	Unwraps the given matcher.
4355	Registers a listener to the bus.
4356	Post an object to the bus.
4357	Returns the sub context of this matcher.
4358	Returns a rule that is at least the specified number of cycles.
4359	Returns a rule that is at most the specified number of cycles.
4360	Returns a rule that matches the given number of cycles.
4361	Returns a rule that matches the given number of times.
4362	Returns a rule that matches the given range.
4363	Returns a new Characters object that contains all of the given characters but the specified ones.
4364	Gets the value of the deploymentDescriptor property.
4365	Gets the value of the authenticationConfiguration property.
4366	Get the BW services.
4367	Adds the given events to all the BW services.
4368	Gets the value of the globalVariable property.
4369	Gets the value of the baseService property.
4370	Gets the value of the event property.
4371	Checks if the project directory exists and is a directory.
4372	Read the dependencies from a file.
4373	Launches the specified tibco binary.
4374	Gets the value of the action property.
4375	Clean the directory.
4376	The final list of the job.
4377	Gets the value of the rulebase property.
4378	Adds an alias to the list.
4379	Process the given file.
4380	Gets the value of the rest property.
4381	Gets the value of the nvPair property.
4382	Adds a dependency to a pom.
4383	Removes a dependency from a pom.
4384	Checks if a dependency exists in the list.
4385	Checks if the given dependency exists in the given pom.
4386	Adds a project as a module.
4387	Checks if a module exists in the given profile or model.
4388	Returns the artifact file for the given name and classifier.
4389	Execute the goal.
4390	Extract the content of a file.
4391	Update the repo instances.
4392	Gets the value of the any property.
4393	Creates a new instance of the given class with the given parameters.
4394	Creates a class for this class.
4395	Creates a constructor for the proxy.
4396	Start a statement execute timer.
4397	Start a timer for a callable statement.
4398	Start a timer for the result set life.
4399	Mark a result set row meter.
4400	Creates a new proxy instance.
4401	Wrap a connection.
4402	Wrap a statement in a proxy.
4403	Wrap a prepared statement in a Proxy.
4404	Wrap a CallableStatement.
4405	Returns the result set type.
4406	Build the command line arguments.
4407	Build face arguments.
4408	Executes the command.
4409	Execute the task.
4410	Sets the language.
4411	Gets the message for the given key.
4412	Say or think.
4413	Format the given plain Cowsay HTML.
4414	Get the CowFace by mode.
4415	Get the CowFace object from the command line.
4416	Extract the template from the given COW string.
4417	Loads a COW file from the given path or resource.
4418	Converts a CowInputStream to a String.
4419	Returns an input stream for a given path.
4420	Get the input stream from the COW path.
4421	Checks if the given file is a COW file.
4422	Converts a Cowfile to an input stream.
4423	Get the cowfile with the given name.
4424	Get all cow files in the given folder.
4425	Get the face by mode.
4426	Sets the Eyes.
4427	Sets the tongue of the message.
4428	Checks if the given mode is known to be used.
4429	Parses the command line arguments.
4430	Show the command line help.
4431	Format a bubble message.
4432	Wraps the given message with a line separator.
4433	Format the message.
4434	Sets the wordwrap.
4435	Returns the longest line length of the given message.
4436	Log a message to the log.
4437	Log a message to the loggly server.
4438	Logs a collection of messages to the loggly server.
4439	Joins the given collection of strings into a single string.
4440	Main method.
4441	Get the list of all the schemas in the database.
4442	Returns the schema with the given name.
4443	Called when the context is initialized.
4444	Resync all the watch keys.
4445	Returns a map of table names to tables.
4446	Returns the table with the given name.
4447	Writes the contents of the file to the given writer.
4448	Returns a map of catalog names to the catalog objects.
4449	Returns the catalog with the given name.
4450	Returns a new buffer with the specified additional bytes.
4451	Log the given encoder to the log.
4452	Log the given writer.
4453	Returns a LexicalPosition with zero position and file.
4454	Appends the segment to the given buffer.
4455	Writes a segment to the given writer.
4456	Returns the character at the given index.
4457	Returns the SQL data types.
4458	Returns a map of column names to column objects.
4459	Returns the column with the given name.
4460	Returns the list of columns in this table.
4461	Returns the column at the given ordinal position.
4462	Returns the set of imported tables.
4463	Returns the set of exported tables.
4464	Adds a segment to the buffer.
4465	Writes a character to the log.
4466	Writes a string to the log.
4467	Adds the values to the given ContentValues.
4468	Move the camera to the last location.
4469	Animate the camera to include the given position.
4470	Creates a new animation that will animate a circle to a rectangular view.
4471	Creates a new animation that will animate a circle from a rectangular view.
4472	Returns the arc motion transition.
4473	Returns a style span with a bold style.
4474	Scale a View in the screen.
4475	Scale a view to the screen height.
4476	Scale the view to show the next view.
4477	Get the count of the given URI.
4478	Concatenates the address lines into a single string.
4479	Connect to Google API.
4480	Creates a transaction to perform a specific transition.
4481	Returns the foreground color of the gauge.
4482	Sets the listener for all views.
4483	Returns the name of the given log level.
4484	Creates an animation that scales the view up to the specified size.
4485	Show the given View.
4486	Hide the given view.
4487	Checks if the cursor has a position.
4488	Returns the number of rows in the cursor.
4489	Returns the first int in the cursor.
4490	Returns the first long in the cursor.
4491	Returns the first string in the cursor.
4492	Returns all ints in the cursor.
4493	Returns all long values from the cursor.
4494	Returns all strings in the cursor.
4495	Load image from a placeholder.
4496	Returns the orientation of the given RecyclerView.
4497	Returns the number of spans in the given RecyclerView.
4498	Adds a rule to the view.
4499	Returns true if the current position was read.
4500	Returns the main Looper or the myLooper if it is null.
4501	Returns a list of all values in the given sparse array.
4502	Returns a list of values from the given long sparse array.
4503	Checks if the adapter is different from the current one.
4504	Check if the View has been measured and if so update the matrix.
4505	Update the matrix for the view.
4506	Updates or deletes the records.
4507	Returns the SQL query for the given query.
4508	Returns the number of bytes in the image.
4509	Returns a mutable bitmap.
4510	Checks if the intent is a valid activity.
4511	Creates an intent to send a mail to email.
4512	Sets the default content view.
4513	Find a fragment by its pane.
4514	Creates a Bundle with two values.
4515	Creates an intent that will be used to perform a specific action on the specified context.
4516	Creates an intent to edit an existing object.
4517	Creates an intent to delete an existing resource.
4518	Creates an intent to delete an item from the given data.
4519	Returns the size of the action bar.
4520	Returns the background of the action bar.
4521	Returns true if the current context is connected to the network.
4522	Cleanup the difference.
4523	Creates a Patch object from the given text1 and diffs.
4524	Flat map the value of this Option to an Option.
4525	Converts a SOAP message to a string representation.
4526	Get the tracee profile properties file.
4527	Checks if the given element is a method.
4528	Checks if the given method is a getter method.
4529	Get the property value.
4530	Checks if the given class has noargs constructor.
4531	Get annotation from type.
4532	Checks if the given method has a non - void return type.
4533	Apply the given output element to the given StringBuilder.
4534	Returns a set of all wrapper classes.
4535	Returns a set of all implicit context data providers.
4536	Returns a list of all available wrapper types.
4537	Initialize the connector map.
4538	Send error report to all connectors.
4539	Returns a set of connector configuration names.
4540	Get the properties for the connector configuration name.
4541	Create connector instance.
4542	Checks if a connector is configured.
4543	Checks if the given method has a getter prefix.
4544	Returns true if the given method is public non - static.
4545	Checks if the given method has a return type that is compatible with the given type.
4546	Returns the field corresponding to the given method.
4547	Checks if the given method name is a getter method.
4548	Capitalizes the first character of a string.
4549	Decapitalize first character of string.
4550	Removes the getter prefix from the input string.
4551	Send error report to connectors.
4552	Apply the given instance to the given context logger configuration.
4553	Creates an instance of the given class.
4554	Get the current profile.
4555	Open a properties file.
4556	Fill the manual context override map with the given values.
4557	Creates a TraceeContextStringRepresentationBuilderImpl instance.
4558	Checks if the method throws contains the passed exception.
4559	Checks if a class is defined in the given exception.
4560	Get the defined throws types from the method signature.
4561	Checks if watchdog aspect processing is deactivated by annotation
4562	Asserts that the group has the specified size.
4563	Asserts that the actual object does not have any duplicates.
4564	Get the view to be used for the drop down.
4565	Reserves a term name.
4566	Registers a term.
4567	Initializes the vocabulary.
4568	Returns a DataSet containing the data about the individual.
4569	Resolve a relative URI to a relative URI.
4570	Merge the path and the relative path.
4571	Removes dot segments from the given path.
4572	Creates a new name with the given name and names.
4573	Returns a name for the given class.
4574	Returns a new media type with a wildcard type.
4575	Creates a new media type with a wildcard suffix.
4576	Creates a new media type from the given type and subtype.
4577	Converts a media type to a header string.
4578	This method is called by the snapshot resolution process.
4579	Compares two terms.
4580	Returns the names of pending attachments for the given attachment.
4581	Adds a name to the attachment.
4582	Returns the next name for the given attachment.
4583	Creates a new name provider for the given resource.
4584	Parse the suffix of a media type.
4585	Checks that the given string is a valid quoted string.
4586	Returns the next codepoint in the CharSequence.
4587	Update the resource.
4588	Returns the URI of this URI.
4589	Closes the input stream.
4590	Checks if the given character is a name start character.
4591	Checks if the given character is a name character.
4592	Validates the given token against the validity of the token.
4593	Sets the media type of the data transform.
4594	Register a class for the adapter.
4595	Creates an adapter for the given source type and target type.
4596	Adapts an object to a result class.
4597	Returns a new namespace map with the given prefix and namespace URI.
4598	Removes all namespaces with the given prefix.
4599	Escape a string.
4600	Query a resource.
4601	Adds a name provider to the container.
4602	Returns the name provider for the given container.
4603	Unwraps this application engine implementation into the specified class.
4604	Returns true if the path is out of scope.
4605	Creates a new Path with the specified directory.
4606	Creates a new Path with the specified file.
4607	Assemble relative segments.
4608	Returns the type parameter of the given class.
4609	Creates a primitive object factory.
4610	Creates a variant list from the given media types.
4611	Resolve this individual from the given data set.
4612	Matches a ViewGroup s children count as equal to the specified value.
4613	Matches views that have a specific value greater than or equal to the given value.
4614	Matches views that have more children than the given value.
4615	Matches views that have a specific value less than or equal to the specified value.
4616	Matches views that have a minimum child of the specified value.
4617	Get the measures for a specific year and state.
4618	Get a single measure.
4619	Get the rating for a candidate.
4620	Get a single rating.
4621	Get elections for a given year.
4622	Get election by zip.
4623	Get the candidate for a specific stage.
4624	Get an address by its office state.
4625	Get all offices of a given type.
4626	Get all offices for a level.
4627	Get all offices of a particular type and level.
4628	Get all of the offices for a branch and level.
4629	Get the counties for a given state.
4630	Get the cities for a given state.
4631	Get all of the officials for a local.
4632	Query the VoteSmart API.
4633	Get the list of all candidate items in a state.
4634	Get a list of candidate objects for a given office type and state.
4635	Get a list of candidate objects in the specified zip.
4636	Get the AddlBio for a candidate.
4637	Get the detailed Bio for a candidate.
4638	Get a list of candidates for a given last name and election year.
4639	Returns a list of candidates for the specified election.
4640	Get a list of candidates for a given district.
4641	Get the committees for a specific committee type.
4642	Get a committee.
4643	Get the members of a committee.
4644	Returns the positions of the leadership of the given state.
4645	Get officials for a leadership.
4646	Sleep for a given number of milliseconds.
4647	Starts the timer.
4648	Waits for the current thread to finish.
4649	Closes the connection.
4650	Merge the elements of a stream into a map using the provided merge function.
4651	Splits the given map into a list of maps.
4652	Creates a new collector that collects all maps in the given limit.
4653	Sorts the map by the given comparator.
4654	Returns the first value in the map.
4655	Asserts that the given test is null.
4656	Asserts that the given test is not null.
4657	Asserts that the given String is not null and is not empty and is not trimmed.
4658	Asserts that the specified set is null or empty.
4659	Asserts that the specified array is null or empty.
4660	Get the resource as a string.
4661	Get the words from a resource file.
4662	Get last modified time of resource file.
4663	Read a string from an InputStream.
4664	Get the bytes from an InputStream.
4665	Read a file into a String.
4666	Returns the absolute path of the resource.
4667	Generate a random string with the given length.
4668	Generate a long id with the given length.
4669	Joins two arrays.
4670	Splits the given set into a list of sets of the specified size.
4671	Returns the start of the month of the given time.
4672	Returns the end of the month of the given time.
4673	Trims the given string and returns the result as null.
4674	Capitalizes a string.
4675	Joins the given arguments with the given separator.
4676	Joins the given set of items using the given separator.
4677	Returns a list of words from the given text.
4678	Trim text down to the specified size.
4679	Trim text down to the specified size.
4680	Returns a list of all characters in the given string.
4681	Returns the relevance of the first occurrence of the search string in the value.
4682	Unquotes the given text.
4683	Returns the time in the given timezone.
4684	Returns the tag state of the filter.
4685	Checks if the given severity is a violation.
4686	Set the icon for the severity level.
4687	Prints the icon for the given severity level.
4688	Returns the list of tags.
4689	Sets the next node and cleans up the previous node.
4690	Sets the previous node and cleans up the current node.
4691	Returns the node with the given host and port.
4692	Finds all nodes with the given host.
4693	Returns all nodes that are not dead.
4694	Adds a node to the list of connected sockets.
4695	Remove a node from the socket.
4696	Mark a node as alive.
4697	Mark a node as dead.
4698	Send a node event to all registered handlers.
4699	Returns the checkstyle version.
4700	Configures the resource locator to use for the resource manager.
4701	Build the factory object with the supplied attributes.
4702	Create a map of property values from the attributes.
4703	Returns the current sequence number for the given class.
4704	Compares two nodes.
4705	Returns the list of events that have been added to the queue.
4706	Find all packages in the JavaDoc run.
4707	Sets the value of a property on the given object.
4708	Sets the value of a field on the given object.
4709	Returns all methods annotated with the given annotation.
4710	Calls the given method on the given target object.
4711	Main method.
4712	Get the value of the given attribute from the given configuration.
4713	Prints the summary of the rules.
4714	Checks if the given audit event matches the rule.
4715	Creates a key for the received at event.
4716	Initialize the GuestNode.
4717	Waits for other clusters to start.
4718	Waits for other clusters to be sent.
4719	Waits for all the clusters connected.
4720	Waits for a task to finish.
4721	Closes the cache.
4722	Print the state of the cluster.
4723	Main method.
4724	Returns a list of all properties in the class sorted by natural order.
4725	Returns the hash code of the class model for the given version.
4726	Returns the total number of pages.
4727	Get values for a page of entries.
4728	Prepare the result data for the query.
4729	Stores the results in the page.
4730	Creates a new object with the given attributes.
4731	Compares two TagToCategories.
4732	Migrate broken locales.
4733	Recalculates the min hash for a topic.
4734	Returns the min hashes for the given XML.
4735	Clean the given XML for minhash.
4736	Validate and fix relationships to this topic.
4737	Update the content hash of a topic.
4738	Validate and fix the tags for a topic.
4739	Sorts the given ClassDocs by the name of the packages.
4740	Execute the rule.
4741	Splice a string into a list of strings.
4742	Splice a string into a list of regular expressions.
4743	Checks if the provided string is contained within the source list.
4744	Returns the factory class.
4745	Sends a message to the mail.
4746	Sends a message to the given recipient.
4747	Execute a zero function on the server.
4748	Executes the query.
4749	Handle the exception.
4750	Formats the results of the select.
4751	Add an error message.
4752	Returns the error message.
4753	Checks if a socket is alive.
4754	Executes the given thread and waits for the given timeout.
4755	Checks if the given list of resources exists.
4756	Merge deprecated information.
4757	Add a LIMIT clause to a query string.
4758	Get the first locator from the given locators string.
4759	Returns the size of the region.
4760	Returns true if the cache is a GemFire client.
4761	Remove all the keys from the given region.
4762	Retry a given operation with exponential backoff.
4763	Generate a buffered image from a TranscoderInput.
4764	Paints the icon.
4765	Get the buffered reader.
4766	Waits for enter.
4767	Executes the check replication tool.
4768	Parses the command - line arguments.
4769	Prints the help for the check - replication command.
4770	Construct the Gnu options.
4771	Aggregate the single cluster member data.
4772	Checks if the given property is not null.
4773	Parses the command line arguments and prints the help and quiet options.
4774	Prints the help for the command.
4775	Construct the Gnu options.
4776	Find the index of the command in the command line.
4777	Extract launcher arguments from the given arguments.
4778	Extract command arguments from the given command line arguments.
4779	Main method.
4780	Print a message and exception to stderr.
4781	Starts the timer.
4782	Creates a set of regions from the given region names.
4783	Process the given region and policy.
4784	Sets the indentation token.
4785	Returns the package statement for the given source file.
4786	Start the event sequence.
4787	Extract the set of ports from the system member.
4788	Find or create a pool.
4789	Returns the name of the event source.
4790	Returns the category of the given event source.
4791	Enter a frame.
4792	Exit the current frame of a method.
4793	Returns a string containing the names of the classes that are currently registered.
4794	Set the package extractors.
4795	Recursively add all the source files and subdirectories to the map.
4796	Update the image data.
4797	Sets the original file name of the UI.
4798	Extract the limit from the query string.
4799	Format the select results.
4800	Check that the given object is allowed in real time.
4801	Runs a process with a confirmation.
4802	Runs a process with a given class and arguments.
4803	Runs a class with the given arguments and delays the execution of the given class.
4804	Stops the given process by sending a new line to the output stream.
4805	Starts a process with the given arguments.
4806	Redirect the streams of the process to the parent process.
4807	Wait for a process to finish.
4808	Generates a template file.
4809	Processes the cluster cluster.
4810	Checks if the given type is a subtype of the given class.
4811	Checks if the given method is compatible with the given interface method.
4812	Returns the method that implements the given interface.
4813	Get the type argument of the given generic type.
4814	Resolves a type variable to a type.
4815	Returns the actual type arguments of an interface.
4816	Populate the pool with the initial values.
4817	Adds the return option description to the given method.
4818	Return a classifier to the pool.
4819	Gets the destination for the given destination name.
4820	Get the message consumer for the given destination.
4821	Get the producer for the given destination.
4822	Gets the session.
4823	Returns the connection.
4824	Sends a text message to a destination.
4825	Listen for text messages with destination.
4826	Receive a text message from a destination with a timeout.
4827	Stop the connection.
4828	Handles the load from user data service.
4829	Returns the configuration for the pool.
4830	Sets the id of the model.
4831	Sets the model file.
4832	Adds or updates a new model to the pool.
4833	Remove a model from the cache.
4834	Clustered event manager service queue.
4835	Clustered event manager.
4836	Encodes the given string to a string that contains non - codes.
4837	Decodes the given MultivaluedMap and returns a new MultivaluedMap with the decoded
4838	Create a ServiceGroup from a set of resource classes.
4839	Closes the server socket.
4840	Forward an event to the event connector.
4841	Returns the annotations for the given method.
4842	Find annotation.
4843	Returns a resource constructor for the given class.
4844	Returns the root resource from the given class.
4845	Setup the bagging classifiers.
4846	Returns the object from the serialized object.
4847	Returns the serialized object.
4848	Writes the serialized object to the given file.
4849	Returns the leaf score of the given class distribution.
4850	Returns the provider URL.
4851	Returns the context.
4852	Returns a connection supplier.
4853	Build a new JMS service.
4854	Get the type for the given type.
4855	Returns the type of the given JavaType.
4856	Introspects the given serializer.
4857	Introspects the serializer.
4858	Introspects the given serializer and adds the values to the given type.
4859	Introspect the serializer.
4860	Frame 1.
4861	Frame 3.
4862	Frame 4.
4863	Randomly selects a random element from the array.
4864	Returns the next number in the set.
4865	Main method for the benchmark.
4866	Make a last name from a number.
4867	Randomly choose a random number from a distribution.
4868	Get the relative path of the given file.
4869	Add a file to the working tree.
4870	Commit the file to the working tree.
4871	Move the file to the destination.
4872	Remove the file.
4873	Checks if the file exists.
4874	Checks if two lists are unordered.
4875	Checks that an index is in the range of the specified range.
4876	Get the client instance for the given client type.
4877	Sets the preferred client type.
4878	Add a list of files to the repository.
4879	Adds a list of files to the specified repository.
4880	Adds a file to the repository.
4881	Adds a file to the repository.
4882	Adds a list of files to the specified repository in dry run mode.
4883	Adds a list of files to the specified repository in verbose mode.
4884	Adds a list of files to the given repository with the given paths to the given repository.
4885	Add a dry run if the options are set to true.
4886	Compares the release minor number of the given version.
4887	Add a list of files to the repository.
4888	Add a list of files to a repository.
4889	Executes a commit command.
4890	Sets the path to the git repository.
4891	Creates a list of parameters from a method.
4892	Returns an array of function definition table entries.
4893	Get the value array for this parameter.
4894	Checks if the given file exists.
4895	Creates a new branch.
4896	Delete a branch.
4897	Rename a branch.
4898	Returns a list of all the branches in the repository.
4899	Commit all changes to the specified repository.
4900	Converts the given value to the given type.
4901	Converts an integer to a Boolean.
4902	Converts a Boolean to an Integer.
4903	Converts a long value to a string.
4904	Returns the message for the given error code.
4905	Returns the file that is currently being updated.
4906	Adds a file to be deleted to commit.
4907	Adds a file to be deleted.
4908	Adds a file to be committed to the commit.
4909	Adds a file to the list of modified files not updated.
4910	Adds a file to the list of new files to commit.
4911	Adds a file to be renamed to commit.
4912	Adds a file to the list of untracked files.
4913	Creates a new parameter with the given name and type.
4914	Get the value of the parameter.
4915	Sets whether or not verbose mode is used.
4916	Sets whether or not the delete option is lower than or equal to the lower option.
4917	Sets whether or not the delete option is to be used.
4918	Sets whether or not the rename option is to be used.
4919	Set whether or not the M upper bound option is allowed.
4920	Returns the return type of a function.
4921	Evaluate a function.
4922	Returns an array of values for the given method and arguments.
4923	Run a function method.
4924	Converts the given result to a Java object.
4925	Evaluate a value.
4926	Get the current branch of a repository.
4927	Delete a branch from a repository.
4928	Delete a branch from a repository.
4929	Rename a branch.
4930	Commit the current commit to the repository.
4931	Get the current branch of the repository.
4932	Checkout the current working tree.
4933	Returns the status of the repository.
4934	Remove a file from a repository.
4935	Get the file from the new files to commit.
4936	Get the file from the deletedFilesToCommit list.
4937	Returns the file from the modifiedFilesToCommit list.
4938	Returns the file from the deletedFilesNotUpdated list.
4939	Returns the file from the modifiedFilesNotUpdated list.
4940	Returns the file at the given index in the untracked files list.
4941	Returns the file that was renamed to the given index.
4942	Returns the error at the given index.
4943	Returns the error message.
4944	Reset the specified repository.
4945	Adds a file to the list of added files.
4946	Adds a copied file to the list of copied files.
4947	Adds a deleted file to the list of deleted files.
4948	Sets the number of files that have been changed.
4949	Sets the number of lines deleted.
4950	Sets the number of lines that were inserted.
4951	Executes a mv command on the given repository.
4952	Returns the index of the first occurrence of c from the given index.
4953	Get the result set.
4954	Logs the contents of a git repository.
4955	Adds a commit to the list of commits.
4956	Adds a file to the list of files.
4957	Checkout a file.
4958	Checkout a repository.
4959	Checkout a branch in a repository.
4960	Checkout a list of files.
4961	Checkout a repository.
4962	Checkout a file.
4963	Checks if the given ref is of the given type.
4964	Get all of the children of this directory.
4965	Returns the file at the given index.
4966	Checkouts a list of files in a repository.
4967	Checkout a list of files in a repository.
4968	Sets a comment for a line.
4969	Sets the delete options.
4970	Injects the service methods from the given class.
4971	Injects a service method.
4972	Sets the branch name of the opt - b branch.
4973	Clone a directory.
4974	This method is called by the filter class.
4975	Get the resources for the given config file.
4976	Setup the reset.
4977	Adds a method to the list of methods.
4978	Perform the filter.
4979	Decrements the number of open connections.
4980	Consume the database.
4981	Query the database for the specified table and columns.
4982	Execute a raw query.
4983	Build command line.
4984	Returns the file at the given index.
4985	Returns the deleted file at the given index.
4986	Returns the modified file at the given index.
4987	Returns the status of the file.
4988	Get the head element.
4989	Returns the list of files in the element.
4990	Returns the number of files in the current page.
4991	Returns true if the given string matches the pattern.
4992	Update the list after a hit.
4993	Removes the last entry from the cache.
4994	Removes expired entries from the cache.
4995	Update the list after a hit.
4996	Checks if the source string starts with the given substring.
4997	Gets an access token.
4998	Sign the request with the given access token.
4999	Returns the authorization url for the given OAuth config.
5000	Perform the finish operation.
5001	Finish the project creation.
5002	Creates the control.
5003	Gets the default Java package.
5004	Set the visibility of the group.
5005	Create a debug string for the query.
5006	Returns the query parameters as a list.
5007	Creates the control for the part.
5008	Adds a palette item to the list of palette items.
5009	Get the palette items for a specific category.
5010	Configures the table to resize the columns.
5011	Get the selected template.
5012	Returns the template string for the selected template.
5013	Load the last saved preferences.
5014	Save the last saved preferences.
5015	Sets the selected template.
5016	Updates the input of the pattern viewer.
5017	Create a Criterion that allows to search for values in a path.
5018	Create a member of criterion.
5019	Not member of a given value.
5020	Create the field editors.
5021	Returns the last path component of the given path.
5022	Populate the container name field.
5023	Validate the page.
5024	Checks if the file has an extension that is associated with the current content type.
5025	Add the default extension to the file name.
5026	Get the project from the given path.
5027	Gets the user id from the session.
5028	Creates a page with the first part of the editor.
5029	Saves the current editor as the current editor.
5030	Called when a resource is changed.
5031	Show the page.
5032	Create a log message for a JPQL query.
5033	Converts an object to a string.
5034	Inserts a timeline item.
5035	Inserts a timeline item.
5036	Inserts a timeline item with the given content type and attachment content stream.
5037	Validates the response message against the keyword.
5038	Returns the absolute path of the file to be used as query string.
5039	Get the template store.
5040	Returns the context type registry for the template.
5041	Get the action with the given ID.
5042	Creates a DBI instance.
5043	Append limit and offset set.
5044	Creates a new named property.
5045	Creates a new named property with the given name and value.
5046	Creates a named property.
5047	Creates a literal from a string.
5048	Creates a literal from a URI.
5049	Creates a new literal with the given value and type.
5050	Creates a new QName object with the given namespace and local part and prefix.
5051	Initializes the CORS filter.
5052	Sets the entity id.
5053	Initialize the parser.
5054	Updates the entity version.
5055	Close all sockets listening to the given port.
5056	Main method.
5057	Validates the options.
5058	Validates the arguments.
5059	Subscribe to a specific destination.
5060	Unsubscribes a listener from the specified listener.
5061	Unsubscribe from a channel.
5062	Unsubscribes a channel with a header.
5063	Send a message to a destination.
5064	Get the next message from the queue.
5065	Returns true if the receipt has been registered.
5066	Removes a receipt from the list of receipts.
5067	Logs a dead event.
5068	Converts the given source value to the given target class.
5069	Returns the priority of the given line.
5070	Executes the command.
5071	Injects the options from the given parser.
5072	Adjusts the arguments for the given method.
5073	Migrate the personality.
5074	Tag the request with CORS information.
5075	Handle actual CORS request.
5076	Handles a preflight CORS request.
5077	Set the options.
5078	Check the Java home directory and classes file.
5079	Filters the lines by the given regular expression.
5080	Returns a regular expression that matches all the packages in the current project.
5081	Output the dependencies to a file.
5082	Compares this instance provider with another instance provider.
5083	Returns the IOUtils instance.
5084	Returns the ImageUtils instance.
5085	Returns the priceUtils instance.
5086	Returns the resourceUtils.
5087	Returns the ZipUtils instance.
5088	Returns the DigestUtils instance.
5089	Returns the StringUtils instance.
5090	Returns the resource service.
5091	Get the PricingService.
5092	Returns the instance service.
5093	Returns the object id of the uploaded file.
5094	Creates a digital object from a file.
5095	Stores the list of properties in the given map.
5096	Ensure the metadata table exists.
5097	Create a source detail object.
5098	Validates the threshold.
5099	Validate the arguments.
5100	Validate the options.
5101	Checks if the class is on the classpath.
5102	Checks if the given URI is accepted by this migration loader.
5103	Loads the file from the given URI.
5104	Runs the command.
5105	Read all commands from the classpath.
5106	Post process the request.
5107	Pre - processes the request.
5108	Execute a migration.
5109	Validate the database.
5110	Get the database history.
5111	Initialize the database.
5112	Converts a list of lines to a list of SQL statements.
5113	Find a notable link by its notable and calendar name.
5114	Updates a link.
5115	Parses the command line options.
5116	Send a command to the server.
5117	Returns the formatted source code.
5118	Returns the link with the given hash code.
5119	Transmits a command to the remote server.
5120	Gets the JAXBContext for the given context path.
5121	Creates a list of BoxNodes for the given root box.
5122	Creates a tree of box nodes.
5123	Compute the backgrounds of the root node.
5124	Set the mapping file for the given URL.
5125	Get the mapping file for the given URL.
5126	Creates a VersionRange from a version specification.
5127	Concatenates two transforms.
5128	Transforms a rectangle.
5129	Returns the minimal visual bounds of the box.
5130	Recompute the visual bounds of this node.
5131	Recompute the bounds of all children.
5132	Computes the bounds of the content of the box.
5133	Returns the top border of the box.
5134	Returns the bottom border of the box.
5135	Returns the left border of the box.
5136	Returns the right border of the box.
5137	Returns the color of the element.
5138	Checks if the given child node is inside the parent.
5139	Take the children of this node and all its children.
5140	Execute the given command.
5141	The datasource for HSQL.
5142	The DataSource used to store the database in plain mode.
5143	Setup the platform.
5144	Query the OpenStates API.
5145	Registers a command.
5146	Registers a command with the given name.
5147	Unregisters a command.
5148	Execute a command.
5149	Start the command.
5150	Search for committees in a state
5151	Get the details of a committee.
5152	Connect to the JMX server.
5153	Returns the value of the specified property.
5154	Invoke the method on the JMX service.
5155	Search for districts in a state.
5156	Search for districts in a state.
5157	Returns a district for a given boundary.
5158	Get the metadata for a specific state.
5159	Create an object from the given class.
5160	Register an MBean with the MBean server.
5161	Unregisters the MBean with the MBean server.
5162	Validates the MBean.
5163	Returns a random string.
5164	Adds a value to the parameter.
5165	Search for legislators in a state.
5166	Search for legislators in a state.
5167	Search for legislators in a state.
5168	Search for legislators.
5169	Get the details of a specific Legislator.
5170	Compares this enum to the specified enum.
5171	Sets the mapped class to be used for mapping.
5172	Proceeds the method with the given arguments.
5173	Stop the timer.
5174	Build the client.
5175	Creates a request to the minter.
5176	Converts the response to a pid.
5177	Evaluate an XPath expression.
5178	Mintes the pid.
5179	Creates a new configuration binder for the given class.
5180	Bind the configuration instance to the configured class.
5181	Creates a new instance of FilterPattern.
5182	Proceeds with the constructor.
