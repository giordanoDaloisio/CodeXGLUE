0	Copy the contents of this stream to the given sink.
1	Read the contents of the file as a String.
2	Read the contents of the file as a list of lines.
3	Read bytes from the underlying stream.
4	Grows the buffer by a half of its capacity.
5	Read more characters from the input stream.
6	Start draining.
7	Converts an iterable to an array of the given type.
8	Returns true if the given iterable is empty.
9	Returns a function that converts an iterable to an iterator.
10	Creates an iterator that consumes the elements of the given array.
11	Concatenates the given iterators into a single iterator without defensive copy.
12	Clear the elements from the given iterator.
13	Writes the given bytes to the stream.
14	Parses the given cache builder specification.
15	Creates a new builder with the specified parameters.
16	Returns a new Joiner that appends this string to each part of the input string.
17	Creates an immutable array from the given int values.
18	Returns a sub - array of this IntArray.
19	Reads a byte from the input stream.
20	Reads bytes from the underlying stream.
21	Serializes a map.
22	Serializes a Multiset to a stream.
23	Get a FieldSetter for the given class and field name.
24	Starts the stopwatch.
25	Adds the specified number of occurrences to the specified element.
26	Resizes the list if necessary to make room for the given size.
27	Convert a byte array to an InetAddress.
28	Compress the longest run of zeroes into the given array.
29	Convert an array of integers to an IPv6 address string.
30	Returns an InetAddress for the given URI literal.
31	Checks if an IPv6 address is compatible with the current system.
32	Returns the IPv4 address of the given IPv6 address.
33	Checks if the given address is a Teredo address.
34	Checks if the given address is an ISATAP address.
35	Returns the IPv4 address of an ISATAP address.
36	Returns the client address of an IPv4 address embedded in an IPv6 address.
37	Checks if the given string is a valid IPv4 address.
38	Decrements the address by one byte.
39	Creates a buffered reader that reads from the specified file using the specified charset.
40	Writes a byte array to a file.
41	Copy a file to an output stream.
42	Copy a file from one location to another.
43	Creates a file and updates its modification time.
44	Read the first line of a file as a string.
45	Creates a builder with the given expected size.
46	Forces a put operation.
47	Creates a new MinMaxPriorityQueue with the given initial contents.
48	Calculates the new capacity for the queue.
49	Hash the given hash code with the given length.
50	Returns an element - order ordering that is natural order.
51	Enter the lock.
52	Enter a interruptible lock.
53	Enter the monitor until the guard is satisfied.
54	Enter the monitor until the guard is satisfied or the timeout occurs.
55	Enter the monitor when the guard is satisfied.
56	Enter the monitor if the given guard is satisfied.
57	Enter the monitor if the guard is satisfied.
58	Enter the guard if it is satisfied.
59	Try to enter the monitor if the guard is satisfied.
60	Waits for the guard to be satisfied.
61	Waits until the guard is satisfied.
62	Waits for the guard to be satisfied or times out.
63	Returns the number of waiting threads in the queue.
64	Signal the next waiter.
65	Signal all registered waiters.
66	Begins waiting for a guard.
67	End waiting for a guard.
68	Waits for the guard to be satisfied.
69	Shuts down the ExecutorService and waits for the termination of the ExecutorService.
70	Writes the given character sequence to the output stream.
71	Executes the queue.
72	Load a 64 - bit value from the given byte array.
73	Writes a 64 - bit integer to the given byte array at the given offset.
74	Load a 32 - bit value from the given byte array at the given offset.
75	Creates a new media type with the given type and subtype.
76	Parses a media type string.
77	Capture the type of the class.
78	Remove all elements from the set using the iterator.
79	Escapes a string.
80	Grows the buffer by the given size.
81	Sets the concurrency level.
82	Build a cache with the given weight and weight.
83	Allocates the array for the hash table.
84	Adds a value to the histogram.
85	Calculates the new mean value based on the previous mean and the new value.
86	Rebuilds a hash table with n elements.
87	Choose a table size to use for the given collection size.
88	Returns an immutable table with an empty table.
89	Creates an immutable table with the specified row key column key and value.
90	Creates an immutable table from a parameterized table.
91	Returns an identity converter.
92	Creates an immutable table from the given cell list.
93	Returns an immutable multiset with the specified element.
94	Returns a builder that reverses the natural order.
95	Retains the occurrences of the given set.
96	Creates a fluent iterable that performs a pre - order traversal of the tree.
97	Creates a new builder with a given size that can be used to build a collection of strings
98	Resolve the given type to the given context type.
99	Sets the map to be used for the cache.
100	Removes all values for the given key.
101	Creates a fluent iterable that combines the given iterables without defensive copies.
102	Creates a fluent iterable that returns all elements in the iterable.
103	Returns the elements in this sequence as an array of the specified type.
104	Returns an immutable map with the given key - value pairs.
105	Returns an immutable collection of all entries in the map.
106	Count the number of bytes skipped by skipping the input stream.
107	Reads the contents of the file into a byte array.
108	Hashes the file using the given hash function.
109	Compares this ByteSource to another.
110	Returns an immutable map with an empty map.
111	Creates an immutable range map with the given range and value.
112	Creates a new hash function that concatenates the given hash functions.
113	Returns an immutable sorted set with the specified element sorted according to natural order.
114	Sets the number of nodes that should be added to the graph.
115	Returns a comparator that orders the elements in the iterable according to the lexicographical order.
116	Start a finalizer thread.
117	Returns an immutable sorted map with a default comparator.
118	Returns an immutable sorted map with the natural order of the keys and the value of the first
119	Returns an immutable sorted map with the two entries.
120	Creates an immutable sorted map from the given sorted map.
121	Weak hashing algorithm for length 32.
122	Checks the current state of the service.
123	Lists all files in a directory.
124	Checks if the named file is a directory.
125	Compares two paths for equality.
126	Touches the specified path.
127	Returns the parent of the given path.
128	Checks whether the given options allow insecure deletion.
129	Throw a FileSystemException with a message about the failure of a file deletion.
130	Rehashes a hash value.
131	Returns the segment for the given hash.
132	Returns an immutable list that delegates to the specified list.
133	Returns a range that contains the given value.
134	Unregister all subscribers for a given listener.
135	Returns an iterator over all subscribers for the given event.
136	Finds all subscribers of the given listener.
137	Returns an immutable copy of the elements in the specified iterable sorted by their natural order.
138	Returns an immutable list containing the specified elements.
139	Returns an immutable list of the specified elements.
140	Creates a builder with the specified expected size.
141	Concatenate two arrays into a new array of the given type.
142	Returns an array containing all the elements in the collection.
143	Checks that the element is not null.
144	Returns the Java language object that is used by the AppEngine.
145	Canonicalizes a wildcard type.
146	Creates an immutable list of the specified length.
147	Returns an immutable sorted map builder with the specified expected size.
148	Returns an immutable set of the entries in this map.
149	Finishes the current line.
150	Returns a transformer that applies the given function to the entry.
151	Transforms an entry using a transformer.
152	Returns a function that applies a transformation to the given entry.
153	Creates an index map for the given list.
154	Returns a string representation of this pending value.
155	Updates the contents of the given buffer.
156	Returns an immutable sorted set that is not modified by the given delegate.
157	Deserializes an immutable multimap.
158	Returns the sum of all values in the map.
159	Load the first class that matches the finalizer of the given loaders.
160	Dispatches the event to all listeners.
161	Copy the contents of the given URL to the given output stream.
162	Posts an event to all subscribers.
163	Sets the concurrency level.
164	Sets the delegate map and inverse map.
165	Returns an array of the values in this row.
166	Executes the given task on the delegate.
167	Transforms values from a table to another table using a function.
168	Creates a multiset containing all of the elements in the specified collection.
169	Add all causes of the given exception to the given set.
170	Expire the cache after the specified duration.
171	Sets the priority of the thread.
172	Creates a HostAndPort from the given host and port.
173	Parse a host string into a HostAndPort object.
174	Creates a HostAndPort from a string.
175	Extracts the host and port from a bracketed host - port string.
176	Returns a range of all elements in the range that match the given comparator.
177	Returns a range that is reversed.
178	Returns an immutable delegate that does not mutate the original set.
179	Returns an immutable type to instance map.
180	Inform the caller that a lock has been acquired.
181	Returns a new range set that contains all the elements in this set that are contained in the
182	Creates an immutable entry from the given entry.
183	Make an immutable entry from the given entry.
184	Wraps the given escaper in a UnicodeEscaper that will escape the given code point.
185	Add the given x and y to the distribution.
186	Returns an immutable bimap with the given entries.
187	Creates an immutable bi - map from the given entries.
188	Returns a function that returns the identity value.
189	Creates a function that returns true if the given predicate evaluates to true.
190	Returns UNSET.
191	Checks if the given entry is expired.
192	Reserve enough time for a given number of permits and return the amount of time left
193	Returns the code point at the specified index in the specified sequence.
194	Ensure that the hash table has at least the given capacity.
195	Inserts the given entry into the hash table.
196	Inserts the given entry into the hash table.
197	Deletes the entry from the hash table.
198	Deletes the given entry from the hash table.
199	Removes an entry from the hash table.
200	Remove the entry with the given key hash from the hash table.
201	Remove the entry with the given hash from the hash table.
202	Sets the number of nodes to be expected to be added.
203	Sets the number of edges that should be added to the network.
204	Returns the SQL statement with the values of the bind variables.
205	Sets a named parameter value.
206	Serialize an object to a byte array.
207	Converts a byte array to an object of the given type.
208	lock the data line.
209	Save the transaction undo log.
210	Function domain redis template.
211	Returns the application map as a string.
212	Locate a file on the classpath.
213	Creates a new ConnectionInformation object from the given connection.
214	Map a throwable to a message resource ID.
215	Checks for subscribers to skip.
216	Get the default event bus.
217	Subscribe to a subscriber method.
218	Unsubscribes from the given subscriber by the given event type.
219	Unregisters a subscriber from the event bus.
220	Post an event to the event bus.
221	Returns the sticky event of the given type.
222	Removes a sticky event.
223	Removes a sticky event from the list of events.
224	Returns all event types of the given event class.
225	Adds all interfaces to the list of event types.
226	Adds a subscriber info index to the list of indexes to be used for the event bus.
227	Attaches the activity to the execution scope.
228	Prepares the error fragment for the given exception.
229	Returns the title to use for the given failure event.
230	Returns the message to be displayed for the given ThrowableFailureEvent.
231	Post - complete drain.
232	Get the value of this read blocking if necessary.
233	Get the element at the given index as a Mono.
234	Resumes the observable sequence when the observable sequence completes.
235	Repeat the elements in the stream until the predicate returns true.
236	Convert a Callable into a Mono.
237	Gets and subtracts from the given sequence.
238	Convert a subscription to a QueueSubscription.
239	Subscribe to a subscriber with an error.
240	Atomic Long produced.
241	Creates a new subscription that emits a single value.
242	Creates a new Mono that emits the last value of the Mono.
243	Returns a wait strategy that waits for phased off sleep.
244	Returns a Mono that is the result of the AND of this and the other Publisher.
245	Returns a Mono that is the default value if the value is null.
246	Returns the result of the first Mono or the other Mono.
247	Creates a Mono that is resumed when the underlying Mono is resumed.
248	Returns an unmodifiable map of onEachOperatorHooks.
249	Creates a new MonoDelayUntil that applies the given trigger generator to all the other generators
250	Drains the queue until the queue is full.
251	Tries to subscribe to the source Publisher using the mapper function.
252	Converts the current Flux into a value using the given converter function.
253	Returns a new Flux that collects the results of this Flux using the provided collection supplier
254	Returns a new Flux that contains the results of applying the given function to each element of
255	Executes the given Runnable when the task is cancelled.
256	Executes the given Runnable when all the items in the Flux are completed.
257	Executes the provided action on the emitted value when the stream is complete.
258	Executes the provided consumer on each request in parallel.
259	Returns a parallel version of this stream with the specified max concurrency and prefetch.
260	Returns a new sequential view of the elements of this stream.
261	Validates the given subscribers.
262	Returns a new Flux that contains the results of applying the given function to each element of
263	Returns a new Flux which is composed of the results of applying the supplied function to each
264	Terminates the given field.
265	Log a signal.
266	Start the download queue.
267	Pause all running tasks.
268	Get the far of the file.
269	Unbind the service if it is idle.
270	Set the maximum number of threads that will be executed in the network.
271	Pause all the download ids in the pool.
272	Start the download.
273	Divert all the tasks in the list into the destination list.
274	Add a task to the list.
275	Pause the download queue.
276	Resume the download queue.
277	Checks if the response is a range response.
278	Returns the length of the instance in bytes for a trial.
279	Set whether the animation should be animated.
280	Set the elevation of the view.
281	Set the color of the label.
282	Add the configuration properties.
283	Add model class comment.
284	Add enum comment.
285	Add the getter comment to the given method.
286	Add general method comment.
287	Add comment.
288	Returns the fully qualified name of the class.
289	Get the select key element for the given introspected column and generated key.
290	Creates a new resource table for the legacy framework resources.
291	Creates a new resource table from the given package and resource paths.
292	Add missing styleable attributes
293	Set WiFi on.
294	Add the smallest screen width to the qualifiers.
295	Instrument a native method.
296	Rewrites the method body.
297	Checks if the target method is a boolean constructor.
298	Make the given class public.
299	Make a method public.
300	Make a method private.
301	Sets the node that the traversal is after.
302	Sets the accessibility node that is about to be traversed before this node.
303	Adds a child node to this node.
304	Pushes a default return value to the stack.
305	Returns the file mode of the given path.
306	Setup the activity controller.
307	Called when the application s configuration changes.
308	Recreates the activity.
309	Sets the call state and the incoming phone number.
310	Expect a message to be logged.
311	Returns true if the intent filters are exported.
312	Get the shape end point for a segment type
313	Get the point at the given length
314	Creates a ResTable_config object from the given buffer.
315	Returns the configuration bits that differ from the given configuration.
316	Returns true if the locale is the default locale.
317	Returns the application restrictions for the given package.
318	Adds a user profile to the cache.
319	Add a user to the system.
320	Connects to the socket.
321	Intercepts a virtual method with a invoke dynamic instruction.
322	Adds the mappings from other to this lookup table.
323	Adds a mapping between a package name and a package ID.
324	Grants the specified permissions to the specified process.
325	Deny the specified permissions for the specified process.
326	Selects the available SDKs.
327	Get the file from a zip file.
328	Get the next sent HTTP request.
329	Add a HTTP response rule to the FakeHttpLayer.
330	Adds a response rule to the list of responses.
331	Stops the native stream.
332	Adds a response rule to the list of responses that match the given request matcher.
333	Adds a new Bluetooth audio route to the router.
334	Sets the priority of a thread.
335	Returns the priority of the given thread.
336	Returns the index of the first n bits in the set.
337	Set the mode for the specified operation.
338	Parses a color value.
339	Get the color type from a color string.
340	Parse a float attribute.
341	Create a decoder for the given asset.
342	Create a decoder for the given file descriptor and source.
343	Click a specific menu item.
344	Call onActivityResult.
345	Start the lock task.
346	Stops the lock task.
347	Post a runnable to be run in the scheduled state.
348	Add a runnable to the queue.
349	Remove a runnable from the list.
350	Advance to the last posted runnable.
351	Moves the current time by the given amount.
352	Advance the time of this timer to the given time.
353	Run one task.
354	This is a legacy API. It is only intended to be used by the user code.
355	Sets the current time in milliseconds.
356	Returns true if the message queue is idle.
357	Reset the message queue.
358	Build an activity controller for the given activity class.
359	Build an activity controller.
360	Setup an activity.
361	Build a new fragment instance.
362	Speak the given text with the given parameters.
363	Returns the size of the default display.
364	Get the FileSystem for a given JAR file.
365	Get all logs for a given tag.
366	Returns a list of all the manifests in the system.
367	Returns the broadcast receiver with the given name.
368	Deletes a channel group.
369	Returns the Java version.
370	Applies the specified transformation to the input.
371	Returns the value associated with the given key.
372	Loads a resource bag value.
373	Post a runnable to the scheduler.
374	Post a runnable at the front of the queue.
375	Adds an activity to the list of activities if it is not already present.
376	Add a service to the list of services if it is not already present.
377	Adds a receiver to the activity if it is not present.
378	Add a provider to the list of providers if it is not present.
379	Adds an activity to the list of activities to be filtered.
380	Add or update service.
381	Adds or updates the receiver.
382	Adds or updates the provider.
383	Removes the specified activity from this context.
384	Remove the service with the given name.
385	Removes the provider with the given name.
386	Removes the receiver with the given name.
387	Set the list of resolve infos for the given intent.
388	Add the given resolve info to the given intent.
389	Add a package to the registry.
390	Adds an intent filter to the list of active filters for the specified component.
391	Adds an intent filter to the list of registered service filters for the given component.
392	Adds an intent filter to the receiver of the specified component.
393	Adds an intent filter to the provider.
394	Find the parent of the given script in the given packed locale.
395	Find the ancestors of the given packed_locale.
396	Call the PackageParser to parse the given apk file.
397	Returns an intent to be used to start an activity.
398	Verifies that the given header is valid.
399	Finds all libraries in the given resource directory.
400	Returns the name of the organization that owns the specified device.
401	Set the list of packages that are permitted to access the accessibility service.
402	Set the list of input methods that are permitted to be called on the given component.
403	Activates a reset token for a given admin component.
404	Gets the resource configurations.
405	Gets the resource locales.
406	Opens an asset from the stack.
407	Add a list of packages that are available for restore.
408	Run a runnable if the thread is paused.
409	Execute a ControlRunnable on the main thread.
410	This method is only intended to be used by the subclass - specific code that is not in
411	Writes a blob to the native byte array.
412	Write a blob to the native memory.
413	This method returns the contents of the buffer as a byte array.
414	Sets the data position.
415	Checks that the item is consistent with the current position. If it is it will throw an
416	Returns the next element in the buffer.
417	Reads the next item from the buffer.
418	Reads a value from the parcel.
419	Read zeroes.
420	Reads a primitive value.
421	Writes an item to the buffer.
422	Read a byte array from an input stream.
423	Returns the native object id for the given object.
424	Returns the native object with the given native id.
425	Call the attach method of the real application.
426	Sets whether the default network is active.
427	Play a sound.
428	Loads a sound from the specified path.
429	Reconstructs the widget view as if the phone was rotated.
430	Create widgets.
431	Invokes the seek complete listener.
432	Invoke the info listener.
433	Invokes the error listener.
434	Get the default display.
435	Sets the density density of the logical display.
436	Sets the X - DPI of the display.
437	Sets the y - DPI of the display.
438	Sets the name of the display.
439	Sets the flags of this display.
440	Sets the width of the widget.
441	Sets the height of the widget.
442	Sets the real width of the display.
443	Sets the real height of the display.
444	Sets the rotation of the object.
445	Set the state of the display.
446	Releases the connection.
447	Establish a route.
448	Returns the common superclass of the two given types.
449	Qualify a resource value.
450	Navigates to the next node in the tree.
451	Checks if the given feature is supported by Android.
452	Add a resource asset to the cache.
453	Returns the qualifier string from the configuration.
454	Set the configuration and display metrics.
455	Build a string from a char array.
456	Loads a service using a class loader.
457	Loads a service from the system classloader and its parents.
458	Load a service from the system property.
459	Check if the user has the permission to access the given USB device for the given package
460	Revokes a USB device permission from a package.
461	Adds or updates a USB device.
462	Remove a USB device.
463	Adds a USB port to the device.
464	Creates a temporary file for the given USB accessory.
465	Adds a data to the DropBoxManager.
466	Creates a new media item.
467	Creates a deep proxy for the given class.
468	Gets the value of the field with the given name.
469	Call a method on an object.
470	Call a method on an object with the given parameters.
471	Call a static method.
472	Call a static method.
473	Creates a new instance of the given class.
474	Call a constructor with the given parameters.
475	Implementation of the startRanging method.
476	Implementation of the sync version of the Font API.
477	Returns the resource table for the compile time SDK.
478	Dumps the view to the console.
479	Get the inner text of a view.
480	Get the appropriate wrapper for the given intent.
481	Post the intent to the BroadcastReceiver.
482	Convert RGB to HSV.
483	Begin a new section.
484	Ends the current section.
485	Get a provider for the given key.
486	Create a new file descriptor.
487	Runs all queued tasks.
488	Executes the next queued task.
489	Request audio focus.
490	This method is called by the application code to abandon an audio focus request.
491	This method is called when the native mode is started.
492	Returns the buffer at the specified index.
493	Queue an input buffer for processing.
494	Release the output buffer.
495	Simulates a time change.
496	Converts the given meta data to a bundle.
497	Converts the given SQL string with the COLLATE NOCASE collator replaced with the given string
498	Creates a new PackageInfo object from the given PackageInfo object.
499	Checks if the given package is granted for backwards compatibility.
500	Applies the given flags to the given componentInfo.
501	Returns the index of the requested permission.
502	Override this to provide custom badges for the user.
503	Returns true if the user has profile owner or device owner on the current user.
504	Extracts the characters corresponding to the given Unicode code point.
505	Creates a new instance of the given class using reflection.
506	Get the status of an account.
507	Get the content observers for a given URI.
508	Adds a display to the display manager.
509	Change the display configuration.
510	Fixes the trace path.
511	Finds the next set bit in the set and sets it to the given field.
512	Resets the given calendar to the first day of the given fields.
513	Parses the given cron expression into the internal representation.
514	Returns the index of the argument.
515	Generates an instruction to load a variable.
516	Stores a variable in the stack.
517	Loads the given number of arguments into the instruction.
518	Loads the argument array.
519	Loads a local variable of the given type.
520	Stores a local variable of the given type.
521	Swaps two types.
522	Creates a boxed type.
523	Unbox a number type.
524	Compare two types and perform a comparison.
525	Generates an instruction that stores a field of the given type.
526	Generates a GETSTATIC instruction.
527	Puts a static field of the given type into the given class.
528	Generates a GETFIELD instruction.
529	Puts a field on the stack.
530	Invokes a method.
531	Invokes a virtual method on a class object.
532	Invokes a constructor on the given type.
533	Invokes a static method on a class.
534	Invokes an interface method on the given object.
535	Throw an exception of the given type.
536	Checks if the given type is a cast to the given type.
537	Visits the implicit first frame.
538	Start a new frame.
539	Creates a new method item.
540	Creates a new float value and puts it into the pool.
541	Creates a string item.
542	Creates a new name type item.
543	Get the item with the given key.
544	Put 12 - byte value into pool.
545	Put a 16 - bit value into the pool.
546	Visit an enum.
547	Visits an annotation.
548	Calculate the position of a twist in the given direction.
549	Create a JPEG image from a raster.
550	Visits a parameter.
551	Visits an annotation.
552	Visits a parameter annotation.
553	Visits a type instruction.
554	Visits a field instruction.
555	implement the visitor to allow for the invoke interface
556	Generates a table switch instruction.
557	Generates a lookup switch instruction.
558	Generates an instruction that multi - array of the given size.
559	Visits a local variable annotation.
560	Visits a line number.
561	Read a frame type.
562	Set the input variables and stack.
563	Get the type of the local.
564	Sets the local variable.
565	Pushes the type of the given descriptor onto the stack.
566	Extracts the type from the descriptor and adds it to the class writer.
567	Pop the specified number of elements from the output stack.
568	Pop the argument stack from the given descriptor.
569	Initializes the type of the variable.
570	Initializes the type.
571	Visit the source.
572	Visits an outer class.
573	Visits an annotation.
574	Visits a type annotation.
575	Extract the value from the given bitstring.
576	Returns the object type for the given internal name.
577	Returns an array of Type objects for the given method descriptor.
578	Returns the Java type of the return type of the given method descriptor.
579	Returns the number of arguments and return sizes in the given descriptor.
580	Returns the type of the given character.
581	Get the descriptor of the field.
582	Returns the descriptor for the given class.
583	Returns the opcode of the instruction.
584	Puts a byte into the buffer.
585	Put a byte into the byte vector.
586	Puts a short into the byte vector.
587	Put a byte into the byte vector.
588	Puts an integer into the byte vector.
589	Puts a long into the byte vector.
590	Writes a UTF - 8 string to the byte vector.
591	Puts a byte array into the buffer.
592	Enlarges the buffer by the given size.
593	Returns the column name for the given column index.
594	Sets the column mapping.
595	Get the value of the property with the given name.
596	Initializes the configuration with the given configuration value providers.
597	Returns the IOCase object for the given name.
598	Converts the case of the given string to lower case.
599	Returns the current value of the change.
600	Set the value of the change.
601	Creates an array if the argument array is null.
602	Creates a new set if the current value is null.
603	Returns the global parameter.
604	Attaches the parameters to the prepared statement.
605	Returns the absolute path of the given path.
606	Parses a checksum string into a CheckSum object.
607	Computes the checksum of the given string.
608	Returns a class loader that includes the project s compile classpath.
609	Print the settings of the database.
610	Parse the properties file.
611	Checks to see if the current field value is specified.
612	Writes the next line of text to the output stream.
613	Checks if the given string contains special characters.
614	Process a line of text.
615	Process a single character.
616	Executes the Liquibase update.
617	Convert the given value to the appropriate type.
618	Gets the value of the property.
619	Sets the value of the property.
620	Adds a list of aliases to the configuration property.
621	Sets the default value.
622	Generates the SQL for the CREATE INDEX statement.
623	Checks whether the expression is a computed expression.
624	Tag the current database with the given tag string.
625	List the locks for this database.
626	Returns a list of ChangeSetStatus objects for all changes in the database.
627	Clear the database change log checksums.
628	Parse the CSV data from the given reader using the given mapping strategy.
629	Process a line of text.
630	Get the property editor for the given property descriptor.
631	Load the classes in a jar.
632	Add the class if it matches the given filter.
633	Returns the type of the property.
634	Checks if the given object has a read and a write property.
635	Sets the property value of the given object.
636	Returns the read method of the given object and property name.
637	Returns the setter method for the given property name.
638	Get the methods of the given object.
639	Undo a collection operation.
640	Gets the outgoing foreign keys.
641	Creates a new CDI liquibase configuration.
642	Acquires a file lock.
643	Get the simple path for a resource.
644	Checks if the change set is filtered by the given filter type.
645	Get the value of a column from a ResultSet.
646	Initializes the configuration with the given value providers.
647	Initialize the database.
648	Checks if the given objects name matches the given database object.
649	Set the validate option if available.
650	Adds a type to the snapshot.
651	This method is called after the Spring bean s properties have been set.
652	Checks for trimming the given string if trimming is enabled.
653	Convert the given value to the property value.
654	Main method of the application.
655	Splits the given argument into an array of arguments.
656	Checks if the given argument is a command.
657	Checks if the given command is a no - arg command.
658	Extract a file from a jar file.
659	Parse the default property file from the classpath.
660	Fixup the arguments to be passed to the command line.
661	Checks the setup.
662	Checks for missing parameters in the changeset command.
663	Checks for malformed parameters in the command.
664	Parse the properties file.
665	Print the help message.
666	Print the help text for the command line.
667	Parse the command line arguments.
668	Get the value of the specified parameter.
669	Read integer.
670	Checks if the given labels match the current labels.
671	Checks if the given example is a table in the database.
672	Creates a snapshot of the database.
673	Creates a snapshot of the given example.
674	Generate the children of this table.
675	Recursively delete all files in a directory.
676	Split multi - line SQL into multiple SQL statements.
677	pads a string to a certain length
678	left pad a string to a certain length
679	Generate a random identifier of the given length.
680	Remove any SQL comments and whitespaces from the end of the string.
681	Concatenate a string with a consistent case.
682	Get the catalog names for a database.
683	Appends a clause to the list of clauses.
684	Appends a clause to the list of clauses.
685	Prepend a clause to the beginning of the list.
686	Inserts a new string clause before the existing key in the set of clauses.
687	Inserts a new string clause after the existing key in the set of clauses.
688	Returns the value of the clause with the given key.
689	Returns the subclause for the given key.
690	Writes the change log to the given output stream.
691	Returns a list of all the databases implemented by this class.
692	Returns a list of all internal databases.
693	Validate the parameters.
694	Converts this data type to a database data type.
695	Converts an object to a SQL string.
696	Checks if the given string is the current date time function.
697	Returns true if the database supports boolean data type.
698	Returns the concatenation SQL.
699	Generate the statements volatile.
700	Add an artifact to the set of URLs.
701	Returns the field with the given name from the given class or the class hierarchy if it is
702	Returns the list of alternate paths for the given path.
703	Checks if the given runtime contexts match this context.
704	Creates a composite resource accessor that can be used to access the log files.
705	Closes the database.
706	Append the next character and advance the loop.
707	Checks if the next character is escaped.
708	Checks if the next character is escaped.
709	Returns all children with the given name in the given namespace.
710	Set the value of this node.
711	Returns the value of the node as an object of the given type.
712	Get the child node with the given namespace and name.
713	Get the child value of the given node name.
714	Get the value of the child with the given name in the given namespace.
715	Closes all the streams.
716	Returns true if the type is a auto increment.
717	Checks if the given path is a compressed file.
718	Returns the column with the given name.
719	Returns a singleton instance of the given type.
720	Tag the database with the given tag string.
721	Creates a precondition with the given tag name.
722	Checks if the given value is a valid today or today format.
723	Returns the value of the parameter with the given key.
724	Set the validate option if available.
725	Generate the unique constraints SQL for the given schema and name.
726	Get the set parameters for a given change.
727	Returns a map of all required change parameters for the given database.
728	Convert the value to a string.
729	Returns the set of serializable fields for this change.
730	Get full path from filename.
731	Create the index lookup.
732	Returns the column index for the given column name.
733	Find the descriptor for the given column.
734	Find a field in the bean by column index.
735	Returns the column name for the given column index.
736	Find a descriptor by name.
737	Find a field by name.
738	Checks if the given property name matches the given descriptor.
739	Loads the descriptor map.
740	Returns the column name for the given column index.
741	Sets the column mapping.
742	Returns the size of the parameter.
743	Returns true if the given column type supports the given default value as computed.
744	Get the list of changes that will be run.
745	Escape the given object name.
746	Sets the value of the column as a numeric value.
747	set the value of the boolean column.
748	set the default value for boolean columns
749	Unregister all changes with the given name.
750	Returns a list of all the changes that have been defined.
751	Creates a new plugin instance.
752	Prompt for a non - local database.
753	Get the schema name of the current connection.
754	Checks if the update is safe to run.
755	Filter the list of visitors to only apply to rollback.
756	Returns the maximum number of fractional digits that can be used to generate a timestamp.
757	Checks if the given string is valid Liquibase.
758	Creates a new node in the change log.
759	Checks if the given object is not null.
760	Checks if the given product name is a sybase product name.
761	Creates a new SqlVisitor instance for the given tag name.
762	Get the local host address.
763	Get the local hostname.
764	Surround with schema sets.
765	Adds a schema to the given procedure text.
766	Encodes the given byte array into a character array of hexadecimal characters.
767	Get the schema names of the given database.
768	Reads the next line from the input stream.
769	Returns the next line from the input stream.
770	Returns true if the reader is closed.
771	Start polling the configuration source.
772	Start the watcher.
773	Set the folder where the application configuration file is located.
774	Gets a property that is an integer.
775	Gets a long property.
776	Gets a property that will be set to true if the value of the property is equal to
777	Gets a float property with a default value.
778	Gets a double property with a default value.
779	Load properties from a table.
780	Get a DynamicProperty instance for the given property name.
781	Updates all properties.
782	Add a callback to be executed when the property changes.
783	Remove all callbacks from the property.
784	Get the HTTP verb URI regex property value.
785	Load properties from a stream.
786	Add a property to the map.
787	Update properties.
788	Adds or updates a property.
789	Delete a property from the configuration.
790	Clears the map.
791	Returns a copy of the properties.
792	Load properties from the given source.
793	Adds a configuration at the given index.
794	Remove a configuration from the container.
795	Remove a configuration from the container.
796	Returns an iterator over all the keys that are set in this configuration.
797	Returns all keys that are defined in the configuration.
798	Checks if the configuration contains a value for the given key.
799	Returns a list of values for the specified key.
800	Get the property as an array of strings.
801	Loads the configuration from the classpath.
802	Load properties from configuration.
803	Load properties into the configuration instance.
804	Poll for configuration values.
805	Returns the angle between the given location and this surface.
806	If the value is not null then the value is mapped to the given mappingFunction.
807	Example of how to write a set of cloud balance.
808	Returns the property name of a getter method.
809	Checks if the given method is a getter method.
810	Adds a hard constraint match to the score.
811	Adds a medium weight constraint match to the score.
812	Adds a soft constraint match.
813	Clean the path of a URL.
814	Calculates the standard deviation squared of the standard deviation of the asset classes in this asset pool.
815	Checks if problem facts exist.
816	Returns the problem scale for the given solution.
817	Generates a task name from the request.
818	Checks if the request context has a timeout.
819	Returns true if the task timeout is not configured or per - request timeout is not configured in
820	Create a task with a timeout.
821	Build a resource.
822	Creates a build task for the given hash.
823	Creates a new build task.
824	Write generic failure info.
825	Creates a single trace from a ShallowTrace.
826	Create a batchable task.
827	Returns the name of the batch.
828	Harvest the current histogram and pass it to the consumer.
829	Creates a default configuration for the REST service.
830	Compose a chain of promises.
831	Creates a new FusionTask with the given name and task and propagator.
832	Sets a property on the engine.
833	Creates a resolved value.
834	Propagate the result of a promise to a settable.
835	Create a summary of a member.
836	Create a summary of a member.
837	Create a task that collects the connection summaries for a person.
838	Creates a task that will run the sideEffect on the parent task.
839	Creates a task that will timeout after the specified time.
840	Finds the node with the next lowest SN in the list of children.
841	Append the stack trace of the given exception to the task stack trace.
842	Monitor the current step.
843	Check for a stall.
844	Creates a task that retries the task with the given retry policy.
845	Wraps the given attempt in a retry task.
846	Retry the given attempt.
847	Starts the task.
848	Helper method to fail coercion.
849	Sets the REST client used to make requests.
850	Acquire a lock.
851	Releases the lock.
852	Attempts to acquire a permit for a given plan class.
853	Get the client.
854	Initializes the async http client.
855	Consume to any of the given characters.
856	Throws an IllegalArgumentException if all elements in the array are null.
857	Checks that the string is not null or empty.
858	Parse a transform string.
859	Get a list of files.
860	Find files by filename.
861	Find files.
862	Remove a file from the database.
863	Remove all files matching the given query.
864	Put a value into the map.
865	Get the value associated with the specified key.
866	Create a builder for the given type.
867	Returns the maximum time in milliseconds.
868	Create a new instance of the compressor with the specified property.
869	Returns the name of the cluster.
870	Returns the master address of the cluster.
871	Checks if the given server address is the master of the node.
872	Returns the maximum size of the BSON document to be encoded.
873	Adds a key to the query.
874	Applies the majority write concern to the transaction options.
875	Returns true if the response is OK.
876	Get the error message.
877	Set the annotations to read from.
878	Returns the list of index names.
879	Generates a unique index name from the given index document.
880	Validate the file.
881	Get the codec for the given BSON type.
882	Calculates the batch size.
883	Parse a long from a string.
884	Decode the given document with a child context.
885	Check if the current state is in the given valid states.
886	Adds the given list of elements to the end of the current document.
887	Writes the extra elements to the output.
888	Returns the object id as a byte array.
889	Puts the object id into the given buffer.
890	Returns the hex string representation of the object id.
891	Returns a short description of this message.
892	Creates a new BasicDBObjectBuilder from a Map.
893	Pushes a new object onto the stack.
894	Add the bulk write result to the result set.
895	Adds the error result.
896	Adds a write error result to the result set.
897	Adds the error result.
898	Returns the error that occurred during the write.
899	Atomically sets the next node in the linked list.
900	Returns the next non - marker node.
901	Returns the successor of this node.
902	Returns the predecessor of this node.
903	Returns the next node in the list or null if there is no next.
904	Returns the previous node or null if there is no such predecessor.
905	Appends the specified element to the end of this list.
906	Inserts the specified element at the beginning of this list.
907	Deletes the next node from the list.
908	Replaces the first node with the specified element.
909	Unlocks the database.
910	Choose a server from the cluster.
911	Creates a read preference that allows to read the primary tags.
912	Creates a secondary read preference.
913	Creates a secondary read preference that allows to read tags from a collection of tags.
914	Creates a read preference that allows to read tags from the underlying data source.
915	Creates a read preference that allows to read the primary tags of a tag set.
916	Creates a secondary read preference with the given tag set.
917	Creates a secondary read preference that allows to read tags with a given tag set.
918	Create a read preference that selects tags from the given tag set that are nearest to the given
919	Creates a read preference that allows to read the primary tags from a list of tag sets.
920	Creates a read preference that allows to read the nearest tag set.
921	Returns the read preference with the given name.
922	Creates a new read preference with the given name and tag set.
923	Creates a new read preference with the given name and tag set list.
924	Reads a portion of the input stream into a byte array.
925	Read an int from the given input stream.
926	Read an int from the given buffer at the given offset.
927	Read a big - endian integer from the given buffer at the given offset.
928	Read a long from the given input stream.
929	Returns the credential list.
930	Get a random server from the list of server descriptions.
931	Creates a new MongoClient instance with the given connection string and driver information.
932	Returns a copy of this list.
933	Create a builder for a given type.
934	Get a collection instance.
935	Drops the database.
936	Returns a sorted set of all collections in this collection.
937	Executes a command on the server.
938	Executes a command on the database.
939	Checks if a collection exists.
940	Executes a code string as a command.
941	Returns statistics about the database.
942	Removes a user from the collection.
943	Returns the read preference for the given command.
944	Get a codec for the given class.
945	Inserts a document into the collection.
946	Executes an update query.
947	Find a single document by _id and projection.
948	Renames the collection.
949	Performs a map - reduce operation on the database.
950	Explain the results of an aggregation.
951	Create a new index.
952	Creates a new index.
953	Find and remove a single document from the database.
954	Set the decoder factory.
955	Set the encoder factory.
956	Returns the list of indexes.
957	Drops an index.
958	Drops an index.
959	Returns true if the command is capped.
960	Set the internal class.
961	Get the class for the given path.
962	Creates a new document that will be updated with the given value.
963	Creates a new update that will set the value of a field on insert.
964	Creates a document that renames the field with the given name to the given new name.
965	Creates a update that increments the value of the field identified by the given name.
966	Creates a BSON mul operation.
967	Creates a new update that updates the field identified by fieldName to the minimum value of the given
968	Creates a BsonUpdate that updates the field identified by fieldName to the maximum value of the given
969	Creates a new update that adds the given value to the set identified by the given field name
970	Creates a new query that adds each element of the given list to the given field.
971	Creates a new update that inserts a new value into the list of documents.
972	Pushes each value to the collection of documents.
973	Creates a new update that removes all the documents that match the given field name and value.
974	Returns a new query that pulls documents from the collection that match the given filter.
975	Creates a pull all update.
976	Writes the query prologue.
977	Increment generation on socket exception.
978	Get the class hierarchy of the given class.
979	Creates a replace options from the given update options.
980	Decodes a string into a byte array.
981	Encodes a byte array into a Base64 string.
982	Returns the address of the primary node of the cluster.
983	Returns the current status of the replica set.
984	Returns a list of all databases in the database.
985	Sync all files in the database.
986	Sync and lock the database.
987	Unlocks the file.
988	Returns the value of the field as a number.
989	Creates a new connection id with the specified server value.
990	Computes the hierarchy of the given class.
991	Serializes the object to JSON.
992	Executes the command and returns a cursor that iterates over the results.
993	Gets the expire after.
994	Convert the group operation to a MongoDB group operation.
995	Gets the logical session timeout in minutes.
996	Returns all server descriptions.
997	Get a server description by its address.
998	Gets the primary servers.
999	Gets the secondary servers.
1000	Gets the secondary servers with the given tag set.
1001	Get any servers.
1002	Get any primary or secondary servers.
1003	Returns any server that has any of the specified tags.
1004	Get a short description of this server.
1005	Creates a new MongoCredential with the given user name database and password.
1006	Creates a new scram sha256 credential.
1007	Creates a plain credential with the given user name source and password.
1008	Creates a new credential with the specified mechanism property.
1009	Creates a new MongoCredential with the specified authentication mechanism.
1010	Returns the mechanism property with the specified key or the default value if the key is not found
1011	Get the contents of the stream as a byte array.
1012	Adds a serializer for the given class.
1013	Sets whether or not the update is a multi update.
1014	Encodes the message to the given output.
1015	Writes the message prologue.
1016	Adds a document to the output.
1017	Adds a document to the output that can be encoded into a collection.
1018	Backpatch the message length.
1019	Create a new chunk.
1020	Creates a copy of this cursor.
1021	Returns true if there are more records to return.
1022	Try to get the next object in the cursor.
1023	Returns an array of the specified size.
1024	Returns the first object in the collection.
1025	Returns the read preference to use for this query.
1026	Gets the read concern.
1027	Internal put method.
1028	Puts a DBRef.
1029	Returns a BulkWriteResult that indicates that the write was acknowledged.
1030	Returns the socket address.
1031	Get the list of addresses that this socket is listening on.
1032	Creates a filter that tests if the value of the given field is not equal to the given
1033	Creates a filter that tests if the value of the given field is greater than the given value
1034	Creates a filter that tests if the value of a field is less than the given value.
1035	Creates a filter that tests if the value of a field is greater than or equal to the
1036	Creates a filter that tests if the value of a field is less than or equal to the
1037	Creates an OR filter from the given filters.
1038	Returns a filter that tests if any of the given filters evaluate to true and does not evaluate
1039	Creates a filter that matches documents that match a given field name and a given boolean value.
1040	Searches for documents in the given language.
1041	Creates a text filter that searches for documents that contain text.
1042	Creates a filter that matches documents that contain only the elements of the given filter.
1043	Returns a query that is applied to find documents that are within a bounding box.
1044	Returns a query that selects documents that are within the given points.
1045	Returns a query that is applied to find documents that are within the specified bounding box.
1046	Create a filter that selects points near a specified point.
1047	Create a near filter document that matches documents near the specified point.
1048	Returns the regex flags for the given string.
1049	Returns the regex flag for the given character.
1050	Converts a flags integer into a regex string.
1051	Sets the text version.
1052	Sets the version of the sphere to index.
1053	Creates a copy of this options.
1054	Convert the given value to the given type.
1055	Encodes the given document to the given writer.
1056	Executes the write operation on the given connection.
1057	Create a bulk update request builder.
1058	Set the array filters.
1059	Executes the map reduce command.
1060	Initializes the mongo embedded library.
1061	Creates a new MongoClient instance.
1062	Closes the embedded library.
1063	Enables SNI for the given host and SSL parameters.
1064	Get the type of the given object.
1065	Convert the query into a DBObject.
1066	Returns a short description of this ClusterConfiguration.
1067	Creates an update result that indicates that the update was acknowledged.
1068	Returns the content type of this file.
1069	Get the aliases for this file.
1070	Returns the first key in the document.
1071	Encodes the given value using the given encoder with the default context.
1072	Converts the readConcern into a BsonDocument.
1073	Compresses the given list of buffers into the given output.
1074	Get a string value.
1075	Get a boolean value.
1076	Returns the value of the given field as an ObjectId or the given default value if the field
1077	Returns the value of the specified field as a Date or the specified default value if the field
1078	Canonicalizes the given object.
1079	Returns the first credential in the list.
1080	Creates a new session with the given options.
1081	Get the window timeout in milliseconds.
1082	Returns the current state as a BsonDocument.
1083	Returns true if the write operation has been acknowledged.
1084	Returns a copy of this write concern with the given write timeout.
1085	Returns a copy of this write concern with the given write timeout.
1086	Sets the write timeout for this write operation.
1087	Create a new majority write concern.
1088	Inserts the given document into the collection.
1089	Creates a bulk request builder for the given query.
1090	Executes the bulk write operation.
1091	Returns a copy of this object.
1092	Creates a geo - haystack index.
1093	Returns the names of the indexes that should be indexed.
1094	Returns the value associated with the given key or the given default value if the key is not
1095	Returns the value associated with the given key as a document. If the key does not exist
1096	Returns the value associated with the given key as an array. If the key does not exist
1097	Returns the value associated with the given key as a number or the given default value if the
1098	Returns the value associated with the given key as an int32 or the given default value if
1099	Returns the value associated with the given key as an int64 or the given default value if
1100	Returns the value associated with the given key as a decimal128 or the given default value if
1101	Returns the value associated with the given key as a double or the given default value if the
1102	Returns the value associated with the given key as a boolean or the given default value if the
1103	Returns the value associated with the given key as a string or the given default value if the
1104	Returns the value associated with the given key as a date time or the given default value if
1105	Returns the value associated with the given key as a timestamp or the given default value if the
1106	Returns the value of the given key as an ObjectId or the given default value if the key
1107	Returns the value associated with the given key as a binary value. If the key does not
1108	Returns the value associated with the given key as a regular expression. If the key does not
1109	Write the buffer to the socket.
1110	Converts the given object to a BsonDocument.
1111	Checks if the value is not null.
1112	Checks if the given condition is true.
1113	Gets the property builder with the specified name.
1114	Builds the class model.
1115	Returns the update options.
1116	Gets the wrapper if the given class is a reflection object.
1117	Get a wrapper for a class.
1118	Returns the value of the field as a UUID.
1119	Returns the value of this field as a UUID with the given uuid representation.
1120	Parse a variable.
1121	Reads a hex character.
1122	Skips any whitespace characters.
1123	Parse a JSON string.
1124	Parse a number.
1125	Parse the exponent.
1126	Parse an array.
1127	Update a single document in the collection.
1128	Creates a new connection description with the specified connection id.
1129	Returns a write concern that indicates that the operation was acknowledged.
1130	Returns a write concern that indicates that the write was acknowledged.
1131	Get an embedded value.
1132	Construct a list of values from the map.
1133	Merge the given options with the given default options.
1134	Release an item to the pool.
1135	Gets an item from the pool.
1136	Closes the pool.
1137	Pipe the internal buffer to the given output stream.
1138	Throws an invalid operation if the given context type is not valid.
1139	Throws an exception when the method is only called when the state is one of the given states
1140	Verifies that the current state is the required type.
1141	Verifies that the current element name matches the given expected name.
1142	Checks the preconditions for the method.
1143	Parse a string into a Decimal128 object.
1144	Returns the BigDecimal value of this Decimal128.
1145	Returns the bytes of the high four bits of the low and four bits of the high.
1146	Sets the hint to use when explaining the result.
1147	Returns the collation document.
1148	Writes the file to the given file.
1149	Writes the contents of this buffer to the given output stream.
1150	Remove the file from the database.
1151	Sets the sort document.
1152	Sets the document to sort the documents.
1153	Returns the namespace of the document.
1154	Returns the database name of the document.
1155	Creates a change stream codec for the given document class.
1156	Creates a builder for the given options.
1157	Reset the connection pool to its initial state.
1158	Creates a copy of this options.
1159	Get the write concern.
1160	Get the user agent for the given service.
1161	Populate the properties of the vcap service.
1162	Checks if the user group key matches the value in the AAD.
1163	Convert a list of groups to a set of GrantedAuthorities.
1164	Get the service endpoints for the given environment.
1165	AzureADJwtTokenFilter constructor.
1166	Get all todo items
1167	Registers a path to be reloaded.
1168	Build the given distribution.
1169	Generate a summary of the results of a pipeline.
1170	Register a directory for changes.
1171	Adds a new property to the type.
1172	Returns a RamlType object for the given name.
1173	Sets the kind of the file event.
1174	Executes the given callback with the given Handlebars instance.
1175	Configure the meter with the given configuration.
1176	Executes the given callback with the template engine.
1177	Bind a form filter to the application.
1178	Add basic authentication.
1179	Resolves the given value.
1180	Get a resource path.
1181	Define a RAML type.
1182	Convert the RAML document to a YAML document.
1183	Returns the status of the job.
1184	Returns the status code.
1185	Sets the status for this response.
1186	Sets the media type.
1187	Creates a runnable that enforces the bean s bean bean.
1188	Sets the media type.
1189	Get a query parameter.
1190	Returns the form parameter with the given name.
1191	Returns the header parameter with the given name.
1192	Returns the response for the given status code.
1193	Configures the Hibernate validator with the given configuration.
1194	Reads from the underlying stream and encodes the result into the given byte array.
1195	Create a new Requery instance with a model.
1196	Create a reactor with a given model.
1197	Create a new Requery that will store a complete entity.
1198	Create a new Requery instance with a Kotlin entity model.
1199	Sets the type and level of JavaScript escaping.
1200	Sets the type and level of HTML escaping.
1201	Sets the JSON type and level for the XSS.
1202	Sets the type and level of the CSS string escaping.
1203	Get the attributes for the given path.
1204	Returns the CSS code for the given element.
1205	Parse the size value.
1206	Writes the given sequence to the given path.
1207	Sets the handle for the request.
1208	Set required properties on the given model.
1209	Returns the last event id as an instance of the specified type.
1210	Sends the given data to the server.
1211	Adds a model to the view.
1212	Adds a map of values to the view.
1213	Creates a new class loader that uses the user s directory as the base directory.
1214	Creates a class loader that loads classes from the public directory of the project.
1215	Set the attributes for this route method.
1216	Adds an attribute to the route.
1217	Customizes the route parameter with the given name.
1218	Returns a Status object for the given status code.
1219	Do with consumer.
1220	Parse the given SQL string and replace the named parameters with the given statement context.
1221	Send the asset.
1222	Executes the given consumer with the given DBI.
1223	Do with consumer.
1224	Adds a job to the queue.
1225	Creates a new Quartz instance with the given job class and trigger class.
1226	Shuts down the next group in the given iterator.
1227	Performs a Cassandra cluster configuration.
1228	Create a new result with the specified HTTP status.
1229	Adds a module to the Jackson compiler.
1230	Unauthenticated with a provider.
1231	Use a form pattern to configure the client to use a login form.
1232	Parse the given application and return the list of methods that match the filter.
1233	Scan for service types.
1234	Add Swagger to the API.
1235	Sets the Swagger options.
1236	Add RAML file to the API
1237	Set the RAML options.
1238	Process the source string using the configuration.
1239	Receive resultcte recepcaoOS.
1240	Recepcao lote.
1241	Receives the result of the CteInutilizacaoCT call.
1242	Recepcao evento do result.
1243	Receive a result of cte consulta CT.
1244	Receive resultmdfeConsNaoEnc.
1245	Convert the default envelope to a SOAP envelope.
1246	Get the namespace declarations of the given SOAP envelope.
1247	Receive NfeConsultaNF result.
1248	Adiciona o lote assinado.
1249	Envia lote do NFLoteRetornoDados.
1250	Consulta o status do um uma UF
1251	Entrega o evento do correcao no banco no se encuente
1252	Cancela un nota
1253	Inicia o evento do inutilizacao no formato no formato
1254	Consulta Cadastro do consulta
1255	Recepcao lote.
1256	This method will receive a result of cte receive.
1257	Retorna o xml assinado do Correcao.
1258	Recepcao evento do resultcte.
1259	Cancela a nota
1260	Receives the result of the MDFe Consulta MDF operation.
1261	Recepcao a result of MDFe retornamento.
1262	Cancela a MDFe
1263	Envia uma mdfe de uma municipio de uma enc
1264	Encerramento assinado do mdfe.
1265	Receive result of status service MDF
1266	EfetuaConsultaStatusBahia.
1267	Computes the updated Xu vector.
1268	Cosine similarity.
1269	Compute the YTY solver.
1270	Delete all files and subdirectories in the given directory.
1271	Loads an instance of the given class.
1272	Publish additional model data to the PMML.
1273	Opens a custom tab with the given uri.
1274	Get the package name to use for this app.
1275	Checks if the intent has specialized handlers.
1276	Load the access token from the storage.
1277	Opens the custom tab.
1278	Checks that the given configuration is valid.
1279	Creates an intent to send a response to the user.
1280	Edit the map of configuration handlers for a given method.
1281	Main method that runs the Sample framework.
1282	Shutdown the Mesos scheduler.
1283	Evaluate the task assignment.
1284	Evaluate the task against the target VM.
1285	Evaluate the given task request against the given target VM.
1286	Set the callback to be called when the autoScaler is started.
1287	Disable a VM for a given amount of time.
1288	Disable a VM by VM ID.
1289	Enables a VM.
1290	Shutdown the executor service.
1291	Checks if the given properties are set.
1292	Reads the demo file information for the given source.
1293	Read the CDOTA match metadata from the given stream.
1294	Reads a packet from the given source.
1295	Reads a varint.
1296	Read a fixed - length int from the stream.
1297	Reads the engine type from the stream.
1298	Append a child tag to this tag.
1299	Adds the given children to the tag.
1300	If the optional is present applies the function to it and return the result.
1301	Renders the HTML - tag as a document declaration.
1302	Set the attribute with the given name and value.
1303	Sets the attribute to the given value.
1304	Adds an attribute to the list of attributes to be rendered.
1305	Adds the given CSS classes to the element.
1306	Compresses a JS code.
1307	Parse the properties from the given string.
1308	Parse the values of the property.
1309	Handles when the menu items width has changed.
1310	Set the left action icon color.
1311	Set the background color of the suggestions list.
1312	Opens the menu.
1313	Close the menu.
1314	Inflates the overflow menu.
1315	Set whether or not the search key should be shown.
1316	Enables or disables the dismiss on outside click.
1317	Sets the search focused state.
1318	Update the height of the suggestions section.
1319	Calculates the height of all the items in the given list.
1320	Set the callback which is called when the suggestion of the item is bound to the search.
1321	Calculate the MD5 checksum of a file.
1322	Configure the OkHttpClient to ignore the Ssl Certificate.
1323	Reads the value from the given reader.
1324	Returns a name forms for the abstract type of this class.
1325	Returns the name of the package containing the given nested classes.
1326	Returns the type of this class as an immutable name form.
1327	Create a new instance of the appropriate adapter for the given type.
1328	Returns an immutable set that contains all elements.
1329	Returns an iterator over the elements in this list.
1330	Returns the cache key for the given value attribute.
1331	Returns the serialized name of the element.
1332	Returns the name of the component.
1333	Returns a predicate that evaluates to true if the given expression evaluates to true.
1334	Wrap a ListenableFuture into a FluentFuture.
1335	Returns an immutable view of the map.
1336	Convert a DeclaredType into a string.
1337	Returns a buffer that contains the next token from the parser.
1338	Closes the connection.
1339	Executes a JavaScript function with the given parameters.
1340	Set proxy settings.
1341	Set the HTTP proxy for the web client.
1342	Sets the auto proxy URL.
1343	Creates a new Box Developer Edition API connection for the given user ID.
1344	Updates the modified fields from another process definition entity.
1345	This method adds a fourEyes task listener to the activity s task definition.
1346	Copy the process definitions from the default process engine to all tenants
1347	Check if the task is currently selected via a bridge. If so switch to the bridge task
1348	Returns the path to the servlet context for the given process definition.
1349	Returns the path to the servlet context for the given process definition.
1350	Get the process application info for the given process definition.
1351	Get the process application info for a given process definition id.
1352	User details service.
1353	Casts the given value to a Java object.
1354	Add camunda BPM component to Camel context
1355	Checks that the variable with the given name is set in the given execution.
1356	Checks that the given variable is set in the given execution.
1357	Open the menu.
1358	Close the menu.
1359	Updates the position of the sub - menu items.
1360	This method returns the coordinates of the main action view.
1361	Returns the center of the action view.
1362	Calculate the positions of the sub - action items.
1363	Gets the content view of the main activity.
1364	Get the screen size.
1365	Restore the layout params of the subActionItem after an animation.
1366	Set the content view of the sub - action button.
1367	Set the position of the view.
1368	Attaches this alert window to the activity s content view.
1369	Permit a state transition to a destination state.
1370	Permit the given state if it is satisfied by the given trigger.
1371	Permit the given trigger if the destination state is not identity transition and the given guard returns
1372	Adds a trigger to the configuration if the given guard is true.
1373	Get or create a state representation.
1374	Add an instance to the managed instances.
1375	Sets the overflow value for the given bucket.
1376	Merges this Hll with another Hll.
1377	Encodes a sequence of bytes.
1378	Decodes a sequence of bytes.
1379	Decodes an optional sequence element.
1380	Encodes a bit string with the specified number of padding bits.
1381	Encodes an octet string.
1382	Encodes a length into a byte array.
1383	Get a logger by name.
1384	Log a debug message.
1385	Log a warning.
1386	Log an error.
1387	Replaces the path of the URI.
1388	Percent - decodes the given string.
1389	Process the timestamp list of the response chunks.
1390	Builds a configuration instance using the given configuration provider.
1391	Update the value with a new timestamp.
1392	Encodes a byte array into a base64 string.
1393	Decode a base64 encoded string into a byte array.
1394	Flush the output stream.
1395	Dumps the destination for the given URI.
1396	Computes the alpha value for a given weight and age in seconds.
1397	Propagates cancellation to the destination future.
1398	Returns an unmodifiable version of the given future.
1399	Returns an unmodifiable version of the given future.
1400	Creates a new CompletableFuture that is failed with the given throwable.
1401	Get the value of the given future. If the future is interrupted or the future is cancelled
1402	Tries to get the value of the given future. If the future is done returns an empty
1403	Try to get the value from the future. If the future is cancelled or the timeout is
1404	Try to get the value from the given future. If the future is cancelled the timeout is
1405	Checks that the given future is done and throws an exception if it is not.
1406	Returns a future that is completed when any of the given futures complete.
1407	Returns the first completed future in the given futures.
1408	Returns the first completed future in the given collection. If propagateCancel is true the future will
1409	Returns a future that completes all the given futures in sequence.
1410	Converts a ListenableFuture to a CompletableFuture.
1411	Creates a ListenableFuture that will complete when the given CompletableFuture completes.
1412	Adds an exception callback to the given future.
1413	Gets histogram for the given buckets.
1414	Try to remove a node from the tree.
1415	Computes the maximum weight of a node.
1416	Adds a hash to the hash table.
1417	Load properties from a file.
1418	Binds the global configuration defaults for the given configuration class.
1419	Returns the next poll duration.
1420	Returns the next value after the given value.
1421	Multiply this duration by the given amount.
1422	Divide this duration by the given amount.
1423	Find a single field using a given strategy.
1424	Checks if the given field is static or not.
1425	Throws an exception if the field was not found.
1426	Returns the first field annotated with the given annotation on the given object.
1427	Creates a new condition listener.
1428	Creates a new condition factory that polls the given executor service.
1429	Waits until the next condition is true.
1430	Waits until the value is false.
1431	Creates a condition factory that will wait for all uncaught exceptions.
1432	Sets the default timeout for the wait constraint.
1433	Sets the default timeout for the wait constraint.
1434	Tokenize the given string into a list of strings.
1435	Escapes quotes and backslashes in a string.
1436	Serve the static file from the assets directory.
1437	Load the language configuration from the given file or URL.
1438	Load all message files for all registered languages.
1439	Returns the URL for the given logback configuration file. If the file is not found it
1440	Generates a secret with a random character set.
1441	Build a RunClassInSeparateJvmMachine object.
1442	Get all artifacts coming from ninja standalone.
1443	Resolves the standalone class.
1444	Encrypt the given data.
1445	Decrypts the given data.
1446	Read the version of the Ninja built - in.
1447	Registers the watchService with the given path.
1448	Determines the mode from system properties or prod if not set.
1449	Checks if the mime type is valid.
1450	Builds a route from the given injector.
1451	Run the server.
1452	Creates a server URL.
1453	Initializes the controller.
1454	Process the found methods.
1455	Sort methods by annotation value.
1456	Find all the controller methods.
1457	Configure reflections.
1458	Checks if the given method is allowed to be called.
1459	Get the HTTP method from the method.
1460	Build a controller method invoker from functional and implementation method.
1461	Get the real class name with CamelCase formatting.
1462	Checks if a class exists in the classpath.
1463	Get the source code relative path for a given stack trace element.
1464	Add a value to the cache.
1465	Get the value of the key.
1466	Checks that the given value is serializable.
1467	Render the given key - value pair.
1468	Renders the given string as JSON.
1469	Renders the given bytes as a raw response.
1470	Get a cookie by name.
1471	Sets the cache control header to no - cache content.
1472	Checks that the application secret is set in the configuration. If not it generates a new one
1473	Adds all items from the given collection to the end of the list.
1474	Returns the position of the view with the given id.
1475	Switch the views.
1476	Removes the given index from the list of active indexes.
1477	Returns the active indexes.
1478	Returns the view which is used to show the title of the view at the given position.
1479	Returns the content view for the given position.
1480	Expands the menu at the given position.
1481	Collapse the item at the given position.
1482	Returns the parent view of the view which contains the specified position.
1483	Returns an array of additional animations that should be applied to the view.
1484	Creates a bitmap from a view.
1485	Checks if the item at the given position is dismissable.
1486	Resets the velocity tracking.
1487	Reset the animation to its initial state.
1488	Cancel an existing animation.
1489	Animates a view at a specific position.
1490	Calculates the delay to wait before animating the specified position.
1491	Concatenates two animators.
1492	This method is called by the servlet to handle non - CORS requests.
1493	Adds a stream of literal words.
1494	Materialize the RLW into the bitmap.
1495	Removes and returns the element at the tail of the queue.
1496	Resize the buffer to the given number of bytes.
1497	Returns the new size in words.
1498	Performs an xor operation on the specified bitmaps.
1499	Adds a stream of literal words from the given buffer.
1500	Fills the given list with the pointers of the literal words.
1501	Returns the contents of this BitSet as a new BitSet.
1502	Returns the cardinality of this BitSet.
1503	Returns true if the buffer is empty.
1504	Returns an iterator over the elements of this set.
1505	Returns true if this BitSet intersects with the given BitSet.
1506	Returns an IntIterator that unsets all bits in this set.
1507	Parse the next run from the iterator.
1508	Opens the tap bar menu.
1509	Closes the button.
1510	Sets the background color of the menu.
1511	Fetch the index of the database name range from the given URL for H2 file mode.
1512	Fetch the database name range index from the given URL for H2 memory mode.
1513	Parses the given jdbc url and returns the connection info.
1514	Register a connection parser for a given URL prefix.
1515	Fetch the database name from the given URL.
1516	Start the daemon service.
1517	Copy the contents of the given stream to the given file.
1518	Copy assets from the given assets filename to the given file.
1519	Installs a binary into the given directory.
1520	Handle missing fields.
1521	Get an enum from a JSON object.
1522	Patch unresolved references.
1523	Traverse the fields of the given object.
1524	Convert a JSON string to a Java object.
1525	Converts a JSON object to a Java object.
1526	Traverse the fields of the given JSON object.
1527	Store a missing field.
1528	Get the raw class of a type.
1529	Read an array.
1530	Reads a number from the input.
1531	Reads a JSON string.
1532	Get a field from a class.
1533	Removes leading and trailing quotes from a string.
1534	Convert an object to a JSON string.
1535	Format json string with reading and writing arguments.
1536	Writes a tab to the output.
1537	Writes an array element if the object is an array component of the given class.
1538	Writes a custom object to the output.
1539	Forces to get a custom writer for a given class.
1540	Writes the given object to the JSON stream.
1541	Trace all references.
1542	Trace all fields on the given object.
1543	Ensures that all keys in the map are strings.
1544	Write a collection element.
1545	Create a map from a list of strings.
1546	Returns the source of the entity.
1547	Gets the value of the topics property.
1548	Gets the value of the hjid property.
1549	Gets the value of the documentDetailList property.
1550	Creates the axes for date and float.
1551	Creates a default grid.
1552	Creates a legend that shows the series inside the North West.
1553	Creates a legend that shows the series inside the worst legend.
1554	Creates a legend that shows the series outside one column.
1555	Set the legend styling.
1556	Creates a highlighter that shows the tooltip and the chart.
1557	Creates a highlighter that shows the North tooltip.
1558	Create a default series for the pie chart.
1559	Create a default series for the donout chart.
1560	Gets the value of the documentAttachmentList property.
1561	Create the committee ranking menu bar.
1562	Create the committee ranking topics.
1563	Create the overview page.
1564	Creates the overview content.
1565	Gets the value of the kommunvalkrets property.
1566	Configure the authentication.
1567	Sets the list of compliance checks.
1568	Sets the status map.
1569	Sets the resource type map.
1570	Gets the value of the kommun property.
1571	Gets the value of the uppdrag property.
1572	Gets the value of the proposal property.
1573	Returns the path to the page.
1574	Update ballot.
1575	Gets the maximum size of the view roadot party summary.
1576	Initializes the party map.
1577	AddPartyData to a DataSeries for ViewRiksdagenVoteDataBall
1578	Create the party ballot chart.
1579	Add a ballot data to a series.
1580	Create org ministry map.
1581	Adds the result for a given month to the given GovernmentBodyAnnualOutcome
1582	Creates a field.
1583	Create the display property converters.
1584	Get converter for given type.
1585	Get the type of a property.
1586	Gets the value of the documentActivities property.
1587	Gets the user account from the SecurityContext.
1588	Gets the value of the countyRegions property.
1589	Gets the value of the againstProposalContainer property.
1590	Gets the value of the committeeProposalContainer property.
1591	Gets the value of the events property.
1592	Returns the page id from the parameters.
1593	Get the page number from the parameters.
1594	Creates the panel content.
1595	Creates the page visit history.
1596	Add data for Politician Indicator to the list.
1597	Add Politican data to the data series.
1598	Sets the Google Auth scratch codes.
1599	Create the role gunant.
1600	Create a generic Gantt object.
1601	Sort entries by values.
1602	Add a view generic role member to a step.
1603	Strip dates after current date.
1604	Creates a Gantt object.
1605	Convert to years string.
1606	Load the XA data source from the given secret reference.
1607	Send the data to the appropriate destination.
1608	Gets the value of the documentPersonReferenceList property.
1609	Cleans up the decision string.
1610	Gets the document name.
1611	Get the committtee short name.
1612	Blocks the user failed login attempts.
1613	Blocks by session or ip failed login attempts.
1614	Navigates to the page of the violation.
1615	Returns the application manager.
1616	Show a notification.
1617	Gets the value of the topic property.
1618	Add source indicators to the menu.
1619	Get the topic indicator map.
1620	Gets the address.
1621	Add cache hints to the typed query.
1622	Gets the string id.
1623	Read the content of a ZIP file into a list of strings.
1624	Create paging controls.
1625	Add a paging link to the page control.
1626	Insert a new politician into the list of daily monthly and annual lists.
1627	Inserts a party into the ballot.
1628	Gets the value of the againstProposalList property.
1629	Adds the value of the entry to the data series.
1630	Add an annual summary chart to the chart bar.
1631	Add an Annual Summary data to a DataSeries.
1632	Add an annual data chart to the chart chart bar.
1633	Add entry data to a data series.
1634	Create the summary of the ministry.
1635	Create the list of assignments.
1636	Process all documents in the list using the given process strategy.
1637	Load and process the DocumentList from the URL.
1638	Load the list of DocumentElements from the URL.
1639	Read the contents of the given reader into a string buffer.
1640	Read the content of the given URL.
1641	Gets the value of the votering property.
1642	Gets the government body list.
1643	Gets the value of the personAssignmentElement property.
1644	Gets the value of the personDetailElement property.
1645	Creates a new user account.
1646	Create a row item.
1647	Creates a grid layout for the given panel.
1648	Send the country indicator work order.
1649	Gets the value of the documentProposal property.
1650	Gets the value of the documentActivityContainer property.
1651	Gets the value of the documentDetailContainer property.
1652	Gets the value of the documentAttachmentContainer property.
1653	Gets the value of the documentReferenceContainer property.
1654	Gets the value of the documentPersonReferenceContainer property.
1655	Gets the view raksdagen party document daily summary map.
1656	Add Document History to a DataSeries.
1657	Read the missing person list.
1658	Append object presentation.
1659	Add the fallback value to the string builder.
1660	Reencrypt the vault values.
1661	Gets the value of the landstingsvalkrets property.
1662	Adds the committeee summary to the builder.
1663	Add a single entry to the string builder.
1664	Add decision data rows.
1665	Add the doc type data rows for the given entry.
1666	Add doc type decision data rows.
1667	Gets the user id from the security context.
1668	Gets the request URL.
1669	Check if the given role is allowed in the current security context.
1670	Gets the map of page daily summaries.
1671	Get the map of page mode daily summaries for a specific page.
1672	Gets the list of daily summaries for a specific page.
1673	This method adds a list of ViewApplicationActionEventPageElementDailySummary to a Series
1674	Update person assignment data.
1675	Update the assignment data.
1676	Validates the input of the request.
1677	Creates the base request for the event.
1678	Validate the request.
1679	Returns a human readable message of the violation.
1680	Handles the violation of the request.
1681	Creates the chart panel for the data indicator summary.
1682	Initialize application menu bar.
1683	Create admin menu.
1684	Create a link to the command.
1685	Sets the result element.
1686	Kie container.
1687	Javers for Hibernate.
1688	Auditable aspect.
1689	Author provider.
1690	Create the role summary.
1691	Add ministry per year to map.
1692	Adds a Government Body Annual Summary to a list of Government
1693	Get an integer from a string.
1694	Add data for a given year to a map.
1695	Adds the government body annual summary to the map.
1696	Creates a GovernmentBodyAnnualSummary object from a row.
1697	Gets the value of the personAssignmentData property.
1698	Gets the value of the personDetailData property.
1699	Get the committee decision type map.
1700	Get the map of org to daily summaries.
1701	Add decision type by organic data.
1702	Display document attachments.
1703	Create the level 2 label.
1704	Build a key from the given username and password.
1705	Get a summary of the rule violations.
1706	Adds a violation to the list of violation objects.
1707	Create a map from a list of VoteDataEmbeddedId.
1708	Check include date.
1709	Get the date from the given string.
1710	Gets the value of the parties property.
1711	Creates the button which allows to enable Google Authenticator.
1712	Creates the button which allows to disable the Google Authenticator.
1713	Creates the change password button.
1714	Gets the value of the documentReferenceList property.
1715	Guess the best vote date for the given ballot.
1716	Checks if vote list contains same date.
1717	Try to find a valid vote date for a ballot container.
1718	Get the IP address of the web browser.
1719	Get the operating system name and version of the web browser.
1720	Gets the value of the committeeProposalList property.
1721	Gets the value of the parliamentElectoralRegions property.
1722	Gets the view roksdagen org document daily summary map.
1723	Add a list of DocumentDailySummary objects to a DataSeries.
1724	Add a new data serie to the data series.
1725	Adds a data item to the data series.
1726	Initialize the user command map
1727	Perform the operation.
1728	Gets the value of the voteDataList property.
1729	Gets the value of the assignmentList property.
1730	Configure column order and hidden fields.
1731	Configures the listeners for the selection.
1732	Create a grid cell filter.
1733	Sets the column converters.
1734	Gets document type map.
1735	Add a series for a ViewRiksdagenDocumentTypeDailySummary entry to
1736	Gets the value of the electionTypes property.
1737	Gets the ball summary item.
1738	Gets the Adminregion.
1739	Gets the Income Level.
1740	Gets the value of the lendingType attribute.
1741	Gets the value of the ballotDocumentData property.
1742	Gets the value of the ballotDocumentElement property.
1743	Main method for the encrypt property script.
1744	Encrypt a value with a given symmetric key.
1745	Get the encryptor.
1746	Decrypt a value using the given symmetric key.
1747	Gets the value of the countyElectoralRegions property.
1748	Get the JobContextHolder from the given JobExecutionContext.
1749	Gets the value of the portals property.
1750	Replies the active user account.
1751	Gets the value of the dokument property.
1752	Creates the basic layout for the panel and the footer.
1753	Create the top header actions for the user context.
1754	Creates a vertical layout that is used to display a full size list.
1755	Add the CIA logo to the header.
1756	Creates the top title panel.
1757	Creates a JavaMailSender instance based on the configuration.
1758	Gets smtp port.
1759	Find language.
1760	Gets the list of supported locales language data.
1761	Create a map of issue and concern party summaries.
1762	Set the namespace on the given XML stream.
1763	Add a chart to the layout.
1764	Get the height of the chart window.
1765	Gets the party name.
1766	Gets the view raksdagen politician document daily summary map.
1767	Override the default login method to cache the user in the session.
1768	Checks if the current OS is Windows.
1769	Start the Android Debug Bridge emulator.
1770	Unlocks the emulator.
1771	Write emulator start script windows.
1772	Writes the emulator start script to the given path.
1773	Stop the Android Debug Bridge emulator.
1774	Stops the emulator.
1775	Sends a command to the emulator.
1776	Assemble the start command line for the Android emulator.
1777	Determine the emulator executable.
1778	Determine the wait time for the emulator to wait before the application is started.
1779	Determines the options for the emulator.
1780	Determine the AVD for the device.
1781	Determines the location of the SDK tools.
1782	Unjar a jar file.
1783	Calculate the source and destination mappings.
1784	Visit a dependency tree.
1785	Resolve an artifact to a target.
1786	Waits until the device is connected.
1787	Waits for the initial device list to be received from the Android Debug Bridge.
1788	Deploys an apk to the device.
1789	Deploys the built apk to the target directory.
1790	Undeploys an apk from the project.
1791	Undeploys an Apk from the device.
1792	Extract the package name from the apk file.
1793	Extracts the package name from an Android artifact.
1794	Extract the instrumentation runner from the AndroidManifest. xml file.
1795	Generate the R. txt file for each library.
1796	Executes the plugin.
1797	Copy the contents of the input stream to the output stream without closing the input stream.
1798	Copy the gdbserver binary to the libs folder
1799	Gets the java executable.
1800	Returns the path to the proguard jar.
1801	Gets the path to the Android jar.
1802	Returns the path to the directory where the build tools libraries are stored.
1803	Returns the path to the main. dex. classes. rules file.
1804	Returns the path to the Android executable.
1805	Get the Android jar.
1806	Returns the platform directory.
1807	Loads the major version of the SDK from the SDK source. properties file.
1808	This method is responsible for copying the APK - related manifest to the target directory.
1809	Copy the manifest to the destination manifest file.
1810	Extract the source dependencies from the artifacts that are direct dependencies.
1811	Extract the apklib from the given artifact.
1812	Extract the AAR library from the given artifact.
1813	Checks for APKLIB transitive dependencies.
1814	Returns a map of package name to set of artifacts that are compatible with the given set of
1815	Generate correct R. java for each APKLIB dependency.
1816	Generate correct R. java for each AAR dependency.
1817	Generate the R file for the apklib dependency.
1818	Checks if the build configuration is present for the given artifact.
1819	Checks if a BuildConfig. class is present in the jar.
1820	Get the set of input files to be used for the dex.
1821	Execute the zipalign plugin.
1822	Check if client_secrets. json is valid.
1823	Adds the libs jars to the classpath.
1824	Adds the classes to the classpath.
1825	Executes the Android Lint.
1826	Returns the GAV of the artifact.
1827	Collect the JVM arguments from the parsed arguments.
1828	Returns the Java library file for the given fileName.
1829	Get the toolchain for the given file.
1830	Returns the path to the ndk build.
1831	Read the manifest file.
1832	Write the manifest file.
1833	Export the properties from the parsed data into the project.
1834	Generate a version code from the current version.
1835	Extract the architecture from an artifact.
1836	Returns the names of the files in the given base directory.
1837	Encrypt a string with a key
1838	Decrypt a string using a key
1839	Read a name from the given byte array.
1840	Converts a hexadecimal character to its digit.
1841	Try to move the view.
1842	Start listening for connectivity events.
1843	Stop listening for messages.
1844	Sends the request data to the server.
1845	Adds a form field to the request.
1846	Adds a file part to the multipart upload request.
1847	Creates a BitmapDrawable from a Bitmap.
1848	Add a pre - load image request to the queue.
1849	Detaches an image view from an image task.
1850	Add an image task to the image loader.
1851	Query the cache for the given imageTask and add it to the given imageView.
1852	Called when the worker is about to recover its work.
1853	Stop the current work.
1854	Destroy the work status.
1855	Attaches this image loader to a cube fragment.
1856	Invalidate the cache for the given key.
1857	Clear the disk cache.
1858	Creates a new table with the specified capacity.
1859	Returns a new table with a double capacity.
1860	Add a bitmap to the cache.
1861	Returns the contents of the file as a String.
1862	Set the value of the cache entry to the given string.
1863	Delete the cache entry.
1864	Commits the current edit to the disk cache.
1865	Add a file to the request.
1866	Clear the memory cache.
1867	Try to resume the journal.
1868	Deletes the journal entries.
1869	Rebuilds the journal file.
1870	Removes all entries from the cache that are longer than the capacity.
1871	Called when the back button is pressed.
1872	Finishes the loading of more items.
1873	Creates a new ImageReuseInfo object with the specified size.
1874	Perform the actual request sync.
1875	Notify the cache that the request has finished.
1876	Reads the response from the server and appends it to the given StringBuilder.
1877	Set the loading bitmap.
1878	Set a customized right view.
1879	Download a bitmap from a URL to an output stream.
1880	Add an image view to the list of image views.
1881	Removes an image view from the list.
1882	Called when the image is loaded.
1883	Called when the image is loaded.
1884	Join size info to a key.
1885	Join size tag to key.
1886	Initializes the disk cache asynchronously.
1887	Flush the disk cache asynchronously with a delay.
1888	Get the disk cache.
1889	Delete a directory recursively.
1890	Returns the path to the external cache folder.
1891	Returns the number of bytes of free space for the given file.
1892	Recursively notifies all the layers of a drawable.
1893	Resume the dialog.
1894	Returns the last item in the list.
1895	Hide the FAB.
1896	Aligns the sheet with the FAB.
1897	Morph the sheet from a fab.
1898	Morph the sheet into a fab.
1899	Hide the overlay.
1900	Show the sheet.
1901	Sets up the action bar which allows to show the activity s toolbar.
1902	Sets up the drawer which allows to show the action bar.
1903	Setup the tabs
1904	Setup the FAB
1905	Update the FAB based on the selected page.
1906	Updates the Snackbar which is shown when the selected page is changed.
1907	Morph the animation into a sheet.
1908	Draws the fab from the sheet.
1909	Hide suggestions if the current query is not waiting for results and the current query is not waiting
1910	Returns a list of suggestions that match the given query token.
1911	Checks if the given string contains an explicit character.
1912	Checks if the given string contains a word breaking character.
1913	Checks that the given number of characters are either letters or digits.
1914	Get the start index of the first MentionSpan that is closer to the cursor.
1915	Get the index of the end of the search.
1916	Display the text counter.
1917	Disable spelling suggestions.
1918	Update the text count of the editor.
1919	Sets the factory to use for creating new Mentions.
1920	Copies the spans from start to end into the clipboard.
1921	Paste the text from the buffer.
1922	Paste the text from the current text area into the Honeycomb clipboard.
1923	Updates the selection if the selection is required.
1924	Handles the cursor change event.
1925	Deselect all spans in the text.
1926	Parses a duration string into a number of milliseconds.
1927	Escapes a string for use in an XML document.
1928	Write a SVG element to a file.
1929	Creates a new image with the given width and height.
1930	Creates a new image that can be used to draw an image with the specified capabilities.
1931	Returns a string representation of this rectangle.
1932	Maps a font family to an alternate font.
1933	Sets the value of the shape rendering property.
1934	Sets the text rendering.
1935	Append the element id from the hint.
1936	Get SVG path data.
1937	Convert a color to a string.
1938	Convert a color to a string.
1939	Get the stroke style.
1940	Get the SVG fill style for this color.
1941	Returns the SVG font style.
1942	Get the font metrics for the given font.
1943	Scales the image by the given scale.
1944	Concatenate the transformation with the given transformation.
1945	Sets the transformation used to transform the image.
1946	Sets the clip of the shape.
1947	Register a new clip.
1948	Sets the clip of this path to the given shape.
1949	Clip the current rectangle with the specified rectangle.
1950	Sets the clip to the specified rectangle.
1951	Get the PNG bytes of the given image.
1952	Draws the given rendered image using the given transformation.
1953	Draws the given RenderableImage using the given AffineTransform.
1954	Returns the XML representation of a radial gradient paint.
1955	Get the clip - path attribute.
1956	Get the parts of a string.
1957	Record a level of a stat.
1958	Record timing.
1959	Track timeouts.
1960	Check if the client is still connected.
1961	Handle the request.
1962	Create a new HTTP request and forward it to the backend client.
1963	Handle the error for the backend.
1964	Handle the backend client responses.
1965	Process the reactor.
1966	Create a service discovery instance that will discover the service discovery for the given configurations.
1967	Handle a method call.
1968	Send a method call to the service.
1969	Creates a local proxy for the given service.
1970	Transform before method call.
1971	Transform the method call before it is called.
1972	Stop the service bundle.
1973	Start up the method call queue.
1974	Find the service name.
1975	Load all endpoints for a service by its DNS service name
1976	Convert a SrvRecord to an endpoint definition.
1977	Checks the CORS request type.
1978	Handles the given HTTP request.
1979	Handle a method call.
1980	Create a Consul client.
1981	Get the DNS client.
1982	Returns a receive queue that can be used to receive messages.
1983	Returns the send queue.
1984	Converts a promise to a callback.
1985	Convert a promise to a callback.
1986	Create a callback that will be called when the promise is resolved.
1987	Load the health of services.
1988	Load the service from the backup provider if there is one.
1989	Creates a new DnsClient instance.
1990	Add a task to be executed once after a certain time period.
1991	Processes the queue and monitors the callbacks and coordinators.
1992	Remove a callback from the queue.
1993	Coordinate a callback coordinator with a timeout.
1994	Monitor the callbacks.
1995	Monitor callback coordinator.
1996	Wraps a callback with a timeout.
1997	Build the proxy service.
1998	Build a proxy.
1999	Handle a WebSocket call.
2000	Start the proxy server.
2001	Add an event listener to the channel.
2002	Creates a DNS service discovery.
2003	Parse a JSON string into an object of the given class.
2004	Converts a JSON string to a list of objects of the given class.
2005	Serialize the given object to JSON.
2006	Converts a JSON string to a Map.
2007	Converts a value map to a map.
2008	Checks if a callback with the given name exists.
2009	Set a callback to be called when the request is made.
2010	Wraps the given callback in a callback builder.
2011	Set the list callback.
2012	Set callback.
2013	Set the collection callback.
2014	Set the map callback.
2015	Set the optional callback.
2016	Adds a header to the response.
2017	Checks if a service is registered.
2018	Ping the agent.
2019	Registers a new service with Consul.
2020	Deregisters a service with Consul.
2021	Deregisters a check.
2022	Checks a check.
2023	Mark a check as PASS.
2024	Mark a check as warn.
2025	Stop the server.
2026	Handles a callback from the server.
2027	Send a message to a WebSocket service.
2028	Create a proxy for the given service.
2029	Creates a listener which will handle responses from the queue.
2030	Receive the queue.
2031	Creates a SendQueue that will send JSON data to the client.
2032	Start listener.
2033	Build a service queue.
2034	Check in OK
2035	Fail the service with an error.
2036	Enable logging for mapped diagnostic context.
2037	Enable Consul service discovery.
2038	Get the AdminBuilder instance.
2039	Get the builder for this context.
2040	Add an endpoint service with a service management bundle.
2041	Adds an endpoint service with an alias and a service management bundle.
2042	Add an endpoint service to the managed service.
2043	Add an endpoint service to the managed service.
2044	Get the service endpoint server.
2045	Configure the interceptors.
2046	Destroys a session.
2047	Load all the endpoints for a service.
2048	Deletes a key with the given parameters.
2049	Handle a request.
2050	Process the queue of messages.
2051	Send the item to the event manager.
2052	Start the queue.
2053	Gets the request.
2054	Remove an event connector.
2055	forward event to all event connectors
2056	Flushes all event to all event connectors.
2057	Read the config from the classpath.
2058	Register a callback for a method call.
2059	Extract request information and put it into diagnostic context.
2060	Extract the request information and put it into the diagnostic context.
2061	Extract headers from the request and add them to the MDC.
2062	Handle a REST call.
2063	Handle a response from a service to a response.
2064	Add a request to the outstanding request map and check if it is still needed to send it
2065	Adds an integer to the end of the list.
2066	Adds an integer value to the stat list.
2067	Adds the given values to the end of the list.
2068	Sets the element at the given index.
2069	Reduce the values of this list by a function.
2070	Before method sent.
2071	Notifies the listener that a change notification has occurred.
2072	Add serializers that are not registered at runtime.
2073	Get the parseFrom method for the given type.
2074	Verify that there are no leading zeroes.
2075	Parse an unquoted field name.
2076	Handles the input parsing of a value.
2077	Skips over a string.
2078	Match a token.
2079	Decode a base64 string into a byte array.
2080	Checks if the given string is a valid ID.
2081	Check if the given string is a valid ID.
2082	Write a string to the output stream.
2083	Prepend or write an escape character to the end of the buffer.
2084	Appends a character escape character to the output buffer.
2085	Set the conversion properties from the configuration.
2086	Generates a Pig script that loads the given Thrift class using the given pig loader.
2087	Stringify a schema.
2088	Open the index for reading.
2089	Returns the progress of the current iteration.
2090	Convert a message to a tuple.
2091	Converts a protobuf message to a Protobuf tuple.
2092	Converts a single field into a tuple.
2093	Coerces the given field value to the appropriate Pig type.
2094	Convert a message descriptor to a schema.
2095	Convert a message field descriptor to a field schema.
2096	Returns a schema for a single field.
2097	Generates a Pig script that loads the input files using the specified loader class.
2098	Convert a message descriptor to a Pig script.
2099	Generates PigScript code for a message field.
2100	Generates a PigScript for a single field.
2101	Get a TStructDescriptor for the given class.
2102	Extract a map of enum values from the given enum class.
2103	Creates a filter that returns true if the given path is a directory and it is not hidden
2104	Returns true if the given proto class is a dynamic message.
2105	Get a TypeRef for a given proto class name.
2106	Returns the progress of the animation.
2107	Serializes the message to bytes.
2108	Set the input format class for the Hadoop job.
2109	Set the thriftClass in the configuration.
2110	Write a list of strings to a configuration object as a JSON array.
2111	Read a list of strings from a configuration as a JSON array.
2112	Write a list of strings to a configuration as base64 encoded strings.
2113	Read a comma - separated list of base64 strings from the configuration.
2114	Verify that the given Thrift class is a Thrift class.
2115	Gets the field value of the given object.
2116	Gets the field value of the given class.
2117	Returns the value of the given field.
2118	Writes a single field to the given protocol without tagging it.
2119	Convert a tuple to a message.
2120	Convert a tuple field to a single field.
2121	Adds a field to a descriptor proto.
2122	Converts a Pig type to a Protobuf type.
2123	Convert a tuple to a thrift object.
2124	Convert a pig value to a Thrift value.
2125	Creates a new instance of the given class.
2126	Set the delegate class for the combined input format.
2127	Find splits for the input paths
2128	Set input paths.
2129	Get the input paths from the configuration.
2130	Adds a new input split to the list of splits.
2131	Get the list of locations that are currently configured on this input stream.
2132	Evaluates the delimiter of the LZO tokenized storage.
2133	Create a schema for a resource field.
2134	Read the contents of the input stream into the output stream.
2135	Returns the next tuple from the reader.
2136	Creates a standard Base64 object.
2137	Creates a new instance of ProtobufConverter for the given proto class.
2138	Reads the next message from the stream and sets the given writable object.
2139	Reads the next proto blob from the current block.
2140	Reads the next proto bytes from the stream and writes it to the given BytesWritable.
2141	Create a new TaskAttemptContext instance.
2142	Create a new MapContext instance.
2143	Create a new instance of a ThriftWritable.
2144	Creates a new instance of the class using the default constructor.
2145	Creates a new instance of the class.
2146	Get a builder for the given thrift class.
2147	Map entry proto builder.
2148	Creates a map proto message builder from the given field.
2149	Resolves the message type name for the given descriptor.
2150	Convert a thrift object to a message.
2151	Convert a thrift object to a message.
2152	Build a map entry message.
2153	Map proto message type to field name.
2154	Walks the given path and all its subdirectories calling the given visitor for each file or directory
2155	Collect all files in a directory and its subdirectories.
2156	Get the size of a directory.
2157	Set the column number in the configuration.
2158	Update job conf for local settings
2159	Returns the parseDelimitedFrom method for the given class.
2160	Parse a message from the given input stream using the given parse method.
2161	Parse a message from the given input stream.
2162	Put the next tuple into the JSON stream.
2163	Set the class configuration for the LZO Protobuf B64 line output format.
2164	Sets the typeRef from the configuration.
2165	Checks that the container size is valid.
2166	Sets the pattern of the image.
2167	Converts a string to an underscored version.
2168	Returns an ordinal string for the given integer.
2169	Create a new instance of ProtobufWritable.
2170	Creates a new instance of the LzoW3CLogInputFormat.
2171	Set the output format class for the Hadoop job.
2172	Returns true if the given word matches the pattern.
2173	Replaces all occurrences of the given word with the given replacement.
2174	Returns the plural form of the given word.
2175	Returns true if the word is uncountable.
2176	Get the output stream for the LZO file.
2177	Verifies that the given writable class is defined.
2178	Creates a new instance of the given type.
2179	Get a class from a fully qualified class name.
2180	Get the Thrift type reference for the given class name.
2181	find the columns to read from the configuration
2182	Set the thrift class configuration for the LZO Thrift B64 output format.
2183	Execute the given request and return the response as a String
2184	Add the authorization header to the request.
2185	Validate the response
2186	Parse a thing of the given kind.
2187	Parse a JSON string and return a list of mixed elements.
2188	Format a comma separated list of strings.
2189	Wait for the next request if enough time has elapsed
2190	Add basic authentication to the request.
2191	Refresh the token from the given response.
2192	Print a list of comment tree elements.
2193	Safe JSON to Integer.
2194	Safe JSON to Double.
2195	Convert JSON to a Boolean.
2196	Safe JSON to Long.
2197	Parse the comment tree
2198	Parse a JSON string and return a list of comments and submissions.
2199	Generate a signature for the given endpoint with the given parameters.
2200	Sorts the keys of a map.
2201	Get OEmbed information.
2202	Make an Instagram object from the Instagram API.
2203	Create an object from the JSON response.
2204	Checks that both objects are not null.
2205	Checks that the string is not empty.
2206	Checks that the given string is a valid URL.
2207	Checks that the given URL is a valid OAuth callback URL.
2208	Get an Instagram client with the signed header.
2209	Configure connection settings.
2210	Returns the body contents of the request as a String.
2211	Pretty print a JSON response.
2212	Set the callback url for the subscription.
2213	Set the client id for the subscription.
2214	Set the client secret for the subscription.
2215	Set the object to subscribe to.
2216	Set the token to verify the subscription.
2217	Set the subscription aspect.
2218	Set the latitude of the instagram.
2219	Set the longitude of the subscription.
2220	Set the radius of the instagram subscription.
2221	Delete an Instagram subscription.
2222	Delete all subscriptions.
2223	Get a list of all subscriptions.
2224	Form - encodes a map of strings.
2225	Percent encode a string.
2226	Appends the given parameters to the given URL.
2227	Concatenates the given parameters sorted by percent encoded.
2228	Convert a query string to a map.
2229	Throw an InstagramException with the error code.
2230	Adds a trade to the trade.
2231	Increase the length of the cache by the given index.
2232	Calculate the maximum drawdown for a given series and cash flow.
2233	Get the indexes of the begin of the split.
2234	Calculate the regression line.
2235	Creates an order for this entry.
2236	Builds a chart time series from a tick series and an indicator.
2237	Returns a random decimal between min and max.
2238	Generates a random tick.
2239	Increments the acceleration by ACCELERATION_INCREMENT.
2240	Calculates the sar for the given index.
2241	Calculates the values for a trade.
2242	Fills the values to the end of the time series.
2243	Load the logger configuration file.
2244	Creates an OHLC dataset from a TimeSeries.
2245	Create a TimeSeriesCollection with the additional data for the close price chart.
2246	Add the cash flow axis to the plot.
2247	Display the chart in the application frame.
2248	Remove ticks that are greater than the maximum tick count.
2249	Build empty ticks.
2250	Destroy all managed observable instances.
2251	Called when the activity is saved.
2252	Signal the event.
2253	Asynchronously watches the file system for changes.
2254	Register a directory.
2255	Get the main class loader.
2256	Adds the relevant plugin dependencies to the classpath.
2257	Adds the project dependencies to the classpath.
2258	Resolves the dependencies of the executable in preparation for execution.
2259	Finds the executable artifact that matches the specified executableDependency.
2260	Makes the working directory if it doesn t already exist.
2261	Returns the start date of the calendar service range.
2262	Returns the bounds of the feed.
2263	Checks the distance and time of a travel.
2264	Load the table and return the results.
2265	Returns the size of the table.
2266	Sets the field to null.
2267	Copy all tables from the database into the snapshot.
2268	Checks if a table exists in the database.
2269	Adds any editor specific fields to the given table.
2270	Register a snapshot in the database.
2271	Returns the ID of this trip.
2272	Execute the remaining records in the batch.
2273	Delete the empty files from the zip file
2274	Export the table to a text file.
2275	Registers an error for the given entity.
2276	Register an error for an entity.
2277	Export the tables of the given feed.
2278	Load the GTF file.
2279	Validates the feed with the given ID and data source.
2280	Delete all tables in the database for the given feedId.
2281	Creates a DataSource for the given JDBC connection.
2282	Add an error message to the error message.
2283	Creates a new error for a line of a table.
2284	Creates a new error for the given entity.
2285	Creates a new NewGTFSError for a feed with the given error type and bad value
2286	Returns the average speed of the Trip for the given pattern at the given date.
2287	Returns the average speed of the given trips between the specified time periods.
2288	Returns the start time for the given Trip objects.
2289	Returns the end time of the last arrival for the given trips.
2290	Returns the distance between the first triple of the pattern and the last triple of the pattern.
2291	Returns the average spacing between stops in the given pattern.
2292	Copy entities to the database.
2293	Creates a new ValidateFieldResult from the given result.
2294	Returns the number of errors in the database.
2295	Commit the transaction.
2296	Validates and converts the given string to a number of seconds.
2297	Compares this error with another one.
2298	Gets the distance between the points in the line string.
2299	Creates a field definition that fetches the number of rows from the given table.
2300	Build a field that will group by the rows in the given table.
2301	Deduplicate an int array.
2302	Get all Trips for a given Stop for a given date.
2303	Returns the average headway for a given stop for a given date range.
2304	Get the route headways for a given stop.
2305	Returns the headway for a given stop and route.
2306	Get the JsonNode from the given JSON string.
2307	Create a new row in the database.
2308	Update the stop times for a given pattern stop.
2309	Checks that all references exist in the given table.
2310	Verifies that the stops in the newStops are identical between the two lists.
2311	Insert blank stop times for each sequence value that needs to be inserted.
2312	Delete the entity with the specified id.
2313	Execute the statement and return the auto - generated ID.
2314	Get the number of rows selected from the given table.
2315	Returns a set of tables that are referencing the specified table.
2316	Get the value of the field with the given id.
2317	Upload a feed file to the server.
2318	Upload a feed to the GTFS using the provided ID generator.
2319	Returns true if the given date is active on this calendar.
2320	Initializes the GTFSGraphQL.
2321	Returns the editor fields.
2322	Returns a list of fields that are required by this editor.
2323	Returns a list of fields that are required or optional.
2324	Creates the table with the given name and fields.
2325	Generate the insert SQL for this table.
2326	Returns a comma separated list of field names.
2327	Generate update sql.
2328	Generate the select statement for the given table and minimum requirement.
2329	Generate a select statement that selects all existing fields from the table.
2330	Generate the delete sql for the given field name and namespace.
2331	Create a new table in the database from the given table name.
2332	Clone the stop times of a table and insert all rows with the same columns.
2333	Returns the index of the key field in the given fields.
2334	Ensures that the given namespace is valid.
2335	Returns the index of the field with the given name.
2336	Returns the keys of the map.
2337	Creates a GTFSFeed from a zip file.
2338	Finds all patterns for each trip.
2339	Get the distance between a trip and its straight line.
2340	Get the speed of a trip in meters.
2341	Get the list of stop times for a given stop.
2342	Returns a list of services for the given date.
2343	Returns the agency timezone for the given stop.
2344	Create a list of Pattern objects for each TripPatternKey.
2345	Set the idle timer to fire when the next idle activity is reached.
2346	Enable the IdleReceiver.
2347	Report that the job is in the idle state.
2348	Adds a job to the set and marks it for boot session if it is not persisted.
2349	Checks if the job set contains the given job id.
2350	Removes a job from the set.
2351	Reschedule a failed job.
2352	Free all the elements in the cache.
2353	Called when a job is started.
2354	Called when the stop job is received.
2355	Checks if the given job can be stopped by tracking it.
2356	Puts a string value into the mapping of the underlying Bundle replacing any existing value for the given
2357	Puts an array of Strings into the mapping of the underlying Bundle replacing any existing value for the
2358	Returns the value of a property as a String.
2359	Puts a PersistableBundle value into the mapping of this Bundle.
2360	Writes this button to a Parcel.
2361	Get the height of the parent view.
2362	Print a string to the console.
2363	Check if the post property is valid.
2364	Check the properties for the request
2365	Prepare for export.
2366	Set a property value.
2367	Escapes special characters in a string.
2368	Get the real path from the servlet url and the extension url.
2369	Verifies the request.
2370	Verifies the given parameters.
2371	Validate the request.
2372	This method is called to launch the tool.
2373	Build the tool consumer profile
2374	Validate the tool service
2375	Validate the capabilities of a tool consumer against a profile
2376	Adds custom properties to the launch.
2377	Toogle the list view.
2378	Smoothly scroll the list.
2379	Convert a SafeUrl to a proto.
2380	Converts a SafeStyle to a proto.
2381	Converts a SafeScript to a proto.
2382	Converts a style to a proto.
2383	Converts a TrustedResourceUrl to a proto.
2384	Converts SafeHtml to a proto.
2385	Wraps an angle in radians.
2386	Round a double to a number of decimals.
2387	Linear interpolation function.
2388	Slerp a and b by a given percentage.
2389	Bisection - line interpolation.
2390	Returns the value of the line segment Lerp function.
2391	Blend two colors.
2392	Clamp a value to a range.
2393	Inverse square root of a double.
2394	Casts an object to a Float.
2395	Casts the given object to a Byte.
2396	Casts an Object to a Short.
2397	Cast an object to an Integer.
2398	Casts an object to a Double.
2399	Casts an Object to a Long.
2400	Casts an object to a Boolean.
2401	Returns the mean of the given values.
2402	Modulo - div - div - div - a
2403	Returns the shift of the multiplicand.
2404	Multiply this quaternion by a scalar.
2405	Divide this quaternion by the given scalar.
2406	Rotate this vector by the given angle.
2407	Returns the length of the quaternion.
2408	Normalizes this quaternion to the unit quaternion.
2409	Creates a quaternion from the imaginary part.
2410	Creates a new quaternion from the given quaternion components.
2411	Creates a quaternion from the given axes in radians.
2412	Creates a rotation from the given axes angles in radians.
2413	Creates a quaternion from the angle and axis in radians.
2414	Creates a quaternion from the given angle in radians.
2415	Returns the minimum axis of the vector.
2416	Multiply this quaternion by the given scalar.
2417	Divide this quaternion by the given x and y.
2418	Rotate this vector by the given x and y coordinates.
2419	Normalizes this complex number.
2420	Converts this quaternion to a quaternion with the given x y and z axis.
2421	Creates a new composition from the given x and y values.
2422	Creates a new composition from the given angle in radians.
2423	Returns the maximum axis of the vector.
2424	Hashes a double value.
2425	Adds the given values to this quaternion.
2426	Multiply this quaternion by a scalar.
2427	Divide this quaternion by the given scalar.
2428	Returns the axis of the quaternion.
2429	Returns the angle in radians and rolls.
2430	Creates a quaternion from the imaginary part.
2431	Creates a new quaternion from the given x y z and w values.
2432	Creates a quaternion from the given axes in radians.
2433	Creates a quaternion from the given axes angles in radians.
2434	Creates a quaternion from an angle and a rotation about the given axis.
2435	Creates a quaternion from the given angle and radians.
2436	Multiply this complex number by a scalar.
2437	Divide two complex numbers.
2438	Rotate this vector by the given x and y angles.
2439	Converts this quaternion to a quaternion with the given x y and z values.
2440	Creates a new complex number from the given complex numbers.
2441	Creates a complex number from the given angle in radians.
2442	Move the child view to the given scale.
2443	Move the child view to the specified scale.
2444	Set a block span.
2445	Reduces the constraints in the bound set.
2446	Transforms the type parameters of this type by applying the given transformer to each of the type parameters
2447	Creates a symbol reference from a given symbol declaration.
2448	Creates a symbol reference that is not solved by the given class.
2449	Checks if a type is a proper type.
2450	Returns the least upper bound of a set of types.
2451	Returns the ground target type of a lambda expression.
2452	Returns the type parameterization of the given type.
2453	Returns the union of the given types.
2454	Solves a dot expression type.
2455	Solves the constructor definition of the given object creation expression.
2456	Solves a method call expression.
2457	Finds the type of the given lambda expression in the given map.
2458	Returns the qualified name of the given class or interface type.
2459	Returns the type of this node.
2460	Exit the statement if it is reachable from a try statement.
2461	Checks if the given statement can be completed normally.
2462	Solves a type in a type declaration.
2463	Solves a method in a type.
2464	Creates a Value from a given value declaration.
2465	Checks if the given method call expression is a partial call of the given method declaration.
2466	Checks whether a method call is applicable to a more specific method.
2467	Checks if the given expression appears in the assignment context.
2468	Predict the features in the tree.
2469	Load the model from a file.
2470	Returns the index of the leaf node that contains the given feature.
2471	Get the leaf value for a given feature.
2472	Unflattens the JSON object into a string.
2473	Flatten the object into a JSON string.
2474	Flatten the source into a map.
2475	Creates a view that concatenates the given lists.
2476	Returns an event stream that emits invalidations of the given observable.
2477	Repeats the given observable by emitting the input to the event stream and then emit
2478	Animation frames.
2479	Merge the given set into this stream.
2480	Wraps an ObservableList in a suspendable ObservableList.
2481	Executes the given supplier while the guard is satisfied.
2482	Adds an observer to the underlying observable.
2483	Creates a copy of this metadata.
2484	Strips the prefix from the given string.
2485	Configures the digester.
2486	Process class mapping annotations.
2487	Join the given values with the given separator.
2488	Detects the device type and sets the properties to their respective values.
2489	Detects if the current device is an iPhone.
2490	Detects if the current browser is Webkit.
2491	Detects if the current browser is a Windows Mobile device.
2492	Detects if the current device is a BlackBerry 10 or 2. 0
2493	Detects if the browser is a S60 or Symbian.
2494	Detects if the current device is PalmOS.
2495	Detects if the current browser is an Opera Android phone.
2496	Detects if the current browser is an Opera Android device.
2497	Detects if the current browser is a Maemo tablet.
2498	Detects if the current browser is a mobile device.
2499	Detects if the device is an iPhone or iPod.
2500	Detects if the device is a device in other phones.
2501	Checks if the given string is an EL expression.
2502	Checks if the given string contains an EL element.
2503	Build the script to load the given url.
2504	Creates an ElMethod expression.
2505	Checks if the given string contains any of the field descriptors.
2506	Copy response headers from proxy response to servlet response
2507	Encode a string as a URI query.
2508	Returns the URI of the resource.
2509	Build a query string from a URL.
2510	Get the first value of a parameter.
2511	Get the values of a parameter.
2512	Adds the query parameters to the request.
2513	Override to customize the view id.
2514	Returns the URL pattern parser.
2515	Get the path validators for a given path parameter.
2516	Create a new QueryStringBuilder from a encoded string.
2517	Extract query from url.
2518	Adds a parameter to the request.
2519	Get the list of dispatcher type providers.
2520	Returns the number of negation rules in the given context
2521	Adds a parameter to the navigation.
2522	Builds the standard outcome.
2523	Process a class entry.
2524	Converts a query literal into an address builder query.
2525	Add parameters to be excluded from the query.
2526	Builds the URL for the given mapping.
2527	Sends an error to the response.
2528	Visit a class.
2529	Prepends the context path to the given URL.
2530	Strip context path from the URI.
2531	Translate the given value.
2532	Build a Dyna view id from a servlet mapping.
2533	Process the DynaView.
2534	Returns the required type of the given class.
2535	Get a proxy for the given custom annotation.
2536	Returns a collection of fields filtered by the size of filter.
2537	Get all fields of the given class including static and non - primitive.
2538	Put a value into the cache.
2539	Removes the value associated with the given key.
2540	Loads the agent.
2541	Checks if the agent is available.
2542	Copy a Plexus IOResource to a file.
2543	Checks if the given PlexusIoResource is the same as the given file.
2544	Adds a web - inf directory to the archive.
2545	Initialize the zip output stream.
2546	Add a file to the archive.
2547	Get the default manifest.
2548	Adds a section to the manifest.
2549	Writes the contents of this string to the given PrintWriter.
2550	Returns the warnings that were found in the main section.
2551	Returns an ExistingSection object for the given section name.
2552	Copy a file from the input stream to the output directory.
2553	Adds a new manifest to the list of configured manifests.
2554	Override the default zipFile method to add the manifest to the archive.
2555	Remove all elements from the rootEntries
2556	Reset the manifest.
2557	Write the list of directories and files to the given writer.
2558	Grab files and directories from a zip file.
2559	Decompress the input stream.
2560	Compress the source file to a gzip file.
2561	Merge the attributes from a section into a target.
2562	Set the application. xml file.
2563	Adds a file to the archive.
2564	Adds a directory to the Archiver.
2565	Compress the source file to a snappy file.
2566	Adds the resources to the archive.
2567	Add parent directories to the archive.
2568	Adds a zip file to the archive.
2569	Creates an empty ZIP archive.
2570	Reset the state of the archive.
2571	Compress a file.
2572	Compresses the content of the given resource to the given output stream.
2573	Sets the maximum size of the dynamic table.
2574	Decodes a Little Endian integer from the stream.
2575	Returns the index of the given name or - 1 if not found.
2576	Returns the index of the first header field that matches the given name and value.
2577	Creates a map of header names to the smallest index in the map.
2578	Returns the encoded length of the given byte array.
2579	Returns the length of this header.
2580	Adds a header field to the list.
2581	Sets the capacity of the header array.
2582	Encodes a header field.
2583	Sets the maximum size of the table to be used.
2584	Encodes an integer into a byte array.
2585	Encodes a string literal.
2586	Encode a literal.
2587	Ensure that the buffer has enough space to hold the given header size.
2588	Returns the header field at the given index.
2589	Get the header entry for the given name and value.
2590	Returns the index of the field with the given name.
2591	Adds a new header field to the dynamic table.
2592	Returns a hash code for the given name.
2593	Decodes a byte array into a byte array.
2594	Set the default script names.
2595	Assert actual value is equal to expected value.
2596	Assert actual value is not equal to expected value.
2597	Asserts that actual is greater than expected. If actual is null or empty the assertion fails.
2598	Asserts that actual is greater than expected.
2599	Assert that actual char value is equal to expected char value. If actual is null or empty
2600	Asserts that the actual character is not equal to the other character. If the assertion fails the
2601	Asserts that actual character is less than other. If actual is null or empty this will constit
2602	Asserts that actual is not greater than other. If the assertion fails the provided description will be
2603	Asserts that actual character is greater than other. If actual is null or empty it will be
2604	Asserts that actual is not less than other. If the assertion fails it will be logged with
2605	Assert that actual is lower case.
2606	Assert that the given character is uppercase.
2607	Asserts that the given array has the given size.
2608	Asserts that actual contains values.
2609	Assert that the map contains the given key. If the map does not contain the key an
2610	Asserts that the map does not contain the given key.
2611	Assert that the map contains the given value. If the map does not contain the value an
2612	Asserts that the given map does not contain the given value. If the map is empty this
2613	Asserts that the given map does not contain duplicate values.
2614	Asserts that actual and expected values are equal.
2615	Asserts that actual is zero.
2616	Asserts that actual is not zero.
2617	Asserts that actual is positive.
2618	Asserts that actual is negative.
2619	Asserts that actual value is equal to expected value.
2620	Asserts that actual value contains value at given index.
2621	Asserts that actual and expected values are not equal.
2622	Asserts that actual is not greater than expected.
2623	Asserts that actual is less than expected.
2624	Asserts that actual is not less than expected.
2625	Asserts that actual contains only the given values.
2626	Asserts that the given byte array contains the given sequence.
2627	Assert that actual and expected values are equal.
2628	Asserts that actual and other are not equal.
2629	Assert that two objects refer to the same instance.
2630	Assert that two objects are not the same.
2631	Asserts that the actual array does not contain any of the given values.
2632	Assert that the given char array is sorted.
2633	Matches a field with a name that matches the given matcher.
2634	Returns a matcher that matches a string that is not empty.
2635	Returns the middle name for the given field name prefixing with uppercase.
2636	Checks if a field exists in the given type.
2637	Get the list of annotation resolvers.
2638	Set the expected status for the method.
2639	Reduce the name of a class by adding the suffix to it.
2640	Get a boolean property.
2641	Remove callbacks from the cache and add them to the callback.
2642	Returns an array of String containing the names of the annotations.
2643	Sends the JSONP request to the API.
2644	Process the request and return the response.
2645	Handle the response of a password request.
2646	Process the end - user s decision.
2647	Process the response.
2648	Collect the claims for the given subject.
2649	Handles the authorization decision.
2650	Call the UserInfoIssue API and return the response.
2651	Computes the login id from the authorization response.
2652	Handle the request.
2653	Handle the request.
2654	Creates the service owner credentials.
2655	Creates the service credentials.
2656	Get the JAX - RS client.
2657	Creates a javax. ws. rs. client. Client based on the builder configured.
2658	Sets the connection timeout for the given client.
2659	Sets the read timeout for the given client.
2660	Executes the API call.
2661	Handle the request.
2662	Process the request and return the response.
2663	Process the request.
2664	Handle the request.
2665	Process the authorization request.
2666	Check if the current user has not been authenticated.
2667	Process the revocation request.
2668	Extract the client certificate from the request.
2669	Update the implied stores.
2670	Generates a X509 certificate from a given key pair and a number of days.
2671	Returns a name with the given node prefix and suffix.
2672	Generate a relationship file for a given transfer.
2673	Commits the changelog entries to git.
2674	Adds snapshot data object.
2675	Returns the remote repository name for the given URL.
2676	Returns the next name in the list.
2677	Send a message to Kafka using the specified formatter.
2678	Sends a message to a topic with a timeout.
2679	Sends a message to Kafka using the specified formatter.
2680	Returns a set of cache names that should be used for the query.
2681	Writes a set of tracked content to a zip file.
2682	Read all the records from the given input stream and invoke the consumer with the records.
2683	Get the key for the target group.
2684	Checks if the given path is present in the given store.
2685	Delete obsolete files.
2686	Parse the repo name.
2687	Check if a given store exists.
2688	Load artifacts from disk and invoke consumer with the changes.
2689	Load a store from the disk and perform a change summary on the store.
2690	Create a hosted repository from a zip file.
2691	Creates a HTTP client context for the given site.
2692	Creates a new HTTP client for the given site.
2693	Performs the actual repair.
2694	Handles group members change.
2695	Set the system properties.
2696	Get the file ranges from the given stream reference.
2697	Read messages from the given stream.
2698	Creates a table if it does not already exist.
2699	Deletes the table.
2700	Deletes the table if it exists.
2701	Uploads the given permissions to the Storage.
2702	Downloads the permissions for the current user.
2703	Applies default values to the RequestOptions object.
2704	Get the extended error information from the given input stream.
2705	Generate an access condition that checks if the given sequence number is less than or equal to the
2706	Generate an access condition that checks if the given sequence number is less than the given one.
2707	Generate an access condition that checks if the sequence number is equal to the given one.
2708	Applies the condition to the given request.
2709	Applies the condition on the source to the given request.
2710	Apply the append condition to the given request.
2711	Applies the lease condition to the given request.
2712	Applies the sequence condition to the given request.
2713	Verifies if the ETag matches the ETag and the Last - Modified - Since header.
2714	Combines two filters into a single filter string.
2715	Sets the storage URI.
2716	Write the shared access policies to the given writer.
2717	Generates the XML request body for a message.
2718	Add all the canonicalized headers to the given string.
2719	Append canonicalized element.
2720	Canonicalizes the given HTTP request.
2721	Canonicalizes the request.
2722	Computes the HMAC - 256 hash of the given string.
2723	Signs a table request.
2724	Gets the first message in the given list or null if there are no messages.
2725	Adds a message to the queue.
2726	Removes all items from the queue.
2727	Creates a queue with the given options.
2728	Creates a queue if it does not already exist.
2729	Deletes a queue entry.
2730	Deletes a queue if it exists.
2731	Deletes a message.
2732	Downloads the attributes of this object.
2733	Checks if the queue exists.
2734	Returns the next message in the queue.
2735	Peek up to the specified number of messages in the queue.
2736	Retrieves up to the specified number of messages from the queue.
2737	Retrieves a single message from the queue.
2738	Retrieves up to the specified number of messages from the queue.
2739	Retrieves a number of messages from the queue.
2740	Updates a message in Cloud Queue.
2741	Updates a message in the queue.
2742	Uploads the given permissions to the queue.
2743	Downloads the permissions for the current user.
2744	Get the transformed storage URI.
2745	Gets the table for hour - wide metrics.
2746	Gets the table reference for the minute - wide metrics.
2747	Gets the message content as a byte array.
2748	Get the message content as a string.
2749	Get a list of files and directories from the given stream.
2750	Applies the continuation token to the query builder.
2751	Method to perform a merge request.
2752	Query the table.
2753	Update a table.
2754	Set the ACL for a given table.
2755	Serialize the given properties to a byte array.
2756	Writes the retention policy.
2757	Writes CORS properties to an XML file.
2758	Writes the metrics properties to the specified xml writer.
2759	Writes logging properties to an xml file.
2760	Aborts a copy.
2761	Add the share snapshot query part to the URI query builder.
2762	Create a copy request.
2763	Create a share request.
2764	Create a DELETE request to the given URI.
2765	Get a file from the given URI.
2766	Get a file from the server.
2767	Get the file properties.
2768	Get the file ranges for a given snapshot.
2769	Get the properties of a share.
2770	Get the stats for a given share.
2771	Get the UriQueryBuilder for share resources.
2772	Get the properties request.
2773	Get a list of shares.
2774	Set the share metadata for a given URI.
2775	Set directory metadata.
2776	Create a directory request.
2777	Delete a directory.
2778	Get the directory properties.
2779	List all directories in the given directory.
2780	Create a PUT request.
2781	Create a PUT request to the given URI with the given file range operation.
2782	Resize a file.
2783	Create a PUT request to set the metadata for a file.
2784	Sets the file metadata for the given URI.
2785	Share a file with a snapshot.
2786	Sets the file properties for a given URI.
2787	Close the stream.
2788	Dispatches a read request to the underlying file reference.
2789	Read a single byte from the stream.
2790	Read from the stream.
2791	Reset the mark.
2792	Skips the next n bytes in the stream.
2793	Runs a sample of the blob getting started task.
2794	Runs a sample of the QueueGettingStartedTask.
2795	Run a sample of the table getting started.
2796	Run a sample of the table payload format.
2797	Output text to the given TextView.
2798	Prints an exception to the text view.
2799	Prints the sample start info.
2800	Prints the sample complete info.
2801	Canonicalize the request.
2802	Get the last request result.
2803	Check if the current item is correct for the given operation.
2804	Update the current iterator.
2805	Start a copy of the given source blob.
2806	Copies the source blob to the destination blob using the given access conditions.
2807	Start a copy of a file.
2808	Start a copy of a file.
2809	Start a copy of the source URI.
2810	Start a copy of a file from one location to another.
2811	Create a new file.
2812	Creates a new file in this directory.
2813	Delete empty file on exception.
2814	Downloads the file to a string.
2815	Downloads all file ranges that match the given access condition.
2816	Opens a new output stream for writing to an existing file.
2817	Opens a new FileOutputStream for writing to an existing file.
2818	Creates a new file output stream.
2819	Upload a file to the server.
2820	Uploads a file to the server.
2821	Uploads the given content to the server.
2822	Uploads a text file to the server.
2823	Uploads a range of bytes from the given InputStream.
2824	Uploads a range of bytes from the given input stream to the storage.
2825	Performs a put - range operation.
2826	Resizes the file to the given size with the given access condition.
2827	Uploads the contents of the given InputStream to the StorageService.
2828	Uploads a file to the server.
2829	Get the parent name from the share URI.
2830	Gets the Cloud File Share.
2831	Appends a path to a URI.
2832	Get the blob name from a URI.
2833	Get the canonical path from the given credentials.
2834	Get the container name from the given resource address.
2835	Get the filename from a resource address.
2836	Get the share name from the given resource address.
2837	Get the table name from the table address.
2838	Gets the resource name from the resource address.
2839	Get the URI of the container.
2840	Get the share URI for a file.
2841	Parse a string into a map of key - value pairs.
2842	Generates a shared access signature for a blob and file.
2843	Generate a shared access signature hash for a queue.
2844	Generate a shared access signature hash for a table.
2845	Creates a new directory in this directory.
2846	Creates a file if it does not already exist.
2847	Deletes the file if it exists.
2848	Checks if a file exists.
2849	Lists all files and directories in the current directory.
2850	Returns the CloudFileShare object that represents this file.
2851	Clear all messages from the specified queue.
2852	Delete a message from the queue.
2853	Download the attributes of a URI.
2854	Create a list request.
2855	Get a list of messages from the queue.
2856	Retrieve messages from the queue.
2857	Update a message in the queue.
2858	Set the ACL for a given queue.
2859	Get the ACL for a given queue.
2860	Split a string into a list of strings.
2861	Splits the given string into an EnumSet of CORS methods.
2862	Updates the key.
2863	Returns the HMAC - SHA256 hash.
2864	Validate an IP address.
2865	Decodes a string into a byte array.
2866	Encodes a byte array into a Base64 string.
2867	Validate that the given string is a base64 encoded string.
2868	Validate container name
2869	Validates that the given blob name is valid
2870	Validates that the given file name is valid.
2871	Checks if the given table name is valid.
2872	List shares with a prefix.
2873	List shares with a prefix.
2874	Lists all shares segments.
2875	List shares with a prefix segmented.
2876	Lists shares with a prefix.
2877	Disable the entity cache for the table.
2878	Returns the date header from the request.
2879	Get the metadata from the request.
2880	Checks if the given request is encrypted.
2881	Get extended error information from the given JSON reader.
2882	Parses the error details from the request.
2883	Parses the JSON error message and exception stack trace.
2884	Get the access identifiers from the given input stream.
2885	Get the copy state from the HTTP request.
2886	Get the file share attributes from the HTTP request.
2887	Get the FileDirectoryAttributes from the request.
2888	Get file attributes from request.
2889	Returns the HTTP verb for the given operation type.
2890	Fires the given event.
2891	Fires a sending request event if listeners have been configured.
2892	Fires a response received event if listeners are configured.
2893	Fire error receiving response event.
2894	Fires a request completed event if listeners are configured.
2895	Fire a RetryingEvent to the listeners.
2896	Assert continuation type.
2897	Assert that the given value is in the range [ min max ).
2898	Assert that the given long parameter is greater than or equal to the given minimum.
2899	Validates the max execution timeout.
2900	Get the remaining timeout for a read operation.
2901	Determines if the given URI is path - style.
2902	Checks if the given URI is a valid DNS name.
2903	Format an etag.
2904	Generates a new unexpected storage exception.
2905	Get the standard header value for a given header name.
2906	Parse a date from a string using the given pattern and time zone.
2907	Parse the given string in GMT.
2908	Relativize two URIs.
2909	Log the given exception if logging is enabled.
2910	Log the HTTP response.
2911	Removes the last character from the string.
2912	Trim the start of a string.
2913	Parse a date from a string.
2914	Get the location mode for a continuation.
2915	Populates the given options with default options and applies defaults.
2916	Read a string.
2917	Read a quoted string.
2918	Read a boolean.
2919	Read a date from the input stream using the specified format.
2920	Read a double.
2921	Read a UUID from the input stream.
2922	Read an integer.
2923	Read a long.
2924	Read a URI from the input stream.
2925	Read a character from the stream.
2926	Try to peek a given delimiter.
2927	Read a field from the input stream.
2928	Create a new instance of the retry policy.
2929	Returns true if there are more results.
2930	Sets the table entity class.
2931	Sets the entity resolver.
2932	Write a MIME boundary to the given writer.
2933	Write a MIME boundary closure.
2934	Write MIME content type.
2935	Adds a new key - value pair to the storage.
2936	Add the given URI to this URI s query and fragment.
2937	Adds an optional header to the given request.
2938	Create a connection to the given URI using the given request options.
2939	Create a HTTP DELETE request.
2940	Get the properties of a service.
2941	Returns the user agent string.
2942	Set the metadata for a URI.
2943	Create a HTTP PUT request to set the service properties.
2944	Close the stream.
2945	Commit the operation.
2946	Dispatches a write operation to the underlying file.
2947	Flushes the current buffer to the underlying stream.
2948	Waits for a task to complete.
2949	Writes a portion of the given byte array to the underlying stream.
2950	Writes the contents of the given stream to this object.
2951	Writes the given data to the output buffer.
2952	Get the DNS name for the given service and base.
2953	Try to configure the Dev Store storage account.
2954	Try to configure a Cloud Storage account using the given settings.
2955	Creates a new Cloud Analytics client.
2956	Creates a CloudBlobClient using the configuration specified.
2957	Creates a new CloudFileClient using the configuration specified.
2958	Creates a new Cloud Queue client.
2959	Creates a CloudTableClient using the configuration specified.
2960	Generate a shared access signature for the given policy.
2961	Generates the request identity for the table operation.
2962	Generate request identity with table name.
2963	Initializes the request result.
2964	Materialize the storage exception.
2965	This method is called after the response is received from the server.
2966	Parse the error details from the connection.
2967	Delete the entity.
2968	Inserts the given entity into the table.
2969	Inserts or merges the given entity into the table.
2970	Inserts or replaces the given entity in the table.
2971	Merge the given entity into this table.
2972	Removes the entity at the given index.
2973	Removes all entities from the collection.
2974	Replaces the given entity in the table.
2975	Check if there is a single query per batch operation.
2976	Lock the batch to the given partition key.
2977	Creates a new file in this directory.
2978	Deletes all snapshots in this directory that match the given access condition.
2979	Downloads permissions for the current object.
2980	Generate a shared access signature for the given policy.
2981	Upload the permissions.
2982	Uploads the given permissions to the storage.
2983	Returns the URI of the file or directory that this storage object is pointing to.
2984	Insert a new entity in the tablebasics table.
2985	This method is used to perform a basic batch of operations on the table.
2986	Retrieve a single entity and display it.
2987	This method is used to perform a basic upsert on the storage.
2988	Delete the entity.
2989	List all tables
2990	Generate a list of table queries.
2991	Executes a table query with a continuation token.
2992	Generates an iterator for the given table query.
2993	Populates the version 1 log.
2994	Get a list of queues from the given stream.
2995	Translate a HTTP status code to a StorageException.
2996	List all queues.
2997	List all queues with a prefix.
2998	Lists queues with a given prefix.
2999	List the queues that are segmented.
3000	Returns a list of queues with segments.
3001	Add a catalog that is configured for use with the XML parser.
3002	Get the next unique ID.
3003	Set the phase of the schematron binding.
3004	Set the error handler to use for the schematron schema.
3005	Set the variable resolver to use for the schema.
3006	Set the function resolver to use for evaluating the result of the function.
3007	Set the entity resolver to use.
3008	Get the bound schema.
3009	Validate the current schema against the current schema.
3010	Apply the Schematron schema validation to the passed XML node.
3011	Resolve the passed content of a rule.
3012	Get the passed schema as a minimal schema if possible.
3013	Get the passed schema as a preprocessed schema.
3014	Get a copy of the passed schema with all the attributes preprocessed.
3015	Read the schema from the passed resource.
3016	Get the query binding for the passed schema.
3017	Create a preprocessed schema from the passed schema using the passed query binding.
3018	Write the passed IPS element to the passed file.
3019	Write the passed IPS element to the passed output stream.
3020	Write the passed IPS element to the passed writer.
3021	Apply the Schematron validation on the passed XML resource.
3022	Apply the schematron transformation to the passed node.
3023	Remove the passed parameter from the query binding.
3024	Remove all variables from this map.
3025	Get all failed assertions from the passed Schematron output.
3026	Get all failed assertions that are more than or equal to the passed error level.
3027	Get all successful reports from the passed Schematron output.
3028	Get all successful reports that are more than or equal to the passed error level.
3029	Get all failed assertions and successful reports from the passed Schematron output.
3030	Set the error level determinator.
3031	Get the query binding with the passed name.
3032	Get the query binding with the passed name or throw an exception.
3033	Load the passed XQuery and return a MapBasedXPathFunctionResolver.
3034	Format the given argument using the given format.
3035	Format the message using the given format.
3036	Check if the passed node is a valid schematron node.
3037	Check if the passed node is a valid schematron node.
3038	Check if the passed resource is a valid schematron transformation.
3039	Check if the passed source is valid according to the Schematron schema.
3040	Create a Schematron provider from a Schematron resource.
3041	Get a Schematron XSLT provider for the passed resource.
3042	Get the error text for the passed content elements.
3043	Get the location to be used for the passed element.
3044	Log a warning.
3045	Read an active element from the passed XML stream.
3046	Read an assertion report from a MicroXML object.
3047	Read a diagnostic from the passed XML.
3048	Read a diagnostic object from XML.
3049	Read a dir from an XML string.
3050	Read the passed XML element as a Schematron EMPH.
3051	Read a Schematron extended element.
3052	Read an include from an XML string.
3053	Read a Let from XML.
3054	Read a name from an XML element.
3055	Read a namespace from a MicroElement.
3056	Read a PSP from the passed XML.
3057	Read a parameter from a MicroElement.
3058	Read a pattern from a MicroElement.
3059	Read a phase from a MicroElement.
3060	Read a rule from a micro element.
3061	Read a schema from an XML element.
3062	Read a span from an XML string.
3063	Read the passed title XML element.
3064	Read a value of from an XML element.
3065	Create a mapping from the passed schema to the default namespace.
3066	Checks if the request header matches the regex pattern.
3067	Mark the request as authorised.
3068	Check if the request is authorised.
3069	Defer request.
3070	Returns the deferred action for the given request.
3071	Mark the request as authorised and execute the delegate.
3072	Checks if an action is left in the action chain.
3073	Gets the role names.
3074	Checks if the given subject option has the given role.
3075	Filter function to check if subject is present.
3076	Returns the names of the given roles.
3077	Returns the values of the given permissions.
3078	Returns a list of strings that can be used as a group of strings.
3079	Restricts the view to the given roles.
3080	Changes the input buffer position to the position of the output buffer.
3081	Changes the input buffer position to the beginning of the input buffer and positions to the end of
3082	Sets the ASCII bits in the mask to the range [ min max ).
3083	Encodes the given string using the given encoder.
3084	Encode the given string using the given encoder.
3085	Map an encoder to a name.
3086	Returns an encoder for the given context name.
3087	Appends the contents of src to out at the position j.
3088	Encodes the given string using the first encoder and the last encoder.
3089	Flush the buffer to the underlying output stream.
3090	Flushes the left over buffer to the underlying output stream.
3091	Observe a sensor.
3092	Get the text value of the given property.
3093	Executes a sonar query.
3094	Build the URL from the Sonar URL and the query.
3095	Fetch the status of a job from the given URL retrying if necessary.
3096	Fetch the Sonar status from the given URL.
3097	Parse the response from the SonarBreak API.
3098	Extract build artifacts from the Folo server.
3099	Process the uploads from the report and return the list of artifacts.
3100	Computes the identifier for the given transfer.
3101	Computes the generic identifier for the given parameters.
3102	Validates an artifact against the repository manager.
3103	Returns true if this build task has a configuration dependency on the given build task.
3104	Returns true if this build task has a direct configuration dependency on the given build task.
3105	Parse a JSON PNC config.
3106	Monitor the deletion of the repository.
3107	Mark all the build tasks as completed and mark them as cancelled or failed.
3108	Get the build task for the given build configuration.
3109	Monitor the promotion of the repository.
3110	Merge two graphs.
3111	Read a file into a string.
3112	Read the contents of the given stream as a string.
3113	Start a release for the given milestone.
3114	Clean up the BPM manager tasks.
3115	Get the task id for a given build id.
3116	Collect a collection to a flat list.
3117	Cleanup expired temporary builds.
3118	Creates the build repositories for the given build execution.
3119	Handles RC creation success notification.
3120	Add listeners to websocket notification.
3121	Creates an artifact that was imported from the mock.
3122	Set whether SSL is required for the current request.
3123	Delete a temporary build.
3124	Deletes a temporary build record set.
3125	Build a new build.
3126	Checks if the given build set task is empty.
3127	Returns the environment driver that can run the given system image type.
3128	Predicate to check if the build is not archived.
3129	Loads the build configurations from the given build configuration audited object.
3130	Store the build result in the datastore.
3131	Initializes a builder for a build record.
3132	Predicate to filter products by build configuration id
3133	Checks if the Jenkins server is secured with CSRF.
3134	Save artifacts to the database.
3135	Save a build config set record.
3136	Get all build configurations in the given build configuration set.
3137	Checks if the latestSuccessfulBuildRecord has an implicit dependency that is not newer than the latest
3138	Checks if the current build has an explicit dependency that is newer than the latest successful build record
3139	Adds a listener for the given event type.
3140	Get the process parameters that should be extended.
3141	Collect all the dependent configurations of a given buildConfiguration.
3142	Create a build set task.
3143	Creates a new build set task.
3144	Fill the build task set with the given build configuration.
3145	Get all artifacts built for a given build record.
3146	Adds a slash to the end of a string if it does not already have one.
3147	Deserialize integer array.
3148	Serializes an array of integers into a comma separated string.
3149	Adds a ready task to the queue.
3150	Add a task that is waiting for execution.
3151	Executes all the ready tasks that are required to be executed.
3152	Get the task for a given build configuration.
3153	Checks if the given artifact origin is trusted by the given target repository.
3154	Adds a build record to the list of build records.
3155	Removes a build record from the list of build records.
3156	Delete a temporary build.
3157	Returns a set of all the dependencies of this configuration including indirect dependencies.
3158	Add a dependency to this build configuration.
3159	Remove a dependency from this build configuration.
3160	Retrieve the name of the clone.
3161	Get the module configuration.
3162	Instantiates an EmbeddedTomcat instance.
3163	Registers the embedded server.
3164	Unregisters the embedded server.
3165	Puts a value in the store.
3166	Find the object in the store.
3167	Concatenate the path and endpoint into a single path.
3168	Creates a new context.
3169	Read a cookie from a raw string.
3170	Creates a new header with the given name and value.
3171	Creates a new header with the given name and values.
3172	Creates a new WebAppContext with the given configuration.
3173	Executes all hooks.
3174	Process all annotations on the given object.
3175	Process a field.
3176	Creates a new Apache HTTP client using the default configuration.
3177	Creates a default Apache HTTP client for the given embedded server.
3178	Handles the body of the request.
3179	Creates the request URI.
3180	Adds the headers to the given HTTP request.
3181	Adds the form parameters to the given HTTP request.
3182	Adds the request body to the given HTTP request.
3183	Adds the cookies to the request.
3184	Creates an AsyncHttpClient using the default configuration.
3185	Parses the Java version from the specification.
3186	Map a collection of input objects to a list of output objects.
3187	Concatenates the inputs and the new value into a list.
3188	Filters the given list by the given predicate.
3189	Creates a new response with the given status body and headers.
3190	Instantiates a Jetty instance.
3191	Creates a default OkHttpClient instance.
3192	Creates a new OkHttpClient instance with the default configuration.
3193	Finds all fields of a class and its super classes.
3194	Find all static fields of a class.
3195	Finds all static methods of a given type.
3196	Finds all fields annotated with the given annotation.
3197	Finds all static methods annotated with the given annotation.
3198	Set the value of the field.
3199	Get the value of a field.
3200	Invokes a method.
3201	Format the given date with the given pattern.
3202	Format the time using the given pattern.
3203	Adds the headers to the request.
3204	Checks if the given string is blank.
3205	Removes the prefix from the given value.
3206	Join a collection of strings with a separator.
3207	Adds the query parameters to the request.
3208	Handles the request body.
3209	Adds the form parameters to the request.
3210	Adds the cookies to the request.
3211	Adds the headers to the request.
3212	Append a map to the field.
3213	Append an array of values to the field.
3214	Append a formatted field value.
3215	This method retrieves the dialog from the distributed cache. If the dialog is present in the distributed
3216	put the dialog into the distributed cache
3217	remove the dialog from the distributed cache
3218	Initialize the transaction stack after the SIP provider has been loaded.
3219	Add a transaction to the list of transactions to be processed.
3220	Prints an entry to the LDIF.
3221	Load a directory entry from an input stream.
3222	Dumps the contents of the directory to the output stream.
3223	Execute the LDAP dump.
3224	Configures the given component with the given configuration.
3225	Add server dependencies to the class realm.
3226	Build the list of URLs from the given classpath elements.
3227	Get the dependencies of the specified server type.
3228	Creates a server artifact.
3229	Returns the server type.
3230	Create a DSML FormatWriter.
3231	Open a DSML format reader.
3232	Configures the directory server.
3233	Starts the server.
3234	Stops the server.
3235	Returns the next LDIF change record.
3236	Executes the plugin.
3237	Start the ApacheDS server.
3238	Stop ApacheDS server.
3239	Creates the root entry for the given partition.
3240	Starts the server.
3241	Stops the OpenDJ server.
3242	Prints an entry.
3243	Returns the server type.
3244	Get the server configuration.
3245	Send a metric to KairosDB.
3246	Report a metric to Kairos.
3247	Read the geometry type.
3248	Read a point from the byte stream.
3249	Read a line string from the given byte reader.
3250	Read a polygon from a byte stream.
3251	Reads a multipoint from the byte stream.
3252	Read a multi - line string from the specified ByteReader.
3253	Read a multipolygon from a byte stream.
3254	Read a geometry collection from a byte stream.
3255	Reads a circular string.
3256	Reads a compound curve from the specified byte stream.
3257	Reads a curve polygon from the ByteReader.
3258	Reads a polyhedral surface from the ByteReader.
3259	Reads a TIN from the specified byte stream.
3260	Read a triangle from a byte stream.
3261	Write a Geometry to a ByteWriter
3262	Write a point to a byte writer.
3263	Write a line string to a byte writer.
3264	Write a polygon to a byte writer.
3265	Write a multipoint to a byte writer.
3266	Write a MultiLineString to a ByteWriter
3267	Write a multipolygon.
3268	Write a GeometryCollection to a ByteWriter
3269	Write a circular string to a byte writer.
3270	Write a compound curve to a byte writer.
3271	Write a curve polygon.
3272	Writes a PolyhedralSurface to a ByteWriter.
3273	Write a TIN to a ByteWriter.
3274	Write a triangle to a byte writer.
3275	Get the geometry code.
3276	Get the Geometry Code for a Geometry Type
3277	Get the geometry type from the code.
3278	Checks if the file exists.
3279	Calculates the Greatest Common Divisor of a list of numbers.
3280	Abbreviate a string to a maximum length.
3281	Convert string to JsonValue
3282	Returns a JSON object that represents the current state of the agent.
3283	Parse a JSON string into a Java value.
3284	Get a string value from a map.
3285	Read a JSON object from a string.
3286	Get the value of the named property.
3287	Returns an iterator over the members in this object.
3288	Resolve a placeholder for a property.
3289	Get the version info of the agent.
3290	Read a Json array from a string.
3291	Adds a JsonValue to the JsonArray.
3292	Sets the value at the given index.
3293	Get the value at the given index.
3294	Returns the values of the field.
3295	Returns an iterator over the values in this list.
3296	Process an event.
3297	Publishes an event to all registered event busses.
3298	Publish an event to the specified event bus.
3299	Remove a child element.
3300	Add the tag to the map of WFF ids.
3301	Adds a key - value pair to the attribute map.
3302	Invoke the value change listeners.
3303	Adds all the values of the given map to the attribute value map.
3304	Remove the given keys from the attribute value map.
3305	Pushes the push queues to the shared objects.
3306	Remove the given attribute from the attribute value map.
3307	Adds the given value to the attribute set.
3308	Adds all the given values to the attribute value set.
3309	Removes all the values from the attribute value set.
3310	Removes all the attribute values from the attribute value set.
3311	Adds a value change listener to this attribute.
3312	Checks if the attribute contains a valid regular expression.
3313	Sets the color of the color.
3314	Sets the color of the color.
3315	Sets the background color of the gauge.
3316	Sets the alpha value.
3317	Load all tag classes.
3318	Gets the first substring of the input string that starts with the given substring and ends with the
3319	Clone the given array.
3320	Checks if the string contains any whitespace.
3321	Strips leading and trailing whitespace from a string.
3322	Removes all children from this tag.
3323	Adds the given inner htmls to this tag.
3324	Removes the given children from this element.
3325	Removes a child tag from this tag.
3326	Appends the given children to this tag.
3327	Initializes the attributes.
3328	Returns the attribute with the given name.
3329	Mark the attributes as the owner tag.
3330	Initialize the start and end of the constructor.
3331	Returns the children as an array.
3332	Returns the first child of this node.
3333	Returns the number of children.
3334	Checks if the given child tag is a child of this tag.
3335	Gets the opening tag.
3336	Inserts the given HTML before the parent tag.
3337	Set the attribute value.
3338	Replace all occurrences of the given attribute values with their corresponding values.
3339	Add a listener to be notified when a new WebSocket message is received.
3340	Remove a listener for a websocket push.
3341	Remove the given tab from the browser context.
3342	Returns the tag repository.
3343	Sets the value of the nonce for the WFF script tag.
3344	Sets the border style.
3345	Sets the value of the attribute.
3346	Merge the given byte buffers into a single byte buffer.
3347	Removes all CSS properties from the attribute value map.
3348	Checks if the given CSS property is in the list of CSS properties.
3349	Returns a map of CSS properties.
3350	Find all tags that are contained by the given attribute.
3351	Finds the first tag that has the given attribute.
3352	Find all attributes.
3353	Build all attributes stream.
3354	Find all attributes from the given tags.
3355	Checks if a tag exists in the browser.
3356	Checks if an attribute exists in the browser.
3357	Build all attributes stream.
3358	Gets the child text.
3359	Writes the given bytes to the output stream by chunk.
3360	Sets the context path for the embedded Tomcat instance.
3361	Sets the context file to use for the embedded Tomcat instance.
3362	Add the context environment and resource from a file.
3363	Creates a filter that matches the given filter against the given content type.
3364	Creates a filter that matches the given filters and is the result of the first filter or the
3365	Check that the next token is not a end - of - file.
3366	Checks if the given token is a line space or a comment.
3367	Parse a string into a string.
3368	Scans the input for tokens.
3369	Parse the command line arguments.
3370	Parse data from string.
3371	Prints the usage of the command.
3372	Determines the width of the command name.
3373	Create a zip file from a list of files.
3374	Read the contents of a file into a byte array.
3375	Create a filter from a filter string.
3376	Writes an integer to the output stream.
3377	Writes a 32 - bit value to the stream in big endian byte order.
3378	Writes n bits from the bit stream.
3379	Print out all syntactic markers from the target entry.
3380	Print a syntactic marker.
3381	Extract the syntactic markers from the given binary files.
3382	Returns the parent of this item.
3383	Returns the parents of this item.
3384	Returns the ancestor of this item or null if no such item exists.
3385	Append an array of ints to an existing array.
3386	Append two integers.
3387	Append two int arrays.
3388	Append an array of objects to a new array.
3389	Adds all elements from the array to the given collection.
3390	Convert a collection of Strings to an array of Strings.
3391	Convert a collection of Integer to an array of integers.
3392	Sorts the given array and removes duplicates.
3393	Checks if the children are sorted and unique.
3394	Compares two arrays of comparable objects.
3395	Returns the configuration schema for the current build.
3396	Creates a template extension point.
3397	Activates the default plugins.
3398	Determine the system root.
3399	Determine the local root of the project.
3400	Read a configuration file from the given directory.
3401	Get the module instance.
3402	Start the module loader.
3403	Activates all modules in the list.
3404	Output the error message to the given output stream.
3405	Checks if a given task is ready to be run.
3406	Parse the given options into a map.
3407	Split the config string into a map of options.
3408	Returns the parent of the given child item.
3409	Returns the first ancestor of the given child item.
3410	Substitute an item in the hierarchy.
3411	Get the content type for a file.
3412	Get the entry for the given file and content type.
3413	Inspects the given entry.
3414	Inspects a binary file.
3415	Read the items.
3416	Creates a trie from a path. ID.
3417	Command - line interface for the Whiley Compiler Collection.
3418	Returns the root of the repository.
3419	Resolve the package dependencies.
3420	Scans the input for tokens.
3421	Throw a syntax error.
3422	Log the stack trace of the current exception.
3423	Get the indent string for the current level.
3424	Execute the given instruction on the given frame.
3425	Add a string to an array.
3426	Replies the name of the attribute.
3427	Replies the stack map table attribute.
3428	Replies the local variable type table attribute.
3429	Find the stack map entry that is equal to the given offset.
3430	Find the index of the stack map entry before the given offset.
3431	Find the index of the stack map entry after the given offset.
3432	Builds a unitialized new map.
3433	Update the new object stack map entries.
3434	Update the offsets of the uninitialized new objects.
3435	Sets the stack map table for the given method.
3436	Prints the stack map table.
3437	Create a new StackMap attribute.
3438	Convert a Java type to a class name.
3439	Generates a StackMapType from a Java Type.
3440	Generates a Type from a StackMapType.
3441	Creates a local variable in the method scope.
3442	Calculates the stack types for a given method.
3443	Returns a string representation of the access flags of a method.
3444	Convert a list of instructions to a string.
3445	Returns the attribute name as a UTF - 8 string.
3446	Checks if the given method is valid.
3447	Checks the methods in the given class.
3448	Dumps the current stack trace.
3449	Dumps the methods of a class.
3450	Add a new instruction to the start of the method.
3451	Gets a string representation of a constant in the constant pool.
3452	Reset the locals of a method to formals.
3453	Convert a Java type to a Java class.
3454	Post - adds a new type to the end of the array.
3455	Set the frame s local variables and stack.
3456	Inserts a new instruction list at the start of the given method.
3457	Print an instruction handle and its targeters.
3458	Build an instruction list from the given instructions.
3459	Calculates the stack types for the given stack.
3460	Find the first occurrence of a character in a string.
3461	Reads a number of bytes from the stream.
3462	Flush the output buffer.
3463	Creates a new WebSocket client.
3464	Checks if the given ad can be used to display the dialog.
3465	Get the ad view for the given ad position.
3466	Called when the ad is unable to load.
3467	Get the ad request for the current test devices.
3468	Returns the number of items to publish.
3469	Get the original content position for the given position.
3470	Returns the index of the Ad in the list of Ads.
3471	Returns true if the given position is available in the list.
3472	Returns true if the given position has to be fetched.
3473	Get the type of an array element.
3474	Checks if the given field has a generic type argument.
3475	Emit a package declaration.
3476	Compress a type.
3477	Begin a new initializer.
3478	End a type declaration.
3479	Emit a single line comment.
3480	Emits an annotation value.
3481	End a method.
3482	Returns the qualified name of the given raw class with the given parameters.
3483	Emits the given modifiers.
3484	Get the PsiClass from the context.
3485	Finds and removes a method with the given name and arguments.
3486	Generates the parcelable class.
3487	Make the class implements Parcelable.
3488	Checks if the given element is a class.
3489	Checks if the TypeMirror is of the given class.
3490	Returns the first class that matches the given type in the given list of classes.
3491	Get the package name of the given type.
3492	Get the binary name of the given type.
3493	Generates a method that writes a Parcel to a JavaParcel object.
3494	Checks if the given type is a public class.
3495	Checks if the given type has a public empty constructor.
3496	Computes the determinant of 3x3 transformation.
3497	Searches for classes using the given configuration and criteria.
3498	Creates an orthogonal generator.
3499	Gets the binary multi bulk reply.
3500	Get a set of tuples that represent binary reply.
3501	Returns the serialized key.
3502	Serializes the given hash key into a byte array.
3503	Deserializes a set of tuples.
3504	Deserializes the hash keys.
3505	Deserializes a list of hash values.
3506	Deserializes a map of hash keys and values.
3507	Deserializes a list of hash entries.
3508	Deserializes a set of entries.
3509	Returns a list of all IP addresses in the given domain.
3510	Parse the host part of an address.
3511	Parse a port from an address.
3512	Set a key to a value.
3513	Sync the response with the Redis server.
3514	Get a set of tuples with the scores of the members.
3515	Stop the leader election.
3516	Returns a string with the execute information.
3517	Set the quorum of the master.
3518	Check permission for a path.
3519	Joins the parameters of the given method.
3520	Expire the key at the given timestamp.
3521	Decrement the value of a key by the given integer.
3522	Increment the value of a key by the given integer.
3523	Add members to a sorted set.
3524	Set the zset to a range of scores.
3525	Set the zset with scores.
3526	Sends a slaveof command to the server.
3527	Set a configuration parameter.
3528	Get the bit at offset in the string stored at key.
3529	Get a range of the data stored at key.
3530	Shuts down the event selector.
3531	Main process method.
3532	Process the IO operations.
3533	This method is called in the main loop.
3534	Register a session with the selector.
3535	Adds a default header to the response.
3536	Checks the received times against the predicate.
3537	Get the value associated with the given key.
3538	Get the values for a given key.
3539	Adds the encoding from the Content - Type header.
3540	Creates a new stubbing with the given default encoding status and headers.
3541	Encode claims with a secret.
3542	Copy a date.
3543	Creates a token.
3544	Get a dialog with a specific error code and request code.
3545	Connect to the Google API and request the Google account.
3546	Logout and clear the state of the activity.
3547	This method checks if the edge cache domain is defined and if so it will invalidate the cache
3548	Returns the status of the Baragon service.
3549	Returns the global state of the Baragon service.
3550	Get a list of all load balancer groups
3551	Get the base paths that are occupied by the specified load balancer group
3552	Gets the response for the specified request.
3553	Returns a list of all queued requests.
3554	Checks that all baragon agents and targets are registered.
3555	Deregisters all targets that are removable from the target group.
3556	Ensures that the agents and loadBalancers are on the same VPC.
3557	Checks if all baragon agents have the same target in the target group.
3558	Sets the href of the link.
3559	Creates a new instance of a member key.
3560	Called when a line separator is found.
3561	Flushes the tag.
3562	Extracts the content of a Mustache tag.
3563	Read the lines of a segment into a list of lists.
3564	Creates a regular expression pattern to match Mustache tags.
3565	Decorates the given delegate with the given mappings.
3566	Unwrap an instance of Decorator.
3567	Builds the Mustache engine.
3568	Adds a template locator to the Mustache template engine.
3569	Adds a resolver to the engine.
3570	Register a callback to be called when the MustacheEngine is built.
3571	Adds a value converter to the Mustache template.
3572	Adds a context converter to the Mustache template engine.
3573	Capitalizes the first letter of the given text.
3574	Append the given sequence to the given options.
3575	Builds the cache for the source.
3576	Push a container onto the stack.
3577	Add a segment to the stack.
3578	Validate the last container segment on the stack.
3579	Splits a helper name into parts.
3580	Creates a builder that will decorate the given object with the given type.
3581	Flush the buffer to the parent.
3582	Finds a field by name on a given class.
3583	Registers a map of helpers with the given builder.
3584	Registers a helper with the builder.
3585	Read the lines before rendering the container.
3586	Invalidate all fragments with the given key.
3587	Returns a formattable object.
3588	Returns the local storage object if supported.
3589	Get the session storage.
3590	Clears the storage.
3591	Returns true if the value stored under the given key is set.
3592	Stores the given value in the storage.
3593	Removes the value associated with the given key from the storage.
3594	Creates a key that maps to an object.
3595	Creates a key that indicates whether the given key is a serializable object.
3596	Creates a StorageKey that is backed by Serializable.
3597	Obtains the size of the button which is shown by the preference from a specific typed array.
3598	Obtains the color of the button which is shown by the preference from a specific typed array.
3599	Obtains the color of the activated button from a specific typed array.
3600	Obtains the color of the pressed button from a specific typed array.
3601	Obtains the disabled color from a specific typed array.
3602	Obtains the icon of the button which is shown by the preference from a specific typed array.
3603	Obtains the duration of the animation which should be used to hide the button s visibility from a
3604	Adapts the shadow which should be used to show the floating action button.
3605	Adapts the size of the dialog s image button.
3606	Adapts the background of the button which is shown when the activity is used as an
3607	Creates a background drawable which can be used to show the state list.
3608	Creates the background drawable that is used to show the activation of the preference.
3609	Creates the background drawable that is used to draw the hovered button.
3610	Creates a background drawable that is used to disable the dialog s disabled state.
3611	Creates a background drawable.
3612	Returns the pixel size of the button.
3613	Animates the visibility of the view.
3614	Creates and returns a listener which allows to change the visibility of the button.
3615	Sets the size of the preference s dialog.
3616	Obtains the thickness of the progress bar from a specific typed array.
3617	Initialize the paint.
3618	Initializes the angle animator.
3619	Creates a property that allows to change the global angle of the progress drawable.
3620	Initializes the animation which will animate the sweep animation.
3621	Creates a property which allows to change the sweep angle of the progress drawable.
3622	Creates and returns a listener which allows to adjust the global angle of the sweep animation.
3623	Initializes the buttons which allows to show the floating action buttons.
3624	Creates and returns a listener which allows to show a toast when the floating action button of the
3625	Initializes the button which allows to hide the floating action buttons.
3626	Creates and returns a listener which allows to hide the floating action buttons.
3627	Initializes the chips.
3628	Creates and returns a listener which allows to close the chip when it is closed.
3629	Handles the saved state of the floating action buttons.
3630	Obtains the text of the chips from a specific typed array.
3631	Obtains the text color of the preference s text from a specific typed array.
3632	Obtains the color of the light which is shown by the preference from a specific typed array.
3633	Obtains the icon of the chip from a specific typed array.
3634	Obtains whether the chips should be closable from a specific typed array.
3635	Obtains the icon which should be used to close the chips close button from a specific typed
3636	Adds a specific listener which should be notified when the activity is closed.
3637	Removes a specific listener which should not be notified when the activity is closed.
3638	Sets the color of the button.
3639	Sets whether the button should be closed.
3640	Get the partials.
3641	Get the script engine for the given scripts.
3642	Returns the layout mappings.
3643	Checks if a class is present.
3644	Returns the value of the annotation with the given name.
3645	Returns an input stream for the given name.
3646	Returns the first available stream for the given names.
3647	Renders the given template with the given model.
3648	Adds a map of aliases to the configuration.
3649	Adds an alias for the given key and value.
3650	Returns a ChronosListener with the specified id.
3651	Runs an operation synchronously.
3652	Checks if a method is a callback.
3653	Resume the execution of the operation.
3654	This method is called when the ChronosEventBus thread is running.
3655	Invokes an operation on the ChronosService.
3656	Invokes an operation with a specific tag.
3657	Cancels a request.
3658	Cancels a request with the given tag.
3659	Checks if a request is running.
3660	Called when the operation is finished.
3661	Store the given delivery in the list of results.
3662	Delivers the result of an operation to the appropriate delivery method.
3663	Delivers the given operation result to all listeners.
3664	Log a message to the log.
3665	Cancels a running operation.
3666	Registers an operation that has started.
3667	Cancel all running operations.
3668	Returns true if the given operation is cancelled.
3669	Runs the ChronosOperation without throwing any exceptions.
3670	Creates an empty result for the given operation.
3671	Executes the given operation asynchronously.
3672	Runs an operation synchronously.
3673	Called when the operation is finished.
3674	Main method.
3675	Returns the modules that are used by the application.
3676	Main method for the command line tool.
3677	Check if the current line is the end of the line. If so flush the buffer.
3678	Initializes the event listener.
3679	Get the connection to the specified child.
3680	Close the connection to the specified MBeanServer
3681	Initializes the view.
3682	Main method for the plugin.
3683	Get the JSON schema for the node.
3684	Returns a list of columns that can be used to find the values of the columns in this
3685	Returns the list of columns to be inserted into the database.
3686	Get all packages.
3687	Returns the content of the file that is not overridden by the file type.
3688	Writes the not overridden content.
3689	Finds a table by its name.
3690	Find a bean by table name.
3691	Returns the view properties of the given bean.
3692	Gets the visible properties of a one to many relationship.
3693	Updates the target versionable with the contents of the source versionable.
3694	Adds a history to the history list.
3695	Customize the session
3696	Add a requirement spec node to the database.
3697	Write this VM to the database.
3698	Get issue type by name
3699	Get a VM setting.
3700	Create a DataEntry for a string field.
3701	Create a DataEntry for a boolean field.
3702	Get numeric field data entry.
3703	Display the workflow.
3704	Refreshes the workflow.
3705	Walks the component tree calling the visitor for each component.
3706	Receive an upload from the server.
3707	Get the address risk.
3708	Converts the given descriptor to a FileDescriptor. If the descriptor is null then a new File
3709	Get the blockscore error from a Retrofit error.
3710	Score the question set with the given answers.
3711	Digests the given stream with the given operation.
3712	Checks if the given path matches the includeFilePatterns and the excludeFilePatterns.
3713	Add an answer to the question.
3714	Returns the matching info.
3715	Get the address.
3716	Creates a question set for this person.
3717	Retrieves a question set with the given id.
3718	Gets the date of birth.
3719	Get the address.
3720	Returns the date of the Incorporation.
3721	Returns the history of the revisions.
3722	Search for watchlists that match the given criteria.
3723	Sets the date of birth.
3724	Sets the address.
3725	Retrieve a person by id.
3726	Retrieves a candidate by id.
3727	Returns the encoded authorization header.
3728	Get the date of the end of the birth.
3729	Returns the type parameter of the given class.
3730	Get a property as a String.
3731	Returns the value of the named property as a Boolean.
3732	Get the relative path from the given directory and entry.
3733	Get the error type.
3734	Returns the validation error code.
3735	Flushes the file system to disk.
3736	Synchronize the cache with the after cache.
3737	Get a cache of file descriptors.
3738	Creates the file hierarchy.
3739	Finds an unused port.
3740	Returns the value of the parameter with the given name.
3741	Sets the parameter values.
3742	Method to set the parameter value.
3743	Adds a parameter value to the context.
3744	Get the command that should be executed when the target command is selected.
3745	Get the value of the parameter for the given key.
3746	Registers an OID.
3747	Factory method for creating the Node. This method is invoked in the constructor from the derived classes
3748	Factory method for creating a new sub - tree.
3749	Returns the complement of the given indexFlavors.
3750	Creates a set of index flavors.
3751	Adds a new entry to the cache.
3752	Remove the value associated with the given key.
3753	Get a random 4 - character ID.
3754	Gets the user widths.
3755	Sets the sort direction.
3756	Sets the column order.
3757	Gets the user - defined columns.
3758	Override this method to add the sort label to the component.
3759	On the body of a component tag.
3760	Method to handle the onClick event.
3761	Get a Config instance by name. If no Config instance is found a new one will be
3762	Render the header items.
3763	Render combined require scripts.
3764	Gets the script to create a tree node.
3765	Method to get the data line.
3766	Execute the expand.
3767	Expands the UIClassification.
3768	Method to add the children of a UI classification.
3769	Get the keys of the children of the given instance.
3770	Returns a unique key for this field.
3771	Add highlight expressions.
3772	Adds start tags to the request.
3773	Adds end tags to the request.
3774	Gets the lazy load component.
3775	Gets the loading component.
3776	Close the modal window.
3777	Inserts the given element before the currently selected element.
3778	Replies the previous element in the wizard.
3779	Adds the given element and its parameters to the wizard.
3780	Evaluate the instance.
3781	Method to add the elements of a UI class.
3782	Update the elements of the given class.
3783	Method to add a cell to a form row.
3784	Evaluate the UIProvider.
3785	Evaluate the field set.
3786	Method to get the elements of a UIClassification.
3787	Returns JavaScript to display a sub menu item.
3788	Gets the javascript code to display the event.
3789	Get the image for the menu item.
3790	Gets the behavior.
3791	Add the components of the UIHeading.
3792	Returns an iterator over the children of the given node.
3793	Makes a request to the Hod API.
3794	Makes a request to the Hod API.
3795	Makes a request to the Hod API.
3796	Makes a request to the Hod API with the given token.
3797	Converts the given typed input to an object of the given type.
3798	Renders the header.
3799	Handle the error.
3800	Launch a new job.
3801	Adds reference prefixes to the request.
3802	Add additional metadata to the request.
3803	Add the promotion categories.
3804	Add synonym categories.
3805	Add a category to be blacklisted.
3806	Initiate the partial page request.
3807	On request.
3808	Get the resource stream.
3809	Get the javascript to download the specified URL.
3810	Send a keepalive message to the client.
3811	Initialize the keep alive.
3812	Get all user sessions.
3813	Method called when the body of the component tag is opened.
3814	Render the markup.
3815	Get the dashboard link.
3816	Parse the response and return the object.
3817	Parse the response and return the object.
3818	Parse the response body and return the object.
3819	Parse the response body and return the input stream.
3820	Gets the event definitions for the given event type.
3821	On component tag internal.
3822	Run the job.
3823	Add the dndType to the tag if the type is item.
3824	Renders the header.
3825	Sets the default menu item.
3826	Get the label for a button.
3827	Method to get the editable component.
3828	Set the markup id to the default model.
3829	Gets the date as a string.
3830	Gets the date list.
3831	Add this date component to the parent date listener.
3832	Shutdowns the executor service.
3833	Method to handle the click event.
3834	Override this method to add the action attribute to the component tag.
3835	Handle multi part.
3836	Reset the set counter.
3837	Initialize the filter.
3838	Checks if the user is logged in and if not calls the doAuthenticate method.
3839	Check the login.
3840	Method that is called when the AJAX request is received.
3841	Method to get the persistence script.
3842	Gets the print menu items.
3843	Method to get the menu.
3844	Method to get the JavaScript code for the menu.
3845	Method to get the JS code for the data.
3846	Gets the JavaScript code that reloads the data from the UI.
3847	Creates the page.
3848	Show the modal window.
3849	Adds a UIFieldSetValue to the row.
3850	Get the index for the given input name.
3851	Method to add a new row to the row.
3852	Adds the children of the given UI class to the model.
3853	Get the help text for a given command ID.
3854	Method to create a new UIStructurBrowser.
3855	Initialise the instance.
3856	Expand the UITable.
3857	Sort the model.
3858	Check if the column 4 row is hidden.
3859	Check for whether the given instance can be added to the UI.
3860	Execute the UI table event listener.
3861	Requery the label.
3862	Binds this handler to the given component.
3863	Gets the data table.
3864	Method to execute the UI field command events.
3865	Method to get the rendered content.
3866	Get the command.
3867	Method to get the label for the button.
3868	Prune all finished tasks from the list of execution bridges.
3869	Get a page of jobs.
3870	Get the bridge for a given job.
3871	Checks if the user is logged in.
3872	Lazy login.
3873	Logs in the user.
3874	Logout the current user.
3875	Adds a list of indexes to the query.
3876	Get the model for the given command id and instance.
3877	Method to add the components to the form.
3878	Adds the given components to the body.
3879	Method to convert the date field values from the form to HTML.
3880	Method to convert the values of the form fields.
3881	This method is called when the error is triggered.
3882	Method to validate the field values.
3883	Method to evaluate the form element.
3884	Method to validate the form.
3885	Check if the required fields are present.
3886	Gets the list of form panels.
3887	Shows the modal.
3888	Initialize the filter.
3889	Returns a set containing all of the given resource types.
3890	Creates a set containing the given resource types.
3891	Is check out.
3892	Check if the current user has access to the menu.
3893	Method to get the type image.
3894	Initializes the command.
3895	Requery the label.
3896	Remove all pages from a session.
3897	On the component tag.
3898	The onClick method is called when the user clicks on the tree menu.
3899	Gets the EFapsSession for the given request.
3900	On begin request.
3901	Close the context of the current request.
3902	Registers a new user session.
3903	Register an activity in the given EFapsSession.
3904	Add a Message Connection to the cache.
3905	Invalidate a session.
3906	Remove a user session from the cache.
3907	Get the users.
3908	Get connections for a user.
3909	Get the connection for a given session id.
3910	Gets the cache used for indexing.
3911	Initializes the UI item.
3912	Returns the command that is currently being called.
3913	Method to execute the events.
3914	Add behaviors.
3915	Returns the weight of the width of the field.
3916	Evaluate the label.
3917	Checks if the field is a table field.
3918	Returns a field configuration for a given field name.
3919	Returns true if the snipplet is visible.
3920	Respond to the request.
3921	Initialize the button.
3922	Method to get the choices for the given input.
3923	Gets the date time formatter.
3924	Get the file.
3925	Method to get the menu.
3926	Get the Submenus for a given instance.
3927	Initialise the table.
3928	Gets the list of instances that must be applied against the database.
3929	Add a list of filters to the table.
3930	Add a filter to the table.
3931	Method to get the filter for a given UITableHeader.
3932	Gets the filter pick list.
3933	Get the status of a type.
3934	Stores the filters in the session.
3935	Remove the filter from this table header.
3936	Method to get the cell.
3937	Gets the instances.
3938	Gets the filter for a field.
3939	Returns the command that this menu item is associated with.
3940	Get the title of the command.
3941	Checks if the given filter is a date filter.
3942	Gets the row with the given id.
3943	Method to execute the print method.
3944	Gets the query.
3945	Gets the excluded dimensions.
3946	Check if the dim filter has been applied.
3947	Fill the dimension provider.
3948	Build the parameters for the hierarchy.
3949	Checks if the root element of the given file matches the expected root element.
3950	Checks if the cache is still valid and if so updates the last access timestamp.
3951	Refresh the TTL of the given cache entry.
3952	Tries to clone the given object.
3953	Initializes the cache.
3954	Sets the cache properties.
3955	Get the cache property.
3956	Calculates the cache key based on the key mode.
3957	Get the cache properties for the given name.
3958	Set an entry in the cache.
3959	Delete a key from the cache.
3960	Delete a key from the local cache.
3961	Delete all entries from the cache.
3962	Delete all entries from the local cache.
3963	Returns the label for the given element.
3964	Sort the elements by tab index.
3965	Generate a generic form.
3966	Generates the HTML for the given element.
3967	Returns the complete rendered input for the given element.
3968	Returns the HTML for the named element.
3969	Register an application context for the embedded web context.
3970	Build a SelectInput with the given name and possible names.
3971	Build all attributes for the tab index tag.
3972	Build the max length attribute.
3973	Gets the accepted content types.
3974	Checks if the callback is the same session.
3975	Creates a converter that converts a list of objects to a list of objects.
3976	Initialize all the loaders that have started.
3977	Returns a profile object that represents the specified person.
3978	Sets the listener which will be notified when the tag is removed.
3979	Get the document builder.
3980	Get DOM source from XML file.
3981	Get the schema for the given XSD file.
3982	Parse the given XML file.
3983	Validate the XML against the given XSD.
3984	Validate the schema.
3985	Adds a child tag to this tag.
3986	Remove an attribute.
3987	Returns the velocity template for this tag.
3988	Returns the XML representation of this tag.
3989	Add a service to the list if it is not already present.
3990	Get the service by device.
3991	Start the proximity service.
3992	Get all triggers for the given app identifier.
3993	Delete all triggers of the given application.
3994	Delete a trigger from the database.
3995	Get a trigger by id and app package name.
3996	Validate access to the given access token.
3997	Converts XML string to object with XStream.
3998	Converts XML string to object with XStream.
3999	Convert xml string to json string.
4000	Invoke a method on the service.
4001	Check if the current thread is the same as the main thread.
4002	Log a method call.
4003	Load object from input stream.
4004	Creates a new XML tag with the given name value and attributes.
4005	Checks if the given query matches the current query.
4006	Dispatch an invocation to a service.
4007	Unregister a service.
4008	Generates a query id.
4009	Called when an instance is lost.
4010	Stop a search.
4011	Stop all searches for the given application.
4012	Connects to the application.
4013	Creates a standard display view for a field.
4014	Creates a spinner which allows to select a value from a list ofChoicheProfileFields
4015	Creates a view which allows to edit a date.
4016	Creates a tag view for the given field.
4017	Creates a standard edit view for the given field.
4018	Sends a notification to the specified unique identifier.
4019	Converts the object to XML.
4020	Set the data in the RemoteViews programmatically
4021	Returns the friendly name of the given field.
4022	Kills the scheduler.
4023	Initializes the SPF context.
4024	Broadcast an event to all registered listeners.
4025	Creates a ProfileFragment with the view mode of SELF.
4026	Called when the user has received the profile data.
4027	Starts a crop operation.
4028	Handle cropping of the image.
4029	Convert an object to a JSON string.
4030	Adds a tag to the bubble.
4031	Sets the tags to be displayed.
4032	Save a trigger to the trigger table.
4033	Delete a trigger.
4034	Start the notification handler thread.
4035	Start the registration.
4036	Adds an attribute to the element.
4037	Invoke the service method.
4038	Sets the selection of the list items.
4039	Sets the selection of the list items.
4040	Returns a list of strings that are currently selected.
4041	Returns a list of the selected indicies.
4042	Refresh the view.
4043	Shutdown the proxy manager.
4044	Inserts a new line character.
4045	Write the string to the buffer.
4046	Converts an object to a JSON string ignoring any errors.
4047	Loads the access token for the given component.
4048	Binds to a service.
4049	Disconnects from the service.
4050	Handle the error.
4051	Refreshes the triggers map.
4052	Add a persona to the database.
4053	Remove a persona from the database.
4054	Register a service with the application.
4055	Get the AppAuth object for the given appId.
4056	Register an application.
4057	Unregisters the application with the given identifier.
4058	Get the persona of the given app identifier.
4059	Called when a message is received from the client.
4060	Add a client to the list if it is not already present.
4061	Connect to the server.
4062	Returns the value of the specified field.
4063	Returns true if any of the field s status values are modified.
4064	Stop a search by tag.
4065	Stop all the searches.
4066	Lookup a person by its identifier.
4067	Get a list of profile fields for a persona.
4068	Get the base info for the specified persona.
4069	Get the list of nodes.
4070	Executes the given callback on the main thread.
4071	Get the PersonAuth object for the received kn.
4072	Creates a new entry for a sent request.
4073	Creates a new entry for a received request.
4074	Checks if an entry exists for the given user.
4075	Confirm a request.
4076	Adds a closing tag to the XML document.
4077	Adds an empty tag to the XML document.
4078	Adds an opening tag with the given attributes.
4079	Delete a file and all its sub - directories.
4080	Creates a temporary directory.
4081	Returns the proxied object.
4082	Loads a class using the specified class loader.
4083	Computes the signature of a method.
4084	Creates a well known instance of the OneWayMessageDigestCodec.
4085	Resets the internal state of the URL.
4086	Create a new URLBuilder with the given path.
4087	Adds a query parameter to the given URL.
4088	Returns the first parameter value for the given name.
4089	Adds a query parameter to the query string.
4090	Adds a map of parameters to the request.
4091	Adds a parameter with the specified name and value indexed by the specified index.
4092	Adds a query string to the query string.
4093	Validate the query.
4094	Adds a query to the query string.
4095	Rebuilds the query instance.
4096	Replaces the parameter with the given value.
4097	Invokes the method on the given object.
4098	Create a shutdown proxy for the given object.
4099	Converts the given object to a boolean.
4100	Get the stack trace of the given exception.
4101	Removes the trailing slash from the given path.
4102	Wait for the call to be shut down.
4103	Adds an empty tag with the given attributes.
4104	Adds an attribute to the XML document.
4105	Adds the attributes from the given map.
4106	Extract the resource info from the given URL.
4107	Chroot the given resource.
4108	List resources matching the given filter.
4109	Chroot the resource to the given relative path.
4110	Creates a resource from a file.
4111	Starts the process.
4112	Creates a new external command.
4113	Start a command in a background process.
4114	Executes a command with a timeout.
4115	Returns the time elapsed since the last tick.
4116	Returns the elapsed time in milliseconds.
4117	Adds a tag with the specified name and value.
4118	Adds a tag with the given name and value.
4119	Indent a block of text.
4120	Converts a timeout to an end time.
4121	Adds a new entry to the directory.
4122	Creates a new directory.
4123	Encode a string using a OneWayCodec.
4124	Decodes a string using the given codec.
4125	Create a leaf resource from a resource.
4126	Reverses the order of the elements in the array.
4127	Converts an array of enum values to an enum set.
4128	Load properties from a file.
4129	Load properties from a Reader.
4130	Returns the time interval as a string.
4131	Compares this timespan with another timespan.
4132	Truncate the size to the given unit.
4133	Add two MemorySize objects.
4134	Compares this MemorySize with another MemorySize.
4135	Creates a new MemorySize object from the given array of MemorySize objects.
4136	Executes the given callable in a new thread.
4137	Add a marker to the map.
4138	Remove a marker from the cache.
4139	Creates a bitmap descriptor from a view.
4140	Returns a function that checks if the given file is related to the given file.
4141	Emits events from the watch service.
4142	Get the selector drawable.
4143	Initializes the view adapter with the given viewPager.
4144	Adds the views to the view pager.
4145	Returns the message for the given exception.
4146	Set the sequential id for the current time.
4147	Returns the integer value of the given character.
4148	Map two characters into a byte.
4149	Returns the timestamp of the message.
4150	Returns the MAC fragment of the message.
4151	Sets a property.
4152	Set Facebook user credentials.
4153	Set the Socialize consumer key and secret.
4154	Merges the properties from the other properties into this properties.
4155	Share an entity.
4156	Handle a non - network share.
4157	Adds a comment to an entity.
4158	Delete a comment.
4159	Adds a comment to an entity.
4160	Gets a comment.
4161	Get comments by ids
4162	Get comments for a user
4163	Get comments for a specific entity
4164	Get comments by application
4165	Shows the comment view of the given entity.
4166	Parse a JSON string into a JSONObject.
4167	Open a URL with the given method and parameters.
4168	Parses a JSON response from the Facebook API.
4169	Shows an alert with the given title and text.
4170	Log a message at the DEBUG level.
4171	Returns runtime type if more specific.
4172	Sets the entity to be used in the query.
4173	Build the URL to the profile image.
4174	Called when the profile picture is changed.
4175	Generates a request string.
4176	Normalizes the request parameters.
4177	Authorizes the user to view the activity.
4178	Authorize the user with the given permissions.
4179	Validates an intent against the app signature.
4180	Logout from the server.
4181	Display a dialog to the user.
4182	Serialize a Date object into a JSON string.
4183	Link the current Activity to the given listener.
4184	Link the given permissions to the given context.
4185	Link the user to the Socialize app.
4186	Post an entity to the Facebook share proxy.
4187	Extend the access token.
4188	Get the current permissions for the given token.
4189	Get the hash keys of all signatures
4190	Save an entity to the database.
4191	Get an entity from the Activity.
4192	Get an entity from the activity.
4193	Get a range of entities from the activity.
4194	Get the entities with the given keys.
4195	Called when the user wants to create a context menu.
4196	Subscribe to an entity.
4197	Check if an entity is subscribed to a given type
4198	Check if the user has registered with the notification system.
4199	Returns the next token in the JSON stream.
4200	Advances to the next null token.
4201	Reads an escape character from the input.
4202	Shows a share dialog with the given entity.
4203	Shows a share dialog with the given entity.
4204	Share the entity via email.
4205	Share the entity via GooglePlus.
4206	Share the entity via the other entity.
4207	Share the entity via SMS.
4208	Share the entity via the specified social networks.
4209	Get a share
4210	Get the share list of the specified ids.
4211	Get the list of shares for a user.
4212	Get the shares for the specified entity.
4213	Get the shares for the application.
4214	Like the given entity.
4215	Like an entity.
4216	Unlike the entity with the given key.
4217	Get a like entity.
4218	Get a like object.
4219	Gets the liked state of the entity.
4220	Get likes for a user.
4221	Get likes for a specific entity.
4222	Get the Facebook application.
4223	Collects the header parameters from the given request.
4224	Collect the body parameters from the request.
4225	Collect the query parameters from the given request.
4226	Creates a new JsonWriter with the given writer.
4227	Creates a default implementation constructor for the given raw type.
4228	Replace all the lines in the source string with new lines.
4229	Reloads the ActionBar
4230	Gets the simple location of the given address.
4231	Get the user object from Graph API.
4232	Get the actions for the given application.
4233	Get the actions for a user.
4234	Get actions by entity
4235	Get the actions for the given user and entity.
4236	Closes the current token.
4237	Sets the name of the property.
4238	Parse the given JSON string and return the corresponding JsonElement.
4239	Parse the given JSON string into a JsonElement.
4240	Link the user to the Socialize app.
4241	Set the credentials for the current request.
4242	Tweet an entity using the twitter twitter proxy.
4243	Get a resource from the twitter provider.
4244	Tweet a tweet.
4245	Tweet a photo using the Twitter Twitter API.
4246	Returns a bitmap scaled to the specified dimensions.
4247	Asynchronously put an object to an endpoint with a PUT request.
4248	Sets the text size of the text view.
4249	Called when the user changes the image.
4250	Save a user asynchronously.
4251	Get a user.
4252	Save user settings.
4253	Sets the auto post preferences to true if they are enabled.
4254	Authenticate using the default permissions.
4255	Authenticate for read
4256	Get a static field.
4257	Get the name of the field that has a static value.
4258	Handle incoming message.
4259	Broadcast an intent to the user.
4260	Encode a byte array into a byte array of the specified length using the specified alphabet.
4261	Decodes a base64 encoded value.
4262	View adds a view to the given entity.
4263	Called when the user changes the profile.
4264	Decode the form parameters.
4265	Convert a collection of Map. Entry to a map.
4266	Converts a header name and value into an OAuth header element.
4267	Put the object in the cache.
4268	Put an object in the cache.
4269	Put an object into the cache.
4270	Get the raw object.
4271	Get an object from the cache. If the object is not in the cache it will be
4272	Checks if a key exists in the cache.
4273	Extend the TTL of the object.
4274	Loads an image from the specified encoded image data.
4275	Loads an image from a URL.
4276	Parse a tag string into a map of tags.
4277	Format the tags.
4278	Fix encoded tags in the name after the prefix.
4279	Creates a builder with the given name.
4280	Returns a string representation of this put.
4281	Returns the domain as a human readable string.
4282	Percent decode the input string.
4283	Returns the value of the query parameter with the given name.
4284	Returns a list of query parameters that match the given query name.
4285	Returns the relative path of this URL to the given URL.
4286	Build a hierarchical URL from the scheme and host.
4287	Build opaque URL.
4288	Returns a human - readable representation of this URL.
4289	Query for stream with ordinal parameters
4290	Query a stream with named parameters.
4291	Returns the fields of the given class.
4292	Fetch next row.
4293	Get the value at the given index as a LocalDateTime.
4294	Get the value at the given index as a LocalDate.
4295	Get the value at the given index as a LocalTime.
4296	Get the value at the given index as a ZonedDateTime.
4297	Get the timestamp at the given index as an offset date time.
4298	Get the value at the given index as an OffsetTime.
4299	Gets the value of a column in the result set.
4300	Crop the image to the specified dimensions.
4301	Crop to the center of the image.
4302	Crop the image to the specified size and color.
4303	Resize the image to the given width.
4304	Resize the image to the specified dimensions.
4305	Scale crop.
4306	Scale crop to the center of the image.
4307	Blur the image.
4308	Path to the sharp file.
4309	Create a path to preview a image.
4310	Get the project data for the current user.
4311	Get a file from the server
4312	Deletes a file from the server
4313	Save a file to the file storage service.
4314	Execute a request.
4315	Check the response status.
4316	Build a trusted upload URI from a source URL.
4317	Injects the target object into the object graph.
4318	Creates a builder for the given theme resource.
4319	Finds a class by name.
4320	Loads a class by name.
4321	Search for a character in the buffer.
4322	Adds a word to the trie.
4323	Append a character to the buffer.
4324	Get and set the value.
4325	Checks if the given class is assignable to the given type.
4326	Copy parse info to the zip file.
4327	Hash the passed instruction group.
4328	Matches a character case insensitive.
4329	Matches a Unicode character.
4330	Matches a Unicode range.
4331	Matches any of the given characters.
4332	Matches any of the given characters.
4333	Creates a rule that matches a string.
4334	Match a string.
4335	Matches the given string as case sensitive.
4336	Matches a rule if it is present.
4337	Adds a rule to the chain if the rule is not met.
4338	Creates a repeat matcher that matches the given rules.
4339	Returns a rule that is the zero or more times the given rule and the given rules.
4340	Creates a rule from a string literal.
4341	Converts an array of objects to a list of rules.
4342	Converts an object to a rule.
4343	Pushes a value onto the value stack.
4344	Pop and cast the last element of the list to the passed type.
4345	Pop an element from the stack as a new instance of the specified class.
4346	Peek the next element of the queue as an object of the given type.
4347	Poke the value down in the value stack.
4348	Matches the given context.
4349	Checks if this range overlaps with the given range.
4350	Checks if this range touches the given range.
4351	Merges this range with the given one.
4352	Generates the byte code for the given parser class.
4353	Add a word to the trie.
4354	Unwrap a Matcher.
4355	Register a listener.
4356	Post an object to the bus.
4357	Gets the sub context.
4358	Returns a rule that matches at least the given number of cycles.
4359	Returns a rule that matches at most nrCycles cycles.
4360	Creates a rule that matches when the given number of times occurs.
4361	Creates a rule that matches when the given number of times is reached.
4362	Returns a rule that matches the given range.
4363	Returns all characters but the given characters.
4364	Gets the value of the deploymentDescriptor property.
4365	Gets the value of the authenticationConfiguration property.
4366	Get the list of BW services.
4367	Add monitoring events to all the BW services.
4368	Gets the value of the globalVariable property.
4369	Gets the value of the baseService property.
4370	Gets the value of the event property.
4371	Checks if the project is available.
4372	Read the dependencies from a file.
4373	Launches a TIBCO binary with the given arguments.
4374	Gets the value of the action property.
4375	Clean the directory.
4376	Gets the value of the final property.
4377	Gets the value of the rulebase property.
4378	Add an alias to the list of aliases.
4379	Process a single file.
4380	Gets the value of the rest property.
4381	Gets the value of the nvPair property.
4382	Adds a dependency to a POM.
4383	Removes a dependency from the given POM file.
4384	Checks if a dependency exists in the given list of dependencies.
4385	Checks if a given dependency exists in the given pom.
4386	Adds a project to a profile as a module.
4387	Checks if a module exists in the model or profile
4388	Returns the file for the given artifact name and classifier.
4389	Execute the goal.
4390	Extract content from file.
4391	Update repo instances.
4392	Gets the value of the any property.
4393	Creates a new instance of the given class with the given parameters.
4394	Creates a proxy class for the given interfaces.
4395	Creates a constructor for the proxy class.
4396	Start a timer for the given query.
4397	Start a timer for a callable statement.
4398	Start the result set life timer.
4399	Mark the result set row meter for the given query.
4400	Creates a new proxy instance.
4401	Wraps a connection with a proxy.
4402	Wraps a statement in a proxy.
4403	Wraps a prepared statement in a proxy.
4404	Wraps a callable statement in a proxy.
4405	Returns the type of the result set.
4406	Build the command line arguments.
4407	Build the face arguments.
4408	Executes the command.
4409	Executes the task.
4410	Sets the language.
4411	Gets the message for the given key.
4412	Say or think.
4413	Format the HTML output.
4414	Get CowFace by mode.
4415	Get CowFace from command line options.
4416	Extracts the template from the given COW string.
4417	Load a COW file from the given path or from the default COW file if no
4418	Reads the contents of the given input stream into a string.
4419	Get a COW input stream from a path.
4420	Get a COW input stream from the COW path.
4421	Checks if the given file is a Cowfile.
4422	Converts a Cowfile to an InputStream.
4423	Get the COW file with the given name in the given folder.
4424	Returns the list of COW files in the given folder.
4425	Get the CowFace object for the given mode.
4426	Sets the eyes.
4427	Sets the tongue.
4428	Checks if the mode is known.
4429	Parse command line arguments.
4430	Prints the command line help.
4431	Format a bubble message.
4432	Wrap the message with the wordwrap option.
4433	Format the message.
4434	Sets the wordwrap.
4435	Get the longest line length in the given message.
4436	Log a message.
4437	Log a message to the loggly API.
4438	Log a list of messages to the loggly API.
4439	Join the given messages into a single line.
4440	This is the main method of the logging application.
4441	Get a map of all the schemas in the catalog.
4442	Get a schema by name.
4443	Initialize the git repository.
4444	Resync the state of the watch.
4445	Returns a map of all tables in this database.
4446	Get a table by name.
4447	Writes the contents of the buffer to the given writer.
4448	Returns a map of all the catalogs in the database.
4449	Get a catalog by name.
4450	Get a buffer of the requested length.
4451	Writes the encoder to the log.
4452	Writes the given writer to the log.
4453	Returns a LexicalPosition with zero position and a file.
4454	Append the segment value to the given buffer.
4455	Writes a segment to the given writer.
4456	Returns the character at the specified index in the given value.
4457	Get the SQL data types.
4458	Returns a map of column names to their respective column objects.
4459	Returns the column with the given name.
4460	Returns a list of columns in this table.
4461	Returns the column at the given ordinal position.
4462	Returns a set of tables that have been imported.
4463	Returns a set of all the tables that have been exported by this table.
4464	Adds a segment to the buffer.
4465	Writes a single character to the log stream.
4466	Writes a string to the log stream.
4467	Adds all the given values to the given target.
4468	Moves the camera to the last location of the map.
4469	Animate to include a position in the camera.
4470	Creates an animation which animates a circle to a rectangular view.
4471	Create a circle animation from a rectangular view.
4472	Get the arc motion transition.
4473	Returns a bold style span for the specified index.
4474	Scale a view in screen.
4475	Scale out the view by 0. 0f and then exit screen.
4476	Scale the view to show the next animation.
4477	Get the count of the given URI.
4478	Concatenates the address lines into a single string.
4479	Connects to the Google API.
4480	Creates a transaction to perform a specific transition.
4481	Returns the foreground color of the gauge.
4482	Set the OnClickListener for all views.
4483	Returns the name of the given log level.
4484	Makes a scale up animation for the given view.
4485	Show the soft input.
4486	Hide the soft input from the given view.
4487	Checks if the cursor has the given position.
4488	Count the number of records in the cursor.
4489	Read the first int from the cursor.
4490	Read the first long from the cursor.
4491	Read the first string from the cursor.
4492	Read all int values from the cursor.
4493	Read all long values from the cursor.
4494	Read all the strings from the cursor.
4495	Load a placeholder image into a view.
4496	Get the orientation of the given RecyclerView
4497	Returns the number of panels in the given RecyclerView.
4498	Adds a rule to the view s layout.
4499	Returns true if the current position was read.
4500	Get the main thread or the my main thread if it s running on the current thread.
4501	Returns a list of all the elements in the sparse array.
4502	Returns a list of all the elements in the given LongSparseArray.
4503	Check if the adapter is different from the current one.
4504	check if the current drawable is different from the current one
4505	Update the matrix of the view to match the position and offset.
4506	Update or delete records.
4507	Executes a query on the given URI.
4508	Returns the number of bytes required to store the given image.
4509	Returns a mutable copy of the given bitmap.
4510	Checks if an intent is registered on the application.
4511	Create an intent that sends a string to one or more recipients.
4512	Set the default content view.
4513	Find a fragment by its pane.
4514	Creates a new Bundle with two values.
4515	Creates an intent with the given action and data.
4516	Create an intent to update an existing content.
4517	Create an intent to perform an HTTP DELETE request with the given data.
4518	Create an intent to delete an item from the list.
4519	Returns the size of the action bar.
4520	Returns the action bar background drawable.
4521	Checks if the context is connected to the network.
4522	This method is used to cleanup the efficiency of the diff.
4523	Create a list of patches for text1 and text2.
4524	Applies the function to the value and returns the result.
4525	Converts a SOAP message to a string.
4526	Get or create a tracee profile properties file.
4527	Checks if the given method is valid.
4528	Checks if the given method is a getter method.
4529	Get a property value from the profile properties.
4530	Check if the given class has no args constructor.
4531	Get annotation from type.
4532	Checks if a method has a non - void return type.
4533	Apply the tracee context to the given string builder.
4534	Find all the wrapper classes.
4535	Get all implicit context data providers.
4536	Get all available context providers
4537	Initialize the connector configurations.
4538	Send error report to all connectors.
4539	Returns a set of connector configuration names.
4540	Get the system properties for a connector configuration name.
4541	Creates a connector instance based on the configuration name.
4542	Checks if a connector is configured for the given class.
4543	Checks if the given method has a getter prefix.
4544	Checks if the given method is public non static.
4545	Checks if the given method has compatible return types.
4546	Returns the field corresponding to the given method.
4547	Checks if the given method name is a getter method.
4548	Capitalizes the first character of a string.
4549	Decapitalizes the first character of a string.
4550	Strip the getter prefix from the input string.
4551	Send error report to connectors
4552	If the given instance is a wrapper type and the given context is implicit create a wrapper instance
4553	Creates an instance of the given type.
4554	Get the current profile.
4555	Open a properties file.
4556	Fill the manual context override map.
4557	Create a builder for the context string representation log.
4558	Checks if the given method throws contains the given exception.
4559	Checks if a class is defined in the thrown exception.
4560	Get the throw types from the method signature.
4561	Checks if watchdog aspect processing is activated by annotation and if so checks if the watchdog
4562	Checks if group size is set and if it is equal to the given expected size. If
4563	Checks if actual contains no duplicates.
4564	Returns the view to be used to show the item at the given index.
4565	Reserves a term name.
4566	Registers a term with this term set.
4567	Initializes the vocabulary.
4568	Returns a data set with all the data that is related to this object.
4569	Resolve relative to base.
4570	Merges the given path with the given relative path.
4571	Removes dot segments from a path.
4572	Creates a new name with the given name and names.
4573	Create a name for the given class and name.
4574	Creates a wildcard media type with the given type.
4575	Creates a wildcard media type with the given type and suffix.
4576	Creates a new media type from the given type and subtype.
4577	Converts a MediaType to a HTTP header.
4578	This method is called when the resolution process is started.
4579	Compares this term to another.
4580	Returns the names of all pending attachments for the given attachment id.
4581	Adds a new name to an attachment.
4582	Returns the next name for the given attachment.
4583	Creates a new name provider for the given resource.
4584	Parse the suffix of a media type.
4585	Checks that the given string is a valid quoted string.
4586	Returns the next code point in the CharSequence.
4587	Update the resource.
4588	Returns the URI represented by this instance.
4589	Closes the input stream.
4590	Checks if a character is a name start character.
4591	Checks if a character is a valid name character.
4592	Checks that the given token is valid.
4593	Sets the media type to be transformed.
4594	Registers a class as an adapter.
4595	Creates a new type adapter for the given source and target type.
4596	Adapt an object to a new instance of the given result class.
4597	Returns a new namespaces with the specified prefix and namespace URI.
4598	Returns a new namespaces with the given prefixes removed.
4599	Escapes a string for use in an XML document.
4600	Query the data set for a resource.
4601	Add a name provider to the container.
4602	Returns the name provider for the given container name.
4603	Unwraps the application engine implementation into a new instance of the given class.
4604	Checks if the path is out of scope.
4605	Creates a new path with the specified directory.
4606	Creates a new path with the specified file.
4607	Assemble relative path segments.
4608	Returns the type parameter of the given class.
4609	Creates a factory for primitive values of the given type.
4610	Creates a list of variants for the given media types.
4611	Resolve the individual.
4612	Matches a child view by equal children count as the specified value.
4613	Creates a matcher that matches views that have more children than the specified value.
4614	Matches views that have more children than or equal to the given value.
4615	Creates a matcher that matches children that are less than the specified value.
4616	Creates a matcher that matches views whose children are less than or equal to the given value.
4617	Get all measurements for a given year and state.
4618	Get a single measure.
4619	Get the rating for a candidate.
4620	Get a single rating.
4621	Get election by year.
4622	Get election by zip.
4623	Get the candidate votes for a given stage.
4624	Get the office s address by its office id.
4625	Get all offices for a given office type.
4626	Get all offices for a given level.
4627	Get all offices for a given office level.
4628	Get all offices for a given branch and level.
4629	Get counties for a given state.
4630	Get the cities for a given state.
4631	Get the list of official local candidates.
4632	Query the VoteSmart API.
4633	Get a list of all the CandidateList that are in the given state.
4634	Get CandidateList for an office type with a specific state.
4635	Get a list of Candidates for a given zip5.
4636	Get the AddlBio for a candidate.
4637	Get the Bio for a candidate.
4638	Get a list of candidates for a given last name.
4639	Get a list of candidate list for an election.
4640	Get a list of candidates for a given district.
4641	Get committees by type state.
4642	Get a specific committee.
4643	Get the members of a committee.
4644	Get the leadership positions for a given state.
4645	Get the officials for a given leadership.
4646	Sleeps for a given amount of time.
4647	Start the timer.
4648	Wait for the task to finish.
4649	Close the stream.
4650	Merge the contents of a stream into a map using a custom merge function.
4651	Splits the given map into smaller maps.
4652	Collect a list of maps to a list of maps with a limit.
4653	Sorts the given map by the given comparator.
4654	Returns the first value in the map.
4655	Check that the test is null.
4656	Checks that the test is not null
4657	Checks that the string is not null or trimmed.
4658	Checks that the given set is null or empty.
4659	Checks that the array is null or empty.
4660	Get the contents of a resource as a string.
4661	Get the words from a resource file.
4662	Get last modified time of resource.
4663	Read the contents of the InputStream as a String.
4664	Get the bytes from the input stream.
4665	Reads a file and returns it as a String.
4666	Get the absolute path of a resource.
4667	Generate a random string of the given length.
4668	Generate a long with the given length.
4669	Joins two arrays into a single array.
4670	Splits the given set into a list of sets with a maximum size.
4671	Gets the month start instant.
4672	Gets the month end from a date time.
4673	Trims the given text and returns null if the text is null or empty.
4674	Capitalizes the first letter of a string.
4675	Joins the given array of objects with the given separator.
4676	Joins the given items into a string using the given separator.
4677	Get the words from the given text.
4678	Trim text down to a certain size.
4679	Trim text down to the specified size with the specified append.
4680	Returns a list of all characters in the given text.
4681	Returns the relevance of the first occurrence of a search string in the given value.
4682	Removes quotes from a string.
4683	Returns the time in the given timezone.
4684	Returns a list of the states of the given tag.
4685	Checks if the severity is a violation.
4686	Shows the severity icon for the given level.
4687	Displays an icon of the given severity.
4688	Returns a list of all the tags in the project.
4689	Sets the next CSNode and cleans up the chain.
4690	Sets the previous CSNode and cleans up the tree.
4691	Find a socket node.
4692	Find all nodes that have the given host.
4693	Get all nodes that are not dead.
4694	Add a node to the list of nodes to be added to the cluster.
4695	Remove a node from the list of nodes to be removed.
4696	Mark the given node as alive.
4697	Mark the given node as dead.
4698	Send a node event to all registered handlers.
4699	Get the checkstyle version.
4700	Configure the resource locator.
4701	Build a new object with the supplied attributes.
4702	Create a map of property values from the attributes.
4703	Returns the current sequence number for the given name.
4704	Compares two nodes by their ID.
4705	Get and clear the events list.
4706	Find the packages that are in the JavaDoc run.
4707	Set a property on the given object.
4708	Sets the value of a field on the given object.
4709	Get all methods annotated with the given annotation type.
4710	Invoke a method on the given object.
4711	Main method that launches the cache server.
4712	Get the value of the attribute from the configuration or the parent configuration.
4713	Output the summary of the rules.
4714	Checks if the given audit event matches the given rule with the given message and severity.
4715	Creates a key to track the time the message was received.
4716	Initializes the GuestNode.
4717	Waits for other clusters to start.
4718	Waits for other clusters to be sent.
4719	Waits for all the clusters to be connected.
4720	Waits for the guest node to finish.
4721	Closes the cache.
4722	Prints the state of the cluster manager.
4723	Main method for the GuestNode.
4724	Returns a list of all properties in this class sorted by natural order.
4725	Returns a hash code for the given version of this class.
4726	Returns the total number of pages.
4727	Get the values for a page of entries.
4728	Prepares the result data.
4729	Store the results in the cache.
4730	Create a new instance of the class with the given attributes.
4731	Compares two TagToCategories.
4732	Migrate broken locales.
4733	Recalculate min hash for a topic.
4734	Get the min hashes for the given XML.
4735	Clean the XML string for min hash.
4736	Validate and fix relationships to this topic.
4737	Update content hash.
4738	Validate the tags that are applied to this topic and fix any conflicting tags.
4739	Sort the given ClassDocs by the package name.
4740	Execute the rule.
4741	Splice a comma separated list of strings into a list of strings.
4742	Splice a string into a list of Pattern objects.
4743	Checks if the provided list contains the prefix.
4744	Get the factory class for the given factory class.
4745	Sends a message to the configured email destination.
4746	Sends a message to a recipient.
4747	Executes the zero function on the server.
4748	Executes the bucket oriented query function.
4749	Handles an exception thrown by the bucket oriented query.
4750	Formats the results.
4751	Adds an error message to the list of errors that occurred during the validation process.
4752	Get the error message.
4753	Check if a socket is alive.
4754	Executes the given thread with the given timeout.
4755	Checks if the given list of resources exists.
4756	Merge deprecated information.
4757	Add limit to query string.
4758	Get the first locator from the locators string.
4759	Returns the size of the given region.
4760	Returns true if the cache is a GemFire client.
4761	Removes all keys from the given set.
4762	Retry the given operation with exponential backoff.
4763	Generates a buffered image from the given input.
4764	Paint the icon.
4765	Get the reader.
4766	Waits for a line to enter.
4767	Executes the check - replication tool.
4768	Parses the command - line arguments and creates the options.
4769	Prints the help for the command.
4770	Construct the options for the Gnu command line tool.
4771	Aggregate the data from the single cluster.
4772	Checks that the given property is not null.
4773	Parses the command line arguments and prints the options.
4774	Prints the help for the command line tool.
4775	Construct the options for the Gnu tool.
4776	Finds the index of the command in the given arguments.
4777	Extract the launcher arguments from the given arguments.
4778	Extract the command arguments from the given arguments array.
4779	Main method for the launcher.
4780	Print a message to the console if debug is enabled.
4781	Starts the timer.
4782	Creates a set of regions from the given names.
4783	Process the ExpirationController.
4784	Sets the indentation token.
4785	Get the package statement from the given source file.
4786	Start the event sequence.
4787	Extract the set of ports from a system member.
4788	Find or create a pool.
4789	Get the name of the event.
4790	Get the category of the given event.
4791	Enter a new frame.
4792	Exit the method frame.
4793	Get the list of classes to enter to.
4794	Sets the package extractors.
4795	Add all the packages in the given file or directory to the given map.
4796	Update image data.
4797	Sets the original file name.
4798	Extract the limit from the query string.
4799	Format the query results.
4800	Check if the object is allowed in real time.
4801	Run a process with confirmation.
4802	Run the given class with the given arguments and wait for the process to start up after a
4803	Run the given class with the given arguments and wait for the given process startup time.
4804	Stop by sending a new line into a process.
4805	Start a process with the given arguments.
4806	Redirect streams to standard output if necessary.
4807	Waits for a process to finish with startup complete.
4808	Generates a Velocity file.
4809	Starts the actual replication process.
4810	Checks if the given class is a subtype of the given parameterized type.
4811	Checks if the given method is compatible with the given interface method.
4812	Returns the method that implements the given interface.
4813	Get the type argument from a generic type.
4814	Resolves a type variable.
4815	Get the actual type arguments of an interface.
4816	Populates the pool with the objects from the pool.
4817	Adds the description of the return option to the given Return. ReturnBuilder.
4818	Return an object to the pool.
4819	Get the destination for the given name.
4820	Get a message consumer for the given destination.
4821	Get a producer for the given destination name.
4822	Get the session.
4823	Get the connection.
4824	Sends a text message to a destination.
4825	Register a listener for text messages from a destination.
4826	Receive a text message from a destination with a timeout.
4827	Stops the consumer.
4828	Handle the load from user data service.
4829	Returns the configuration for the object pool.
4830	Sets the id of the model.
4831	Sets the model file.
4832	Add or update a WekaModelConfig.
4833	Remove a model from the Scorer.
4834	EventManager service queue.
4835	Clustered event manager.
4836	Encode non - codes in a string.
4837	URL - decodes the given map.
4838	Creates a service group for the given resource classes.
4839	Close the server.
4840	Forward an event to the event connector.
4841	Get the annotations for the given method.
4842	Finds an annotation.
4843	Creates a constructor for the given resource class.
4844	Creates a root resource from the given class annotations.
4845	Setup the bagging classifiers.
4846	Get the object from the serialized object.
4847	Returns the serialized object.
4848	Writes the serialized object to the given file.
4849	Get the leaf score from the distribution.
4850	Returns the provider URL.
4851	Returns the context.
4852	Returns a connection supplier that can be used to create a connection.
4853	Build the JMS service.
4854	Get the type for a given SimpleType
4855	Get the type for a JavaType.
4856	Introspects the given serializer.
4857	Introspect the serializer and add the properties to the custom type
4858	Introspect the serializer and add the values to the custom type.
4859	Introspect the serializer
4860	frame1. Get the customer account information.
4861	Frame 3.
4862	Frame 4.
4863	Randomly selects the next element in the array.
4864	Returns the next number in the list.
4865	Main method for testing the benchmark.
4866	Make a last name from a number.
4867	Randomly choose a value from a distribution.
4868	Get the relative path of a file relative to a repository.
4869	Add yourself to the working tree.
4870	Commit the file to the working tree.
4871	Move the file to the given destination.
4872	Run git rm
4873	Checks if the file exists.
4874	Checks if two lists are equal.
4875	Checks that the given index is in the range of the given indices.
4876	Get the client instance for the given client type.
4877	Sets the preferred client type.
4878	Add files to a repository.
4879	Add files to a repository.
4880	Add a file to a repository.
4881	Add a file to a repository.
4882	Add a list of files to a repository with a dry run.
4883	Add a list of files to a repository in verbose mode.
4884	Add files to a repository with a force option.
4885	Add a dry run flag to the response.
4886	Compares two versions by release minor version.
4887	Add a list of files to a repository.
4888	Add a list of files to a repository in verbose mode.
4889	Commit the changes to the repository.
4890	Sets the path to the git repository.
4891	Create a list of IParameter from the method s parameter annotations.
4892	Returns the function definition table for the given parameters.
4893	Returns the value of the parameter as an array.
4894	Checks if a file is a registered instance.
4895	Creates a new branch in the repository.
4896	Delete a branch.
4897	Rename a branch.
4898	Returns an iterator over the branches in this repository.
4899	Commits all changes in the specified repository.
4900	Convert from object to another object.
4901	Convert an integer to a Boolean.
4902	Converts a Boolean value to an Integer.
4903	Convert a long to a string.
4904	Get the message for the given error code.
4905	Get the file that needs to be updated.
4906	Adds a file to the list of files to be deleted to commit.
4907	Adds a file to the list of files that have not been updated.
4908	Adds a file to the list of files to be committed.
4909	Adds a file to the list of files that have not been modified.
4910	Add a file to the list of files to be committed.
4911	Adds a file to the list of files that need to be committed.
4912	Adds a file to the list of files that were not tracked.
4913	Create a parameter of the given type.
4914	Get the value of the parameter.
4915	Sets whether or not verbose mode is used.
4916	Set whether to delete the data before the delete.
4917	Set whether to delete the table from the database.
4918	Set whether to rename to the right of the package.
4919	Set whether to rename to M upper case.
4920	Returns the return type of the given method.
4921	Evaluates a function.
4922	Gets the injected value array.
4923	Run a function method.
4924	Convert the return value to a Java type.
4925	Evaluates a script variable.
4926	Branch a repository
4927	Delete a branch from a repository.
4928	Delete a branch from a repository.
4929	Rename a branch.
4930	Commit the changes made to the repository.
4931	Get the current branch.
4932	Checkout the given ref.
4933	Get the status of the repository.
4934	Remove a file from a repository.
4935	Get the file from the list of new files to commit.
4936	Get the file from the deletedFilesToCommit.
4937	Get the file from the list of modified files to commit.
4938	Get the file from the list of deleted files not updated.
4939	Get the file from the list of modified files not updated.
4940	Get the file from the list of untracked files.
4941	Get the file from the list of renamed files.
4942	Get the error at the given index.
4943	Returns a string representation of the errors.
4944	Reset the repository.
4945	Adds a file to the list of added files.
4946	Adds a copied file to the list of copied files.
4947	Adds a file to the list of deleted files.
4948	Sets the files changed attribute.
4949	Sets the number of lines deleted.
4950	Sets the number of lines that were inserted.
4951	Executes a git mv command.
4952	Find the first occurrence of a character in a string starting at a given index.
4953	Get a result set by name.
4954	Get the commit log from the specified repository.
4955	Add a commit to the list of commits.
4956	Adds a file to the commit.
4957	Checkout a file.
4958	Checkout a repository.
4959	Checkout a repository.
4960	Checkout a list of files.
4961	Checkout a list of files.
4962	Checkout a file.
4963	Checks if the given ref is of the given type.
4964	Get the list of all the file system objects currently in this directory.
4965	Get the removed file at the given index.
4966	Checkout a list of files.
4967	Checkout a list of files
4968	Sets the comment for the specified line number.
4969	Set the delete options.
4970	Injects service methods from the given class.
4971	Injects a method into the service data object.
4972	Set the branch name of the branch to be used for the option.
4973	Clone a repository into a directory.
4974	This method is called when the user selects a resource to be filtered.
4975	Get the URLs of the resources that are available in the given classloader.
4976	Sets the reset type and commit name.
4977	Add a method to the list of methods to be called by the class.
4978	This method is called when the user is allowed to filter the data.
4979	Decreases the number of open connections by one and closes the database connection if it is closed
4980	Consume the database.
4981	Query the database.
4982	Executes a raw query.
4983	Build the command line for the git rm command.
4984	Get the added file at the given index.
4985	Get the deleted file at the given index.
4986	Get the modified file at the given index.
4987	Get the status of the file in the working tree.
4988	Get the head element.
4989	Returns the files contained in the element.
4990	Returns the number of files in the list.
4991	Checks if the given string matches the pattern.
4992	Update the list after a hit.
4993	Removes the last entry from the list.
4994	Removes expired entries from the cache.
4995	Update the list after a hit.
4996	Check if the source string starts with the given string.
4997	Gets an access token using the provided request token and verifier.
4998	Signs the request with the given access token.
4999	Returns the authorization url.
5000	Finishes the project.
5001	Finishes the wizard.
5002	Creates the artifact control.
5003	Retrieves the default Java package for the wizard.
5004	Set the visibility of the JUnit.
5005	Create a debug query string
5006	Get the query parameters as a list.
5007	Creates the control for the palette part.
5008	Add a palette item to the list of palette items for a given category.
5009	Get the palette items for the given category.
5010	Configures the table resizing.
5011	Get the currently selected template.
5012	Returns the template string for the currently selected template.
5013	Load the last saved template name and enable the templates.
5014	Save the last saved preferences.
5015	Selects the template in the table viewer.
5016	Update the input field of the pattern viewer.
5017	Creates an in criterion.
5018	Creates a Criterion that tests if the given value is a member of the given path.
5019	Creates a Criterion that tests if the given value is not a member of the given value.
5020	Creates the field editors for this preference.
5021	Returns the last path component of the given path.
5022	Populate the name field of the container.
5023	Validate the page.
5024	Checks if the file name is valid for the current content type.
5025	Add a default extension to the file name.
5026	Get the project from the given path.
5027	Returns the user id from the request.
5028	Creates a new page with the given text editor.
5029	Saves the editor as the first editor part.
5030	Close the editor for the given resource.
5031	Shows the preview of the text editor.
5032	Create a log message for the JPQL query.
5033	Convert an object to a string.
5034	Insert a new timeline item.
5035	Insert a timeline item.
5036	Inserts a timeline item with an attachment.
5037	Validates the response message.
5038	Returns the query string for the given criteria.
5039	Returns the template store.
5040	Returns the context registry for the card.
5041	Get the action with the given ID from the given text editor.
5042	Creates a DBI instance.
5043	Append limit and offset set.
5044	Creates a new named property.
5045	Creates a named property with a literal value.
5046	Creates a new named property.
5047	Creates a string literal.
5048	Create a new literal with the given value.
5049	Create a typed literal.
5050	Creates a new QName object.
5051	Initialize the CORS filter.
5052	Sets the entity id.
5053	Initialize the field.
5054	Updates the entity.
5055	Close all handlers associated with the given port.
5056	Main method for the server.
5057	Validates the options.
5058	Validate the arguments.
5059	Subscribes to a message.
5060	Unsubscribes from the given listener.
5061	Unsubscribe from a channel.
5062	Unsubscribe from the given name with the given header.
5063	Send a message to a destination.
5064	Returns the next message in the queue with the given destination name.
5065	Returns true if the given receipt id is in the list of receipt ids.
5066	Removes a receipt from the list of receipt IDs.
5067	Logs a dead event.
5068	Convert the given source object to the given target class.
5069	Returns the priority of the given number of lines.
5070	Executes the command.
5071	Injects options from the parser into the instance.
5072	Adjusts the arguments for a method.
5073	Migrates the given personality to the given target version.
5074	Tag the request with CORS information.
5075	Handle an actual CORS request.
5076	Handles a preflight CORS request.
5077	Sets the command line options.
5078	Check if the configuration is valid.
5079	Filters the given list of lines by the given regular expression.
5080	Returns a regular expression to match the packages.
5081	Output the dependencies to a file.
5082	Compares this instance provider with another instance provider.
5083	Returns the IOUtils.
5084	Get the ImageUtils singleton.
5085	Returns the price tools.
5086	Get the resource tools.
5087	Get the ZipUtils singleton.
5088	Returns the DigestUtils singleton.
5089	Gets the StringUtils.
5090	Get the resource service.
5091	Get the pricing service.
5092	Get the instance service.
5093	Creates a DigitalObject from the given file.
5094	Create a digital object from a file.
5095	Store list of values in the given properties.
5096	Ensure that the metadata table exists.
5097	Create a source detail object from a string.
5098	Validates the given threshold.
5099	Validate the arguments.
5100	Validate the options of the given instance.
5101	Checks if the given class is on the classpath.
5102	Accept a URI.
5103	Load a file from the given URI.
5104	Run the command line tool.
5105	Read all commands from the file system.
5106	Post - process the request.
5107	Pre process.
5108	Executes a migration plan against the database.
5109	Validate the database.
5110	Get the database history for the specified personalities.
5111	Initialize the database.
5112	Converts a list of lines into a list of SqlStatements.
5113	Find a notable link by notable and calendar name.
5114	Updates the link with the given note.
5115	Parse the command line options.
5116	Transmit a message.
5117	Returns the formatted source code.
5118	Get a linked annotation by its hash code.
5119	Transmit a message.
5120	Get JAXBContext for given context path.
5121	Recursively create a list of BoxNodes.
5122	Creates a tree of the given box list.
5123	Recursively computes the backgrounds of the tree.
5124	Set the mapping file for the given URL.
5125	Get the mapping file for the given URL.
5126	Creates a version range from a version specification.
5127	Concatenate two transforms together.
5128	Transforms a rectangle using the specified transformation.
5129	Returns the minimal bounds of the node s visual bounds.
5130	Recomputes the visual bounds of this node and all its children.
5131	Recompute the bounds of the box.
5132	Computes the bounds of the content.
5133	Returns the top border of the box.
5134	Returns the bottom border of the box.
5135	Returns the left border of the box.
5136	Returns the right border of the box.
5137	Returns the best color for this box.
5138	Returns true if the child is visually enclosed by the first box node.
5139	Take all the children of this node and add them to the end of the list.
5140	Process the given command.
5141	The HSQL database datasource.
5142	DataSource for plain database.
5143	Sets up the configuration.
5144	Query OpenStates API.
5145	Registers a command.
5146	Registers a command with the given name.
5147	Unregisters a command.
5148	Execute a command line.
5149	Start the console.
5150	Search for committees by state and chamber
5151	Get the details of a committee
5152	Connect to the JMX server.
5153	Get a property from the properties.
5154	Invoke the method on the MBean.
5155	Search for districts by state
5156	Search for districts by state and chamber
5157	Lookup a district by its ID
5158	Get the metadata for a given state
5159	Create an object from the service loader.
5160	Register the MBean with the platform MBean server.
5161	Unregister the specified MBean.
5162	Validate the MBean.
5163	Get a random string.
5164	Add a value to the parameter.
5165	Search for legislators by state
5166	Search for legislators in a state
5167	Search for legislators by state and term
5168	Search for legislators
5169	Get the legislator with the given id
5170	Compares this enum to another.
5171	Sets the mapped class.
5172	Invokes the method.
5173	Stop the timer and return the elapsed time.
5174	Build the client.
5175	Returns a HttpUriRequest for the given method.
5176	Converts the response text to a PID.
5177	Evaluate an XPath expression on the given XML.
5178	Get the process id.
5179	Creates a new ConfigurationBinder for the given class.
5180	Binds the configuration to an instance.
5181	Creates a new instance of the FilterPattern.
5182	Invoke the constructor with the given arguments.
