0	Emit the value into the queue.
1	Wraps an ObservableSource into an Observable that emits the first item emitted by the source.
2	Sorts the observable sequence using the provided comparator.
3	Construct a ConnectableObservable that emits the given observable.
4	Create a processor that sends unicast messages to the specified destination.
5	Creates a new unicast processor with the given capacity hint.
6	Try to subscribe to a source Publisher using a mapper function.
7	Construct a Flowable that maps the value of a single element to its corresponding Publisher.
8	Reset all handlers to their default values.
9	Construct an Maybe from a CompletableSource.
10	Construct an Maybe from a SingleSource.
11	Retry the Maybe if the predicate throws an exception.
12	Throws a NullPointerException if the object is null.
13	Returns an identity function.
14	Creates a callable that returns the given value.
15	Returns a function that returns the given value.
16	Returns a function that casts the given object to the given class.
17	Creates a new unicast subject.
18	Creates a new unicast subject with the given capacity hint.
19	Creates a new unicast subject.
20	Creates a new unicast subject.
21	Wait for the next operation to complete and return the error.
22	Waits for the next error.
23	Await for the completion of the operation.
24	Drains the queue until it reaches the maximum backpressure.
25	Request a batch of messages from the given subscription.
26	Post complete.
27	Completes the computation.
28	Returns the value of the notification.
29	Returns the error of the notification.
30	Validates that the upstream and next disposable are disposed and that the upstream is disposed
31	Atomically sets the given next object as the upstream object.
32	Validates that the upstream and next subscriptions are both non - null and non - null.
33	Sets the given next subscription to the given AtomicReference.
34	Add two long values and return the result.
35	Multiply two long values and ensure that the result is not larger than Long. MAX_VALUE
36	Add n to the requested value.
37	Convert an exception to a NullPointerException.
38	Adds an object to the tail of the list.
39	Shutdown the pool.
40	Creates a new ScheduledExecutorService with the given ThreadFactory.
41	Sets the subscription to be used for the next request.
42	This loop loops through the queue and emits all the elements.
43	Wrap the given error in a RuntimeException.
44	Flattens a CompositeException into a list of all the exceptions that are contained in it
45	Throw the exception if it is not already an exception.
46	Clear the set of resources.
47	Returns the number of resources in the set.
48	Try to map an ObservableSource to an ObservableSource.
49	Returns an observable sequence that maps each observable sequence element to its value using the provided function.
50	Accept all notifications in the queue.
51	Accept an observer for all the objects in this queue.
52	Start the queue.
53	Start the queue.
54	Inserts the specified object into the queue.
55	Returns the value of the resource.
56	Completes the observable with the given value.
57	Completes the flow of the operation with the given exception.
58	Completes the future.
59	Concatenates the contents of this Publisher to a single Publisher by delaying the error.
60	Concatenates the contents of this Flowable into a single Flowable.
61	Sorts the items in the source stream according to the provided comparator.
62	Waits for the specified number of milliseconds.
63	Request n messages from the upstream.
64	Adds a PublishDisposable to the list of subscribers.
65	Removes the given PublishDisposable from the list of subscribers.
66	Replays a ConnectableFlowable and returns a Flowable that emits all the items emitted
67	Parse the annotations on the method and return a HttpServiceMethod.
68	Sets the amount of time that the task should wait before it is executed.
69	Creates an error response.
70	Calculates the delay in milliseconds based on the variance of the call.
71	Create sample data
72	Returns the HttpMethod object for the given HTTP method.
73	Search for a user in the directory.
74	Encodes the given password using the salt generated by the saltGenerator.
75	Checks if the given raw password matches the given encoded password.
76	Perform version checks.
77	Checks to disable the checks.
78	Returns the version of Spring.
79	Configures the attribute exchange.
80	Returns a client configurer that uses OAuth2.
81	Returns a configurer that configures the OAuth2 resource server.
82	Returns the request matcher registry that requires a channel.
83	Compares the specified attribute with the specified value.
84	Retrieve an entry from the directory.
85	Search for multiple attribute values.
86	Search for multiple attribute values.
87	Search for a single entry in the directory.
88	Build the search controls.
89	Recursive method to find the primary keys.
90	Build the PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails object from the J2EE user roles
91	Creates an embedded server.
92	Create servlet - api - provision filter.
93	Creates the JAAS API integration filter.
94	Create a whitelist for default types.
95	Inserts a Spring Security FilterChain into the given ServletContext.
96	Get the remember me token for a given series.
97	Get the list of authorities granted to the given attributes.
98	Creates a new cipher with the given algorithm.
99	Checks that the AuthenticationManager is set.
100	Checks if the request requires authentication. If it does then it will be logged in.
101	Checks if the pre - authenticated principal has changed and re - authenticates.
102	Performs the authentication.
103	Check the content length.
104	Maps the given authorities to their respective authorities.
105	Sets the login processing URL.
106	Update the default URLs for the authentication.
107	Update access defaults.
108	Map the password to a string.
109	Extract the value of the remember me cookie from the given request.
110	Encode the given cookie tokens.
111	Sets the cookie.
112	Resolves the given parameter.
113	Extract the query string from the request.
114	Get the port from the given URL.
115	Returns the principal of the current authentication.
116	Logout the user.
117	Authenticate the user.
118	Builds the provider URL from the list of URLs.
119	Sets the context environment properties.
120	Returns the redirect URL.
121	Write the UI suffix if the user is not authorized.
122	Initializes the user details service.
123	Gets the UserDetailsService.
124	Adds the PKCE parameters to the attributes and additional parameters.
125	Require authentication.
126	Service ticket request.
127	Proxy ticket request.
128	Checks if the current user is authenticated.
129	Checks if the request matches the configured proxy receptor.
130	Creates a security expression root.
131	Gets the JWKSet.
132	URL - encode a string using UTF - 8.
133	Get the list of groups that the current user is authorized to access.
134	Load user details from assertion.
135	Get the pre - authenticated principal.
136	Concatenate multiple byte arrays.
137	Creates a sub - array of the specified byte array.
138	Get the list of grants for the given attributes.
139	Preprocesses the given map to ensure that the keys are String objects.
140	Get the collection of grants for the given value.
141	Adds the given object to the given collection of grants.
142	Get the pre - authenticated principal.
143	Get the shared object of the given type.
144	Build a redirect URL for the given HTTP request.
145	Invokes the method advising the result.
146	Returns the role name.
147	Returns the roles that are present in the given array.
148	Process the cookie and return the user details.
149	This method is called when a user logs in and stores the token in the session.
150	Attempt to switch to a user.
151	Attempt to switch to another user.
152	Sets the URL of the URL that will be redirected to when the user exits.
153	Display a random contact
154	This method is used to configure the Spring security filter chain.
155	Decodes a JWT.
156	Checks if the current user has access to the resource.
157	Check if the current user is allowed to access the URL.
158	Convert the given JWT into a collection of Granted Authorities.
159	Generates a CSRF token for the given request.
160	Display the administration page for a contact
161	Display a form to add a permission to a contact
162	Add a permission to a contact
163	Delete a permission from a contact
164	If the role is null or empty prepends the role with the default prefix.
165	Creates a UserDetailsResourceFactoryBean from a string.
166	Get the values of the attribute with the given name.
167	Returns the first attribute value for the given attribute name.
168	Encodes the given string to a byte array.
169	Decodes the given bytes into a String.
170	Looks up the parameter names for the given object.
171	Add a new contact
172	Find the attributes that are specified for the given method and target class.
173	Adds a secure method to the map.
174	Returns a collection of all the ConfigAttributes in this class.
175	Checks if the method name matches the mapped name.
176	The ANY_REQUEST matcher will be used to match any request.
177	Handle bind exception.
178	Get a random contact
179	Clear the authentication attributes from the session.
180	Returns the field with the given name on the given class or the class itself if it is
181	Create service url.
182	Create redirect url.
183	Extract the SHA prefix from the given SHA pass.
184	Rejects the request.
185	Checks for duplicates in the filter stack.
186	Returns the registered types.
187	Extract the cause of the given throwable.
188	Register the access manager.
189	Converts a collection of authorities to a set of authorities.
190	Checks if two byte arrays are the same.
191	Sets the default failure URL.
192	Sets the function that will be called when the request is made hidden.
193	Build the request URL.
194	Checks if the given URL is an absolute URL.
195	Returns the list of OpenID attributes for the given identifier.
196	Converts the given identifier to the corresponding class id type.
197	Creates the entries in the given ACL.
198	Creates an ObjectIdentity.
199	Updates an object identity.
200	Saves the request to the session.
201	Creates a matcher that matches on all of the given path patterns.
202	Returns a matcher that matches any of the specified exchanges.
203	Creates a TextEncryptor that decrypts the given password using the given salt.
204	Creates a TextEncryptor that uses the given password and salt.
205	Queryable text encryptor.
206	Write the X - Frame - Options header to the response.
207	Determine the target URL for the given request and response.
208	Determine the target URL from the request.
209	Sets the target URL parameter.
210	Get the directory with the immediate parent populated.
211	Build a distinguished name from the given username.
212	Creates a map of shared objects that can be used by the authentication framework.
213	Configure JAAS using a loop.
214	Get the current date.
215	Internal method to parse a date from a string using a list of formats.
216	Update the cache.
217	Set the details of the given authentication request.
218	Returns the security name for the given subject.
219	Get the list of groups that the security is a member of.
220	Changes the password for the current user.
221	Build the DN for the group.
222	This method is called when the maximum number of sessions for this principal is exceeded.
223	Copy details from one Authentication to another.
224	Get the filters that match the given request.
225	Get a list of filters for the given URL.
226	Returns the application context for the given page context.
227	Get the full DN.
228	Sets the session attributes to be sent to the client.
229	Creates a basic authentication scheme.
230	Adds a list of filters to the list of filters to be used in the REST call.
231	Adds a filter to the RestAssured. filters list.
232	Creates a new Basic AuthenticationScheme.
233	Creates an NTLM authentication scheme.
234	Creates a form authentication scheme.
235	Set the proxy for the given URI.
236	Print the response body and response headers to the given stream.
237	Configure the redirect.
238	Sets the charset for the query parameter.
239	Sets the default object mapper type.
240	Sets the JAXB object mapper factory.
241	Sets the log configuration for the mock.
242	Sets the session configuration for the mock.
243	Sets the object mapper config.
244	Sets the JsonConfig instance.
245	Set the XML configuration for the REST - Assured request.
246	Sets the encoder configuration for the REST - Assured service.
247	Sets the header configuration for the REST API.
248	Sets the asynchronous configuration for the mock.
249	Sets the mockMvcConfig.
250	Set the configuration for multi - part requests.
251	Set the mock parameter configuration.
252	Sets the matcher configuration for the REST - Assured request.
253	Allow all hostnames.
254	Declares the namespaces for the XML document.
255	Sets the namespace for the path.
256	Perform a request to the server.
257	Sets the request headers.
258	Set the proxy for the connection.
259	Sets the name of the control.
260	Add a header to the multipart request.
261	Set basic credentials.
262	Set the NTLM credentials.
263	Creates a new Headers object with the given header.
264	Reset all the internal variables.
265	Sets a response header.
266	Build the response.
267	Matches a cookie s value.
268	Matches a cookie s comment.
269	Matches a cookie s expiry date.
270	Matches a cookie s domain.
271	Matches a cookie s path.
272	Matches a cookie if it is secured.
273	Matches a cookie if it is HTTP - only.
274	Matches a cookie s version attribute if it matches.
275	Matches a cookie s maximum - age attribute.
276	Expect the given header to be present in the response.
277	Expect the response header to be present.
278	Expect a cookie with the given name to be present in the response.
279	Returns a copy of this proxy specification with the specified host.
280	Specifies the return type of the JSON object.
281	Sets the default parser type.
282	Set the default stream to use.
283	Enable logging of request and response if validation fails.
284	Creates a new HTTP request object.
285	Set the default boundary for multipart uploads.
286	Adds an attribute to the request.
287	Adds a header to the request.
288	Adds a multi part part to the request.
289	Adds additional result handlers to the request.
290	Sets a parameter for the request.
291	Add the given HTTP client parameters to this configuration.
292	Sets the HttpClientFactory to use.
293	Set the multipart mode for this request.
294	Get the result of a request.
295	Get the value at the given path as an integer.
296	Returns the byte at the given path.
297	Get the Short value at the given path.
298	Get a Float value.
299	Get a double value.
300	Get a property as a long.
301	Get a list of objects from the JSON at the given path.
302	Get a map.
303	Get object from path and cast to given type.
304	Set the body of the request.
305	Adds a cookie to the request.
306	Adds a parameter to the request.
307	Adds a parameter to the request.
308	Sets the update strategies for all request parameters attribute and session.
309	Log the response to the given stream if the matcher matches.
310	Creates a new Cookies object with the given cookie.
311	Remove all the keys and sources from the backing map.
312	Index the explicit bindings.
313	Get the binding for the given key. If no binding is found then return the default binding
314	Attempts to convert a constant string binding.
315	Recursively cleanup the binding.
316	Remove a failed binding.
317	Returns the set of dependencies that should be used to build the binding.
318	Create an uninitialized binding.
319	Returns an array of the parameters that are provided by the given parameter injectors.
320	Binds the injector to the state.
321	Binds a logger to the injector.
322	Checks for misplaced binding annotations on a given member.
323	Checks if a overrides b.
324	Initializes the delegate.
325	Returns the provider type.
326	Resolves all the given types.
327	Canonicalizes a key type literal.
328	Configure built - in converters.
329	Canonicalizes the given class loader.
330	Checks if the given class loader has the same version of FastClass as the cglib.
331	Checks if the given member is publicly callable.
332	Fixes the annotations of a key.
333	Requests an instance of the given type and provides the result.
334	Validates all of the pending injections.
335	Creates a new instance of the class using the given arguments.
336	Wrap the given servlet request with a wrapper around the given servlet pipeline.
337	Scope a factory.
338	Makes a Scoping injectable.
339	Normalize a path.
340	Generates an annotation of the given type.
341	Checks if the given annotation is marked as retention at runtime.
342	Finds the scope annotation.
343	Get the binding key for the given type and member.
344	Returns the name of the given key.
345	Initializes the delegate provider.
346	Add a direct type binding to the binding selection.
347	Get a ConstructorInjector from the cache.
348	Checks if the given interceptor class has scope annotation.
349	Creates a real map binder.
350	Creates a new key for the value.
351	Provisions the given object.
352	Writes the contents of the message replacing any existing message.
353	Creates a module that will be installed by the provider.
354	Returns a collection of all the assisted methods.
355	Checks if the type is not specified.
356	Checks if the constructor has matching the given parameters.
357	Returns the set of dependencies for the given constructor and implementation.
358	Removes dependencies that are annotated with the Assisted annotation.
359	Checks if the dependencies are valid for optimizing the AssistedInject factory.
360	Creates a binding from the given method and arguments.
361	Invokes the given method.
362	Returns an error if no binding was found.
363	Create a new real set binder.
364	Returns a key that can be used to create a new multibinder element.
365	Finds the next matching filter.
366	Checks if the constructor has at least Inject annotation.
367	Returns the constructor injection point.
368	Returns the set of dependencies that should be used by the injector.
369	Returns a Module instance for the given module.
370	Returns the annotation claimed by the scanner.
371	Returns the line number of the given member.
372	Initializes the injector.
373	Creates a new callable that will continue the request with the given seed map.
374	Creates a callable that will be executed in a synchronous fashion.
375	Validates and canonicalizes the given value.
376	Get a MembersInjector instance from the cache.
377	Creates a new MembersInjector instance with the given injection points and listeners.
378	Returns a list of injector instances for the given set of injection points.
379	Creates a new Key instance.
380	Returns a strategy for the given annotation.
381	Creates a strategy for the given annotation type.
382	Removes any internal classes that are not guice - scoped.
383	Returns the binding source.
384	Formats the given messages.
385	Creates a new message with the specified message format and arguments.
386	Creates a new exception message with the specified message format and arguments.
387	Creates a new message with the given message format and arguments.
388	Convert an object to a Java object.
389	Returns true if the given class should be skipped.
390	Get the configuration source from the given list of module class names.
391	Main method for the jconsole program.
392	Pushes a dependency onto the stack.
393	Pushes the given source object onto the given key.
394	Creates a new instance of this class.
395	Provisions the given provider with the given dependency.
396	Process a connection event.
397	Adds a connection event processor for the given event type.
398	Get the result of a future task.
399	Throws an unchecked exception.
400	Register a RemotingProcessor for a given command.
401	Registers the default processor.
402	Get the processor for the given command code.
403	Try to get a URL from the cache.
404	Decodes the protocol code.
405	Get all connections.
406	Scan the pool.
407	Get a connection from the pool. If the connection is not yet available then create a new
408	Create a connection pool and heal if need.
409	Remove a connection pool from the pool pool list.
410	If the connection pool is ready to be created and the connection pool size is less than the
411	Create a connection in the pool.
412	Close the connection.
413	Called when the connection is closed.
414	Closes the connection.
415	Set an attribute if it doesn t exist.
416	Register a user processor.
417	Register a processor with the given interest.
418	Dispatch the request to the user processor.
419	Deserialize a request command.
420	Pre - processes the RemotingContext.
421	Log the timeout.
422	Log the request.
423	Process the message.
424	Invokes the given request with the given callback.
425	Send a remoting command to the remote peer.
426	Converts a bit set to a byte value.
427	Converts an integer into a BitSet.
428	Add a reconnect task to the queue.
429	Stops the healing process.
430	Creates a RemotingCommand from the given request object.
431	Filters the connections to only return connections that are in the ACTIVE state.
432	Monitor the connection pool.
433	If the last select connection is the last select connection close it.
434	Get a system property as a boolean.
435	Log info.
436	Check if the request timeout has passed.
437	Get the user processor for the given class name.
438	Get a random connection from the given list.
439	Get the value of the given key. If the key is not found the defaultIfNotFound
440	Get a property.
441	Resolves the response object from the response command.
442	Converts a response command to a response object.
443	Converts a response command to an exception.
444	Returns a detail message for the client error.
445	Create a server exception.
446	Print connection trace log.
447	Creates a new event loop group that runs in parallel.
448	Parse the remote address of the given channel.
449	Parse the local address of the given channel.
450	Parse the remote IP address of the given channel.
451	Parse the hostname of the remote host.
452	Parse the local IP address of the given channel.
453	Parse the remote port from the given channel.
454	Get the local port of the given channel.
455	Parse a socket address to get the host IP address.
456	Adds a connection to the pool.
457	Remove a connection from the pool and try to close it.
458	Get a connection from the pool.
459	Register a custom serializer for a given class.
460	Get the custom serializer for a given class.
461	Registers a custom serializer for the given command code.
462	Get the custom serializer for the given command code.
463	Start the connection monitor thread.
464	Check if remote address is connected.
465	Initialize the write buffer water mark.
466	Returns a new FramedataImpl1 object for the given opcode.
467	Write all the buffered data to the socket.
468	Sets the close code.
469	Validates the payload as UTF - 8.
470	Update the payload of the response.
471	Checks if the protocol is accepted by the client.
472	Checks if the length of the frame is within the allowed limits.
473	Checks that the packet size is not too small.
474	Generates a final key from the given string.
475	Process a continuous frame and a non - fin frame.
476	Process a binary frame.
477	Logs the runtime exception during onWebsocketMessage.
478	Process a single frame of text.
479	Process a continuous frame.
480	Process a frame that is not fully complete.
481	Process a closing frame.
482	Checks if the current buffer size is greater than the maximum allowed size. If so clears the
483	Get the payload from the byte buffer list.
484	Returns the total size of all the buffers in the list.
485	Translate the handshake from the CLIENT to the SERVER
486	Translates the HTTP response from the SERVER to the HTTP handshake.
487	Decode the incoming data.
488	Sends a response with status 404 and a close response with the reason code and message.
489	Sends a 500 error response to the client and closes the connection.
490	Generates a response with a status code that indicates that the server is unable to upgrade or the
491	Sends text to the client.
492	Reset the connection.
493	Start the read thread.
494	Returns the port of the connection.
495	Sends the handshake to the engine.
496	Set the timeout for when a connection is lost.
497	Stop the connection lost timer.
498	Start the connection lost timer.
499	Restart the timer that checks for connection lost.
500	Executes a connection lost detection.
501	Cancels the timer that is used to check for connection lost.
502	This method is called when a websocket handshake is received as a server.
503	Sends a ping frame to the client.
504	Stops the connection.
505	Returns the port of the server.
506	This method is called by the reader thread when there is a buffer available to read.
507	Accept a new connection.
508	Read data from the connection.
509	Write the next message to the connection.
510	Setup the selector and the server thread.
511	Ensure that selector thread is only started once.
512	Shutdowns the server.
513	Get the socket for the current selection key.
514	Broadcast data to all clients.
515	Broadcast text to all clients.
516	Broadcast data to all clients.
517	Fills the draft frames with the given data.
518	Transfer the contents of source into dest.
519	Start the JPA API.
520	Returns an EntityManager instance for the given name.
521	Executes the given block in a transaction.
522	Convert the given arguments to a buffer.
523	Wraps the given arguments in a list if necessary.
524	Get a message in the specified language.
525	Get a translation for a list of keys.
526	Returns true if the key is defined in the given language.
527	Returns the preferred messages for the given languages.
528	Returns the preferred message for the given request.
529	Set the language of the given result.
530	Create a new builder with the given modules.
531	Set the bindings for the given modules.
532	Set the bindings for this instance.
533	Overrides the given modules.
534	Overrides the current instance with the given modules.
535	Set the bindings to override.
536	Disable the given modules.
537	Call the method with the given context.
538	Call the action on the given request.
539	Get the existing file.
540	Returns the binding in the specified scope.
541	Creates a tuple with the given values.
542	Static factory method for creating a tuple of 5 elements.
543	Converts the given ExecutionContext to an Executor.
544	Creates a new configuration with the given name and persistence unit.
545	Creates a new configuration with the given persistence units.
546	Creates a new JPAConfig instance from the given map.
547	A flow that converts a string into a ByteString.
548	Creates a flow that will return a JsonNode as a ByteString.
549	Adds a constraint validator for the given key.
550	Creates a new instance of the given class.
551	Get the first matching accessible method.
552	Invoked when a client error is encountered.
553	Renders a bad request response.
554	Renders a forbidden page.
555	Renders a not found page.
556	Handles a server error.
557	Log an internal server error.
558	Creates a useful exception for the given throwable.
559	Renders a dev error page.
560	Renders a development error response.
561	Creates a handler that will serve the given files and directories.
562	Creates a handler that builds documentation from the given directory.
563	Creates a handler from a directory and a jar file.
564	Creates a handler from a directory and a jar file.
565	Creates a handler from a jar file.
566	Consume data from the stream.
567	Creates an HttpEntity from a Content object.
568	Creates a HttpEntity from a string.
569	Creates a chunked entity from the given data.
570	Returns a JSON response with the given status code and JSON content.
571	Sends a JSON response with the given status code.
572	Creates a response with a status code and the given content.
573	Sends a HTTP status with the given content and content length.
574	Returns a response with the given status code and content.
575	Finds a user by id.
576	Returns the preferred language for the given collection of languages.
577	Returns a unique call for this resource.
578	Create a new Call with the given fragment.
579	Returns the absolute URL for the given request.
580	Returns the URL of the web socket for the given request.
581	Creates a function that runs the given runnable on the given connection.
582	Creates a function that invokes the given connection callable with the given connection.
583	Creates a server for a router.
584	Converts an object to a JSON object.
585	Convert a JsonNode to an object of the given class.
586	Parse the given string into a JsonNode.
587	Parse the given input stream into a JsonNode.
588	Returns the relative path between the start and target paths.
589	Returns the canonical form of the given URL.
590	Returns a list of tuples describing the displayable constraints.
591	Returns a tuple with the name and the values of the Display annotation.
592	Timeout the given stage in the given time unit.
593	Checks if the two classes are assignable.
594	Parses a cron expression into a date.
595	Get the next interval in the given cron expression.
596	Create a new AhcWSClient.
597	Creates a builder for the application.
598	Renders the todo page.
599	Stores a value in the session.
600	Set a flash message.
601	Returns the key that is the qualified name of the annotation.
602	Returns a binding key that is qualified with the given annotation.
603	Creates a new binding to the given implementation.
604	Creates a new binding to the underlying provider.
605	Creates a binding to the given instance.
606	Returns a new binding that is the target of the given key.
607	Creates a new binding to the underlying provider.
608	Returns a list of available languages.
609	Returns the preferred language for the given list of languages.
610	Creates a new instance of the evolutions reader.
611	Creates a reader for the default evolutions.
612	Remove all scripts that have been evolved in the given database.
613	Load the application configuration using the given function.
614	Load modules using a binary function.
615	Load the given modules into the application.
616	Load the given modules into the application.
617	Load the given modules into the application.
618	Load the application.
619	Create a builder for the application.
620	Encodes the given cookie into a cookie string.
621	Returns the current EntityManager.
622	Returns the stack of EntityManager objects.
623	Push or pop the EntityManager from the stack.
624	Splits the input into two flows and merges the two into a single flow.
625	Splits the given flow into two flows by using the given merge strategy.
626	Construct a flow from an actor reference.
627	Convert error arguments.
628	Fills the form with the given value.
629	Returns all global errors.
630	Returns the errors as JSON.
631	Get the value of the given key.
632	Fill the form with the given map of values.
633	Parse the given text into an object of the given class.
634	Parse the given text into an object of the given field.
635	Print a value to a String.
636	Prints the given object to the output.
637	Print a value to a String.
638	Register a converter that converts String to Optional.
639	Register a formatter for a field of the given type.
640	Register a formatter for the given annotation.
641	Encodes the given cookie into a cookie string.
642	Select the nodes that match the given path.
643	Convert Java List to Seq.
644	Convert an array to an immutable sequence.
645	Construct an immutable sequence from the given array.
646	Accepts a JSON message.
647	Accept or result.
648	Workaround for accessibility issues with Java 8.
649	Returns the promotion cost for a primitive type.
650	Returns the total cost of a transformation between the source and the destination.
651	Returns the cost of an Object transformation.
652	Returns the localized message for the given key.
653	Get the value of one of the given keys.
654	Creates a database instance from the given driver URL and configuration.
655	Creates a parallel sorter for the given array of objects.
656	Sorts the elements in the specified range using the specified comparator.
657	Merge sort.
658	Invoke the method.
659	casts a numeric type to another type.
660	Loads the argument at the given index.
661	Emits a field instruction.
662	Pushes zero or null to the stack.
663	Unbox the value of a primitive type or zero it.
664	Generates code that processes an array.
665	Compare two null labels.
666	Resolves all the signatures of all the bridges in the declToBridge map.
667	Get the methods of the given class and interfaces.
668	Filter the constructors of the given class.
669	Sets the superclass of the class.
670	Generates code to get a field.
671	Adds a method to the list of methods that should be thrown.
672	Returns the cardinality of this BitSet.
673	Sets the naming policy.
674	Find methods by name and descriptor.
675	Resolve a child path.
676	Read a string from the given path.
677	Sets the host header.
678	Create a new request with the specified method and destination.
679	Create a CONNECT request with the given destination.
680	Create a GET request with the given destination.
681	Create a POST request with the given destination.
682	Create a PUT request with the given destination.
683	Create a PATCH request with the given destination.
684	Create a DELETE request with the given destination.
685	Create a HEAD request with the given destination.
686	Create a TRACE request with the specified destination.
687	Create a OPTIONS request with the given destination.
688	Sets the path of the request.
689	Sets the HTTP response cookies.
690	Adds a query parameter to the request.
691	Add query parameters.
692	Sets the query string.
693	Get the query string.
694	Returns the host URL.
695	Sets the Authorization header to use Basic Authentication.
696	Sets the host header.
697	Build the request buffer.
698	Sends the request and returns the response.
699	Remove a range from the given handler.
700	Returns the number of exception table entries in the specified handler chain.
701	Collect all action interceptors.
702	Collect all action filters.
703	Collect all action results.
704	Collect all the action runtimes.
705	Set a simple property.
706	Get the index property.
707	Extract the reference name from the property name.
708	Returns the PrintWriter to use for printing.
709	Set the object reference.
710	Get the object reference for the given name.
711	Lookup an object by its reference.
712	Get the table descriptor for the given table reference.
713	Find table descriptor by column reference.
714	Get the table alias for a table reference.
715	Register a table reference.
716	Lookup the table descriptor for the given table reference.
717	Registers a hint.
718	Serializes the given value to JSON.
719	Injects the request attributes into the target objects.
720	Inject the servlet request parameters into the target.
721	Inject uploaded files into the targets.
722	Converts a property name to a column name.
723	Convert a column name to a property name.
724	Converts the given column name to the column name that is used to create the table.
725	Store a value in the statement at the given index.
726	Prepare a value to be returned.
727	Returns all the wrappers in the map.
728	Resolves a wrapper class.
729	Creates a wrapper instance.
730	Converts a path to the system path.
731	Get the path from the given filename.
732	Splits a filename into a path base name and extension.
733	Returns the relative path to the target file relative to the base directory.
734	Registers a MADV - OC component.
735	Register an action config consumer with the web application.
736	Starts the Madvoc application.
737	Configure default values.
738	Registers the Madvoc components.
739	Exclude jars from scanning.
740	Include jars.
741	Include the given entries in the class.
742	Exclude the given entries from the scan.
743	Scan the given jar file.
744	Scan the classpath for classes.
745	Returns the bytecode signature of the given class.
746	Scan the given paths for classes.
747	Start the scanner.
748	Create a new transaction.
749	Get the default scope or the request scope if null.
750	Get or create a new scope.
751	Register a scope with the Madvoc parser.
752	Decodes a UTF - 8 string into a byte array.
753	Generates a CSRF token.
754	Assure that the size of the token set is at least as large as the maximum allowed
755	Checks if a token is present in the session.
756	Create a BeanCopy from an object.
757	Copy the bean util.
758	Visit a property.
759	Initializes this entity.
760	Resolves a scope of the given type.
761	Registers a petite bean.
762	Register a bean definition.
763	Remove a bean of the given type.
764	Resolve bean names for a given type.
765	Register a Petite constructor injection point.
766	Register a property injection point.
767	Register a Set Injection Point for a Petite bean.
768	Register a Petite method injection point.
769	Register the specified init methods with the specified invocation strategy.
770	Register the destroy methods for the specified bean.
771	Register a petite provider.
772	Register a provider with the Petite API.
773	Iterate over all beans of a certain type.
774	Define parameters.
775	Intercepts the given action request.
776	Resolves the Java version number.
777	Pushes an integer onto the stack.
778	Check that the given argument index is valid.
779	Advice field name.
780	Advice method name.
781	Loads the special method arguments.
782	Loads the static method arguments.
783	Loads the virtual method arguments.
784	Loads a method argument.
785	Stores the given argument in the given method.
786	Prepares the return value of a method.
787	Create a key for a method signature.
788	Generates instructions to create a new array of the given type.
789	Store the contents of the given array type into the given visitor.
790	Extract the encoding from the given content type.
791	Checks if the given flags are empty.
792	Resolve the bearer token from the request.
793	Require authentication.
794	Prepares the response for a file download.
795	Prepares the response for sending.
796	Get all cookies with the given name.
797	Read request body from reader.
798	Read the request body from the input stream.
799	Stores the context path in the request and the servlet context.
800	Stores the current context path in the given servlet context.
801	Checks if the given name is a GET parameter.
802	Prepare the parameters for the request.
803	Copy all the request parameters to the servlet request attributes.
804	Invoke the body tag.
805	Renders the given body.
806	Renders the given JspFragment into a String.
807	Invoke all init methods that match the given invocation strategy.
808	Call all the destroy methods of the bean.
809	Creates a new instance of the bean.
810	Injects the bean parameters.
811	Rewrite the given action path.
812	Adds a header to the response.
813	Add a new property to the props map.
814	Adds a base property to the configuration.
815	Put a profile property.
816	Get a property from a profile.
817	Resolve macros in the given string.
818	Extract properties from the properties file.
819	Stream to the next four bytes.
820	Hash a password using BCrypt.
821	Checks if the plaintext password matches the hashed password.
822	Copy all bytes from the stream to the given output stream.
823	Copy max bytes from the input stream to the output stream.
824	Parse an action.
825	Resolve action config.
826	Detect and register an action alias.
827	Read action interceptors.
828	Read action filters.
829	read the path to the action class s package.
830	Read method action path.
831	Parse the method alias.
832	Create an action runtime.
833	Set the Last - Modified header if the request is older than the last modified date.
834	Applies advice to target class.
835	Injects the target into the proxy.
836	Visits an annotation.
837	Resolve the real name from the json name.
838	Resolve the JSON name.
839	Lookup the type data for the given class.
840	Lookup the TypeData for the given type.
841	Find the type data for a subclass.
842	Resolve the JSON name for a given type and name.
843	Resolve the real name for a JSON property.
844	Returns the content of the file.
845	Copy the bootstrap methods from the input stream to the symbol table.
846	Sets the major version and class name.
847	Puts the constant pool into the given output vector.
848	Puts the bootstrap methods into the given ByteVector.
849	Adds a field reference to a class or interface.
850	Adds a method reference to the constant pool.
851	Adds a constant to the constant pool.
852	Adds a constant reference to the constant pool.
853	Adds a constant to the constant pool.
854	Adds a constant integer or float to the constant pool.
855	Adds a constant to the constant pool.
856	Adds a long or double constant.
857	Adds a constant to the constant pool.
858	Adds a constant name and type to the symbol table.
859	Adds a UTF - 8 constant to the constant pool.
860	Adds a constant that is encoded as UTF - 8.
861	Adds a constant to the constant pool.
862	Adds a constant method handle.
863	Adds a dynamic constant.
864	Adds a constant that invokes a dynamic method.
865	Adds a constant to the constant pool or creates a new constant if it doesn t already exist
866	Adds a constant that can be either a dynamic or a method reference.
867	Adds a constant to the constant pool.
868	Adds a constant that references a UTF - 8 string.
869	Adds a bootstrap method to the constant pool.
870	Adds a merged type to the symbol table.
871	Computes a hash code for a given name.
872	Clear all entries.
873	Returns all values for the given key.
874	Returns an iterator over the entries in this list.
875	Returns a list of all entries in the map.
876	Grow the buffer to a new capacity.
877	Appends the specified range of characters to this buffer.
878	Visits an annotation.
879	Creates the methods that are called on the end of the chain.
880	Create the proxy method that will be called when the chain is first started.
881	Create the method which will continue the chain.
882	Parses a path string into a Path object.
883	Pushes a field onto the end of the path.
884	Configure servlet context.
885	Execute the method.
886	Returns an array of all field descriptors in the order they were added.
887	Create a bean definition for the registration.
888	Converts JtxTransactionMode to DbTransactionMode.
889	Read a property from the given source object.
890	Adds all of the entries from the specified map to this map.
891	Append the contents of the given buffer to this buffer.
892	Writes the contents of the list to the given writer.
893	Writes the contents of the list to the given output stream.
894	Writes the contents of the list to the given output stream.
895	Get the string value associated with the given key.
896	Get an Integer value.
897	Get a Long.
898	Get a Double.
899	Get a Float.
900	Get the value associated with the given key.
901	Adds a key - value pair to the object.
902	Use a folder to send the email.
903	Receive all the messages that match the given filter.
904	Updates the flags for the given message.
905	Close the folder if it is opened.
906	Lookup a named parameter by name.
907	Returns the target string for the alias.
908	Validate the action.
909	Add a violation to the validator.
910	Sets the MIME type of the RawData.
911	Set the file name to be downloaded.
912	Sets the target stream.
913	Sets the target class name.
914	Sets the target class.
915	Process the target class.
916	Creates the proxy.
917	Create the proxy class.
918	Create a new instance of the class defined by this Proxetta.
919	Dumps the given class bytes to the proxy class file in the debug folder.
920	Sets the sender email address.
921	Set the recipient s email address.
922	Sets the to address.
923	Set the recipient s email address.
924	Sets the CC addresses.
925	Add a plain text message.
926	Add a plain text message with the HTML content.
927	Sets a header.
928	Get a system property.
929	Returns the boolean value of the specified parameter.
930	Returns the value of the specified parameter as an integer.
931	Returns the long value of the given parameter.
932	Returns the resolved parameters.
933	Serializes a single key value.
934	Lookup the action path for the given alias.
935	Resolve the alias for the given value.
936	resolve a result path
937	Resolve a result path string.
938	find the last occurrence of a slash in a string
939	Returns the index of the last dot in a string after the last slash.
940	Returns the index of the first dot in the string after the last slash.
941	Strips the last camel - case word from a name.
942	Resolve schema name.
943	Resolve column descriptors.
944	Initializes the threefish key vector.
945	Mixes the two elements of the matrix.
946	Perform a DEMIX operation.
947	Add the given key to the key schedule.
948	Initializes the hash table with the given key message and tweaks.
949	Encrypt a block of data.
950	Converts a byte array to an array of long values.
951	Removes any bounding characters from a string.
952	Returns the path to the method.
953	Compress a file.
954	Gzip a file.
955	Ungzips a file.
956	List all entries in a zip file.
957	Unzips the given zip file to the given destination directory.
958	Adds a file to a ZIP archive.
959	Adds a file to a ZIP archive.
960	Returns the FieldDescriptor for the given field name.
961	Returns the property descriptor for the given name and whether or not it is declared.
962	Sets the bundle name for the given request.
963	Sets the locale in the session.
964	Gets the locale from the session.
965	Filter the parameters for the given bean name.
966	Add one or more profiles to the list of profiles.
967	Read a little endian long from the given byte array at the given offset.
968	Reads the contents of the given input stream.
969	Read a label from the given offset.
970	Returns the bytecode offset of the given TypeReference.
971	Read the element values.
972	Reads the verification type information from the buffer.
973	Read the bootstrap methods attribute.
974	Inspects the constructors of the class.
975	Returns the ctor descriptor for the given argument types.
976	Gets the request map.
977	Create a map of TransientBeanData from the servlet request.
978	Convert array to long array.
979	Initializes the DecoraManager and DecoraParser.
980	Register a consumer for each file found.
981	Add a path to the search.
982	Add a path to the search.
983	Include the given patterns.
984	Exclude files that match the given pattern.
985	Adds a path to the list of paths to look for.
986	Finds all files in the directory.
987	Initializes the todo list.
988	Returns an iterator over the files in the directory.
989	Resolve bean wiring mode.
990	Resolve bean name.
991	Returns the print writer.
992	Returns the output stream.
993	Returns the class name of this type.
994	Gets the constructor descriptor.
995	Returns the method descriptor for the given return type and argument types.
996	Get method descriptor.
997	Appends the descriptor of the field.
998	Returns the size of this type.
999	Returns the number of arguments and return sizes in bytes.
1000	Mark the transaction as rolled back only.
1001	Commit or rollback the current transaction.
1002	Rolls back all the resources.
1003	Request a resource.
1004	Pops the name off the stack.
1005	Writes a string to the stream.
1006	Writes a Unicode character to the output.
1007	Writes a char sequence to the JSON stream.
1008	Sets the parsing error log level.
1009	Sets the start and end position of the tag.
1010	Checks if the value contains the specified include string.
1011	Registers a new pseudo function.
1012	Lookup a pseudo function.
1013	Visit the proxy class.
1014	Visit an annotation.
1015	Makes a static init block.
1016	Makes a proxy constructor.
1017	Process the super methods of the target class.
1018	Find the last index in the sorted set.
1019	Adds the prefix and suffix to the given string.
1020	Replaces the bytecode of the ASM instruction.
1021	Get the attribute prototypes.
1022	Registers the default types for the SQL types.
1023	Register a new SqlType for a given type.
1024	Looks up a SQL type for a class.
1025	Lookup the SQL type.
1026	Creates a SOCKS4 proxy.
1027	Creates a SOCKS5 proxy.
1028	Creates a proxy info object for HTTP.
1029	Returns the total number of threads in the thread stack.
1030	Returns the number of threads with the given status.
1031	Associate a transaction with the transaction stack.
1032	Continue the given transaction.
1033	Lookup the resource manager for the given resource type.
1034	Creates a proxy object for the given target class.
1035	Append a method name to the path.
1036	Aligns the left and pads the given string to the given size.
1037	Pretty print an object.
1038	Converts a string to camelCase.
1039	Format a string in a paragraph of text.
1040	convert tabs to spaces
1041	Escapes a string for use in a Java string.
1042	Unescapes a Java string.
1043	Get a bean of the given type.
1044	Get a bean by its name.
1045	Initializes a bean definition.
1046	Invoke a provider.
1047	Adds a bean to the Petite bean manager.
1048	Set a bean property.
1049	Get a bean property.
1050	Shutdowns the bean manager.
1051	Resolves the parameters of a method or constructor.
1052	Renders the form after the body.
1053	Get the value of the property.
1054	End the tag tree.
1055	Create a new Element node.
1056	Adds a tag to the DOM.
1057	Removes the last child node of the given parent node if it is a text node.
1058	Returns the query string.
1059	Gets the action class name.
1060	Calculates the to position.
1061	Iterate collection.
1062	Iterate an array.
1063	Replaces all occurrences of sub with with.
1064	Replaces all occurrences of a character in a string with another character.
1065	Replaces all occurrences of a character in a string with another.
1066	Replaces the first occurrence of a substring with another string.
1067	Replaces the first occurrence of the specified sub string with the specified with character.
1068	Replaces the last occurrence of sub with with.
1069	Replaces the last occurrence of sub with with.
1070	Removes a substring from a string.
1071	Removes the specified character from the specified string.
1072	Checks if all of the strings in the array are empty.
1073	Checks if all of the strings are blank.
1074	Convert an array of values to a string array.
1075	Changes the first character of a string to upper or lower case.
1076	Converts a string to title case.
1077	Compress the given string by removing all occurrences of the given character.
1078	Checks if a string starts with a substring of another string ignoring case.
1079	Checks if the string ends with the specified character.
1080	Count the number of occurrences of sub in source ignoring case.
1081	Compares two string arrays for equality.
1082	Returns the index of the first whitespace character in the specified range of the specified string.
1083	Strips the leading char from the beginning of a string.
1084	Strips trailing char.
1085	Strips the specified character from the beginning and end of the specified string.
1086	Strips the first occurrence of the specified character from the specified string.
1087	Strips the first occurrence of the specified character from the specified string.
1088	Crop all the given strings.
1089	Remove leading and trailing whitespace from the beginning of the string.
1090	Remove all whitespace from the right of the string.
1091	Returns the index of the first occurrence of the specified region of the specified string.
1092	Join a collection of strings with a specified separator.
1093	Join an array of objects with a separator.
1094	convert charset.
1095	Checks if the character at the specified index is equal to the specified character.
1096	Surround a string with a prefix and a suffix.
1097	Adds a prefix to a string if it does not already exist.
1098	Adds a suffix to a string if it does not already exist.
1099	Cut the string to the first occurrence of the specified substring.
1100	Cut the string from the first occurrence of the given substring.
1101	Cut the prefix from the beginning of the string.
1102	Cut a suffix from a string.
1103	Cut a string surrounded by a prefix and suffix.
1104	Inserts a string into the source string.
1105	Repeats a string.
1106	Reverses the order of the given string.
1107	Returns the longest common prefix between two strings.
1108	Finds the common prefix of the given strings.
1109	Shortens a string to a certain length.
1110	Converts a string to upper case.
1111	Removes all quotes from a string.
1112	Convert a byte array to a hex string.
1113	Get the bytes of a string.
1114	Detect quote character.
1115	Visit a field.
1116	Visit an enum.
1117	Visits an annotation.
1118	Register a new entity type.
1119	Registers an entity with the database.
1120	Remove an entity from the registry.
1121	Creates an entity instance of the given type.
1122	Set the target interface.
1123	Inject target into wrapper.
1124	Lookup all the properties of a given type that are annotated with the given annotations.
1125	Detects the database and configures the database oom.
1126	Closes the output stream.
1127	Writes a single byte to the output stream.
1128	If the request has a session id in the URL then invalidate the session.
1129	Get the encoded name of the message.
1130	Returns the contents of the buffer as a byte array.
1131	Write the mail to a file.
1132	Write the mail to the given output stream.
1133	Append an argument to the descriptor.
1134	Prepends the argument type to the given descriptor.
1135	Change the return type of a method.
1136	Strips whitespace from the text.
1137	Register a converter for a given type.
1138	Lookup a converter for a given type.
1139	Select nodes matching the given query.
1140	Select the given selectors.
1141	Process the selector.
1142	Select the first node that matches the given query.
1143	Walks the descendants of the given nodes and adds them to the given result list.
1144	Walks the tree of nodes and adds the results to the result list.
1145	Select the given node and add it to the given result.
1146	Filter the current results by applying the given selector.
1147	Unpacks a CMap from a packed string.
1148	Refill the buffer if necessary.
1149	Executes a page query with the given parameters.
1150	Removes the SELECT part of the given SQL statement.
1151	remove the from part of the sql
1152	Removes the last order by clause from the given SQL statement.
1153	Decodes a HTML string.
1154	Detect the entity name.
1155	Build order by statement.
1156	Build the SQL statement for a page.
1157	Resolve the column names and properties for the given entity.
1158	Find by column name.
1159	Find a column descriptor by its property name.
1160	Returns the property name for the given column name.
1161	Returns the column name for the given property name.
1162	Gets the id value of the given object.
1163	Sets the value of the id property of the given object.
1164	Returns the key value of the given object.
1165	Appends a string to the end of the band.
1166	Sets the index of the StringPool.
1167	Expands the array to a new array of strings.
1168	Calculates the length of the array.
1169	Create a mixing message.
1170	Creates a scoped proxy class for the given bean definition.
1171	Iterate over the body.
1172	Initializes the cache.
1173	Checks if the given file is accepted by this filter.
1174	Sets the watch file to use.
1175	Starts the watch.
1176	Notify listeners of changes.
1177	Adds an enumeration to the enumeration set.
1178	Compute the size of the field info.
1179	Puts the field information into the given ByteVector.
1180	Creates a target that is a value.
1181	Write the value of the target property.
1182	Decorate the given page content with the given writer.
1183	Parse the page content.
1184	Writes the content of the decorated page.
1185	Writes the content of the specified region to the specified writer.
1186	Starts the server.
1187	Run a process and return its result.
1188	Get the store.
1189	Create a GzipResponseStream.
1190	Initializes the template with the given template data.
1191	Append the alias to the query.
1192	Append column name to query.
1193	Adds a rule to the list of rules.
1194	Apply the filter to the given value.
1195	Process includes.
1196	Process the excludes.
1197	Returns the pseudo class name.
1198	Adds all elements from the specified collection to this set.
1199	Finds the insertion point of the specified object in the sorted set.
1200	Bind an annotation config.
1201	Register a new action configuration.
1202	Lookup an ActionConfig by type or annotation type.
1203	Allows to accept an action config of the given type.
1204	Sets up the system properties for mail.
1205	Validates the value against the constraints defined by this validator.
1206	Finds the last table node.
1207	Fix the foster elements.
1208	Registers the session beans in the given http session.
1209	Get the map of beans from the session.
1210	Initializes the proxy class.
1211	Adds a method to be called when the advice is initialized.
1212	Registers the bundle.
1213	Adds a property to the profile.
1214	Extract profiles from the given key and add it to the cache.
1215	just add a property.
1216	Converts a typedesc to a class name.
1217	Converts a type reference description to a type reference name.
1218	Converts a typedesc to a signature.
1219	Convert a Java type to a Typeref.
1220	Add all consumers to the end of the list.
1221	Creates a collection of the specified length.
1222	Converts the given value to a collection of elements.
1223	Convert the given value to a collection of elements.
1224	Convert a collection of objects to a collection of objects.
1225	Convert an array of primitive types to a collection of primitive types.
1226	Sets the line number.
1227	Visits this label and if visitLineNumbers is true the line numbers are visited.
1228	Puts the instruction at the given offset in the given bytecode vector.
1229	Adds a forward reference to the instruction.
1230	Resolves the forward reference.
1231	Mark this basic block as belonging to a subroutine.
1232	Adds a return edge to the successor of the caller basic block.
1233	Compares two strings for equality.
1234	Fixes the accent character.
1235	Puts a byte into the byte vector.
1236	Puts two bytes into the byte vector.
1237	Puts a short value into the buffer.
1238	Puts a 12 - bit value into the byte vector.
1239	Puts a 2 - byte value into the byte vector.
1240	Puts an int into the byte vector.
1241	Puts a 2 - byte integer into the byte vector.
1242	Puts a long value into the byte vector.
1243	Puts a byte array into the byte vector.
1244	Enlarges the buffer by the specified size.
1245	Authenticate the user via HTTP session.
1246	Authenticate the user via the bearer token.
1247	Authenticate the user via basic auth.
1248	Find the default message for a given key.
1249	Gets the resource bundle.
1250	Get the element at the given index in the given array.
1251	Sets the entity id.
1252	Save an entity to the database.
1253	Update the given entity.
1254	Update the property of the given entity with the given value.
1255	Update the property of the given entity.
1256	Find an entity by its id.
1257	Find entity by property.
1258	Find one entity by criteria.
1259	Delete entity by id.
1260	Delete an entity by ID.
1261	Count the number of entities of the given type.
1262	Increases a property of an entity by delta.
1263	Decreases a property of an entity by delta.
1264	Find all the related entities of the given type and source.
1265	Returns all entities of the given type.
1266	Removes all attributes from the list.
1267	Returns a set of all the attributes in this map.
1268	Puts a new value into the cache.
1269	Remove the entry with the specified key.
1270	Get the current stack trace.
1271	Get the stack trace of the given exception.
1272	Get the stack trace from the given exception.
1273	Get the exception chain from the given throwable.
1274	Convert an exception stack trace to a string.
1275	Convert an exception chain to a string.
1276	Build a message from the given message and the cause.
1277	Unwrap a Throwable.
1278	Register as consumer.
1279	Accept a component class.
1280	Get the system class loader.
1281	Returns an InputStream for the specified resource.
1282	Returns an InputStream for the specified resource.
1283	Get the class as stream.
1284	Get the class as stream.
1285	Add a new route chunk to this route.
1286	Find or create a child chunk.
1287	Parse the request.
1288	Convert the given value to the given destination type and component type.
1289	Invoke a setter on the bean.
1290	Set the value in the array at the given index.
1291	Creates a new instance of the given bean property.
1292	Extract the type of the property.
1293	Stops the authentication process.
1294	Start the authentication process.
1295	Convert a local date to a date object.
1296	Convert a local date time to a calendar.
1297	Define a proxy.
1298	Adds a check to the list.
1299	Resolve the given class to a validation context.
1300	Add checks for all properties of a class.
1301	Collect all annotation checks for a given property.
1302	Collect annotation checks.
1303	Copy the default check properties from the annotation to the dest check.
1304	Encodes the source string using the given encoding and URI part.
1305	Encodes the given string using the given encoding.
1306	Encodes the scheme component.
1307	Encodes the host component of a URI with the specified encoding.
1308	Encodes the given port component with the given encoding.
1309	Encodes the given path with the given encoding.
1310	Encodes the given query component with the given encoding.
1311	Encodes the given query parameter with the given encoding.
1312	Encodes the given fragment with the given encoding.
1313	Inspect the properties of the bean.
1314	Returns an array of all property descriptors sorted by name.
1315	Returns the set - cookie header as Cookie objects.
1316	Unzips the response body.
1317	Closes the HTTP connection.
1318	Checks if the reference scope is a subclass of the scope that should be processed.
1319	Prints the routes.
1320	Encrypt the given content.
1321	Decrypt the given content.
1322	Convert a map to a bean.
1323	Converts a list of objects to the specified type.
1324	Set the value of the given property.
1325	Convert the keys and values of a map into the appropriate type.
1326	Compares two column descriptors.
1327	Sets a default header.
1328	Sends the given request.
1329	Sends the request.
1330	Adds the default headers to the given HTTP request.
1331	Read the cookies from the given HTTP response.
1332	Add all cookies to the given HTTP request.
1333	Send an email.
1334	Sets the subject of the given message.
1335	Set the sent date.
1336	Set the headers from the email with data.
1337	Set the people from the given email.
1338	Set the recipients.
1339	Adds the message body data to the given message set.
1340	Set the content of the given part to the given part set.
1341	Creates a body part for an attachment.
1342	Get the content type from the given data header.
1343	Save the result set.
1344	Close all ResultSets associated with the current query.
1345	Closes the query.
1346	Close the query.
1347	Sets the number of rows to fetch.
1348	Sets the maximum number of rows that will be returned.
1349	Executes the update query.
1350	Executes the count query.
1351	Returns the generated columns.
1352	Get the query string.
1353	Create a proxy instance of the target class.
1354	Creates a collection from the given iterator.
1355	Returns a stream that contains all the elements of the given iterator.
1356	Compares two objects using the comparators in this order.
1357	Set the default wiring mode.
1358	Print a message to the console.
1359	Get the caller class.
1360	Shortens the class name to be used in the class name generation.
1361	Exclude the given types from serialization.
1362	Serializes the given object to the given appendable.
1363	Serializes the given object to a string.
1364	Clone an object using serialization.
1365	Write an object to a file.
1366	Reads an object from a file.
1367	Serializes an object to a byte array.
1368	Convert a byte array to an object.
1369	Resolve the table names for the mapped types.
1370	Creates the table names for the given types.
1371	Read a column value.
1372	Cache the result set entities.
1373	Resolve providers for a given class and name.
1374	Converts the given table name to the entity name.
1375	Checks if the connection is valid.
1376	Renders a view.
1377	Locate the target for the given path.
1378	Returns the writer for this response.
1379	Returns the output stream for this response.
1380	Writes the content to the response.
1381	Sets the content type.
1382	Print a string to the output stream.
1383	Login via basic auth.
1384	Returns the token as a JSON object.
1385	Login via basic auth.
1386	Logs out the user.
1387	Converts a URL to a file.
1388	Creates a directory if it does not already exist.
1389	Creates a directory if it does not already exist.
1390	Copy a file to a destination file.
1391	Copy a directory.
1392	Moves a file to a new location.
1393	Move a directory from srcDest to destDir.
1394	Deletes all files and subdirectories of the given directory.
1395	Read all UTF - 8 characters from the given file.
1396	Read chars from a file.
1397	Write a set of characters to a file.
1398	Write a string to a file.
1399	Append string to file.
1400	Read count bytes from the given file.
1401	Write a byte array to a file.
1402	Append bytes to a file.
1403	Copies a file or directory to a file or directory.
1404	Deletes a file or directory.
1405	Creates a temporary directory.
1406	Checks if the given file is binary.
1407	Checks that the source and destination files are the same.
1408	Checks if the given file is a file and if it is a directory and if not creates
1409	Prints the usage of the command.
1410	Resolve action method.
1411	Register an action.
1412	Registers an alias for a path.
1413	Moves to the next iteration.
1414	Creates a new CharArraySequence from the specified array.
1415	Invoke the proxy method on the target object.
1416	Check if the input string matches uppercase.
1417	Creates a char sequence from the input.
1418	Returns the URLs of the given class.
1419	Sets the bcc addresses.
1420	Register a serializer for a given type.
1421	Lookup serializer for a given type.
1422	Parse the given input stream and add the uploaded files to the request.
1423	Returns the first value of the given parameter.
1424	Get the values of the specified request parameter.
1425	Gets a single request parameter.
1426	Gets the request files for the given parameter name.
1427	Initializes this filter.
1428	Parse the template string and append it to the sql builder.
1429	Find the end of the first space - delimited macro.
1430	Count the number of escape characters in the template.
1431	Build a query string from a multi - map.
1432	Parses a query string into a map of query parameters and values.
1433	Prepares a header parameter name.
1434	Extract media type from content type.
1435	Render the given node to HTML.
1436	Converts a node to a string of HTML.
1437	Configures the Madvoc with the servlet context.
1438	Reset the state of the Path object.
1439	Sets whether the parser should be lazy loaded.
1440	Replace the target class with a mapped type for the given path.
1441	Parse as list.
1442	Parse a JSON string into a map of the specified key and value types.
1443	Resolves the value of a lazy property.
1444	Skips over an object.
1445	Parses a string.
1446	Parse the string content.
1447	Parse Unicode character.
1448	Parse an unquoted string.
1449	Parse a number.
1450	Parses the array content.
1451	Creates an empty constructor.
1452	Creates a simple method wrapper.
1453	Resolves the raw type name.
1454	Resolve a reference from a property value.
1455	Resolve a reference from a method or constructor.
1456	Reads all the references from the given method or constructor.
1457	Build the default references for the given method or constructor.
1458	Build a default reference for a property.
1459	Remove all duplicate names from the given array of BeanReferences.
1460	Convert the references to BeanReferences.
1461	Convert an annotation value to a list of BeanReferences.
1462	Run JoddJoy.
1463	Finds a method in the given class.
1464	Find a constructor that accepts the given parameter types.
1465	Resolves all interfaces of the given type.
1466	Compares two arrays of classes.
1467	Force access to an object.
1468	Create a new instance of the given class with the given parameters.
1469	Get the superclasses of the given class.
1470	Returns the first class that is a direct child of the given class.
1471	Returns a jar file for the given class.
1472	Sleep for a given amount of time.
1473	Sleeps for a long time.
1474	Wait for the given object to be done.
1475	Creates a thread factory that creates a daemon thread with the given name and priority.
1476	Get the value of the supplier.
1477	Visits a parameter.
1478	Visits an annotation.
1479	Visits a type annotation.
1480	Visits a parameter annotation.
1481	Visits a field instruction.
1482	Generates an instruction that is executed by the current method.
1483	Generates a InvokeDynamicInsn.
1484	Visits a jump instruction.
1485	Generates an instruction that multi - array of values.
1486	Visits a try - catch block.
1487	Visits a local variable annotation.
1488	Converts the given properties to a writer.
1489	Read the next chunk of data from the input stream.
1490	Moves the cursor to the next element.
1491	Moves the cursor to the next result set.
1492	Joins the given arrays into a single array of the same type.
1493	Joins the arrays into a new array of the given type.
1494	Resize the given array to a new size.
1495	Appends an element to the end of the buffer.
1496	Remove the specified length elements from the specified array.
1497	Returns the index of the first occurrence of the specified value in the specified array or - 1
1498	Returns the index of the specified value in the specified array or - 1 if the value is
1499	Returns the index of the first occurrence of the specified sub - array within the specified startIndex.
1500	Enables XHTML parsing.
1501	Parse the given content.
1502	Parse the Lagarto document.
1503	Compute the maximum stack and local stacks for the current control flow graph.
1504	End the current basic block with no successor.
1505	Collect attribute prototypes.
1506	Injects the context of the given object.
1507	Registers a new pseudo class.
1508	Lookup a pseudo class.
1509	Invoke the action.
1510	Get all bean property names.
1511	Visit all properties in the bean.
1512	Checks if the given property name matches the given rule.
1513	Resolve all bean bean methods of a given type.
1514	Read the filter configuration parameters.
1515	Send the bundle file to the HttpServletResponse.
1516	Lookup a bundle file.
1517	Look up the gzip bundle file.
1518	Registers a bundle for the given context path action path and sources.
1519	Create a digest from the given source string.
1520	Creates a bundle file.
1521	Deletes all the files that were created by this bundle.
1522	Fixes relative URLs in the given CSS content.
1523	Update a column of an entity.
1524	Creates a table reference name from the entity class name.
1525	Get the database session.
1526	Convert the given value to an array of elements.
1527	Parse a signature and return a map of the generic types.
1528	Resolve the given type to a list of SetInjectionPoints.
1529	Check if the given property type is excluded from the JSON serialization.
1530	Open a connection for the query.
1531	Open the current transaction.
1532	Close the current transaction.
1533	Commits the current transaction.
1534	Rolls back the current transaction.
1535	Create a new Properties object from a properties file.
1536	Create a new Properties object from a string.
1537	Load properties from a string.
1538	Returns a subset of the properties that start with the specified prefix.
1539	Create a new Properties object from the classpath.
1540	Get a property from a map.
1541	Resolves all the variables in the given properties.
1542	Resolve a property from a map.
1543	Resolve the scope pattern.
1544	Get the transaction mode for a method.
1545	Registers the annotations.
1546	Read transaction annotation.
1547	Checks if the given node matches any of the selectors.
1548	Checks if the node is an element.
1549	Checks if the selector matches the node.
1550	Unescapes the given value.
1551	Build the list of packages that are used by the JRE.
1552	Clone this node to the given node.
1553	Detaches this node from its parent.
1554	Add child nodes.
1555	Inserts a new child node at the given index.
1556	Inserts a new child before the given reference child.
1557	Inserts the specified child nodes before the specified reference node.
1558	Inserts a new child after the given reference child.
1559	Inserts the given child nodes after the given reference node.
1560	Removes all child nodes from this node.
1561	Find child node with given name.
1562	Returns the child nodes that match the given predicate.
1563	Check if the node is valid.
1564	Initializes the child element nodes.
1565	Initializes the sibling name index.
1566	Initializes the child nodes.
1567	Recursively changes the owner document of the given node and all its children.
1568	Returns the previous sibling with the same name.
1569	Get the text content of the element.
1570	Get the HTML representation of this node.
1571	Get the HTML representation of this node.
1572	Visit all children of this node.
1573	Get the CSS path of this node.
1574	On decora tag.
1575	On id attribute start.
1576	Define the DecoraTag.
1577	Add a proxy aspect.
1578	Adds a root package and a mapping to the list of packages and mappings.
1579	Add a root package of the given action class.
1580	Find the root package for the given action path.
1581	Resolves the validation message for a given violation.
1582	Remove duplicate names.
1583	Add a new property file to be read from.
1584	For each target in the chain.
1585	Iterate over targets and injection points in the specified scope.
1586	Iterate over targets and out injection points.
1587	Extract the parameter values.
1588	Creates the targets for the action.
1589	Create an action method argument.
1590	Session created.
1591	Session destroyed.
1592	Adds the specified value to this array.
1593	Adds all elements of the specified array to this array.
1594	Remove the element at the given position.
1595	Resolve the target for the given result value.
1596	Send a 404 Not Found response.
1597	Convert the given value to a string.
1598	Add an action filter to the router.
1599	Returns the pseudo function name.
1600	Resolve all the fields of the given type.
1601	Creates a SOCKS4 proxy socket.
1602	Returns the number of attributes in this node.
1603	Returns a set of all action results.
1604	Check if a character is equal to a given char sequence.
1605	Finds the first occurrence of a character in a CharSequence that is equal to the specified match.
1606	Finds the first occurrence of a character in the array that is equal to the specified match.
1607	Adds command line arguments.
1608	Adds a environment variable.
1609	Run the command.
1610	Invoke a listener of a given type.
1611	Copy the contents of the given frame.
1612	Converts an object type from the API format to an abstract type.
1613	Returns the abstract type from the descriptor.
1614	Sets the input frame from the API format.
1615	Returns the type of the local.
1616	Sets the local variable.
1617	Pushes an abstract type onto the output stack.
1618	Pushes the abstract type out of the given descriptor.
1619	Pop the specified number of elements from the output stack.
1620	Pop the descriptor from the stack.
1621	Adds an initialized type to the initialization array.
1622	Returns the type of the abstract type.
1623	Puts an abstract type into the given ByteVector.
1624	Removes expired entries from the cache.
1625	Schedules a prune.
1626	Visits a module.
1627	Visit the NestHost.
1628	Visit an outer class.
1629	Visits an annotation.
1630	Visits a NestMember.
1631	Visit an inner class.
1632	Visits a field.
1633	Get the current thread session.
1634	Close the current thread s session.
1635	Creates the array of action wrappers to be executed after the action and interceptors.
1636	Invoke the action method.
1637	Read the request body.
1638	Calculate the first item index of a page.
1639	Calculate the first item in a list that matches the given page request.
1640	Checks if the given value is a multiple of the two numbers.
1641	Convert a char array to a byte array.
1642	Finds the first occurrence of a character in the source array that is not equal to the given
1643	Resolves the node name.
1644	Resolve attribute name.
1645	Renders an attribute.
1646	Load properties from a file.
1647	Load properties from a file.
1648	Load properties from a stream.
1649	Load properties from a map.
1650	Load properties from a map.
1651	Load properties from classpath.
1652	Get the value of a key.
1653	Sets a property value.
1654	Extract the properties of this profile to the given target map.
1655	Extract properties from the properties file.
1656	Extract sub - properties from the current active profiles.
1657	Get the inner map of the active profiles.
1658	Adds a inner map.
1659	Resolve the active profiles.
1660	Get all profiles.
1661	Returns the names of all profiles that match the given wildcard.
1662	Adds a Property Injection Point to the list of properties.
1663	Adds a SetInjectionPoint to the list of sets.
1664	Adds a method injection point.
1665	Add init method points.
1666	Add destroy method points.
1667	Resolve the target class.
1668	Inject target into wrapper.
1669	Get the wrapper target type.
1670	Find a field in this class or in its superclasses.
1671	Returns the type of the field.
1672	Resolves the key type of this field.
1673	Resolves the component type of this field.
1674	Returns a JSON representation of the given object.
1675	Creates a JSON response with the given exception.
1676	Resolve the HTTP method from the method name.
1677	Match string against pattern.
1678	Resolves the loading strategy.
1679	Resolve the loading strategy for the given resource.
1680	Loads a class.
1681	Returns the URL of the resource.
1682	Wait for the task to finish.
1683	Detect annotation type.
1684	Build InjectionPoint.
1685	Visit the class.
1686	Get the URLs of the given class.
1687	Sets the bean.
1688	Update the bean.
1689	Loads the property descriptor.
1690	Returns the getter for this property.
1691	Returns the setter for this property.
1692	Connect to the database.
1693	Adds an iterator to the list.
1694	Print logo.
1695	Stop the Joy.
1696	Creates a socket.
1697	Creates a new SSL socket.
1698	Get the default SSLSocketFactory.
1699	Get the socket factory for the proxy.
1700	Creates a random string of the specified length.
1701	Generate a random string.
1702	Generate a random string of the specified length.
1703	Create a new instance of the given target type.
1704	Injects the given value into the given object using the given property descriptor.
1705	Convert value to target type.
1706	Visit a provide.
1707	Creates a default cache.
1708	Put a value of the given type.
1709	Get all the MethodDescriptors.
1710	Resolves an IP address from a hostname.
1711	Get ip as int.
1712	Validates the input string for the Againt IP Adress version 4 format.
1713	Resolve the hostname from an IP address.
1714	Download the content of the given URL into a byte array.
1715	Download a string from a URL.
1716	Download a file from the given URL.
1717	Injects the servlet context and targets into the action request.
1718	Outjects the given request.
1719	Connects to a server on the given port.
1720	Connects to a host on the specified port.
1721	Returns the index of the primitive class name.
1722	Loads a class using the given class loader.
1723	Loads an array class by component type name.
1724	Shutdowns the bean manager.
1725	Returns a binary search implementation for the given array.
1726	Creates a binary search implementation for the given array.
1727	Exclude the given rules from the result.
1728	Include the given rules.
1729	Include all properties of the given type as a bean.
1730	Sets the start of the tag.
1731	Register a component with the Madvoc WebApp.
1732	Resolve the column s database SQL type.
1733	Preprocess the SQL string.
1734	Create a ResultSetMapper.
1735	Find a generated key.
1736	Populate the generated keys of the given entity.
1737	Create a wrapper bean.
1738	Sets the bean.
1739	Sets the query parameters.
1740	Sets the objects to be inserted into the result.
1741	Inserts a chunk after another chunk.
1742	Lookup the entity type.
1743	Find the table descriptor for the given column reference.
1744	Resolve the table name for the given table reference.
1745	Resolve the class of the given object.
1746	Append a space to the given string builder.
1747	Returns an enumeration of the file parameter names.
1748	Include a page in the response.
1749	Get the url from the servlet path and query string.
1750	Returns the request URI.
1751	Resolve the parameter names for the given action class method.
1752	Start the petite application.
1753	Stop the PETITE container.
1754	Method allow to filter email by subject.
1755	Filter by message id.
1756	Filter by email address.
1757	Filter by email to address.
1758	Method allow to filter by the cc recipient.
1759	Filter by bcc address.
1760	Filter email by flags.
1761	Add a flag to the email.
1762	Filter by received date.
1763	Filter by sent date.
1764	Filter by size.
1765	Add additional filters to the filter.
1766	Add additional filters to the filter.
1767	Add a not filter to the query.
1768	Concatenate the given search term with this one.
1769	Encodes the given byte array into a base32 string.
1770	Convert value to byte array.
1771	Checks if gzipping is eligible for the given request.
1772	Validates the given object against the validation context.
1773	Validates the given target object against all the constraints.
1774	Enable a profile.
1775	Enable the given profiles.
1776	check if the profile is enabled
1777	Parse request body.
1778	Get the milliseconds since January 1st 1970.
1779	Adds two JulianDate objects.
1780	Subtracts the given JulianDate from this one.
1781	Sets the integer and the fraction.
1782	Initializes the parser with the given input.
1783	Emit a comment.
1784	Log an error.
1785	Creates a hash from the given password.
1786	Derive a PBKDF2 key from a password and salt.
1787	Converts a hex string to a byte array.
1788	Resolve provider definitions.
1789	Sets the name of the attachment.
1790	Sets the content id from the name if missing.
1791	Resolves the content type.
1792	Parses a JavaTypeSignature and calls the given visitor for each type.
1793	Compute the size of the attributes of the module.
1794	Puts the attributes of this module into the specified ByteVector.
1795	Decodes the given string using the given encoding.
1796	Decodes a query string.
1797	Start the database.
1798	Check if the connection provider is still open.
1799	overrides the visitor to add the method signature to the method signatures map and return a MethodAnnotation
1800	Visit the end of the class.
1801	Create a new method signature visitor.
1802	converts an array of objects to a comma - separated string
1803	Converts a line of text into an array of strings.
1804	Resolves a CtorInjectionPoint for the given type.
1805	Creates a class reader for the given advice class.
1806	Get the cached class reader for the given advice.
1807	Encrypt a string using the specified cipher.
1808	Decrypt the given string using the given D cipher.
1809	Get a logger by name.
1810	Sets the cookie name.
1811	Create an ActionRequest.
1812	Create a wrapper bean.
1813	Destroy a bean.
1814	Shutdown the bean manager.
1815	Get the list of received emails.
1816	Launches the ClusteredServiceContainer.
1817	Run the reporting loop.
1818	Print an error message.
1819	Print the rate of messages per second.
1820	Map an existing file read - only.
1821	Closes the connection.
1822	This method will block until the next work is done.
1823	Returns the current position in the log file.
1824	Offer a message to the queue.
1825	Append padding to the current position.
1826	Closes the AeronClient.
1827	Poll for error response.
1828	Stop a replay.
1829	Event handler for image available.
1830	Event that indicates that an image is unavailable.
1831	Returns a StatusIndicatorReader for the specified channel.
1832	Creates a StatusIndicatorReader for a channel.
1833	Sets the limit for the buffer.
1834	Appends a portion of data from the given buffer to this buffer.
1835	Poll for a fragment.
1836	Map the loss report file to a byte buffer.
1837	Creates a snapshot of the stream state.
1838	Creates a default header buffer.
1839	Set the key buffer.
1840	Adds a label to the message.
1841	Connects to a specific response channel.
1842	Try to connect to a specific response channel.
1843	Sends a close request to the client.
1844	Sends a startRecording request to the server.
1845	Stop recording a message.
1846	Replays a message.
1847	Stop a replay.
1848	Offer a list of recordings.
1849	List recordings for a URI.
1850	Sends a list recording request to the remote end of the connection.
1851	Extend a recording.
1852	Gets the recording position.
1853	Get stop position.
1854	Offer a list of subscriptions to the control session.
1855	Checks if the given udp channel matches this tag.
1856	Replies the destination address for the given channel.
1857	Returns a string describing this udp channel.
1858	Adds a destination to the list of image connections.
1859	Inserts a packet into the term buffer.
1860	Find the control toggle counter.
1861	Adds a parameter to the request.
1862	Returns the channel tag.
1863	Returns the entity tag.
1864	Add session id to channel uri.
1865	Returns the tag value of the given parameter value.
1866	Appends padding to the end of the term buffer.
1867	Update the publisher limit.
1868	Allocate a new buffer position.
1869	Returns the label name for the given type ID.
1870	Scan for available bytes in the given buffer.
1871	Clears the internal state of this builder.
1872	Validates this URI builder.
1873	Sets the prefix for this builder.
1874	Sets the media to be appended.
1875	Sets the control mode.
1876	Sets the term length.
1877	Sets the offset of the term buffer.
1878	Sets the lingering time.
1879	Open the datagram channel.
1880	Closes the connection.
1881	Checks if a frame is valid.
1882	Receive a packet.
1883	Called when a term is no longer available.
1884	Process timeouts.
1885	Returns a human readable string for the given status.
1886	Allocate a new AtomicCounter.
1887	Resets the contents of this buffer vector to the given buffer and offset and length.
1888	Validates that the buffer is valid.
1889	Validates the given vectors and computes the total length.
1890	Calculates the length of the term window.
1891	Validate that the socket buffer lengths are valid.
1892	Validates the page size.
1893	Validates that the given low and high session id values are within the allowed range.
1894	Validates that publicationUnblockTimeoutNs is less than or equal to clientLivenessTimeoutNs
1895	Set error code.
1896	Resets the state of the state machine.
1897	Encodes the given array of cluster members into a string.
1898	Adds the publication information for the given members to the given Aeron.
1899	Close all the publication for the given cluster members.
1900	Checks if the given cluster members have an active quorum.
1901	Returns the quorum position of the cluster.
1902	Reset log positions of all members.
1903	Checks if the given position is within the given leadership term.
1904	Checks if the member count is not too large to meet the quorum threshold.
1905	Checks if the cluster member has a majority vote.
1906	Determines the cluster member.
1907	Validate that the clusterMember and the given endpoints are the same.
1908	Checks if two cluster members have the same endpoints.
1909	Checks if the given candidate is an unanimous candidate.
1910	Checks if a candidate is a quorum candidate.
1911	Check if the given endpoints are not duplicated.
1912	Find the index of a member in the cluster.
1913	Remove a member from the given array.
1914	Returns the highest member id in the given array of cluster members.
1915	Map existing CnC file.
1916	Checks if a driver is active.
1917	Checks if the driver is active.
1918	Check if a driver is active.
1919	Request a driver termination.
1920	Read the length of the frame in the buffer at the given offset.
1921	Writes the length of a frame to the given buffer in order.
1922	Writes the frame type to the given buffer at the given offset.
1923	Writes the frame flags to the buffer.
1924	Writes the term offset to the given buffer.
1925	Writes the given term ID to the given buffer at the given offset.
1926	Find the counter id by recording id.
1927	Find the counter id for a given session.
1928	Returns the recording id for the given counter.
1929	Checks if the given recording is active.
1930	Adds application specific feedback to the message.
1931	Reloads the entries from the file.
1932	Find the last TERM entry.
1933	Creates a new RecoveryPlan from the given AeronArchive.
1934	Creates a new recovery plan from the given list of snapshots.
1935	Append a term entry to the log.
1936	Append a snapshot entry.
1937	Commits a log position to the log.
1938	Tombstone an entry.
1939	Closes the connection to the Aeron server.
1940	Offer a vector of data to the buffer.
1941	Unblocks a term from the log.
1942	Returns the channel name.
1943	Sets the channel name.
1944	Checks that the term length is a power of two.
1945	Checks that the given page size is a power of two.
1946	CAS the number of active log lines in the metadata buffer.
1947	Computes the position of the term in the table.
1948	Compute the log length for a term.
1949	Store the default frame header in the metadata buffer.
1950	Apply the default header to the metadata and term buffers.
1951	Rotate the log by moving the tail to the next termId.
1952	Initialise the tail counters for the given partition and term id.
1953	Returns the offset of the term in the rawTail.
1954	Get the tail of the current thread s metadata.
1955	CAS the raw tail counter for a partition.
1956	Writes a token buffer to the driver Flyweight.
1957	Allocate a new Counter.
1958	Find the counter id.
1959	Checks if the given counter has a replay.
1960	Get the snapshot recording id for a given counter.
1961	Converts a flags value into a character array.
1962	Set the channel name.
1963	Offer a buffer to the cluster.
1964	Wrap the buffer with the given offset and length.
1965	Commits the current frame to the buffer.
1966	Aborts the current request.
1967	Main method of the MediaDriver.
1968	Close all the runners.
1969	Returns the current position in the frame.
1970	Allocate a counter.
1971	Find the counter id.
1972	Creates a snapshot of the stream backlog.
1973	Allocate a new AtomicCounter.
1974	Close the connection.
1975	Dispatches a recording descriptor to a consumer.
1976	Adds a new slab to the list of slabs.
1977	Set a byte value at a given index.
1978	Adds the given statistics to this statistics object.
1979	Calculates the row ranges for the given filter.
1980	Convert an array type.
1981	Convert a struct type to a group type.
1982	Annotate a message with the given position.
1983	End the previous bit - packed run.
1984	Read one value from the wire.
1985	Read the footers from the given file.
1986	Read a summary file and merge footers into a single footers.
1987	Read a parquet file with a specified metadata filter.
1988	Reads the next row group.
1989	Reads the next row group in the current block.
1990	Read a dictionary page.
1991	Adds a writer to the list of writers to be used.
1992	Remove a writer from the list.
1993	Update the total allocation of the Parquet records.
1994	Register a callback to be called when a scale is requested.
1995	Start the stream.
1996	Start a new block.
1997	Start a new column.
1998	Writes a single dictionary page.
1999	Writes a single data page.
2000	Writes a single column chunk.
2001	Ends the current block.
2002	Copies the specified number of bytes from the specified input stream to the specified output stream.
2003	End the parquet file.
2004	Merge metadata from multiple files into a single metadata object.
2005	Write the merged metadata file.
2006	Write the metadata file for the given footers.
2007	Merge the given file metadata into the given global metadata.
2008	Reads a value from the current position in the column.
2009	Checks if a schema is a null value.
2010	Returns the first non - null object in the given array or null if none is found.
2011	Convert a string into an object of the appropriate type.
2012	Creates a ThriftMetaData object from the given extra metadata.
2013	Creates a ThriftMetaData object from a Thrift class.
2014	Returns the extra metadata for this Thrift object.
2015	Writes a null value.
2016	Writes a single page.
2017	Initializes the delta binary packing from a page of data.
2018	Allocate the values buffer.
2019	check if the expected ThriftType is an enum
2020	Calculates the bit widths for the deltaBlockBuffer.
2021	Throws an exception if it is an instance of the specified class.
2022	Get statistics based on the given type.
2023	Creates a builder for reading the given primitive type.
2024	Merges the given statistics into this statistics.
2025	Returns the non - null schema if the schema is a union.
2026	Create a new TaskAttemptContext instance.
2027	Invoke a method on an object.
2028	Prints out the members of this struct as a string.
2029	Merge fields from this group into the given group.
2030	Initializes the counter from the given Reporter and Configuration.
2031	Get the filter to use for this record.
2032	Read all the footers from Parquet.
2033	Generate splits from row groups of blocks.
2034	Writes a single record to the log.
2035	Validates that the mapping of the fields in the descriptor matches the parquet schema.
2036	Serialize the descriptor of the given class.
2037	Creates a codec factory that uses the given configuration to allocate memory for the underlying stream.
2038	Amends missing required fields.
2039	Check if the next event is a set.
2040	Read file meta data from the given input stream.
2041	Closes the record writer.
2042	Set the schema for the group.
2043	Adds a class and its primitive type to the maps.
2044	Asserts that the given primitive type is valid for the given column.
2045	Casts a long value to an int throwing an exception if overflow occurs.
2046	Creates a mapping from an arrow schema.
2047	Creates a mapping from a parquet schema.
2048	Maps the fields of the given schema to the corresponding types of the given schema.
2049	Write a data page header.
2050	Skips to the next record that matches the given filter.
2051	Writes an object to the configuration as base64.
2052	Remove the entry for the given key.
2053	Adds a new entry to the cache.
2054	Returns the current value for the given key. If the value is not currently in the cache
2055	Writes the value to the avro schema.
2056	Writes the value to the record without converting it to the avro schema.
2057	Sets the glob pattern.
2058	Output content to a file.
2059	Open a file for reading.
2060	Creates a filter that only returns records that match the given column predicate.
2061	Convert a struct type to Thrift schema.
2062	Create a list wrapper.
2063	Construct a list type with the given element type.
2064	Returns a map of key - value pairs that are merged with the key - value pairs.
2065	Get a split for the parquet file.
2066	Get a map of fields by name.
2067	Resolve schema access.
2068	Get the input files from the input list.
2069	Checks that all files in the list are parquet files.
2070	Get the input files from the given directory.
2071	Creates a filter that filters records by page.
2072	Construct a ListConsumer from an consumer that consumes a list of objects.
2073	Initialize the mapred work.
2074	Merge the tuple data into a summary data.
2075	Sum up tuples.
2076	Reads a struct from the stream.
2077	Reads a map entry.
2078	Writes an int value to the input buffer.
2079	Reads an int from the given offset in little endian order.
2080	Set the Avro schema.
2081	Create a topic if it does not exist.
2082	Duplicate the PipelineStageBeans.
2083	Creates a stage bean.
2084	Creates all the interceptors for the given stage.
2085	Creates an interceptor.
2086	Parse a schema string.
2087	Convert a millisecond timestamp to a number of days.
2088	Get the avro schema from the given header.
2089	Upgrade from V1 to V2.
2090	Returns the length of the stream.
2091	Copy the given blobstore resources to the staging blobstore.
2092	Resets the internal state of this object.
2093	Report the thread s health.
2094	Register a thread s health report gauge.
2095	Store the new configs for the control hub.
2096	Checks the given web credential against the current user.
2097	Upgrades the schema if needed and then the data if needed.
2098	Upgrade the configuration to the latest version of the stage if it is not already there.
2099	Upgrade the given stage configuration if it is not already up to date.
2100	Upgrade the service if necessary.
2101	Upgrade the given stage if necessary.
2102	Gather all fields that should be null.
2103	Checks if the given class name is a system class.
2104	Adds the specified element to the end of the queue.
2105	Adds the specified element to the queue and returns the evicted element if the queue is full
2106	If value is present return it otherwise invalidate it.
2107	Add reported errors to the list of stages output if necessary.
2108	Get the descriptor for the given proto descriptor file.
2109	Get all FileDescriptors from a FileDescriptorSet.
2110	Populates the default values of all extensions and fields.
2111	Get the Descriptor for a given message type.
2112	Converts a message from a protobuf file to a sdc field.
2113	Convert a Record to a DynamicMessage using the given descriptor.
2114	Convert a SDC field to a protobuf message.
2115	This method is used to upgrade the configuration bean to a Jersey config bean.
2116	Checks that the Kudu client is connected to the Kudu master.
2117	Convert Kudu data type to Field. Type.
2118	Creates a Field object from a row of data.
2119	Intercepts the given records using the given interceptors.
2120	Returns the text in the current chunk.
2121	Adds missing configurations to the given stage.
2122	Parse the response.
2123	Adds the response headers to the response.
2124	Write the response headers to the output field.
2125	Write the response header to the Record header.
2126	Saves the metadata to disk.
2127	Configures the client.
2128	Parse the headers only.
2129	Increment the source offset.
2130	Parse a paginated result record.
2131	Adds the response headers to the header.
2132	Resolves the headers.
2133	Process the response and return the offset.
2134	Check if a property is defined in the configuration.
2135	Convert a DataParserException to a DataParserException.
2136	Convert a DataGeneratorException to a DataGeneratorException.
2137	Reads credentials from a file.
2138	Preview a pipeline. Preview a pipeline.
2139	Copy the given character to the buffer.
2140	Removes any logical duplicates from the given set of packages.
2141	Empty the batch.
2142	Finds the next main line in a chunk.
2143	Resolves a chunk into a complete chunk.
2144	Closes the current connection.
2145	Escapes a quoted substring.
2146	Returns the flow control settings.
2147	Creates a channel provider for the subscription.
2148	Puts a batch of messages into the data channel.
2149	Compiles a string expression into a Grok pattern.
2150	This method calculates the digest of the given expression.
2151	Adds a dictionary from the given input stream.
2152	Adds a dictionary from the specified Reader.
2153	Stop the timer and return the data.
2154	Roll the data window to the new window and aggregate the data windows.
2155	Serialize an object to a JSON string.
2156	Deserialize a string into an object of the specified type.
2157	Deserialize a file into an object of the specified type.
2158	Writes the record to the destination.
2159	Resolve an EL expression.
2160	Generate the inner field from the original list.
2161	Get the table name from the given record.
2162	Get the database name from the given metadata record.
2163	Get the internal field of a record.
2164	Get the location of the record.
2165	Get the custom location for a record.
2166	Get AVRO schema from metadata record.
2167	Get the data format from the given metadata record.
2168	Creates a new schema change metadata field.
2169	Validate partition information.
2170	Generate partition path.
2171	Serializes AVRO schema to HDFS.
2172	Sets the parameters for the given operation.
2173	Get system configuration. Retrieves system configuration.
2174	Parse an RFC 3164 time string into a timestamp.
2175	Format a string with the given arguments.
2176	Start the batch.
2177	Checks if the record contains all the fields in the solr fields map. If not it will
2178	Filters out the field names that are not already in the autogeneratedFieldNamesMap.
2179	Sends an OnRecordErrorException to the errorRecordHandler.
2180	Parse the given jar name and return the dependency.
2181	Parse a URL into a dependency.
2182	Creates a CouchbaseConnector instance.
2183	Closes the Couchbase instance.
2184	Validates the given configuration for CouchDB.
2185	Converts a string representation of an operation code into a label.
2186	Verifies that the dependency exists.
2187	Read a secret from Vault.
2188	Get the write operation from the header.
2189	Writes a document to CouchDB.
2190	Build a subdoc mutation.
2191	Creates the SQL string to alter a table.
2192	Configures the SASL kernel with the given configuration.
2193	Takes messages from the producer and returns them.
2194	Commits the last committed offset.
2195	This method is called when an error occurs.
2196	Injects the given stage with the given stage definition and stage configuration.
2197	Get definitions. Returns all definitions.
2198	Get publisher definition.
2199	Format the column name.
2200	Format the given value.
2201	Get information about a pipeline. Retrieves information about the pipeline.
2202	Create a draft pipeline fragment. Create a draft pipeline fragment.
2203	List pipelines. List pipelines that match the specified criteria.
2204	Import a pipeline fragment. Import a pipeline fragment into the specified pipeline.
2205	Get the file path for a record.
2206	Get the JDBC operation code from the given record.
2207	Returns the field path for the given column name.
2208	Poll the event queue.
2209	Get a runner from the queue.
2210	Get the runner that has been used for at least the given time.
2211	Return a runner to the pipeline.
2212	Destroys this runner.
2213	Validate that the pipeline is not destroyed.
2214	Checks whether the given stream exists.
2215	Get the last shard id for the given stream.
2216	Process the queue of records.
2217	Override handleSqlException to handle SQL exception.
2218	Get the column hash for the given record.
2219	Compares two files.
2220	Retrieve the PID of the process if possible.
2221	Validate and extract fields to hash.
2222	Creates a proxy user object.
2223	Roll the active stats.
2224	Creates a snapshot of the current state of the timer.
2225	Ensure that the directory exists.
2226	Writes the records in the given batch to the given writer.
2227	Writes the records in the batch to the specified writer.
2228	Writes records to the specified cache.
2229	Triggered No More Data Event
2230	Detects a new partition.
2231	Updates a record in HDFS.
2232	Process the given value with the given group.
2233	Checks if two stages have the same version.
2234	Main method that runs the Mesos cluster.
2235	Configures the authentication and builds the client.
2236	Resolve the headers for a record.
2237	Get HTTP method from expression
2238	Fill in the bindings with the types of NULL.
2239	Get the value of a field as a typed null.
2240	Load a schema from the registry.
2241	Register a schema.
2242	Load schema from registry.
2243	Get the schema id for a given subject.
2244	Load schema from registry.
2245	Writes the schema id to the stream.
2246	Detect schema id.
2247	Get the default values for the given schema.
2248	Parse all records in the given payload.
2249	Log the results of the validation.
2250	Get the bad records from the error sink.
2251	Initializes the schema generator.
2252	Returns the outward edge vertices for the given vertex.
2253	Returns the inward edge vertices for the given vertex.
2254	Serialize the given offset map.
2255	Deserializes the offset map from the last offset string.
2256	Queues a report for later processing.
2257	Get a report from the server.
2258	Checks if the check point exists on the hdfs path.
2259	Writes offsets to the main offset file.
2260	Deletes the blob with the given id.
2261	Handles the error.
2262	Handles the archiving of a blob.
2263	Returns a LiveFileReader for reading from the current file.
2264	Releases the reader.
2265	Set the base URL for the DPM API endpoints.
2266	Add a default header to the request.
2267	Parse a date from a string.
2268	Escape a string for use in a URL.
2269	Get the client for the given path.
2270	Initializes the connection to the GPU.
2271	Get the type of the table
2272	Create bulk inference.
2273	Creates a builder for the given event context.
2274	Build a schema from a map of fields and levels.
2275	Converts an Oracle operation code to the SDC code.
2276	Add jars to the job configuration.
2277	Add jars to the job.
2278	Check if the field is in the order by list.
2279	Checks if the given condition expression context contains a field expression.
2280	Get the lag for a file offset.
2281	This method is called before bootstrap.
2282	Get the parallelism of the Kafka consumer.
2283	Runs a BigQuery query.
2284	Converts a list of fields to a map of fields.
2285	Get the table description
2286	Validate that the table accepts inserts.
2287	Get the column type for a field.
2288	Checks if the field is nullable.
2289	Get the schema for a table
2290	Get the column properties for the given table.
2291	Returns the class corresponding to the given type name.
2292	Initializes the Aerospike bean.
2293	Get the topic for a record.
2294	Upgrades from version 5 to version 6.
2295	Returns an input stream for the file.
2296	Returns an OutputStream to write the file.
2297	Checks if the file exists.
2298	Parse a string into a FsPermission object.
2299	Checks that all services are available.
2300	Create a new SimpleAggregator instance.
2301	Returns the unit of the aggregator.
2302	Create an AggregatorData object from a class.
2303	Creates a new GroupByAggregator.
2304	Starts the data data window.
2305	Stops the aggregator.
2306	Roll the data series to the next window.
2307	Acquires a login manager.
2308	Release the login manager reference.
2309	Converts a glob to a regular expression.
2310	Returns a list of objects in lexicographically from s3Offset to s3Offset
2311	Stops the pipeline.
2312	Produce an empty batch for all runners that are idle.
2313	Create a failure snapshot for the pipeline.
2314	Convert a record to a BoundStatement.
2315	Set the configuration.
2316	Generates a KuduLookupKey from the given record.
2317	Handle partitioning turned off or on.
2318	Read a line from the input stream.
2319	Roll the usage timer down to the last value.
2320	Enables DPM.
2321	Disable the DPM for the given user.
2322	Normalizes the base URL for the DPM.
2323	Retrieve the user token from the server.
2324	Logout from the DPM.
2325	Update the token file with the given app auth token.
2326	Update the DPM properties.
2327	Creates a schema field for the given field.
2328	Returns a schema for the given field in the given record.
2329	Get the decimal scale or precision from the given field attribute.
2330	Returns the default value for the given schema.
2331	Initialize the metrics if needed.
2332	Compares two files.
2333	Returns the index of the group with the given name and index.
2334	Returns a list of all the group names.
2335	Checks if the character at the given position is an escaped character.
2336	Checks if the given position is an escaped slash.
2337	Checks if the given position is inside a class.
2338	Count the number of open parentheses in a string starting at a given position.
2339	Extract the group info from a named pattern.
2340	Replaces all occurrences of the given pattern with the given replacement.
2341	This method is called when a GET request is received.
2342	Refresh the schema for a table.
2343	Checks if the given entry is expired.
2344	Returns the current offset in bytes.
2345	Fast forward to the current position.
2346	Creates a detached stage.
2347	Convert string to Appropriate Number.
2348	Parses a single partition of a record.
2349	Parses the values.
2350	Lookup the primary keys for the table.
2351	Create the custom field mappings.
2352	Returns the SQL type name for the given field type.
2353	Returns the table name.
2354	Sets the primary keys in the given record to the given statement.
2355	Handle a JDBC exception.
2356	Process the pipeline.
2357	Prepare the batch context for the pipeline.
2358	Finishes the current batch and calculates metrics.
2359	Flattens the entire record.
2360	Creates a detached stage runtime.
2361	This method is called when a record is created.
2362	Get the columns to parameters.
2363	Returns the condition for the partition column.
2364	Validate that the offset is stored and that the columns in the offset are present in the table
2365	Returns the requested content generators.
2366	Returns an array of non - empty arguments.
2367	Get the operation object for the given operation code.
2368	Convert bytes to human readable format.
2369	Scan for a file in the current directory.
2370	Returns the number of pending files in the roll.
2371	Check if the given dependency is whitelisted.
2372	Checks if the expected versions are in the set.
2373	Main method that is invoked by the Spark Streaming Streaming application.
2374	Propagate the runtime configuration to all stages.
2375	Checks that the reportDescription is valid.
2376	Creates a JdbcRecordWriter.
2377	Creates a JdbcRecordWriter.
2378	V1 to V2 upgrade.
2379	Extract the named groups from the raw data.
2380	Commit the consumer message.
2381	Creates a new SDC instance.
2382	Set the fields in the record.
2383	Get the list of remote pipelines that have changed.
2384	Returns a result indicating that the data collector has been acknowledged.
2385	Create a gauge with the given name and gauge.
2386	Get the columns to parameters.
2387	Generate header attributes for a record.
2388	Validate the record.
2389	Delete old temporary files.
2390	Get an avro input stream for the given record.
2391	Get a DatumReader for the given input stream.
2392	Write the parquet file.
2393	Check if the field is a supported type.
2394	Checks if the given field is a encrypt field.
2395	Check input for decryption.
2396	Check that the input field is a byte array and if so return it.
2397	Prepare the data to be encrypted.
2398	Sets the parent pattern of this matcher.
2399	Append the replacement string to the given StringBuffer.
2400	Returns a map of named groups and their values.
2401	Replaces all occurrences of the pattern with the given replacement.
2402	Ensure that avroSchema exists in the given configurations.
2403	Get the value of a global variable.
2404	Creates a start event.
2405	Creates a stop event for the pipeline.
2406	Fix offset for Sobjects that have a decimal offset.
2407	Extract value from runtime field.
2408	Build and execute the alter table add partition query.
2409	Alter the table set table properties query.
2410	Describe a database.
2411	Executes a query.
2412	Executes a query and returns the result.
2413	Executes a batch of pipelines.
2414	Iterate through the pipeline.
2415	Returns the OffsetCommitTrigger for this pipeline.
2416	Checks if the pipeline has an OnRecordError. STOP_PIPELINE context.
2417	Accepts a consumer.
2418	Returns the row id for the given record.
2419	Get the value of a field.
2420	Sets the fragment in the given record.
2421	Sets the document in the given record.
2422	Sets the given row in the given record.
2423	Handles the whole file data format.
2424	Returns true if the incomplete transaction with the given ID and sequence number is greater than or equal
2425	This method is used to wrap the given class loader in a try catch block.
2426	Sets the stage creator.
2427	Logout from Kerberos.
2428	Set the exceptions from the configuration.
2429	Replaces variables in the given path.
2430	Ensure that the given path is whitelisted globally.
2431	Main method that is invoked by the bootstrap framework.
2432	Returns the path to the directory containing the given record.
2433	Rename the file at tempPath to the final name.
2434	Checks if the record should be rolled.
2435	Matches a string against a pattern.
2436	Get the offsets for the current file.
2437	Get remaining time remaining in milliseconds.
2438	Get the offsets lag from the file context provider.
2439	Creates a new instance of the given exported interface.
2440	Create a new instance of the specified interface for the specified stage library.
2441	Creates a new instance of the given delegator class.
2442	Get the value of a metric.
2443	Find the end of the header.
2444	Returns the size of the body.
2445	Save a buffer to a temporary file.
2446	Creates an SSLServerSocketFactory from a classpath containing a key and trust store.
2447	Get the MIME type for a file.
2448	Handle the session.
2449	Stops the HTTPD.
2450	Add the mappings to the router.
2451	Send the response to the given output stream.
2452	Send the body of the message to the given output stream.
2453	Creates a fixed length response.
2454	Returns true if gzip is enabled for this request.
2455	Set a cookie with the given name value and expiration time.
2456	Unloads the cookie queue.
2457	Decode base64 string.
2458	Encode the given string as base64.
2459	Sets the table name.
2460	Returns the name of the given principal.
2461	Inserts a Spring - specific filter that will be used to filter the session repository.
2462	Resolves the principal name from the given session.
2463	Returns a session for the given id.
2464	Get the name of the JNDI to use for the given operation.
2465	Returns the canonical names of the view method s parameter types.
2466	Register an InterposedSynchronization.
2467	This method is called before the transaction is completed. It calls the beforeCompletion method of all
2468	Get the current transaction.
2469	Add the module dependency to the deployment if any.
2470	Checks if the given persistence unit name is scoped to the cache region.
2471	Get the list of dependency names for the server configuration.
2472	Decrements the read lock count by one.
2473	Increment the read lock count.
2474	Add a service to the deployment.
2475	If the next expiration is in the future we don t care if it is in the past
2476	Add the search dependency to the deployment.
2477	This method is called when the bean is created from a static module.
2478	Create a JBoss agnostic meta data for a POJO webservice deployment
2479	Set the config name and config file from the web. xml context.
2480	Get the JSESecurityMetaData from the security constraints.
2481	Get the servlet url patterns mappings.
2482	Get the servlet class mappings for the given list of POJO endpoints.
2483	Resolve the EJBs.
2484	Get the connectors that are available on the active server.
2485	Parses the core environment element.
2486	Parses the process id environment element.
2487	Get the path address of the given operation.
2488	Sets the address of the operation.
2489	Get the attribute value of the given operation.
2490	Returns true if the operation has the INCLUDE_DEFAULTS attribute set.
2491	Creates a composite operation with the given operations.
2492	Create an add operation with the given address and parameters.
2493	Create an add operation that will add the specified resource at the specified address and index.
2494	Create a read attribute operation.
2495	Create a write attribute operation.
2496	Create an undefine attribute operation.
2497	Returns the value of the entry.
2498	Add a URL context factory for a scheme.
2499	Remove a URL context factory.
2500	Load all providers from the given class loader.
2501	Modify the deployment.
2502	Configure the endpoints for the deployment.
2503	Modify the context root for the given deployment.
2504	Get the transport class name from the deployment.
2505	Set the RunAs identity of the given SecurityContext.
2506	Pop the RunAs identity from the given SecurityContext.
2507	Process the management servlets.
2508	Injects the given property value into the given object.
2509	Checks if the type and property are the same.
2510	Finds a method in the given class that matches the given name and parameter type.
2511	Find a field in a class.
2512	Initializes the options.
2513	Derives the useful information from the given HTTP request.
2514	Collect the JDR report.
2515	Collect the JdrReport.
2516	Registers a Resource Adapter deployment.
2517	Unregisters a deployment.
2518	Registers the transformers.
2519	Writes the parameters to the output stream.
2520	Reads an exception from the given input stream.
2521	Returns the owner of the current thread.
2522	Releases the lock.
2523	Add a log to the log file.
2524	Add CDI flag to WAR.
2525	Returns the component view.
2526	Invokes the given endpoint.
2527	Replies the view method for the component.
2528	Checks if the given sei method matches the given view method.
2529	Creates a resource that can be used to retrieve statistics for the given management adaptor.
2530	Get the EJBSecurityMetaData for the specified endpoint.
2531	Returns the security domain if it is different from the given one.
2532	Ensures that the two given security domains are the same.
2533	Sets the IDL name.
2534	Returns the absolute name of this entry.
2535	Creates a new JndiName from a string.
2536	Processes the IronJacamar. xml file.
2537	This method is called by the HttpServerExchange when it is handled by the wrapped handler.
2538	Checks if the transaction is in the current thread.
2539	Get the transaction synchronization registry.
2540	Get the connection factory.
2541	Get last component.
2542	Checks if the given name is empty.
2543	Thrown when the name is not found in the context.
2544	Creates a new NamingException with the specified message and optional cause.
2545	Creates a new NamingException with the specified message and cause.
2546	Creates a new CannotProceedException with the given resolved object and remaining name.
2547	Creates a NamingEnumeration from a Collection.
2548	Rebinds the given value to the named object.
2549	Get the ActiveMQ component control.
2550	Version 5. 0.
2551	Creates a new instance of this component.
2552	Get the Spring Spring virtual file.
2553	Resolves the runtime name.
2554	Creates a builder for a listener resource.
2555	Analyze a primitive type.
2556	Shuts down the component.
2557	Get the url patterns.
2558	Get the servlets metadata.
2559	Get the servlet mappings for the given JBossWebMetaData.
2560	Get the security constraints for the given JBossWebMetaData. If the list is null
2561	Get the login config.
2562	Get the context parameters.
2563	Gets the web resource collections metadata from the given security constraint.
2564	Gets the servlet init parameters.
2565	Creates a new security constraint.
2566	Creates a new web resource collection.
2567	Creates a new servlet.
2568	Creates a new servlet mapping.
2569	Creates a new AuthConstraintMetaData object.
2570	Creates a UserDataConstraintMetaData object and adds it to the given securityConstraintMD.
2571	Creates a new param value meta data.
2572	Creates a new param value meta data object.
2573	Register the interceptors for the session bean.
2574	Process the injection targets.
2575	Stops the Weld bootstrap service.
2576	Get the name of the JNDI resource.
2577	Resolve the attribute value.
2578	Returns the type of URL pattern.
2579	Checks if the given server targets a pooled connection - factory.
2580	Checks if the resource adapter is an external pooled - connection - factory.
2581	Get the activeMQ server name from the given properties.
2582	Returns the default persistence unit name.
2583	Register this Activity with the SuspendController.
2584	Stop the Activity.
2585	Suspends the current transaction.
2586	Resume the current activity.
2587	Called when the invocation of this transaction has completed.
2588	Called when a transaction is created.
2589	Add the controller to the naming store.
2590	Remove the resource from the naming store.
2591	Returns the service name of the capability.
2592	Creates a list of ResourceRoots from the deployment root.
2593	Get the set of all the module class loaders in the given deployment.
2594	Checks if the persistence unit needs to be transformed to a class file.
2595	Check if two - phase bootstrap is allowed for the given persistence unit.
2596	Check if the default data source should be used.
2597	Checks if the persistence. xml level of the EntityManagerFactory is configured to skip synchronization type checking
2598	Get an ORB object from the server and port.
2599	Initializes an applet ORB object.
2600	Initialize the method handles.
2601	Sets the active naming store.
2602	Validate default values.
2603	Checks the type of the parameter.
2604	Lookup the default value annotation.
2605	Validate the base type of a parameter.
2606	Get the deferred entity managers.
2607	Returns the status code as a string.
2608	Adds the dependencies for the specified cache type.
2609	Extract the dialects from the sql.
2610	Attempt to determine the database dialect.
2611	Identify the dialect from the name.
2612	Checks the database for the existence of the table.
2613	Converts a string into a Date object.
2614	Sets the parameter at the given index to the node name.
2615	Mark the given deployment unit as being marked.
2616	Reads the parameters from the given input stream.
2617	Writes the return value to the output stream.
2618	Writes an exception to the output stream.
2619	Recursive method to perform a depth - first search.
2620	Begin the SFSB creation.
2621	Mark the end of the SFSB creation.
2622	Get the last invocation from the stack.
2623	Pushes the given entity managers onto the current SFSB call stack.
2624	Pop the last SFSB call from the stack.
2625	Get the current SFSB call.
2626	Add dependencies to the deployment.
2627	Process the XML managed beans.
2628	Process the phase listeners.
2629	Returns the IDL name for a given class.
2630	Inserts a primitive into an Any object.
2631	Convert a Java identifier to an IDL identifier.
2632	Checks if a string is a reserved IDL keyword.
2633	Returns the signature for the given class.
2634	Get the signature of a method.
2635	Returns the IDL name for a primitive type.
2636	Returns a BatchPermission instance for the given name.
2637	Gets or creates a new entity manager session.
2638	Associates the specified value with the specified key.
2639	Converts a camelCase security role to a ModelNode.
2640	Returns the most recent version of the given timer.
2641	Get the timers for a timed object id.
2642	Returns the directory for the given object id.
2643	Add a naming listener to the list of listeners.
2644	Remove a listener from the list of listeners.
2645	Fire a NamingEvent.
2646	Close an AutoCloseable.
2647	Adds a private credential to the subject.
2648	Get an object instance from the factories.
2649	Add a Tx interceptor for the view.
2650	Substitutes from string to string.
2651	Creates the transport configuration for the InVM connector.
2652	Add the EAR prefix if the name is relative.
2653	Gets the root deployment unit.
2654	Returns the service name of the view.
2655	Create a view configuration.
2656	Create an InjectionSource for the view binding.
2657	Returns the view interceptors for the given method.
2658	Add a view interceptor to the interceptorFactory.
2659	Adds a view interceptor to the interceptor registry.
2660	Get the client interceptors for a given method.
2661	Add a client interceptor to the interceptor factory.
2662	Adds a client interceptor to the interceptor pool.
2663	Put private data.
2664	Thrown when reading an unexpected element.
2665	Gets the JAX - WS EJBS attached to the given deployment.
2666	Gets the JAX - WS POJO endpoints from the deployment.
2667	Gets the endpoint name from the servlet metadata.
2668	Gets the endpoint class name from the servlet metadata.
2669	Get the servlet with the given name.
2670	Gets the attachment from the given deployment unit. If the attachment is not present an IllegalStateException is
2671	Gets optional attachment.
2672	Get the JBossWebMetaData from the WAR or the WARs.
2673	Get the JBossPortComponentMetaData for the given deployment unit and port component name.
2674	Gets the web service metadata EJB endpoint.
2675	Get the context root for a deployment.
2676	Load a class from the classpath.
2677	Returns the URL of the named resource.
2678	Returns a collection of resources that match the given name.
2679	List all resources under the specified path.
2680	Pop the last non - transactional entity manager from the stack.
2681	Get the EntityManager for the given puScopedName.
2682	Register the after completion synchronization.
2683	Processes the annotations of the WARs.
2684	Update the server config.
2685	Checks if all fields of a class are public.
2686	Creates a new HTTP endpoint.
2687	Creates a new deployment for the given deployment unit.
2688	Checks if the given deployment is a JAXRS deployment.
2689	Sets the next timeout.
2690	Sets the state of the timer.
2691	Merge the given deployment data into this deployment.
2692	Add the dependencies needed by the proxies to the deployment.
2693	Add a dependency on the remote transaction service.
2694	Returns a set of all container interceptors.
2695	Checks if the given method is a method level.
2696	Checks that only one of the given elements is seen.
2697	Get the class for the given class name.
2698	Get the component type at the given index.
2699	Replies the resource that will store the JSSE keys.
2700	Replies the resource that will manage the JSSE key managers.
2701	Replies the resource that will trust all JSSE trust managers.
2702	Parse a compound name from a string.
2703	Converts a string into a vector of components.
2704	Parse a component from a string.
2705	Deactivate the IRObject.
2706	Convert a POA servant to a reference.
2707	Authenticate a user.
2708	Checks if the given class is a subtype of String int long float char InetAddress.
2709	Lookup a binding.
2710	Unbinds a named binding.
2711	Instantiate a bean.
2712	Configure the given bean with the given bean metadata.
2713	Dispatches a LifecycleJoinpoint.
2714	Get the current selector.
2715	Converts a bean name and state into a bean name.
2716	Returns the service name for the instances of the given class.
2717	Replies the EEModuleClassDescription for the given name.
2718	Process the annotations on the composite index.
2719	Set the persistence units urls and the root url.
2720	Validates the given descriptor.
2721	Creates the web application descriptor.
2722	Create the web. xml descriptor.
2723	Get the auth - method from the deployment.
2724	Adds the JBoss service descriptor to the deployment.
2725	Handle stateless session beans.
2726	Creates a stub class.
2727	Returns an anonymous object id for the given object id.
2728	Get the persistence providers associated with the application.
2729	Clear the cache of deployment specific providers.
2730	Adds a persistence provider to the deployment class loader list.
2731	Find the parent module class loader.
2732	Add the JBoss modules to the deployment.
2733	Add the persistence unit service to the deployment.
2734	Sets the annotation indexes for all persistence units in the given deployment.
2735	Returns the persistence provider adaptor for the given persistence unit.
2736	Save the persistence provider for a given deployment.
2737	Locates the persistence provider for the specified persistence unit.
2738	Get the annotations for the given URIs.
2739	Create the EJBArchiveMetaData object for the given deployment.
2740	Build the enterprise bean meta data.
2741	Refresh the participant.
2742	Get the analysis for a class.
2743	Lookup the done object for a given class.
2744	Creates a new instance of the given class and adds it to the work in progress.
2745	Returns the module name of the IDL module.
2746	Convert an integer to a hexidecimal string.
2747	Convert a long into a hexidecimal string.
2748	Checks if the method is an accessor method.
2749	Checks if the method is a mutator.
2750	Returns true if the given method has non - java. rmi. RemoteException exceptions.
2751	Get the attribute read name.
2752	Returns the attribute write name.
2753	Fix up the name of the overloaded operations.
2754	Fix up case names.
2755	Escape the given IR name.
2756	Parses an XTS environment element.
2757	Parses the default context propagation element.
2758	Process all attributes.
2759	Load provider module by name.
2760	Creates a handler that adds a child model to the model.
2761	Add the EJB API and JAX - RPC API modules to the deployment.
2762	Write an attribute.
2763	Returns the MethodInf attached to the given InterceptorContext.
2764	Creates a remote session.
2765	Infer destination name from address.
2766	Register a set of endpoint handlers for a given endpoint class.
2767	Get the XML names for a given job.
2768	Initializes the job resolver.
2769	Returns the relative URI of the request.
2770	Create a new context using the given URL.
2771	Lookup a named object in the context.
2772	Binds an object to the specified name.
2773	Call the unbind method of the JNDI server.
2774	Returns an enumeration of all bindings for the specified context.
2775	Call destroy on the given naming context.
2776	Destroys a subcontext.
2777	Call the bind_new_context method of the underlying naming context.
2778	Creates a new subcontext with the given name.
2779	Lookup a link in the context.
2780	Adds a property to the current environment.
2781	Remove a property from the current environment.
2782	Add transformations to the resource transformation description.
2783	Parse a credential element.
2784	Remove a security domain from the security domain manager.
2785	Look up the JNDI object for the given context name.
2786	Create a new reference to a type.
2787	Create a new reference to a factory class.
2788	Create a new reference to a type.
2789	Get the IDL type corresponding to the given type code.
2790	Waits for the given service to become up.
2791	Computes the masked password.
2792	Initializes the security vault.
2793	Start a vault session.
2794	Prints out the configuration of a vault attribute.
2795	Displays the vault configuration.
2796	Returns the vault configuration.
2797	Checks if the given value is not null.
2798	Get the deployment service name for the given Activation.
2799	Insert the value into the Any object.
2800	Checks if this permission implies the given permission.
2801	Get the actions.
2802	Returns the name of the log file.
2803	Sends a state change notification.
2804	Get the state to bind to.
2805	Gets the value of the property.
2806	Returns the context service name for this component.
2807	Returns a set of all interceptor descriptions.
2808	Add a new interceptor to the module.
2809	Adds a dependency to the component.
2810	Get the list of interceptor factories for the given method.
2811	Get the interceptors that should be used for the given method.
2812	Add a timeout view interceptor to the given method.
2813	Adds an around construct interceptor.
2814	Add a post - construct interceptor to the list of interceptors to be invoked after the constructor of
2815	Add preDestroy interceptor.
2816	Add a pre passivate interceptor.
2817	Add a post - activate interceptor.
2818	Set the component create service factory.
2819	Remove the JNDI aliases.
2820	Add the EJBTransportProvider to the builder.
2821	Returns the service name of the component.
2822	Returns the service name of the module.
2823	Returns the BindInfo object for the specified env entry.
2824	Returns the BindInfo for the given JNDI name.
2825	Get the cache of the domain info.
2826	Returns the value members of this node.
2827	Returns an array of ValueMember objects for the type of the field.
2828	Creates the root node of the subsystem.
2829	Parses the configuration.
2830	Start the service.
2831	Add the Weld integration.
2832	Returns the service name for the job operator.
2833	Adds a component to the deployment.
2834	Adds a message destination to the mapping.
2835	Get the view information for the given view type.
2836	Get the components that are part of the deployment.
2837	Get the view descriptions for the given component name and view name.
2838	Resolve message destination.
2839	Add the necessary transformations to the HornetQ 2. 0 resource.
2840	Rejects the attributes defined in the given array that have a default value.
2841	Renames an attribute.
2842	Pop the identity from the context state cache.
2843	Load the module identifiers for the main module.
2844	Check that all versions are valid.
2845	Computes the slot name for the given version.
2846	Get the TypeCode for a given class.
2847	Adds a TypeCode to the map.
2848	Create a module if it doesn t exist.
2849	Add the interfaces of the given container.
2850	Add the abstract base valuetypes.
2851	Add an analysis for a class.
2852	Add an interface to the IR.
2853	Add a value to the value map.
2854	Add an exception to the exception map.
2855	Returns the type of injection.
2856	Check if jts is enabled.
2857	Start the naming store.
2858	Close the root context.
2859	Check if the method is allowed to invoke the given type.
2860	Check if the transaction is synchronized.
2861	Get all the component classes from the WAR and TLDs.
2862	Get the waiting on tx completion timers.
2863	Returns a new parameter map with only the parameters that are not allowed by the given set.
2864	Get the parameters from the configuration.
2865	Converts a Java type to a Java class.
2866	Convert a value of the given type to the given class.
2867	Returns the types of the given values.
2868	Simple check to see if the given types are the same.
2869	Returns the next object in the list.
2870	Returns true if there are more bindings.
2871	Map a CosNaming. Binding object into a javax. naming. Binding object.
2872	Observes health checks.
2873	Closes the health check.
2874	Returns a CORBA object reference for the specified locator.
2875	Returns the handle for the specified locator.
2876	Convert the given ModelNode to an enum value.
2877	Skips the specified number of bytes from the input stream.
2878	Checks that the two elements are not already in the set.
2879	Adds a component description to the module.
2880	Adds the given class loaders to the deployment.
2881	Unbinds the named component.
2882	Lookup the object in the context.
2883	Returns a list of all the names of the objects in the directory.
2884	List all bindings with the given name.
2885	Add a context handle factory to the chain.
2886	Saves the context object properties to the context service.
2887	Creates the IO sub - systems.
2888	Creates the welcome content handler.
2889	Get a bean from the pool.
2890	Calculate the operation analysis map.
2891	Collect resource metrics for the given resource.
2892	Create a deployment unit for the web server.
2893	Deploys the deployment.
2894	Publishes the deployment.
2895	Stop the web application.
2896	Start the container.
2897	Register an endpoint configuration.
2898	Call timeout method.
2899	This method is called after the timeout processing has been completed.
2900	Get the declared methods of a class.
2901	Get the Field objects for the given class.
2902	Get a constructor for a class.
2903	Get a method from a class.
2904	Adds the Messaging ActiveMQ extension to the model.
2905	Checks if a parameter is allowed for a resource.
2906	Migrate the generic transport factory to the ARTEMIS transport factory.
2907	Cancel the task.
2908	Run the task if it is not already running.
2909	Internal method to set the property type.
2910	Checks if the function can be executed without index.
2911	Estimate the number of indexes that should be used to create the given class.
2912	Find all classes in the given directory.
2913	Returns a list of classes that implement the given interface.
2914	Gets the generic multivalue type.
2915	Evaluates the left and right values.
2916	Derives the field type from the given field name.
2917	Update the record.
2918	Find record in the cache.
2919	Returns the minimal set of nodes that can be used to query the cluster.
2920	Moves all the flattened equality expressions from the left side of the WHERE clause into the left side
2921	Add the ORDER BY and PROJECTIONs to the query planning info.
2922	Extracts all sub - queries from the given query planning info.
2923	Checks if the cluster is in the set of clusters.
2924	Handle class with index for sort only.
2925	Checks if the given class is a diamond hierarchy.
2926	Returns true if the order direction is correct.
2927	Checks if the given key condition requires multiple index lookups.
2928	Find the best index for the given class and block.
2929	Build the index search descriptor for fulltext.
2930	Common factor for OR.
2931	Creates a new smart field handling strategy.
2932	Allow the user to execute the specified operation on the specified resource.
2933	Checks if the user has a rule defined for the given resource.
2934	Get the server status as a compact string.
2935	Initializes the system database.
2936	Load all local databases.
2937	Remove the server from the cluster.
2938	Elects a new lock manager.
2939	Assigns the lock manager to the cluster.
2940	Commit the current transaction.
2941	Rolls back the current transaction.
2942	Updates the identity after a record commit.
2943	Delete all records from the local cache after rollback.
2944	Prepares for file creation or replacement.
2945	Moves the source file to target with atomic mode. If the move fails the original file is
2946	Returns a list of patterns that are disjoint from this pattern.
2947	Executes only locally if the executor is idempotent.
2948	Append characters to the builder.
2949	Checks if the socket is connected.
2950	Merges two buffers into a short.
2951	Split a short value into two buffers.
2952	Creates a new property.
2953	Adds a new value to the index.
2954	Remove the value from the map.
2955	Executes the query.
2956	Executes the query and returns the first result.
2957	Creates the file.
2958	Checks that the requested region is valid.
2959	Replaces the content of the file.
2960	Executes the command.
2961	End the current request.
2962	Add host to the list of hosts to connect to.
2963	Begin a request.
2964	Get the current database.
2965	Get a connection by channel id and protocol.
2966	Kills the given connection.
2967	Interrupt the connection with the given id.
2968	Disconnects a connection from the server.
2969	Push the given distribution configuration to all clients.
2970	Swaps the value at the given index with the given new value.
2971	Release all locks.
2972	Synchronize the schema with the database.
2973	Update the metadata.
2974	Moves to the last record in the record set.
2975	Returns the next character from the input.
2976	Executes the SELECT command.
2977	Executes the callback when the request is async replication error.
2978	Registers a new compression algorithm.
2979	Returns the maximum number of open files.
2980	Checks if the expression allows the execution of the right - hand side of the function.
2981	Move the buffer to the specified position.
2982	Fills the buffer with the specified byte sequence.
2983	Executes the steps until the return value is reached.
2984	Executes all the steps in the stack.
2985	Evaluate the given record.
2986	Executes the CREATE EDGES command.
2987	Loads the configuration from storage.
2988	Parse the request and return the executor.
2989	Executes the command.
2990	Update the schedule with the new start node and the new set of edges.
2991	Adds an index definition to the composite key.
2992	Splits the aggregate into two projections.
2993	Converts the given OResult object to an object of the given type.
2994	Get the collate for the given document.
2995	Returns the string value of the field.
2996	Advance the probe value.
2997	Execute the DROP CLUSTER command.
2998	Build a JSON document from a file.
2999	Checks the password against the given hash.
3000	Create hash.
3001	Checks if the given algorithm is supported by the current runtime.
3002	Creates a new index.
3003	Returns an iterable of vertices that match the criteria.
3004	Returns an iterable of edges.
3005	Returns the partition key of the replicated task.
3006	Get distributed timeout.
3007	Returns a feature set.
3008	Checks if the changes have been filled up to the given page index.
3009	Parses the timeout keyword.
3010	Parses the LOCK command.
3011	Creates a cluster.
3012	Free a cluster.
3013	Start the cache.
3014	Shutdown the profiler.
3015	Creates a new result set with the given entity and transformer.
3016	Grant access to a specific resource.
3017	Revokes access to a specific resource.
3018	Executes the DELETE command.
3019	Binds the parameters to the filter.
3020	Resets the hash table to the initial state.
3021	Returns the index of the given item in the hash table.
3022	Spread a random number into a single int.
3023	Create an index of the specified type.
3024	Drops all indexes related to this property.
3025	Returns the first index that is involved in this schema.
3026	Returns the linked class.
3027	Returns the index configuration as a stream.
3028	Remove a listener from the list of listeners.
3029	Register a database with the manager.
3030	Timeout request.
3031	Creates a copy of the document.
3032	Try to merge the other bag into this one.
3033	Replaces the delegate s SBTree with the given pointer.
3034	Transforms the result of a command into a map.
3035	Executes the CREATE CLUSTER command.
3036	Closes all the pools.
3037	On storage unregistered.
3038	Returns a set of all function names.
3039	Returns the collection of collate types.
3040	Return all registered command types.
3041	Reads the field size and type from the current position.
3042	Write HTTP status code and reason.
3043	Write the response headers.
3044	Write the records to the response.
3045	Writes a record to the response.
3046	Sends the response.
3047	Sends the response stream.
3048	Opens a database object.
3049	Closes the database.
3050	Listen for changes on a collection.
3051	Completes a component operation.
3052	Pushes counters for all components.
3053	Pushes a new WritCacheCountersHolder onto the snapshot.
3054	Pushes the storage counters onto the holder.
3055	Pushes WAL counters onto the counters holder.
3056	Pushes counters for a component.
3057	Stop the write cache flush timer.
3058	Stop the fuzzy checkpoint timer.
3059	Stop the full checkpoint timer.
3060	Stop the commit timer and update the counters.
3061	Stop the WAL record timer.
3062	Stop the WAL flush timer.
3063	Parse the given string into a statement.
3064	Initializes the receiveMessages thread.
3065	Init the timer to check if the known servers are alive and if so disconnect from the server
3066	Removes the record from the database.
3067	Sets the value of a property.
3068	Removes a property from the vertex.
3069	Checks if the given class is a subclass of the base class.
3070	Wrap the cursor in an index changes wrapper.
3071	Define the vertex attribute strategy.
3072	Define the edge attribute strategy.
3073	Get the new record entries by class.
3074	Get the new record entries by cluster ids.
3075	Add an index entry to the index.
3076	Merges two sets.
3077	Executes the UPDATE command.
3078	Checks if the function can be executed.
3079	Prepare the keys for the index.
3080	Writes a page to the buffer.
3081	Read a page from the file.
3082	Truncates the page at the given index.
3083	Opens the WAL file.
3084	Check if replication is active for the cluster.
3085	Get the new node strategy.
3086	Is the execution mode synchronous for the cluster?
3087	Check if the cluster is configured to read your writes.
3088	Get a map of cluster names to the cluster names that are running on the specified local node
3089	Get the list of servers configured for the specified clusters.
3090	Checks if a server is contained in all clusters.
3091	Checks if the given server is contained in the given cluster.
3092	Returns the list of master servers.
3093	Get all configured servers.
3094	Get the cluster names that are connected to the server with the specified name.
3095	Returns the cluster names owned by the server.
3096	Get the owner of the cluster.
3097	Get the cluster owner.
3098	Get the list of servers configured for the cluster.
3099	Returns the list of registered servers.
3100	Returns the set of data centers that are configured in the configuration.
3101	Returns the write quorum of the given data center.
3102	Checks if the cluster is sharded.
3103	Returns the list of servers configured in the given data center.
3104	Get the data center of the server.
3105	Get the global read quorum for the cluster.
3106	Returns the write quorum for the given cluster name and server.
3107	Get the configuration for the specified cluster.
3108	Get the data center configuration.
3109	Clear the initialization stack.
3110	Returns an index of the specified class.
3111	Drops the named index.
3112	Adds a vertex to the graph.
3113	Adds an edge to the graph.
3114	Returns the vertex with the given id.
3115	Returns an iterable of vertices of the class iClassName.
3116	Returns an iterable of edges of the specified class.
3117	Get an edge by id.
3118	Reuse the database.
3119	Shuts down the context.
3120	Returns the base type of the vertex.
3121	Returns the vertex type with the given name.
3122	Create a new vertex type with the specified class name and number of clusters.
3123	Drops a vertex type.
3124	Get the edge type.
3125	Create an edge type.
3126	Returns the element with the given id.
3127	Drops the key index for the given element class.
3128	Creates an index for the given key.
3129	Remove a listener from the list of listeners.
3130	Fired on background data flush exception event.
3131	Stop monitoring.
3132	Register the MBean with the platform MBeanServer.
3133	Unregister the MBean for performance statistics.
3134	Fetch the write cache counters from the snapshot.
3135	Fetch system counters.
3136	Fetch statistics for all live threads and add them to the componentCountersHolder.
3137	Compress the given JSON string.
3138	Returns the value of the property with the specified name.
3139	Detaches the given object from this entity.
3140	Returns the version of the given object.
3141	Executes the command.
3142	Sets the dirty status of the specified object.
3143	Unsets the dirty flag for the specified object.
3144	Returns the set of index types.
3145	Returns all index engines.
3146	Get a list of nodes that have no response.
3147	Get the responses that conflict with the current response group.
3148	Returns the group of responses that are currently in the response.
3149	Computes the quorum response.
3150	Get the received responses.
3151	Get the execution plan for the given statement.
3152	Checks if the function can be executed on the given target.
3153	Returns the library for the specified database and language.
3154	Release the database engine.
3155	Returns the next position in the file.
3156	Update the size of the bag.
3157	Returns the value at the given index.
3158	Checks if the index can be used by sorting after the filter.
3159	Find the index of the character in the string that is outside the string.
3160	Jump to the beginning of the text until a white space is found.
3161	Jump to the next character in the text.
3162	Sets the fetch plan.
3163	Enqueue a record to be recovered.
3164	Cancels a record.
3165	Enqueue a cluster repair.
3166	Returns a map of all the dependencies of the given pattern.
3167	Create a new instance of the given class.
3168	Registers the given entity classes with the given class loader.
3169	Registers the given class as an entity class.
3170	Set the class handler.
3171	Acquire a database from the pool.
3172	Get the number of available connections for a given database.
3173	Acquire a database from the pool.
3174	Synchronize cluster.
3175	Lookup provider with orient class loader.
3176	Checks if the cache is in a consistent state with the JVM s maximum heap size and the
3177	Create a vertex from a JSON object.
3178	Create an edge from a JSON object.
3179	Convert an element to a JSON object.
3180	Converts an element to an object node.
3181	Executes an import job.
3182	Returns the current status of the job.
3183	Returns a map of data centers to the active servers.
3184	Separates the algorithm from the given cipher transform string.
3185	Creates a new symmetric key from the given configuration.
3186	Creates a new symmetric key from a file.
3187	Create a new symmetric key from the given input stream.
3188	Encrypt the given bytes using the given cipher transformation.
3189	Save the key to the given output stream.
3190	Save the key to a keystore.
3191	Set the child context.
3192	Adds an object to the unique result.
3193	Returns the value of the field as an object or a map.
3194	Authenticate the user.
3195	Get the value of a map entry.
3196	Get the record to be used for the next query.
3197	Reads the next record from the stream.
3198	Get the database connection.
3199	Get the graph to use for no - tx operations.
3200	Setup the pool.
3201	Get the property with the passed name.
3202	Stop the current transaction.
3203	This is the main entry point for parsing statements.
3204	Get the next token.
3205	Returns the token at the given index.
3206	Generate a ParseException.
3207	Returns an iterable of vertices in the record.
3208	Removes all edges from the vertex.
3209	Adds an edge between the given vertices.
3210	Adds an edge between the two vertices.
3211	Get the connection class.
3212	Get the connection class for the given field name.
3213	Process broken records.
3214	Get the console methods.
3215	Executes a remote task on a local node.
3216	Returns the number of nodes in the given collection that are in the given database with the given
3217	Backup the file.
3218	Wait for next retry.
3219	Get the argument at the specified position.
3220	Check if any of the passed parameters are present in the request.
3221	Connects to the remote server.
3222	List all databases.
3223	Retrieves server information.
3224	Checks if a database exists.
3225	Drops a database.
3226	Freezes the database.
3227	Releases the database of the given type.
3228	Returns the current cluster status.
3229	Creates the index.
3230	Get the current active graph.
3231	Parse the RETRY.
3232	Saves a record to the database.
3233	Delete a record from the database.
3234	Returns the authentication header for the given database name.
3235	Authenticate user with password.
3236	Check if user is authorized to execute the resource.
3237	This method is called when the server is shut down.
3238	Adjust the line and column of the beginning of the token buffer.
3239	Sets the bucket pointer.
3240	Returns the bucket pointer at the given offset.
3241	End an atomic operation.
3242	Acquires an exclusive lock for the given name and adds it to the given atomic operation.
3243	Changes the maximum amount of memory used by the disk cache.
3244	Listen for incoming connections.
3245	Read the server parameters.
3246	Shutdowns the log manager.
3247	Add an item to the cache.
3248	Remove the entry with the given key.
3249	Acquires a lock on the cache.
3250	Get the value associated with the given key.
3251	Clear the cache.
3252	Closes the entry.
3253	Empty all read buffers.
3254	Called after a write operation.
3255	Writes the entry to the read buffer.
3256	Put an entry in the read buffer.
3257	Returns the closest power of two to the given value.
3258	On event.
3259	Convert the given key to an enum value.
3260	Converts all the underlying values to Enums.
3261	Get the serializer for the given type.
3262	Initialize the shutdown queue.
3263	Returns the engine with the given name.
3264	Executes the OPTIMIZE TABLE.
3265	Executes the query.
3266	Add a new state to the list of readers.
3267	Authenticate the user.
3268	Creates the user s metadata.
3269	Acquires a read lock.
3270	Get the vertex in the specified direction.
3271	Returns the ID of the vertex.
3272	Sets the property of the GraphObject.
3273	Remove a property from the graph.
3274	Clears the tree.
3275	Deletes all the sub - trees from the file.
3276	End the batch import.
3277	Create a new vertex.
3278	Parse the strategy keyword.
3279	Reads the embedded collection and returns the field positions.
3280	Executes the BIND command.
3281	Fixes the link.
3282	Fill the record with the given data.
3283	Sets the record version.
3284	Get the record type.
3285	Initializes the database instance.
3286	Prints the stack trace of an exception.
3287	Execute the index query.
3288	Convert a link to a record.
3289	Registers a command with the server.
3290	Create a server user from a document.
3291	Analyze the given condition.
3292	Create an indexed property.
3293	Attaches the fields of the given object to the fields of the given object.
3294	Returns the index class.
3295	This method is called from the OSequenceReader class when the current value is greater than or
3296	Truncates the class.
3297	Adds a base class to the class hierarchy.
3298	Adds the polymorphic cluster ids to the indexes.
3299	Serialize a link to a stream.
3300	Releases a pointer back to the pool.
3301	Checks if there is a memory leak.
3302	Clear the pool of pointers.
3303	Convert a byte array to an integer.
3304	Open the node.
3305	Installs clusters of a class.
3306	Dumps the current status of the distributed servers.
3307	Returns the index of the first occurrence of the specified object in the specified array or - 1
3308	Returns the index of the specified object in the specified array or - 1 if the object is
3309	Get the set of clusters that are involved in the target.
3310	Handles the result of the query.
3311	Get the next unique id for this query.
3312	Report a tip message.
3313	Parses FETCH PLAN and sets the request object.
3314	Parse the NOCACHE keyword.
3315	Optimizes the sort.
3316	Returns the current status of the batched execution.
3317	Executes the command.
3318	Handle JVM error.
3319	Put a value in the index.
3320	Rolls back the current active transaction.
3321	Executes the command.
3322	Registers a new cluster.
3323	Set the property with the given name.
3324	Executes the CREATE CLASS.
3325	Executes the SYNC DATABASE command.
3326	Delete the record from the database.
3327	Callback for all registered hooks.
3328	Delete the record from the database.
3329	Count the number of records in a view.
3330	Count the number of records of the class iClassName.
3331	Activates the document on the current thread.
3332	Registers an encryption.
3333	Returns the relative position of the first byte in the binary data chunk that corresponds to the given
3334	Returns the next word without a trailing word.
3335	Parses the next word.
3336	Parses the next characters.
3337	Parses the next word and checks if it is an optional keyword.
3338	Check if the passed character is a separator.
3339	Drops the class.
3340	Clear the configuration files.
3341	Returns the offset of the next byte in the buffer.
3342	Extract the token value from the token.
3343	Acquires an access token from the access token provider.
3344	Copy the access token from the current authentication to the context.
3345	Returns true if there are no more characters.
3346	Read a line of text from the input stream.
3347	Read a line from the input stream.
3348	Skips n bytes from the input stream.
3349	Skips n bytes.
3350	Ensures that the offset and length are within the array.
3351	Merge sort implementation.
3352	Swaps two numbers.
3353	Sorts an array of integers using a parallel sort.
3354	MurmurHash3 hash function.
3355	MurmurHash3 hash function.
3356	Writes the given byte buffer to the underlying file.
3357	Truncates the file to the given size.
3358	Sets the position of the underlying byte stream.
3359	This method is called when a consumer refresh fails to report.
3360	Waits for all the current tasks to complete.
3361	Find matches.
3362	Finds all the compactions that are dependent on any of the types in the schema.
3363	Deletes the last N snapshots.
3364	Returns the hash code for a field.
3365	Returns true if the two fields are equal.
3366	Remove references outside closure.
3367	Called when an announcement is completed.
3368	Called when a cycle is complete.
3369	Reads the header tags.
3370	Extract the primary key from an object.
3371	Clear all the bits in this set.
3372	Reads the ordinal values from the given input stream and notifies the given listeners.
3373	Returns the estimated number of bits used in the sparse set.
3374	Get the field value.
3375	Copies the contents of the source buffer to the destination buffer.
3376	Copies the specified number of bytes from the source to the destination.
3377	Returns true if the given segmented array is equal to the given segmented array.
3378	Copies the contents of the source segment into the destination segment.
3379	Copies the specified number of bytes from the source to the destination starting at the specified position.
3380	Reads from the given input stream.
3381	Writes the contents of this buffer to the given stream starting at the given position and length.
3382	Ensure that the segments array has enough space to hold the given segment.
3383	Returns the position of the field in the table.
3384	Calculates the deduplicated sizes and the total number of select buckets.
3385	Checks if the given dataset has any collections.
3386	Generates the Java files for the Hollow API.
3387	Generate the hollow files for the given schemas.
3388	Checks if the given keys match the field path.
3389	Returns the field path for the given record ordinal.
3390	Create a FieldPath for the primary key.
3391	Create a FieldPath for a hash index.
3392	Create a FieldPath for a prefix index.
3393	Associates the given object with its ordinal.
3394	Initializes the prefix index.
3395	Returns true if the prefix index contains the given key.
3396	Gets the change percentage.
3397	Adds a field to the specified type.
3398	Returns a list of schemas that are ordered by their dependencies.
3399	Initializes the class with major version defaults for versions prior to version 3.
3400	Returns the value of the given index.
3401	Find matching records for the given field and field value.
3402	Find matching records for the given field.
3403	Sets the element key and non - key paths.
3404	Sets the element key paths.
3405	Calculates the results.
3406	Restore from the last state of the announcement watcher.
3407	Runs the incremental cycle.
3408	Mark the given key as excluded from the index.
3409	Exclude objects that are referenced by this read engine.
3410	Writes the header of this blob to the stream.
3411	Calculates the total heap footprint and populated ordinals for each type.
3412	Writes the fields of the field data to the given byte buffer.
3413	Writes a fixed length int to the given field buffer.
3414	Writes a fixed length long to the specified field buffer.
3415	Return an ordinal to the pool.
3416	Sort the free ordinary arrays in ascending order.
3417	Generates a hash code for the given key and field types.
3418	Returns a hash code for the given key and field type.
3419	Resize the storage.
3420	Finds a free ordinal.
3421	Prepare for write.
3422	Compares the given serialized representation with the given key.
3423	Grows the key array by one larger than the maximum capacity.
3424	Rehashes the data that was previously added to the hash table.
3425	Creates an empty key array with the given size.
3426	Check if the two matches are equal.
3427	Find a matching object.
3428	Swaps the current state with the pending state.
3429	Returns the size of a hash table that can be used to store numElements elements.
3430	Run a compaction cycle.
3431	Writes a snapshot of the state engine to the given output stream.
3432	Writes the delta of the schema to the given output stream.
3433	Add the given schemas to the given set if they are not a primitive or a collection.
3434	Normalizes a field path to a parameter name.
3435	Rebuild the hash index.
3436	Find matches in the index.
3437	Trigger an asynchronous refresh with a random delay.
3438	Trigger a refresh with a delay.
3439	Add a type diff.
3440	Calculate the diffs for all the types in the HollowTypeDiff object.
3441	Writes a variable - length integer to the stream.
3442	Writes a variable - length integer to the stream.
3443	Writes a variable - length integer to the given byte array at the given position.
3444	Reads a variable - length int from the stream.
3445	Reads a variable - length long from the stream.
3446	Add a view to the view list.
3447	Refresh the loading views size.
3448	Update the UI for the current mode.
3449	Pulls the header and footer from the current position.
3450	OverScroll by a number of pixels.
3451	Creates a new fact rule.
3452	Adds the given facts.
3453	Creates a builder for the given rule class and action type.
3454	Creates a rule builder for golden.
3455	Creates a builder for this rule.
3456	Creates a builder for this rule.
3457	Creates a new Given rule.
3458	Creates a new Given rule builder.
3459	Creates a new Then rule builder.
3460	Creates an instance of the given rule.
3461	Get the first annotated field of the given annotation on the given class.
3462	Get the first annotated method of the given annotation on the given class.
3463	Get annotation.
3464	Registers a rule.
3465	Updates the rule status.
3466	Returns a map of rule names to rule status.
3467	Sets the result type of the builder.
3468	Adds an action to the rule.
3469	Adds an action to the rule.
3470	Resets the value to its default value.
3471	Creates a new rule with the given fact type.
3472	Returns the list of rules that should be applied to the pojo.
3473	Read an empty line or end of table.
3474	Convert the given service list to an array.
3475	Get the list of ports from the build configuration.
3476	Extract ports from configuration.
3477	Parses the port mapping.
3478	Add a port to the list if it is not null.
3479	Shift the first port off the list and return it.
3480	Add missing service parts from default service.
3481	Appends an ImageStream resource to the target file.
3482	Checks if the ports match.
3483	Returns the port of the service or the empty string if it is not set.
3484	Get the host and port for the given service name.
3485	Adds a new value to the map if it does not already exist.
3486	Merge the given map with the given map. If the map already exists the old value will
3487	Merge two maps.
3488	Put all the entries in toPut into ret.
3489	Waits until the pod is ready.
3490	Validates that the provided value is a valid kubernetes ID.
3491	Converts the given entity to a list of items.
3492	Gets the resource version of the given entity.
3493	Check if a pod is ready.
3494	Get the current context from the config.
3495	Checks if the listBuilder has a route with the given name.
3496	Checks if a resource exists in the classpath.
3497	Reads a file and enriches the fragment with the appropriate type and extension.
3498	Converts a map of env vars to a list of env vars.
3499	Merge two resources.
3500	Merge the override map and remove any empty strings.
3501	Checks if the pod spec is local customisation.
3502	Read configuration from a file.
3503	Adds the port to the map if it is valid.
3504	Get the docker config as a JSON string.
3505	Get the configuration for a plugin.
3506	Get the secret configuration for the given id.
3507	Download a file from the given URL.
3508	Compares two version strings.
3509	Blend a profile with a configuration.
3510	Lookup a profile by name in the given directory.
3511	Read profiles from classpath.
3512	Read all profiles from the classpath.
3513	Finds the profile yaml file in the given directory.
3514	Get the list of paths to the profile files.
3515	Read a list of profiles from a YAML file.
3516	Get image pull policy from resource config.
3517	Checks if the current runtime is in OpenShift mode.
3518	Get the number of replicas in the given resource.
3519	Get the first child element with the given name.
3520	Installs a template on Kubernetes
3521	Removes a tag by name.
3522	Creates a namespace if it doesn t already exist.
3523	Applies the specified project to the project s display name and metadata.
3524	Creates a ProjectRequest if it doesn t already exist.
3525	Get the namespace for the given entity.
3526	Logs the error and throws a runtime exception.
3527	Add the default namespace or project items to the list builder.
3528	Enriches the given list builder with the namespace annotation.
3529	Get the environment variables to be passed to the JVM.
3530	Returns the number of seconds in the duration.
3531	Parse a duration string into a duration in nanoseconds.
3532	Scan files in the build directory.
3533	Disable OpenShift features for the given ApplyService.
3534	Checks if the given service has any ingress rules.
3535	Parse the given mapping file into a map of file types.
3536	Creates a generator context.
3537	Extract the generator config from the profile.
3538	Returns a new enricher context for the given project.
3539	Extract the enricher config from the profile.
3540	Returns the default icon reference.
3541	Recursively copy the app config files to the build directory.
3542	Get the properties from the given resource.
3543	Returns the version of the Spring Boot.
3544	Creates a list of service objects from the given descriptor paths.
3545	Enriches the list of enrichers.
3546	Get the raw configuration.
3547	Flatten a map.
3548	Extract the watcher config from the profile.
3549	If the list contains a single Template we need to unwrap it.
3550	Get the build reference date.
3551	Get a value from the configuration.
3552	Get the configuration map for the given name.
3553	Prepare processors for the given list of named objects.
3554	Add the from image to the builder.
3555	Get the default from - mode for docker docker or itag.
3556	Returns the image name.
3557	Returns the fabric8. generator. registry property.
3558	Returns true if the fabric8 server is online.
3559	Get the external URL for a given service.
3560	Returns the value of the given property as a Boolean.
3561	Creates a new JestClient instance.
3562	Create an internal node.
3563	Scan for plugins.
3564	Creates a new instance of this class from a JSON string.
3565	Gets the rewards balance for the given nonce and currency.
3566	Creates a PayPalPaymentResource object from a JSON string.
3567	Get a resource.
3568	Override post to add authorization fingerprint if needed.
3569	Creates a new VenmoConfiguration object from a JSON object.
3570	Collect all the device data from the fragment.
3571	Collects device data from the Braintree server.
3572	Collects PayPal device data from the fragment.
3573	Get PayPal client metadata id.
3574	Checks if the signature of the given package is valid.
3575	Get a property as a string or fallback if it is null.
3576	Parses the JSON body of a payment method request.
3577	Gets the recipe that should be used to checkout the browser.
3578	Get the billing agreement recipe for the browser.
3579	Performs a GET request to the given URL.
3580	Sends a POST request to the specified path with the specified data to the specified callback.
3581	Perform a POST request to the given URL.
3582	Starts a local payment.
3583	Approves a local payment.
3584	Add a listener to the list of listeners.
3585	Remove a listener from the list of listeners.
3586	Request the Billing Agreement flow.
3587	This method is called when the user clicks on the PayPal OneTouch activity.
3588	Creates a builder for the response.
3589	Adds words to the dictionary.
3590	Remove words from the dictionary.
3591	Transform a sequence of KoreanTokens into a Java string list.
3592	Extract phrases from a Korean input stream.
3593	Takes a list of tokens and returns the first token that is not a token of any kind
3594	Reads data from the given channel into the given buffer.
3595	Join the NAL units into a single ByteBuffer.
3596	Joins NAL units into a single byte buffer.
3597	Returns the profile for the given integer.
3598	Normalizes and generates fixed precision values.
3599	Reads the next marker partial from the input stream.
3600	Reads the next marker buffer.
3601	Returns the maximum number of frames that can be used to generate a new frame.
3602	Modify a file.
3603	Copies a file from one location to another.
3604	Get the total duration of all the edits in the given track.
3605	Convert a frame number into a time value.
3606	Convert a time value to a frame.
3607	Convert a media TV to the number of edits that have been made.
3608	Get the media time that has been edited.
3609	Returns the frame number of the movie in question.
3610	Get the time that the movie was played in the given frame.
3611	Convert a time value to a timecode frame.
3612	Format the timecode.
3613	Generate a 7 bit value from four four ints.
3614	Set the n - th value in the list.
3615	Checks if this color space matches the input color space.
3616	Returns the size of a given component.
3617	Create a raw MP4 demuxer.
3618	Reads a cache value from the buffer.
3619	Creates a WAV header with the given format and number of samples.
3620	Create a wav file from an array of wav headers.
3621	Parse the MP4 decoder specific information.
3622	Encodes the given symbol into the given context.
3623	Read decoder pic marking.
3624	Splits a movie into two edits.
3625	Decode a single frame.
3626	Sets whether or not the data is big endian.
3627	Deblock the left and top blocks of the current image.
3628	Encode a native frame.
3629	Encodes a long value to a byte array.
3630	Returns the number of bits required to encode v.
3631	Adds a FLVTag to the output stream.
3632	Repositions the file.
3633	Decodes a CABAC bit.
3634	Decode a single byte bypass.
3635	Moves the position of the buffer to the next byte in the buffer that is greater than or
3636	Returns the sample frequency corresponding to the given integer.
3637	Predict the plane of a reference image.
3638	Sets the start of the block.
3639	Calculates the coefficient of a block.
3640	Finishes the division of the given block.
3641	Concatenate the bits in a buffer into this buffer.
3642	rewind reverse the value v to the given length
3643	Rewinds to the reverse of a 64 - bit value.
3644	Seeks to a specific frame in the video input container.
3645	Get the pixel buffer for the video.
3646	Returns the change point ID of the given change point.
3647	Converts a byte array to an integer array.
3648	Converts an integer array to a byte array.
3649	Reads a float from the buffer.
3650	Read a float from the given buffer.
3651	Interleave the input buffer into the output buffer.
3652	Deinterleaves the input buffer into the output buffer.
3653	Returns the size of the encoded video.
3654	Build the box out map.
3655	Build a wipe map.
3656	Reads an array of ULs from the given ByteBuffer.
3657	Read int32 batch.
3658	Calculate the median value of two vectors.
3659	Encodes a YUV420J frame into a frame.
3660	Encode an IDENTITY frame.
3661	Encodes a Picture into a PFrame.
3662	Returns a collection of all supported codecs.
3663	Returns a list of all supported tags.
3664	Adds a reference to the list of valid references.
3665	Remove all references from the queue.
3666	Flushes the cache.
3667	Loads a library.
3668	Unpacks a shared library from a path.
3669	Delete temporary files.
3670	Returns the default layout for the specified number of channels.
3671	Get the audio channel type from the layout at the specified index.
3672	Create a new MediaPacket.
3673	Get the version information.
3674	Returns the default time base.
3675	Create a new Demuxer.
3676	Plays a video.
3677	Display the video at the correct time.
3678	Creates a CodecDescriptor for the given ID.
3679	Prints the option for a given property.
3680	Register a new URL protocol factory.
3681	Generates a unique name for a file.
3682	Creates a new resampler.
3683	Returns a list of the supported frame rates.
3684	Returns a list of the supported pixel formats.
3685	Returns a list of the supported audio sample rates.
3686	Returns a list of the supported audio formats.
3687	List of supported audio channels.
3688	Sets the value of a specific flag.
3689	Sets the value of a specific flag.
3690	Returns the decoder associated with this stream.
3691	Returns the demuxer object that this stream is attached to.
3692	Returns a collection of all available formats.
3693	Create a new FilterGraph.
3694	Returns the type of filter.
3695	Returns a byte array that contains the specified range of bytes.
3696	Creates a new audio frame with the given audio format.
3697	Resample a picture using a given resampler.
3698	Validate the image.
3699	Validate the given picture.
3700	Returns the FilterGraph object that this link is associated with.
3701	Returns the meta data associated with this media.
3702	Get the CPU architecture from the java CPU string.
3703	Get the CPU architecture from a GNU string.
3704	Get the OS family from the OS name.
3705	Get the OS family from a GNU string.
3706	Plays the sound from the specified filename.
3707	Loads a library.
3708	Registers a library with the library manager.
3709	Attempt to load a library from a list of files.
3710	Initializes the search paths.
3711	Checks if the specified library is already loaded.
3712	Record the current screen size.
3713	Delete this resource.
3714	Returns a stream from the Muxer at the specified position.
3715	Returns the Muxer object that this stream is currently multiplexing.
3716	Create a new transaction for a script.
3717	Decodes a base - 58 encoded string into a byte array.
3718	Generates a random seed.
3719	Get a single transaction by its id.
3720	Get a list of transactions for the given address.
3721	Get a list of transactions from an address.
3722	Get a list of block headers in the range [ from to ).
3723	Get block by signature.
3724	Sends a transaction to the server and returns the transaction ID.
3725	Set the script for a given account.
3726	Compiles a script into a JavaScript file.
3727	Writes an array of primitive types to the stream.
3728	Flushes the buffer to the output stream.
3729	Writes an object to the specified memory address.
3730	Read the class from the input stream.
3731	Writes the object to the given byte array.
3732	Sets the file and file channel for this MMF file.
3733	Returns the specificity of the given class.
3734	Resizes the underlying memory store to the requested size.
3735	Removes the given key from the map.
3736	Writes a string as ASCII.
3737	Set the output stream.
3738	Creates a FSTConfiguration object with the given parameters.
3739	Creates a configuration object that is configured to run a struct mode.
3740	Calculate the size of an object not a utility.
3741	Clear all cached objects.
3742	Get an object input stream from the given input stream.
3743	Get an object input from the input stream.
3744	Get an object input from the specified byte array.
3745	Get an object output stream.
3746	Register a mapping between the cross platform class names and the values.
3747	Returns the C ++ name for the given class.
3748	Writes an integer value.
3749	Writes a raw int value.
3750	Writes an integer packed to the stream.
3751	Writes an array of primitive types.
3752	Writes a raw string to the output buffer.
3753	Get the cached FSTFieldInfo for the given class.
3754	Notifying listeners that an object s data has been written.
3755	Notifying listeners that an object has been written.
3756	Get the FSTClazzInfo for the given field.
3757	Writes an array of objects.
3758	Set the string to be written.
3759	Write an array of primitives.
3760	Finish tracking changes.
3761	Creates a snapshot of the changes in this change set.
3762	Register an object for write access.
3763	Writes an object to a byte array.
3764	Reads an object from the input array.
3765	Read a byte array of the given length.
3766	Reads an int from the buffer.
3767	Moves the poll index back to the given index.
3768	Set whether or not the thread pool is enabled.
3769	Start the embedded cassandra.
3770	Clean data from the embedded cassandra keyspace.
3771	Copy a resource from the classpath to the given directory.
3772	Print thread information.
3773	Checks if a remote port is taken.
3774	Returns a SubscriberState with the server state empty.
3775	Gets the ONNX operation descriptors.
3776	Calculate the output shape for this operator.
3777	Computes the logical or of the complex numbers in the given array.
3778	Returns true if the condition is true for all elements in the given array
3779	Returns true if the condition is true for all the elements in the input array that match the
3780	Performs an OR operation on the given dimensions
3781	Applies a condition to the given ndarray
3782	Returns the first index of the given array
3783	Convert this array to a FlatProperties object
3784	Create a new FunctionProperties object from a FlatProperties object
3785	Create a flat list of properties
3786	Sets the exception.
3787	Sets the exception if this exception is the first.
3788	Merges two lists of coordinates.
3789	Partitions a variable into chunks of size chunk
3790	Converts the given TensorProto. DataType to the corresponding nd4j type.
3791	Shuts down the transport and the executor.
3792	Get current device architecture
3793	Convert a column to an image
3794	Pooling 2D operation
3795	Creates a new instance from a byte buffer.
3796	Splits the list into batches of the specified size.
3797	Validate that the concatenated ndarrays have the same shape and dimensions
3798	Set the data type of the data buffer.
3799	Generate a linearly spaced ndarray
3800	Flatten a collection of matrices into a single matrix.
3801	Computes the bilinear products between two tensors
3802	Create a complex array from a double array.
3803	Create a complex array with the given value
3804	Create an array of complex ones with the given value
3805	Returns true if the current time is greater than the sync time.
3806	Subtracts the complex number from this complex number and stores the result in the result.
3807	Complex tangent function
3808	Ceil the complex number
3809	Negates the complex number
3810	Returns the absolute value of the complex number
3811	Complex power function
3812	Creates a new Aeron context.
3813	Binarizes the features by binarizing the values of the linear view.
3814	Samples the examples and outcomes from the model
3815	Returns the memory footprint of the feature mask and features
3816	Stringify an exception
3817	Returns the simple hostname without the port number.
3818	Convert an array of strings to a comma - separated string.
3819	Converts a byte array to a hex string.
3820	Returns an array of strings from the given string.
3821	Splits a string into an array of strings.
3822	Splits a string into an array of strings.
3823	Finds the next occurrence of separator or escapeChar.
3824	Escapes a string for use in an HTML entity.
3825	Join the given strings with the given separator.
3826	Converts a string to CamelCase.
3827	Replaces all tokens of the given template with the given replacements.
3828	Get the stack trace of the given thread as a string.
3829	Invert the matrix
3830	Returns the n th element in the array.
3831	Check if the actuial is on the host side.
3832	Checks if the object is actuial on the device side.
3833	Create shape information
3834	Create shape information
3835	Check if shapeInfo is a vector shape.
3836	Get the order of the elements in an ndarray
3837	Get the offset for the given indexes
3838	Convert an array of indices to an array of indices
3839	Gets the half - precision value of the buffer at the given index.
3840	Reallocate the data buffer to the given length.
3841	Copies n bytes from one buffer to another.
3842	This method returns a constant buffer
3843	Returns the Kafka broker URI for this configuration.
3844	Computes the power of an ndarray with respect to the given power
3845	Log the elements of an ndarray
3846	Max function with scalar
3847	Computes the maximum of two ndarrays
3848	Minimum function.
3849	Computes the minimum of two ndarrays
3850	Stabilizes an ndarray
3851	Computes the exponential of the given array
3852	Computes the logarithm of the input array.
3853	Prepare bounds for the regression
3854	Adjusts the scheme to the bounds of the input x.
3855	Returns the next dataset.
3856	Computes the SGE QRF decomposition of the input matrix A and stores the result in R
3857	Build an allocation shape from a DataBuffer.
3858	Checks if a file or directory exists in the system path.
3859	Read the data from the stream
3860	Sweep the last command from the queue.
3861	Create an ndarray from a python pointer
3862	Create an ndarray from a file in NPY format
3863	Allocates a new pointer to a page.
3864	Attaches an object to the lock manager.
3865	Returns true if the server is started.
3866	This method is called by the op processor when it is executed.
3867	Flush the queue blocking.
3868	Get the input stream of the resource.
3869	Returns the device associated with the given thread.
3870	Associates the thread with the device.
3871	Get next available device.
3872	Returns the name of the operating system.
3873	Calculates the architecture of the current process.
3874	Publish an ndarray to the camel context
3875	Start the server.
3876	Creates a new DataBuffer of the given type.
3877	Intercepts operations on int data type.
3878	Adds two complex numbers.
3879	Process the message.
3880	Average pooling 3d operation.
3881	Depth - wise convolution operation.
3882	Resets the statistics.
3883	Get the class of the given op.
3884	Store the current array and allocate a new one.
3885	Returns the shape of the array.
3886	Evaluate the function
3887	Compress a double array
3888	Flatten an array of complex numbers into a flattened array of complex numbers
3889	Center the complex array
3890	Truncate an array to n complex values
3891	Pad an ndarray with zeros to the specified shape
3892	Get the index of the largest element in an ndarray
3893	Broadcast the given array to all devices
3894	Process the aggregation message.
3895	Returns the gamma of the given precision.
3896	Calculates the square root of x.
3897	Calculate the cubic root of x.
3898	Returns the nth number of digits of x.
3899	Returns the exponent of x.
3900	Returns the exponential of the value of the current value.
3901	Returns the power of x to y.
3902	Round to n decimal places.
3903	Calculates the sine of x.
3904	Returns the tangent of x.
3905	Returns the hyperbolic cosine of x.
3906	Calculates the hyperbolic sine of x.
3907	Calculates the hyperbolic tangent of x.
3908	Calculates the absolute error in the arcsineh function.
3909	Calculates the absolute error in the arcushmann distribution.
3910	Returns the absolute error of x.
3911	Calculates the Broadhurst cost of a broadhurst.
3912	Scale the given BigDecimal by the given number of decimals.
3913	Scales x to the nearest precision.
3914	Decimal error to precision.
3915	Adds a function to the graph with the given id.
3916	Returns the inputs for the given function.
3917	Update the ndarray for the given variable name.
3918	Adds a shape to the variable map.
3919	Associate an array with a given variable
3920	Gets the property for a given DifferentialFunction.
3921	Adds a property to the model for a given function
3922	Adds a new outgoing function to the DifferentialFunction object.
3923	Adds a new function to the function receiver.
3924	Has the given function s arguments?
3925	Evaluate the SameDiff function.
3926	Create a new variable with a constant shape
3927	Create a new variable with values that are equal to the input
3928	Create a new variable with the same shape as input but values are 0 - based
3929	Remove the argument from the function.
3930	Set the gradient for the given variable name
3931	Average pooling 3d operation.
3932	Create a GRU cell with the specified configuration
3933	Execute the given ops
3934	Create a while statement
3935	Executes the function with the given name
3936	Executes the given function with the given arguments.
3937	Execute the backward operation and return the result
3938	Add a variable to the list of variables that are to be placed in the place holder.
3939	Allocate bytes in the specified memory type
3940	Returns the length for the given data buffer type.
3941	Get the name of the data buffer type.
3942	Get the data buffer type from the context
3943	Get the number of the operation with the given name.
3944	Destroy all workspaces for the current thread.
3945	Prints allocation statistics for current thread
3946	Move a diagonal vector to a diagonal vector.
3947	Receive the current message
3948	Computes the variance of the given accumulation
3949	Decode the encoded data into target
3950	Returns the node name of the given name.
3951	Invoke the tad magic for the given scalar op
3952	Assert that no workspaces are open
3953	Calculate the negative log likelihood of the labels
3954	Request a tick.
3955	Try to request a TOE.
3956	Release the toe lock.
3957	Returns the current access state.
3958	Build the environment
3959	Process the message.
3960	Initializes the current dataset from the list of datasets
3961	Initialize the host collectors
3962	Get the device pointer.
3963	Synchronize the given buffer with the host.
3964	Applies an update to the given gradient
3965	Synchronize the given allocation point to the host.
3966	Create an NDArrayIndex from an ndarray
3967	Properties for function.
3968	Has place holder inputs.
3969	Perform the diff operation on the given variables
3970	Format an ndarray to a string.
3971	Imports the given graph into the SameDiff.
3972	Convert an ndarray to a Blob
3973	Load a complex array from a Blob
3974	Save the complex array to a file.
3975	Copy real values to the given array
3976	Copy the imaginary values from the linear view to the given ndarray
3977	Subtracts complex numbers from this array by the absolute difference of the complex number with the other
3978	Assigns complex values from another array.
3979	Get the rows of the matrix
3980	Put a row of complex data into the matrix.
3981	Put a complex column
3982	Subtracts other from this array and stores the result in result
3983	Add the other complex array to the result
3984	Subtracts complex values from this array and returns the result
3985	Adds two complex numbers.
3986	Assigns a complex number to the array
3987	Returns a copy of this array with all complex elements removed
3988	Computes the eigenvalues of the matrix A.
3989	Computes the generalized eigenvalues of A given A and B
3990	Computes the maximum absolute value of an IComplexNDArray.
3991	Copies the complex elements from the input array to the output array.
3992	Computes the complex complex number of the complex number alpha on the complex number array X.
3993	This method is called when a message is received from the distributed optimizer.
3994	Count the number of non - zero values in the given weights
3995	Reduce the loss along the specified dimensions
3996	Returns the no - arg constructor for the given class.
3997	Gets the constructor for the given class with the given arguments.
3998	Invokes a method with the given parameters.
3999	Returns the first annotation of the given type.
4000	Gets the declared annotation.
4001	Checks if an annotation is present on a class.
4002	Creates a proxy instance for the given result class.
4003	Load the entity into the datastore.
4004	Save the given entity.
4005	Create a proxy for the given raw MemcacheService.
4006	Gets the entity metadata of the given kind.
4007	Query for keys that are not part of the query.
4008	Performs a query that returns a chunk of results.
4009	Performs a normal query with the given query.
4010	Executes a projection query.
4011	Count the number of keys that match the given query.
4012	Partition the input iterator into chunks of chunkSize.
4013	Load the results.
4014	Creates a message for the given path and message.
4015	Create a key from a POJO.
4016	Compares two keys using the identity hash function.
4017	Converts a raw key into a Key object.
4018	Converts a typed key to a datastore key.
4019	Gets the kind of the entity.
4020	Checks if the given type has any type parameters that are missing.
4021	Checks if the given type is a subtype of the given type.
4022	Returns the direct super types of the given type.
4023	Capture the type of a parameterized type.
4024	Get translator.
4025	Get a populator for the given entity class and path.
4026	Returns true if the given class has an Index annotation and false if not.
4027	Checks if the method is of interest.
4028	Get all the declared properties.
4029	Get the key metadata for the first property of the entity.
4030	Get the value for the given key.
4031	Executes the current round.
4032	Fetch the pending keys from the datastore.
4033	Adds the discriminators of the given class.
4034	Registers a subclass of the given translator.
4035	Get the component type of a collection.
4036	Returns the type of the key of the map.
4037	Returns a new path that is the same as the given path.
4038	Returns the final path of this forward path.
4039	Returns the path string representation of this path.
4040	Returns the depth of this path.
4041	Put all the updates in the given collection into the cache.
4042	Empty the cache for the given keys.
4043	Cache put if unconditionally.
4044	Get all the values from the cache.
4045	Returns the set of keys of the given buckets.
4046	Find the key fields of the given class.
4047	Sets the key of the given FullEntity.
4048	Sets the id of the given POJO.
4049	Returns the raw key of the parent of the given pojo.
4050	Registers a subclass of the given type.
4051	Checks if two types could have a common subtype.
4052	Transforms the given owner into the type that it is declaring.
4053	Returns the annotation of the given type or null if it is not present.
4054	Adds all values from the other session to this session.
4055	Load a key from the round.
4056	Execute the next round.
4057	Translate the raw result into a map of entities.
4058	Fetch the entities with the given keys.
4059	Load entity.
4060	Creates a raw key with the given id.
4061	Get the raw value of the given key.
4062	Returns the id value of the given key.
4063	Converts a URL - safe key to a Google Cloud Datastore key.
4064	Create a new transaction.
4065	Transact a new object.
4066	Transact the work in a single transaction.
4067	Checks if the given object matches the given conditions.
4068	Returns the ObjectifyService object.
4069	Creates an AsyncDatastore.
4070	Gets the metadata for an entity.
4071	Allocate num keys.
4072	Open a new Objectify instance.
4073	Closes the given objectify instance.
4074	Homogenizes the indexes of the given list.
4075	Creates a new reference to the given value.
4076	Returns the value of the key. If the key is not found an exception is thrown.
4077	Add a value to the list associated with the given key.
4078	Returns true if the future is done.
4079	Generates the If conditions for the given field.
4080	Execute all deferred tasks.
4081	Get the first container of the given type.
4082	Get the stat for the given kind.
4083	Unwraps the given exception and throws it.
4084	Get a translator for a given type key.
4085	Get the root entity for the given class.
4086	Create a translator.
4087	Load the property from the given entity into the given POJO.
4088	Get the value of the property from the given entity.
4089	Set the value of the property.
4090	Saves the value of the property.
4091	Get the value of the property.
4092	Writes the extensions of the given message to the given JSON generator.
4093	Writes the content category.
4094	Writes the content categories.
4095	Process the given snippet.
4096	Get bids from response.
4097	Get a bid builder from a bid response.
4098	Update all bids in the given response.
4099	Remove bids that match the given filter from the given response.
4100	Returns an iterable of the imp objects in the given request that match the given filter.
4101	Reads the extensions of the given message.
4102	Returns true if the current token is null.
4103	Register an extension reader for the given message class.
4104	Register an OpenRtbJsonExtWriter for a message.
4105	Process the SnippetProcessorContext.
4106	Process the fields of the bid.
4107	Updates the given objects with the result of applying the given updater to each object.
4108	Returns a list of messages that match the given predicate.
4109	Returns the current name of the JsonParser.
4110	Read the next JSON object.
4111	Read the next token from the JsonParser and check that it is a start of an array
4112	Peeks the next token from the JsonParser.
4113	Writes an int boolean field.
4114	Writes a list of Strings to a JsonGenerator.
4115	Writes a list of ints to a JSON array.
4116	Writes a list of long values to the JSON generator.
4117	Writes the given enums to the given JSON field.
4118	Resolve a URL to a target URL.
4119	Fixes the query targets in a URL.
4120	Get the host segments of the given URL.
4121	Get the host part of the given URL.
4122	Get the page from the given url.
4123	Load a list from the storm configuration.
4124	Extract the configuration element from the given map.
4125	Get the protocol for the given URL.
4126	Generate WARC info.
4127	Extract the refresh URL from the given value.
4128	Get the metadata for an outlink.
4129	Filter out metadata that is not persisted but not transfered.
4130	Add a new URL to the queue.
4131	Cleans a field name.
4132	Get the charset from the BOM.
4133	Detect the charset of the given text.
4134	Get the charset from the meta tags.
4135	Checks if the content contains the clue.
4136	Sets the value of the given key.
4137	Get the first value in the Metadata with the given keys.
4138	Get a list of cookies from a list of cookies strings.
4139	Check if the cookie domain matches the host name.
4140	Returns a cache key for the given URL.
4141	Get the robot rules set from the cache.
4142	Extract meta tags from the given document fragment.
4143	Acknowledge the given tuple.
4144	Filter the given URL against the configured scopes.
4145	Apply the rules to the given URL.
4146	Reads the rules from the given file.
4147	Process the query elements of the given url.
4148	Load the NavigationFilters from the storm configuration.
4149	Add a record format to the bolt.
4150	Check that we have not exceeded the minimum delay between queries.
4151	Check if we should trigger queries.
4152	Load the ParseFilters from the storm configuration.
4153	Append a node to the current node or append to the document fragment.
4154	If the current node is outside of the document element append a text node containing the string.
4155	Append a processing instruction.
4156	Append a comment.
4157	Handle a CDATA section or a CDATA comment.
4158	Start a DTD.
4159	Start a prefix mapping.
4160	Get the value for the given tuple.
4161	Trim text to fit within the maximum length.
4162	Checks if the given status is in the custom intervals.
4163	Load the URLFilters from the storm configuration.
4164	Set the number of items in the wheel.
4165	Resolves the size and state of a measure.
4166	Sets the drawable to be used to clear the item.
4167	Sets the angle of the wheel.
4168	Updates the selected position.
4169	Invalidate the wheel item drawable at the given position.
4170	Convert a raw position to a wheel position.
4171	Update the velocity and angle.
4172	Get the contrast color for the given material color entry.
4173	Clamp the value to be within the range [ 0 upperLimit ).
4174	Writes the coverage data to the given writer.
4175	Returns the data as a byte array.
4176	Sets the string value.
4177	Make a 1D Array of String objects.
4178	Creates a new ArrayChar from a String.
4179	Make a new ArrayChar from an Array of Strings.
4180	Create a char array from a String Array.
4181	Get the offset of the time interval for a given Grib2Record.
4182	Show the window.
4183	show the window if it is not already iconified
4184	Make size estimate for a list of grids
4185	Read a GRIB 1 file and print the number of records found.
4186	Creates a new unit name with the given name and plural.
4187	Creates a new unit name.
4188	Makes a plural form of a name.
4189	Returns true if the date is included in the interval.
4190	Intersect this range with another.
4191	Extend this date range with another date range.
4192	Extend the range by a new date.
4193	Sets the start date.
4194	Sets the end date of the event.
4195	Sets the duration of the time interval.
4196	Recalculates the duration.
4197	Add a MapBean to the menu.
4198	Print out the error message and the current input.
4199	Returns the name of the file.
4200	Returns a string representation of the parameters.
4201	Open a DAP file from raw data.
4202	Computes the bounds of the given bounds.
4203	Synchronize the min and max slider with the date range.
4204	Compute the chunking for the given dimensions.
4205	Register a directory for catalog changes.
4206	Process events from the watch queue.
4207	Sets the reference date.
4208	Open a feature dataset.
4209	Wrap a NetcdfDataset with a FeatureType
4210	Checks if a feature type is ok.
4211	Find the FeatureType object from the NetcdfFile
4212	Writes a catalog to the HttpServletResponse.
4213	Convert a catalog to HTML.
4214	Get the user css.
4215	Get the user head.
4216	Make a dynamic catalog.
4217	Add all global services that are not already in the catalog.
4218	Initializes the HTTP session with the given credentials provider and user agent.
4219	Get the content as a string.
4220	PUT content with a urlencoded string.
4221	Get the front page.
4222	Make a catalog from a path.
4223	Extract the geospatial coverage from the GribCollectionImmutable.
4224	Get a single dataset by its type name.
4225	Returns true if this VertCoordValue is equal to the given VertCoordValue.
4226	Creates a new unit ID.
4227	Parse an attribute from a string.
4228	Read the top of the NIRAD product head.
4229	Convert two short values into an int.
4230	Convert a byte array to an integer.
4231	Get the date from the Julian Day and Duration.
4232	Makes sure that the given object name is a valid NetCDF object name.
4233	Checks if the given object name is a valid NetCDF3 object name.
4234	Open the given file for writing.
4235	Read the data for a single record from a N3 Structure.
4236	Read the data subset of a record.
4237	Fill the variables in the NC file with the constant values.
4238	Makes a time struct from the time values of the specified time index.
4239	Make a time struct from a Calendar object.
4240	Checks if the given template contains any time templates.
4241	Adds a function to the list of functions.
4242	Returns the boolean function with the given name.
4243	Get the BTFunction object for the given name.
4244	Load a new function.
4245	Get the level name for a given grid record.
4246	Get the level description for a given record.
4247	Get the level unit for a given grid record.
4248	Returns the projection type of the given grid definition.
4249	Returns true if the given grid record is a vertical coordinate.
4250	Checks if the given record is a layer.
4251	Create a CoordinateTransform from a NetcdfVariable
4252	Make a dummy transform variable for the given coordinate transform.
4253	Create a projection from a CoverageTransform.
4254	The main method of this class.
4255	Saves the state of this instance.
4256	Returns a copy of this Chronology with the specified time zone.
4257	Write the count to the stream.
4258	Writes an array of values to the stream.
4259	Writes a byte array to the output stream.
4260	Writes a byte array to the output stream.
4261	Finishes initialization.
4262	Creates a new instance from a DateRange.
4263	Factory method to create a GDS object.
4264	Parse the text using the DDS object.
4265	Parse the given text using the given DAS object.
4266	Swaps the header of a grid.
4267	Reads a grid of floats from the file.
4268	This is the main method of the class. It reads the GRID2001 file and
4269	Writes a constraint to the output.
4270	Writes WFS headers and SS.
4271	Writes the list of operations to the WFS file.
4272	Recursively read all files in a directory and call the given closure with the stats.
4273	Scans a log file and calls the given closure with each log line.
4274	Get the packed type of a grid.
4275	Find a grid record by parameter.
4276	read the data packing type and return the data
4277	Unpacks data from the input stream.
4278	Compute the DP_UGRB data points.
4279	Unpack Grib1 data.
4280	Unpacks the data from a Grib2 record.
4281	Prints the grids in the grid index.
4282	Get the next byte from the input stream.
4283	Creates a new calendar date from the given calendar date.
4284	Creates a CalendarDate from a java. util. Date.
4285	Constructs a new calendar date from the specified milliseconds.
4286	Creates a CalendarDate from the given calendar and milliseconds.
4287	Parse the given string representing the UDUnits.
4288	Returns the difference in milliseconds between the specified date and the specified period.
4289	Create an atomic variable.
4290	Setup the request object.
4291	Escape a string.
4292	Creates a list of slices from a list of ranges.
4293	Unwrap a file.
4294	Checks if the given dimension set contains any variable length dimensions.
4295	Computes the effective shape for a DAP dimension set.
4296	Adds the given date to this time interval.
4297	Multiply this unit by another unit.
4298	Divide this unit by the given unit.
4299	Divide this unit into the given unit.
4300	Raise the unit to the given power.
4301	Convert the given amount to the derived unit.
4302	Convert the input array to the derived unit.
4303	Convert the given amount to the derived unit.
4304	Returns a canonical representation of this derived unit.
4305	Read the data from the vindex.
4306	Read the data from the data index.
4307	Flatten the data into a point feature collection.
4308	Find a service by name.
4309	Returns the gate size for the given gate type.
4310	Returns the start of the gate for the given datatype.
4311	Returns the number of gates of the given datatype.
4312	Write the document to the output stream.
4313	Get the preferred size of the tree.
4314	Verifies that the given dataset is a descendant of the given ancestor dataset.
4315	Generate a proxy catalog for the given dataset.
4316	Creates a new instance of CalendarDateUnit.
4317	Creates a new CalendarDateUnit with the given Calendar.
4318	Creates a new instance of CalendarDateUnit.
4319	Makes the offset from the given reference date.
4320	Make a calendar date from a double value.
4321	Returns the quantity dimension.
4322	Checks if the file is a valid UCAR file.
4323	Read the names of the stations in the file.
4324	Read the data for a variable in a given section.
4325	Read an array of ints from the input stream.
4326	Read the data from the given section into the given channel.
4327	Calculate elevation.
4328	Calculate the step value for a histogram.
4329	Calculate the angle between two angles.
4330	Calculate the temperature from the data.
4331	Calculate the Nyquist value.
4332	Make a vertical transform for the given dataset and time dimension.
4333	Set the debug flags.
4334	Sets whether or not to extend the index.
4335	Read the x - axis values.
4336	Checks if the given variable is missing the XY record.
4337	Get the LatLon bounding box of this coordinate.
4338	Finish the sequence.
4339	Sets the specified number of spaces to the specified number of tabs.
4340	Pads a string to a certain width.
4341	Returns a string of the given integer with the given width.
4342	Returns a long padded to the specified width.
4343	Format a byte size as a human readable string.
4344	Print a string representation of the given number of significant figures.
4345	Print the decimal part of a number.
4346	Returns a string representation of the shape.
4347	Finishes the slice.
4348	Returns a string representation of the constraint.
4349	Compose two slices.
4350	Map i - th element of target slice to i - th element of target slice.
4351	Dump bytes from a buffer to standard out.
4352	Dumps the bytes of a buffer to a file.
4353	Returns the type of the earth ellipsoid with the given name.
4354	Get the ellipsoid with the specified epsgId.
4355	Decode a data column.
4356	Decode varlen data.
4357	Extract the HTML from the given URL.
4358	Get the text content of a URL.
4359	Filter out meta tags.
4360	Read the data from the specified variable to the specified channel.
4361	Adds all of the given Attributes to this set.
4362	Remove an attribute.
4363	Remove an attribute.
4364	Returns the time offset in milliseconds.
4365	Add an ActionSourceListener to this ActionCoordinator.
4366	Get the standard date from a string.
4367	Get the standard or ISO date.
4368	Returns the date origin of this time scale unit.
4369	Get the date.
4370	Make a Date from a double value.
4371	Make a value from a date.
4372	Make a standard date string from a double value.
4373	Get the spacing in km for a given type.
4374	Add dimensions to the given NetCDF file.
4375	Add a coordinate axis to the coordinate space.
4376	Make the projection for the given type.
4377	Add the parameters of the GDS to the given variable.
4378	Add a coordinate system variable to the specified NetcdfFile.
4379	Make the Lambert Conformal coordinate system.
4380	Make the projection and scale for the Stereographic projection.
4381	Construct a Mercator projection.
4382	Make the message geostationary.
4383	Set the DX and DY parameters.
4384	Read a dataset.
4385	Read a datasetScan element.
4386	Read the metadata content from the specified URL.
4387	Returns the level type of the Grib level.
4388	Checks if the file is a valid file.
4389	Writes a byte array to the underlying stream.
4390	Sets the clear name of this attribute and attribute table.
4391	Get the coordinate name for the given axis type
4392	Get the coordinate name for the given axis and dimension.
4393	Build the XML for the error response.
4394	Build a DAP exception from this exception.
4395	Breakup levels are the values of the level variable.
4396	Make a z - coordinate axis.
4397	Create new variables for the given level dimension.
4398	Make a time coordinate axis from a reference variable.
4399	Bit shave a float by masking the bits
4400	This method is used to write a Grib2 file to a NetCDF file.
4401	Wrap the given ncfile in a dataset if necessary.
4402	Opens a NetcdfFile from the given location.
4403	Clear the coordinate systems.
4404	Find a coordinate axis of the given type.
4405	Find a coordinate axis by its full name.
4406	Find a coordinate system by name.
4407	Find a coordinate transform by name.
4408	Check if the enhance mode is needed.
4409	Set the values of a variable.
4410	Set the values of a Variable.
4411	Create an array of the given dtype with the given string values.
4412	Returns the index of the data in this matrix.
4413	Get an existing file.
4414	Returns a list of all features within the given bounding box.
4415	Discretizes the data.
4416	Add the metadata from another ThreddsMetadata object.
4417	Add a documentation type and inline content.
4418	Remove all documentation of a given type.
4419	Returns the number of bytes that can be read from the given starting point.
4420	Checks if the given NetcdfFile is a Mine file.
4421	Add a dataset to the list of files to be processed.
4422	Breakup convention names.
4423	Build a convention attribute from the given convention names.
4424	Build the coordinate systems
4425	Finds all coordinate axes in the dataset.
4426	Find coordinate systems in the dataset.
4427	Make coordinate systems.
4428	make sure all coordinate systems are maximal
4429	Checks if the given variable is a coordinate axis for the given variable.
4430	Adds a coordinate variable to the map.
4431	Subset this catalog with another dataset.
4432	Marks the top dataset as having the given filter.
4433	Mark a dataset for deletion.
4434	Delete all datasets that are marked as read.
4435	Initialize the GET request.
4436	Count the number of times the given value has been seen.
4437	Adds a prefix to the symbol table.
4438	Compares this row with another row.
4439	Compares two boolean values.
4440	Get the scope for the group.
4441	Pass all reserved attributes to the given node.
4442	Checks if the given date range has valid parameters.
4443	Returns true if the iterator is at the next item in the slice.
4444	Registers a DSP class.
4445	Register a DSP class.
4446	Returns true if the DSP class is registered.
4447	Unregister a DSP class.
4448	Factory method to create a Grib2Tables instance.
4449	Calculate the size of the time interval in hours
4450	Get the offset of the time interval of the given record.
4451	Returns the VertCoordType for the given code.
4452	Finishes the DAP parser.
4453	Sort the DAP nodes in reverse order.
4454	Get a RAF file from a partition.
4455	Finds a variable with the given attribute name.
4456	Finds a variable with the given attribute value.
4457	Finds the variable with the given attribute name and value.
4458	Finds a variable in the given structure that has the given attribute value.
4459	Finds a nested structure in a structure.
4460	Checks if the dataset has a record variable of type STRUCTURE.
4461	Get the literal value of a global attribute.
4462	Get the FeatureType from the literal.
4463	Get the variable name from a literal key.
4464	Returns the value of the coordinate at the specified position.
4465	Convert longitude to latitude.
4466	Returns the values of the coordinates in the coordinate axis.
4467	Returns the section of the coordinate axis.
4468	Finds the closest point in the run to the target.
4469	Returns the name of the attribute.
4470	Add an action to the menu.
4471	Returns the match for the given path.
4472	Main method of the program.
4473	Find the index of the first occurrence of a byte array within the range [ start start +
4474	Adds a source picture to the cache.
4475	Report the contents of the cache.
4476	Stop the background loading of all source pictures currently in progress.
4477	Stop background loading all sources except the one specified.
4478	Make a GET request.
4479	Create a HTTPMethod object from the given HTTPSession. Methods and URL.
4480	Returns a random float value of the given type.
4481	Returns a random number in the range [ 1.. max ).
4482	Read the data for a given variable.
4483	Get the FileSystemProvider for the given URI.
4484	Read the station table.
4485	Returns the index of the given gr.
4486	Remove the data variable with the given name.
4487	Convert cloud HGT height to meters.
4488	Read the data from a section.
4489	Set the number of colors to use.
4490	Calculates the transform to be applied to the given rectangle.
4491	Converts a URI into an AuthScope.
4492	Finishes the comparison.
4493	Checks if this factor is reciprocal of the given one.
4494	Get a catalog of the files in a directory that match the given filter pattern.
4495	Find the index of a value in the array.
4496	Read metadata content from a URL.
4497	Read the metadata content from the given element.
4498	Add the content of the catalog generation configuration to the metadata element.
4499	Validate the metadata content.
4500	Read the catalogGenConfig element.
4501	Read a dataset source element.
4502	Read a dataset namer element.
4503	Read a dataset filter element.
4504	Read a result service element.
4505	Create the catalogGenConfig element.
4506	Create DatasetSource element.
4507	Create DatasetNamer element.
4508	Create DatasetFilter element.
4509	Create the resultService element.
4510	Check if a flag is set.
4511	Construct a menu from a JMenu.
4512	Adds the menu items to the given menu.
4513	Add the parameters from the given table.
4514	Create a parameter from the given words.
4515	Get a parameter by name.
4516	Reads the contents of the input stream into a String.
4517	Read bytes from the stream.
4518	Replaces the template with the name of the ENS template.
4519	Set the station id and description variable names.
4520	Accepts the given buffer.
4521	This method shows the number format information.
4522	Read the bitmap from the Grib2 file.
4523	Set the NetcdfFile to be used for the output.
4524	Set the debug flags.
4525	Parse a name into its components.
4526	Checks if the DStructure is a group.
4527	Returns the dimension of the string length attribute of the DODS variable.
4528	Get a shared dimension from the given group.
4529	Construct a list of dimensions from a DArray.
4530	Returns true if dtype is unsigned.
4531	This method is used to read data from the server.
4532	Get an icon from a resource.
4533	Get an image from a resource.
4534	Creates a custom cursor for the specified image.
4535	Read data from a file filled with a primitive value.
4536	Read data from the data input stream with the given index and data type.
4537	Read data from the file.
4538	Make a primitive array of the specified size.
4539	Convert a byte array to a char array using the UTF - 8 encoding.
4540	Convert a char array to a byte array using the default charset.
4541	convert byte array to char array
4542	Read a section from a file.
4543	Create an ArrayStructureW object for a section.
4544	Get the string value of a scalar member.
4545	Get the scalar structure for a given member.
4546	Get the array value of a given member in a given record.
4547	Recursively creates a structure members object for the given variable.
4548	Adds the dimensions of this group to the given NetcdfFile.
4549	Create a CrawlableDataset from a given path.
4550	Normalizes a path.
4551	Adds an explicit dataset to the cache.
4552	Add a dataset scan to the dataset manager.
4553	Finishes the processing of the dataset.
4554	Create the datasets.
4555	Get the typical dataset.
4556	Create a dataset.
4557	Put a ResourceControl for a dataset.
4558	Adds a point to the curve.
4559	Get the upper bound of the bounding box.
4560	Get the lower bound of the bounding box.
4561	Validate the filter.
4562	Checks whether this filter applies to the given dataset.
4563	Add all points in the given feature dataset point.
4564	Parse a constraint from the request URL.
4565	Evaluates all the top - level clauses.
4566	Print the constraint.
4567	Amend the elements of the given group from the ODL file.
4568	Set the shared dimensions for the given variable.
4569	Check if a dimension is in the list of unknown dimensions. If so set the length of
4570	Finds a group in a nested group tree.
4571	Reads the content of the link.
4572	Returns the standard URI for this catalog.
4573	Set the projection.
4574	Add a component to the layout.
4575	Invalidate the layout of the given target container.
4576	Remove a component from the layout.
4577	Returns the minimum size of the layout.
4578	Layout the given container.
4579	Checks if the given coordinate system is a radial coordinate system.
4580	Returns the maximum radial value.
4581	Open a URLConnection for reading
4582	Converts Earth to Satellite
4583	Convert from sat to earth
4584	Converts from German to GEOS.
4585	Converts a scan geometry to the sweep angle axis.
4586	Convert sweep angle axis to scan geometry.
4587	Sets the runtime coordinates.
4588	Write a point - ob - data dataset to a file.
4589	Rewrite point feature dataset.
4590	Returns the array sequence of the given member name.
4591	Returns the full name of the node.
4592	Returns the unique ID of this URI.
4593	Get the access for a given service type.
4594	Find a dataset by name.
4595	Returns the catalog that this node is a direct child of or null if this node is a
4596	Get the metadata of this catalog.
4597	Find a service by name.
4598	Returns the list of variables for the given vocabulary.
4599	Find all catalog references in a dataset tree.
4600	Escape a path for use in a URL.
4601	Add a stagger to the given array.
4602	Interpolate the array using linear extrapolation.
4603	Computes the roh of the given latitude.
4604	Get the detail info about the parser.
4605	Create a structure from the gemreader parameters.
4606	Creates a missing variable.
4607	Creates a new variable for a GempakParameter.
4608	Add the global attributes to the NetCDF file.
4609	Returns the size of the given STN variable.
4610	Get the 1D array for the given data type and length.
4611	Get the state of the goto.
4612	Returns a string describing a syntax error.
4613	Print the reduced stack.
4614	Read the next DMR chunk from the stream.
4615	Reads the error document.
4616	Read len bytes from the stream.
4617	Read the header of the file.
4618	Convert an ISO - 8601 formatted string to a Date.
4619	Read a table from a URL or file.
4620	Transfer a group from one dataset to another.
4621	Get the STN file.
4622	Open the NCML file.
4623	Get the beginning of a node.
4624	Get the end of the node at the given index.
4625	Create all the sources of all the runtime collections.
4626	Set the value of the textfield.
4627	Returns the data type for the given format.
4628	Converts an ECF coordinate to a LLA coordinate.
4629	Clean the unit of a unit string.
4630	Removes all spaces and underscores from a name.
4631	Checks if the unit is unitless.
4632	Factory method for creating Notes objects.
4633	Returns the variable id for a VarNotes object.
4634	Parse the DAS file and add all attributes.
4635	Find the DodsV object with the given name.
4636	Find the dataDDS in the DDS tree.
4637	Find a child by its index.
4638	Returns the parent group of this group.
4639	Returns the dimension with the given index.
4640	Find the index of a dimension with the given name.
4641	Get the units string.
4642	Returns the shape of this variable as a section.
4643	Slice this variable into a new dimension with the specified value.
4644	Sets the enum typedef for this variable.
4645	Read the next section of the file.
4646	Reads a scalar value as a String.
4647	Read the data from the underlying stream.
4648	Read the array from the given section.
4649	Write the CDL document to a string.
4650	Returns a string representation of this variable.
4651	Sets the data type of this variable.
4652	Sets the dimensions of the shape.
4653	Reset the shape of the Dataset.
4654	Sets the dimensions of this variable.
4655	Resets the dimensions of this variable to the original dimensions.
4656	Sets the dimension at the given index.
4657	Sets the cached data.
4658	Get all dimensions of this dimension.
4659	Set the bounding box of the map.
4660	Finishes the simulation.
4661	Returns an iterable of all datasets in the dataset store.
4662	Checks if the given path ends with one of the SYNEXTENSIONS.
4663	Open the DAP file.
4664	Build the DMR object.
4665	Recursively build the sequence type for a structure or sequence variable.
4666	Add the dimensions to the given variable.
4667	Find a matching enum.
4668	Get the core dimensionset.
4669	Scans a BARF file for messages.
4670	Process a Bufr message as a dataset
4671	This method is called when a request is made to upload a file.
4672	Get the transformation that will be applied to the navigation.
4673	Returns true if the map should rotate based on the specified dimensions.
4674	Get the area of the map.
4675	Converts a projection point from world space to screen space.
4676	Pan the map by the specified amount.
4677	Zoom the image.
4678	Calculate the position of the navigation in the world space.
4679	Add a listener to the listener manager.
4680	Remove a listener from the list of listeners.
4681	Sends an event to all registered listeners.
4682	Send an event to all listeners except the source object.
4683	Print a command to the given writer.
4684	Print a command to the given writer.
4685	Print the variable data.
4686	Print a variable s data section.
4687	Print a StructureData object to a PrintWriter.
4688	Print an array in plain format.
4689	Print an array to a print writer with indentation.
4690	Writes a NetcdfFile to a Writer.
4691	Read an attribute as a double.
4692	Add a parameter to the coordinate transform
4693	This is a test program that prints out the access log.
4694	Reads an object of the given type from the given slices.
4695	Checks if the given record is positive up.
4696	Checks if this Unit is compatible with the given Unit.
4697	Make a label for this quantity.
4698	Set the bit offset.
4699	Read nb bits from the current byte and return as a unsigned integer.
4700	Convert nb bits to a signed integer.
4701	Open a connection to the DAP2 server.
4702	Get the DAS object that corresponds to this command.
4703	Get the DDS object for the given CE.
4704	Returns the complete CE string.
4705	Converts a projection point to a LatLon point.
4706	This method converts the XML to a catalog of the IDV dataset.
4707	Returns a DateRange that is IDV compatible with the given range.
4708	Checks if the file is a valid file.
4709	Handle satellite information.
4710	Handle the sensor information.
4711	Read the root element from the given location.
4712	Removes all XML character data from the given text.
4713	Xunescape a string.
4714	Escape a string for use in a URL query.
4715	Unescapes a URL query string.
4716	This method decodes backslashes in a string.
4717	Escapes a string for use in a URL.
4718	Add global attributes for lightning
4719	Swaps two bytes at a time.
4720	Swap four bytes in a byte array at a given offset.
4721	Swap the double value in the byte array at the given offset.
4722	Swap the bits of a float and return the result.
4723	Swap two double values.
4724	Convert a short to a byte array.
4725	Convert an integer to a byte array.
4726	Convert a long value to a byte array.
4727	Create a subset of this transform with the given ranges.
4728	Write the document to an XML document with the given date.
4729	Make a linear system of the form a + b.
4730	Start XML.
4731	Write the features to the WFS file.
4732	Add levels to the levels list.
4733	Add the vertical dimensions to the given group.
4734	Add the record to the given group.
4735	find the coordinate transform for a given variable name
4736	Returns the index of the given record.
4737	Exit the disk cache.
4738	Get the file for the given file location.
4739	Get the existing file or cache.
4740	Display the cache files.
4741	Delete a directory and all of its files.
4742	Calculates the bearing and azimuth of two points on the Earth.
4743	Calculate the bearing between two points.
4744	This is a test program that calculates the bearing and azimuth of a point.
4745	Find the point in the given location.
4746	Find the point in the Earth space.
4747	Find the point on the default Earth.
4748	Load a picture in a thread.
4749	Load a picture from a URL.
4750	Loads the source picture into this SourcePicture object.
4751	Stop loading the source picture
4752	Stop loading the picture except the given url.
4753	Returns the size of the image.
4754	Sets the source image.
4755	Returns the standard URI for this catalog.
4756	Creates a DataDescriptor for the associated field.
4757	Transfer info from proto message to proto message.
4758	Count the number of bits in the data.
4759	Compares two DataDescriptors for equality.
4760	Load the header from the file.
4761	Load the data from the input stream.
4762	Returns the field with the given name.
4763	Get the double values of this field.
4764	Get the string values for this field.
4765	Get the boolean values for this field.
4766	Returns the name of the field with index i or null if the field is not present.
4767	Returns an array of the field names of this struct.
4768	Main method for dumping Dbase data.
4769	Returns the attributes of this element.
4770	Set an attribute.
4771	Remove an attribute from this object.
4772	Returns the group that this node belongs to.
4773	Get the parent node of this node.
4774	Returns the escaped short name.
4775	Returns the path to the root node of the DAP tree.
4776	Get the path to the group.
4777	Computes the fully qualified name of the DAP node.
4778	Returns true if this DapNode is a top level dataset or group.
4779	Builds the DAP response from the given byte array.
4780	Store a Bean. Collection value.
4781	Get a List value.
4782	Get the value of a key.
4783	Read the data from a GRIB file.
4784	Prints the top variables of the DSP.
4785	Prints a compound instance of a variable.
4786	Write the given Element to a String.
4787	Writes the given element to the given file.
4788	Writes the given element to the given stream.
4789	Writes the given XML element to the given writer.
4790	Creates a dimension element.
4791	Make a projection for the given attribute container.
4792	Get an int array from the AttributeContainer.
4793	Creates a new base unit with the given name symbol and quantity.
4794	Create a new unit with the given name and symbol.
4795	Creates a base unit database.
4796	Creates a derived unit DB.
4797	Get the singleton instance of the SI class.
4798	Finds the coordinate element in the axis.
4799	Finds the closest coordinate to the given target.
4800	Subset the values of the given range.
4801	Opens a feature dataset.
4802	Open a feature dataset.
4803	Annotate a dataset with the properties
4804	Read a record from a file.
4805	Assemble the URI string from the parts.
4806	Returns the canonical form of the given string.
4807	Normalizes the units.
4808	Compiles the DAP dataset.
4809	Finish the metadata parsing.
4810	Returns the element associated with the given key.
4811	Inserts a new element into the set.
4812	Returns the date of the date field.
4813	Prints the XML attributes of a DAP node.
4814	Prints an XML attribute.
4815	Checks if the attribute is special.
4816	Prints the dimensions of a variable.
4817	Checks if the file is a valid area file.
4818	Sets the area directory attributes.
4819	Sets the navigation block attributes.
4820	Get the Calibrator type from the calibrator name.
4821	Sets the attributes for the calibration type.
4822	Find coordinates by predicate
4823	Find the coordinate name by type
4824	Find the coordinate axis of the given type.
4825	Finds a coordinate by type.
4826	Find the dimension of the axis of the given type.
4827	Finds the best coordinate system for the dataset.
4828	Find the dependent axis of the given type.
4829	Get a variable from the DSequence.
4830	Deserialize a stream of bytes from a stream that was originally serialized with the old serialization format.
4831	Reads the marker from the given input stream.
4832	Writes the marker to the given stream.
4833	Report a fatal error.
4834	Creates a series with the given name base time period and number of times.
4835	Example of how to plot multiple axes.
4836	Get the Java representation of the string array.
4837	Returns the parameter list of all the sensors in the RADs.
4838	Sets the stn list.
4839	Sets the selected station.
4840	redraw the panel
4841	Restore the rectangular area from a stream.
4842	Serializes the current state of this rectangle.
4843	Add the given UnitDBImpl to this UnitDB.
4844	Adds a unit to the unit set.
4845	Add a symbol to the unit.
4846	Get a unit by its id.
4847	Adds a new unit to the name map.
4848	Adds a new unit to the symbol map.
4849	Add a new unit to the map.
4850	Add the current look and feels to the given menu.
4851	Find a Grib2Record in the file that contains the specified DRS position.
4852	Read the scalar structure into the underlying data structures.
4853	Serialize the dataset to the given output stream.
4854	Get the parameter values.
4855	Constructs a copy of this projection.
4856	Opens a feature dataset.
4857	Open an InvDataset for use with Thredds.
4858	Open a dataset with the specified invDataset.
4859	Annotate the given dataset with the attributes defined in the InvDataset.
4860	Removes duplicate properties from the given list.
4861	Add a partition to this GribCollectionMutable.
4862	Creates a GribCollectionMutable object from the given DICOM object.
4863	Returns an enhancer that matches the given regular expression on the dataset name.
4864	Returns an enhancer that matches the given regular expression on the dataset path.
4865	Write the XML document to a file.
4866	Read the data from a structure.
4867	Set the picture to draw on the map.
4868	Sets the buffered image to be displayed.
4869	Zooms the picture to fit the image.
4870	Paint the component.
4871	Returns the TG_FTOI portion of the input time array.
4872	Get the character time from the forecast information.
4873	Returns the TI_ITOC string from the array of ints.
4874	Returns the number of days in the given imon for the given year.
4875	Translate a numeric vertical coordinate to the corresponding CCRD.
4876	Swaps four bytes in an array of integers.
4877	Get the grid packing name for a given packet type.
4878	Get the data type name for a given type.
4879	This method reads data from the input stream.
4880	This method is used to externalize the DDS data.
4881	Returns the TagEnum for the given tag code.
4882	Get the next image.
4883	Returns the size of the given DAP type.
4884	Sums the values of an array.
4885	Set the grid size.
4886	Sets the overlap of the image.
4887	Clear all the grids.
4888	Mark the given object in the grid if it is not already marked.
4889	Finds the object that intersects the given rectangle.
4890	Finds the intersection with the given point.
4891	Finds the closest object to the given point.
4892	Returns the squared Euclidean distance between the point and the cell at the specified index.
4893	Get or create a base unit.
4894	Search for a protocol in the given fragment.
4895	Search for the service type in the given URL.
4896	Decodes the path extension to determine the type of the service.
4897	Check if the given location is a DOS.
4898	Check if the given location is a DAP4 file.
4899	Send a variable to the specified section.
4900	Returns the suffix of a fully qualified name.
4901	Returns the prefix of a fully qualified name.
4902	Locate a file in a directory.
4903	Locates a file or directory relative to a given absolute path.
4904	Extract the bytes from the given buffer.
4905	Returns the path to the structure of the given variable.
4906	Returns null if the path is null or empty.
4907	Joins the elements of the array with the given separator between the elements specified.
4908	Checks if the given path contains a drive letter.
4909	Get the protocols from the given URL.
4910	Convert an Index to a list of slices.
4911	Convert an offset to a list of slices.
4912	Checks if the given list of slices is contiguous.
4913	Checks if the given list of slices contains only one point.
4914	Convert a list of slices to an index.
4915	Read data from the input stream.
4916	Set the station information.
4917	Set the short names of the values.
4918	Read the config from a catalog.
4919	Adds a declaration to the group.
4920	Update the groups.
4921	Find a variable in the DAP file.
4922	Get the axis type of the variable.
4923	Get the GribStatType for a given time range indicator.
4924	Subset the longitude axis.
4925	Returns the ranges of the points.
4926	Set default properties for DF.
4927	Get the session id from the cookie store.
4928	Set the maximum number of redirects allowed for the current session.
4929	Set whether to use sessions.
4930	Close all the HTTP methods.
4931	Set the authentication and proxy credentials for the given builder.
4932	Track a session.
4933	Set the global credentials provider for the given scope.
4934	Validates the catalog.
4935	Factory method for creating Index objects.
4936	Computes the stride for the given shape.
4937	Create a new index section.
4938	Reduce this index to a new index.
4939	Reduce the index to a new dimension.
4940	Transpose the indices.
4941	Creates a new index with the specified dimensions permuted.
4942	Returns an index iterator for the given array.
4943	Returns the current element in the vector.
4944	Sets the index to the given array.
4945	Set the value of a given dimension.
4946	Sets the indices to the given values.
4947	Returns the name of the time interval.
4948	Make a CalendarDateRange from the time interval.
4949	Make a list of dates from the first row of the table.
4950	Make the list of Gemmatical Parameters for a DMPart.
4951	Returns a list of all stations in the file.
4952	Creates a new station from the given header.
4953	Get the list of station keys.
4954	Returns the list of dates.
4955	Finds the index of a station in the list of stations.
4956	Returns the file type of the label.
4957	Indent the current line.
4958	Set the indent level.
4959	Read or create a GribIndex from a single file.
4960	Add a directory scan to the collection.
4961	Check if a scan is needed.
4962	Scan the dataset for new files and delete old files.
4963	Set the debug flags.
4964	Adds a new variable to the model.
4965	Writes the data to the file.
4966	Validate the given XML document.
4967	Returns a string representation of the constraint.
4968	Sets the original variable of the StructureDS.
4969	Read the data from the underlying data source.
4970	Read the data from the given section.
4971	Returns true if conversion is needed for the given structure members.
4972	Convert the given array to a new array structure.
4973	Convert member info from a structure members to the corresponding variables.
4974	Finds a variable in the scope that matches the given orgName.
4975	Returns true if the given variable has any data in the given structure members.
4976	Enhance the variables in this dataset.
4977	Check if the request is under resource control.
4978	Make an empty sequence.
4979	Create a sequence of floats based on the given parameters.
4980	Create a sequence of variables for a given gem.
4981	Add the vertical coordinate attribute to the given variable.
4982	Read a catalog from an XML file asynchronously.
4983	Read an InvCatalog from a string.
4984	Read an InvCatalog from a string.
4985	Write an InvCatalog to an OutputStream.
4986	Get the metadata converter for the given key.
4987	Returns a dimensionless ID.
4988	Multiply this unit by another unit.
4989	Divide this unit by the given unit.
4990	Converts input to output.
4991	Checks if this unit is compatible with the given unit.
4992	Write a geometry to the output stream.
4993	Write a Point to an XML string.
4994	Write a line to the XML output.
4995	Write a Polygon to the XML file.
4996	Pulls the value of an attribute from a node.
4997	Get all child nodes of the given parent node.
4998	Parse the response from the server.
4999	Pass all reserved attributes of a node to the DAP parser.
5000	Returns a subset of the given dimensions.
5001	Create an ArrayStructureMA from an ArrayStructure.
5002	Set the value of a member as an array.
5003	Create an ArrayStructureMA with the given shape.
5004	Get the type of the geometry variable.
5005	Create a new station feature.
5006	Compile the CEAST into DAP AST.
5007	Compile a filter expression into a DAP variable.
5008	Add a redef for a dimension.
5009	Creates a new Array instance.
5010	Returns true if this rectangle is contained within the specified rectangle.
5011	Extend the bounding box by the given point.
5012	Extend this rectangle with another rectangle.
5013	Intersect this rectangle with another rectangle.
5014	Adds two arrays.
5015	Check if two arrays have the same shape.
5016	Checks if the two shapes are conformable.
5017	Convert an array to another array of the given type.
5018	Copies the elements of the array to the result array.
5019	Copies the elements of the two arrays into the other.
5020	Copy the elements of two arrays.
5021	Returns the minimum and maximum values of the given array.
5022	Set the values of the elements in the result array to the given value.
5023	Creates a builder for the catalog.
5024	Factory method to create a ProjectionImpl.
5025	Unescapes a DOS identifier.
5026	URL - decode a string.
5027	Unescapes a URL.
5028	Escape a string for use in a URL.
5029	Unescape backslash characters in a string.
5030	Tokenizes an escaped name.
5031	Returns the index of the first occurrence of the specified character in the escaped name.
5032	Converts a backslash - escaped string to a double - quoted string.
5033	Read an atomic scalar.
5034	Get the path to the cursor.
5035	Returns the default value of the given property of the given class.
5036	Returns the J class of the given component.
5037	Compiles the variables represented in the dataset into DSP data structures.
5038	Compiles a structure array.
5039	Compiles a structure.
5040	Compiles a sequence array.
5041	Compiles a sequence.
5042	Reads a little endian 64 - bit integer from the stream.
5043	Returns the field with the given name.
5044	Returns the value of the named field.
5045	Sets the value of a field.
5046	Adds a field to the table.
5047	Add a check box field to this form.
5048	Add a date field to this object.
5049	Add a double field to this object.
5050	Add an int field to this object.
5051	Add a Password field to this object.
5052	Add a text field to this form.
5053	Add a text combo field to this form.
5054	Add a text area field to this row.
5055	Adds a heading to the table.
5056	Adds a component to the layout.
5057	Adds an empty row to the layout.
5058	Finds the first visible frame in the JFrame array.
5059	Gets the cell spacing.
5060	Returns the factors.
5061	Multiply this dimension by another dimension.
5062	Returns the factors of this factorization multiplied by the given power.
5063	Checks if this dimension is reciprocal of the given dimension.
5064	Returns true if all factors in the factor chain are dimensionless.
5065	Factory method to create a Grib1ParamTables object from a local file.
5066	Factory method to create a Grib1ParamTables object from a DOM element.
5067	Adds the parameter table lookup to the standard lookup table.
5068	Add a parameter table to the lookup table.
5069	Raise the unit to the given power.
5070	Convert the input array to the base of the natural logarithm of the reference unit.
5071	Initialize the unit table.
5072	Make a vertical variable.
5073	Peeks at the beginning of the file and returns the name.
5074	Grab a short from the byte array at the given offset.
5075	Grab an int from the given byte array.
5076	Grab a float from the byte array at the given offset.
5077	Grab a double from the byte array at the given offset.
5078	Create an alias and a name.
5079	Add a symbol to the UnitDB.
5080	Creates a converter from two units.
5081	Set the structure data.
5082	Set the point feature data.
5083	Draws all the shapes that intersect the clip rectangle.
5084	Get the shapes for this feature renderer.
5085	Reads the contents of the given stream and processes them.
5086	Read want bytes from the input stream.
5087	Read more bytes from the input stream.
5088	Read len bytes from the stream.
5089	Skips n bytes.
5090	Adds the dimension for the given group to the given NetCDF file.
5091	Returns the index of the coordinate in the grid record.
5092	Checks if the file is a valid WAR file.
5093	Open the file and parse the header.
5094	Read the data for a variable in a section.
5095	Read one row of data.
5096	Create a new dataset from a NetcdfDataset.
5097	Create a variable object.
5098	fire the event that is needed to make sure that the map area is in the correct location
5099	Set the map area.
5100	Set the map area.
5101	Set the map area to the center of the map.
5102	Set the projection
5103	Add the actions to the given menu.
5104	Start a timer to redraw the graph after a delay.
5105	change the size of the screen.
5106	Select the given variable.
5107	Returns the value at the given offset in the template.
5108	Read a double value.
5109	Read an object from the data stream.
5110	Returns the name of the sector with the given ID.
5111	Read a scaled int.
5112	Find a parameter by name ignoring case.
5113	Returns true if there are more odometer objects in the set.
5114	Switches the byte order of the file.
5115	Returns the number of times and the index of the first step in the file.
5116	Returns the full path to the file with the given index.
5117	Get the list of file names to be read.
5118	Returns the path to the DDF file.
5119	Get the full path to a file in the DDF.
5120	Add a channel subscription.
5121	Converts the reference date to the time offset specified by the given time unit.
5122	Read in the contents of the NIDRAM product header.
5123	Get the uncompressed data starting at the given offset and length.
5124	Special symbol for graphic symbol.
5125	The following pcode is a simple circle.
5126	Read in the NIDATA message header from a file.
5127	Code for the 5 - dimensional wind barb.
5128	Pcode_128 pcode_128.
5129	Code for the UnlinkVectorStruct.
5130	Get the levels of the calibrated data.
5131	Returns the dualpol levels for the given calibrated data.
5132	Add a variable to the dataset.
5133	Add a parameter to the dataset.
5134	Uncompress a buffer.
5135	Get the unsigned integer value from the byte array.
5136	Get an integer value from a byte array.
5137	Convert byte array to the specified data type.
5138	Do the DMR processing.
5139	Get the request state.
5140	Send error to client.
5141	Set the anchor point.
5142	Stretch the image to the given point.
5143	Returns the bounds of the rectangle that will be used to draw the stretched point.
5144	Returns the last bounds of the line.
5145	Format the given text as a date.
5146	Replace the data variables in the model with the new data variables.
5147	Ensures that the given array size is okay.
5148	Reads two bytes from a file and returns them as an int.
5149	Read an unsigned integer from the given file.
5150	Reads three bytes from a file in the form of an int.
5151	Reads two unsigned 16 - bit unsigned integers from a file - like object.
5152	Reads three bytes from a file in the form of a uint32.
5153	Reads four four bytes from a file in float format.
5154	Converting four ints into a float.
5155	Reads a 8 - bit integer from a file in big - endian byte order.
5156	Count the number of bits in a given byte array.
5157	Constructs a copy of this projection.
5158	Returns a Well Known Text representation of this Proj.
5159	Escapes a string for use in an entity.
5160	Unescapes a backslash in a string.
5161	Splits a string into a list of strings.
5162	Make a FMRCInv object from the files in the manager.
5163	Get the service special name.
5164	Returns the number of projected components in this DArray.
5165	Returns a copy of this date with the reference time set to the current time.
5166	Create a new ArrayStructureBB with the given section.
5167	Main method for the program.
5168	Read a Grib1Record from a Grib1IndexProto. Grib1Record
5169	Checks if the given NetcdfFile is a Mine file.
5170	Construct a UTM projection.
5171	Reacquires the area file.
5172	Returns true if the date is before the specified date.
5173	Returns true if this date is before the given date.
5174	Returns true if the date is after the specified date.
5175	Sets the value of the given index.
5176	Adds a coordinate system to the variable.
5177	Sets the units string.
5178	Returns the units string.
5179	Initializes the read mode.
5180	Read the catalog.
5181	Process the datasets.
5182	recursively read catalogs in a directory
5183	Checks if a longitude is between two longitude values.
5184	Convert a latitude value to a string.
5185	Convert longitude to human readable string.
5186	Compares this quantity with another quantity.
5187	Returns the dataset that is currently selected.
5188	Sets the dataset selected in the tree.
5189	Creates a tree path from the given node to its parent.
5190	Open all the catalog nodes.
5191	Set the catalog.
5192	Set the catalog to be displayed.
5193	Find the alias for the given variable.
5194	Writes a variable - length integer to the stream.
5195	Writes a set of characters to the stream.
5196	Reads a set of characters from the stream.
5197	Set the debug flags.
5198	Adds a member to the receiver.
5199	Hides a member.
5200	Returns a list of the names of all members.
5201	Find a member by name.
5202	Read the bitmap from the file.
5203	Restore the state of the popup menu.
5204	Returns an iterator over the selected rows.
5205	Returns the model index of the table.
5206	Get the array value of a member.
5207	Retrieve a scalar value from the data frame.
5208	Get the double array representation of the given member.
5209	Retrieve a scalar value as a float.
5210	Get the float array from a StructureMembers.
5211	Retrieve a scalar value from the given StructureMembers.
5212	Get the Java array byte.
5213	Retrieve a scalar value as an integer.
5214	Get the Java array of int values from the given StructureMembers.
5215	Retrieve a scalar value as a short.
5216	Get the Java short array representation of the given StructureMembers.
5217	Retrieve a scalar value as a long.
5218	Get the Java array of long values.
5219	Retrieve the scalar value of a given member.
5220	Get the Java char array representation of the given StructureMembers.
5221	Write one dataset to the file.
5222	Check if the dataset can be used.
5223	Creates a copy of this dataset.
5224	transfer metadata from one DatasetNode to another
5225	Get the ThreddsMetadata inheritable.
5226	Adds a product to the list of records.
5227	Prints the missing values for the record tracker.
5228	Prints a summary of the missing records in this record set.
5229	Find a record in the record tracker.
5230	Dumps the grid data to a string.
5231	Make a long name for this parameter.
5232	Subset this axis by a list of intervals.
5233	Checks if two byte arrays are equal.
5234	Parse the DMR document.
5235	Process the attributes of the given dataset.
5236	Add the given coordinates to the partition.
5237	Set the Gaussian latitudes in the coordinate system.
5238	Parse a variable selector.
5239	Creates a string representation of a section.
5240	Returns true if the point is inside the box.
5241	Close the method and release any resources associated with it.
5242	Executes the HTTP request and returns the HTTP response code.
5243	Identify the encoding station.
5244	Returns the name of the coordinate axis that matches the given type and dimension.
5245	Set the stream to be read from.
5246	Reads a character from the input.
5247	Start the progress monitor
5248	Parse a string into a URI.
5249	Returns a new URI with the given parts removed.
5250	Returns null if the string is null or empty.
5251	Join two paths.
5252	Checks if the dataset is accepted by this filter.
5253	Copy all the information from the given GribCollectionMutable object.
5254	Returns a list of all the filenames in the file map sorted by name.
5255	Sets the index file.
5256	Get the path to the index file in the cache.
5257	Closes the RAF index.
5258	Returns the number of counters in this group.
5259	Adds a global attribute.
5260	Adds a global attribute with the given name and value.
5261	Delete a global attribute.
5262	Renames a global attribute.
5263	Adds a variable attribute with the given name and value.
5264	Adds a variable attribute with the given name and value.
5265	Delete an attribute from a variable.
5266	Rename an attribute of a variable.
5267	Determine the file type based on the key type.
5268	Writes WFS headers and BB to the file.
5269	Write members of the geometry list to the WFS file.
5270	Returns a string containing the station observation data as an XML document.
5271	Write the station collection as XML.
5272	Writes a DSR to the DAP stream.
5273	Send the DXR to the client.
5274	Sends an error response to the client.
5275	Close the DAP stream.
5276	Flush the buffer to the client.
5277	Constructs a copy of this projection.
5278	Returns true if the given index is in the range of this range.
5279	Returns the i th element of this vector.
5280	Shift this range by the given origin.
5281	Read data from the file.
5282	Read data from the file.
5283	Returns a subset of this vector.
5284	Returns a list of all the catalogs in the catalog.
5285	Delete old dataset files before the given tracker number.
5286	Set the values of the GDS.
5287	Get a DataChunkIterator without filtering.
5288	Make a double array from an array of ints.
5289	Get the dataset boundaries.
5290	Checks if the requested variables are contained in the grids.
5291	Get the DatasetSourceStructure with the given name.
5292	Get the absolute path to a resource.
5293	Make the vertical dimensions for each vertCoord in the list.
5294	Reads the PIB from the file.
5295	Finishes the dataset.
5296	Transfer inherited metadata from parent to the public metadata.
5297	Transfer the local metadata from another dataset to this dataset.
5298	Copy inherited metadata from one dataset to another.
5299	Sets the contributors.
5300	Adds a dataset to the dataset list.
5301	Remove a dataset from this catalog.
5302	Replace the specified dataset with the specified one.
5303	Add a service to the dataset.
5304	Remove a service from the registry.
5305	The list of InvServices that are local to this node.
5306	Remove the given metadata from the local dataset.
5307	Get the value of a user property.
5308	Validate the dataset namer.
5309	Returns a list of descriptors.
5310	Construct the server path from the request.
5311	Get the capabilities of the geometry.
5312	Get a feature from the geometry system.
5313	Checks the parameters for errors.
5314	This is the HTTP handler for the TDS request. It is used to build the geometry
5315	Get the capabilities of a file.
5316	Returns the length of the object.
5317	Returns the last modified date of the object.
5318	This method is called when the DAP dataset is created.
5319	Return a file.
5320	Return a string to the client.
5321	Sets the response content length based on the given string.
5322	Get the URI of the given request.
5323	Get the request path.
5324	Returns the request string.
5325	Get a request parameter by name ignoring case.
5326	Saves the preferences of this split.
5327	Write directory as HTML.
5328	Set the bit offset for the given data descriptor.
5329	Make a nested bit counter.
5330	Count the number of bits in the row.
5331	Append a line to the history pane.
5332	Create a document representing the station features in the DSG file.
5333	Returns the capabilities document for this feature dataset.
5334	Get the record at the given subset params.
5335	Get the coordinate at the specified index.
5336	Adds an item to the list.
5337	This method is called when an exception occurs. It will throw the exception and will return the
5338	Returns the i th slice in this list.
5339	Move the index forward or backward from firstpos to lastpos.
5340	Get the NCEP generation process parameters.
5341	Get the DMRF feature type from the endpoint
5342	Sets the type of the set.
5343	Factory method for Grib1Gds grids.
5344	Copy data from the input stream to the output stream.
5345	Read the contents of an InputStream into a String.
5346	Read the contents of an InputStream to a byte array.
5347	Writes the contents of a string to an output stream.
5348	Copy a file to a stream of a certain size.
5349	Copy a range of bytes from a RAF file to a stream.
5350	Recursively copy a directory tree.
5351	Read a file into a byte array.
5352	Read a file and return it as a String.
5353	Writes the contents of a String to a file.
5354	Write the contents of the string to the file.
5355	Write the contents of the InputStream to the file.
5356	This method is called when a parse exception occurs.
5357	DodsException handler.
5358	This method is called when the server is not able to handle a bad URL.
5359	Get the catalog.
5360	Print the catalog.
5361	Print the status of the server.
5362	Print a page with an error message.
5363	Obtains the reference date of this date.
5364	Read the Vlen data.
5365	Read a NcML document.
5366	Open a NcML file and return a NcmlCollectionReader.
5367	Replace all non - alphanumeric characters with the replace char.
5368	Removes all non - ASCII characters from the byte array.
5369	Filter out characters that are not in okChars.
5370	Filter out 7 - bit characters from a string.
5371	Make sure the given string is a valid DM object name.
5372	Returns the index of the first character in s1 that is not in s2.
5373	Pads the left side of a string to the desired length.
5374	Pads the right side of a string to the desired length.
5375	Remove the first occurrence of sub from s.
5376	Removes the specified character from the specified string.
5377	Removes the specified character from the end of the string.
5378	Collapses all whitespace characters in the string.
5379	Replace all occurrences of out in in with in.
5380	Replaces all occurrences of the specified characters with the specified replacement string.
5381	Replaces all occurrences of the pattern with the given value.
5382	Substitute a string with another string.
5383	Substitute the given string with the given substitutions.
5384	Remove the characters in out from sb.
5385	Replaces all occurrences of out with in.
5386	Replaces all occurrences of in in the sb with in.
5387	Substitute a string in a StringBuilder.
5388	Trims a string by removing all characters starting with the given character.
5389	Process a collection update event.
5390	Check state of the dataset.
5391	Update the collection in the local object.
5392	Print unique templates in a DICOM file.
5393	Returns a list of datasets in the InvDataset.
5394	Release resources.
5395	Copy a structure data object.
5396	Copy an array structure to a buffer.
5397	Copy an array structure to a buffer.
5398	Copy a StructureData object into a ArrayStructureBB object.
5399	Create a new ArrayStructureBB with the given structure members and data.
5400	Get the size of the time interval in hours
5401	Returns a section of this axis with the given range.
5402	Factory method to create a new TableAnalyzer object.
5403	Returns the first feature type in the nested table.
5404	Analyze the dataset
5405	Synchronize the NCFile with the NCFile.
5406	Returns the num longs of the specified type in the range [ start start + num )
5407	Swaps the bits in a byte array at a specific offset in a long.
5408	Swap the bits in a byte array at a specific offset in a float.
5409	Swap two bytes in a char.
5410	Find the coordinate axes for all variables.
5411	Add a parameter to the coordinate transform
5412	Returns the common parent of this group and the given group.
5413	Returns true if the given group is the parent of this group.
5414	Sets the parent group.
5415	Adds a dimension to this group.
5416	Adds a dimension to this group if it doesn t already exist.
5417	Adds a group to the group tree.
5418	Adds an enumeration to this group.
5419	Adds a variable to the group.
5420	Remove a dimension from the list of dimensions.
5421	Create a group relative to this group.
5422	Convert the DDS alias fields to DAS alias fields.
5423	Print the DAS object to the specified PrintWriter.
5424	Returns the variable with the given name.
5425	Write a grid to the file.
5426	Replace missing values with min - 1. 0
5427	Replace missing values with the actual value and scale.
5428	Get the x - start of the shift.
5429	Write a grid of points.
5430	Writes the exception to the HttpServletResponse.
5431	Returns the list of available network library versions.
5432	Make the top index file from the given config.
5433	Get the type of the GribCollection
5434	Update the GRIB collection.
5435	Update a leaf collection.
5436	Open a GRIB collection from a RAF file.
5437	Open a GribCollectionImmutable object from a GAF file.
5438	Open a GribCollectionImmutable object from a data file.
5439	Returns true if the given URL matches the given pattern.
5440	Add a triple to the cache.
5441	Find a triple in the cache.
5442	Set all triples that have no url.
5443	Load a file into the rc file.
5444	Inserts a new triple into the store.
5445	Returns the datasets in the local data source.
5446	Find a dataset by name.
5447	Set the projection for this feature set.
5448	Get the shape objects that can be drawn.
5449	Make the shapes for the features.
5450	Compares this string with the given string.
5451	Start a progress monitor task.
5452	Check if the index file needs to be updated.
5453	Normalizes the given result to be greater than the given list of observations.
5454	Set the value of a StructureData element at a given index.
5455	Get the structure data at the specified index.
5456	Copy the contents of the array to the given result iterator.
5457	Get the scalar value of a record.
5458	Get the double value of a scalar field.
5459	Convert a scalar value to an integer.
5460	Get a float value from a record.
5461	Retrieve a scalar value from a record.
5462	Get a scalar short value from a record.
5463	Retrieve a scalar value from a record.
5464	Retrieve a scalar string value from the specified record.
5465	Get an ArrayStructure from a Structure or Sequence.
5466	Get the ArraySequence object for the given StructureMembers.
5467	Get an array object from the specified record.
5468	Returns the minimum and maximum value of the given value.
5469	Evaluates the given CEAST.
5470	Returns a string representation of this constraint.
5471	Checks if the given node is a reference to this node.
5472	Evaluates the expression.
5473	Returns the number of expansion variables in the given structure.
5474	Computes the list of enum types.
5475	Computes the groups.
5476	Compile a constraint string into a constraint object.
5477	Check if the file is a GRIB2 or Partition2 file
5478	make actions system
5479	Returns the byte order of the given file type.
5480	Set the byte order of the file.
5481	Find a key in the keys table.
5482	Find a file header by name.
5483	Get the file header for the given name.
5484	Prints the parts of the message.
5485	Get the data pointer for a particular part of a particular data set.
5486	Read a word from the file.
5487	Read a string from the file.
5488	This method is the same as DM_PK but it takes a bitstring and returns the
5489	Returns a string representation of the bits in a boolean.
5490	Write the contents of the NetcdfFile to a writable channel.
5491	Parse a BaseType element.
5492	Parse a Grid element.
5493	Parse the aliases in the OPeNDAP namespace.
5494	Decodes the key descriptors.
5495	Replicates the given keys.
5496	Returns the filename of the dataset.
5497	Get the CF feature type.
5498	Returns true if the absolute difference of two values is nearly equal to the given maximum absolute
5499	Checks if the given DAP node references this DAP node.
5500	Parse a unit from a string.
5501	This method is used to probe an object for its class interfaces and methods.
5502	Checks if the variable is tiled.
5503	Returns the best coordinate time that is greater than or equal to the time of the time of
5504	Converts a LatLonRect to a ProjectionRect.
5505	Show the time series for all logs.
5506	Make a map of the given attributes.
5507	Returns the values of the column.
5508	Get the value at the given index as a numeric value.
5509	Writes the CDL representation of this element to the given formatter.
5510	Sets the string value.
5511	Sets the values of the attribute.
5512	Set the values of the array.
5513	Scan the current level and create a skeleton catalog.
5514	Generate a proxy data resolver catalog.
5515	Schedules a message for writing.
5516	Set the Thredds datatype.
5517	Jumpto the Thredds datatype.
5518	Jumpto thredds data type.
5519	Set the dataset to be displayed in the UI.
5520	Prepares the GUI for use.
5521	Create the tools frame.
5522	Make a name for the axes.
5523	Returns the first coordinate axis with rank lesser than or equal to the second.
5524	Finds the first coordinate axis of the given type.
5525	Get the projection transformation.
5526	Returns true if the data set is in geo coordinates.
5527	Returns true if all the coordinate axes are regular.
5528	Checks if a dimension is a subset of a dimension set.
5529	Returns true if the coordinate system contains all of the given axes.
5530	Checks if the coordinate axis is contained in the coordinate axes.
5531	Checks if the domain contains the given dimensions.
5532	Returns true if this axis contains all of the given axes.
5533	Returns true if this coordinate system contains the axis of the given type.
5534	Clone this node and add it to the DAG.
5535	Returns the bean selected by the user.
5536	Returns a list of all the currently selected beans.
5537	Returns the selected cells.
5538	Sets the selected bean.
5539	Restore the state of the column model.
5540	Creates a new UnknownUnit with the given name.
5541	Close the stream.
5542	Returns true if the given variable is an extra variable.
5543	Checks if the variable is a coordinate.
5544	Find the coordinate variable for the given coordinate name in the given table.
5545	Add all data variables from a table to a list.
5546	Add parent join to the current table.
5547	Create a new station feature from the given structure data.
5548	Create a new DAP node map for the given Netcdf Dataset.
5549	Create a SimpleUnit instance with the given name.
5550	Factory method for creating a SimpleUnit from a string.
5551	Create a Unit object from a string.
5552	Checks if two units are compatible with exceptions.
5553	Checks if a given unit is a date unit.
5554	Checks if the unit string is a time unit.
5555	Get the conversion factor from the input unit to the output unit.
5556	Converts the given value to the given unit.
5557	Returns true if this unit is unknown.
5558	Returns the value of this unit in the units scale.
5559	Creates a new rel - op clause.
5560	Creates a new BoolFunctionClause.
5561	Creates a new BTFunctionClause.
5562	Make an image from an array of RGB values.
5563	Crawl the datasets in the catalog.
5564	Crawl the dataset and collect the catalog references.
5565	Crawls the datasets and collects the results.
5566	Get a file from the disk cache or create it if it doesn t exist.
5567	Get an existing file or cache it.
5568	Set whether or not to report a bug when the debug mode is set to false.
5569	Get all files in the system.
5570	Close the file.
5571	Seeks to a given position in the file.
5572	Flush the buffer to the file.
5573	Read a byte from the buffer.
5574	Reads a short array.
5575	Reads an int from the stream without buffering.
5576	Reads an array of n - sized integers from the input stream.
5577	Reads a number of 64 - bit unsigned integers from the stream.
5578	Reads a number of float values from the stream.
5579	Reads a double array from the input stream.
5580	Read a string from the input stream.
5581	Read a string of the given length.
5582	Writes a boolean array to the stream.
5583	Writes n bytes from the specified short array.
5584	Writes n characters from the specified character array.
5585	Writes an array of ints.
5586	Writes n bytes from the given long array.
5587	Writes a float array to the stream.
5588	Writes a double array to the stream.
5589	Writes a string to the output stream.
5590	Writes a byte array to the output stream.
5591	Search for a match in the buffer.
5592	Append the query string representation of this parameter.
5593	Factory method to create a collection.
5594	Finds the index file.
5595	Checks if the directory is a leaf.
5596	Construct the children of this partition.
5597	Scan the directory for children.
5598	Reads the files from the index.
5599	Returns a list of all gridsets in the dataset.
5600	Acquire a cached file from the cache.
5601	Remove the given file from the cache.
5602	Remove the entry from the cache.
5603	Release a file from the cache.
5604	Returns the 4 - bit integer represented by the four four - bit integers a b c d
5605	Update the cache with the given element.
5606	Clear the cache.
5607	Make the grid in the vertical transform.
5608	Returns true if this coordinate system is global longitude.
5609	Returns true if the height axis is positive.
5610	Find the index of the element in the grid of the x - axis and y - axis
5611	Finds the index of the element in the grid that is closest to the given coordinates.
5612	Find the x y coordinates of the point in the given latitude and longitude.
5613	Find the coordinates of the point on the map that are within the bounds of the given latitude
5614	Returns the position of the arrow in the table.
5615	Get the item index for a given pixel.
5616	Iterate over all files in the collection.
5617	Download the remote log files
5618	Returns the subcenter name for the given center and subcenter.
5619	Convert a string representing a period unit to a CalendarPeriod.
5620	Creates a new instance of CalendarPeriod with the specified value and field.
5621	Creates a new instance of CalendarPeriod from a string representing a period.
5622	Subtracts from the given dates.
5623	Returns the conversion factor for the given calendar period.
5624	Returns the value in milliseconds.
5625	Returns the offset between two dates.
5626	Synchronize the ncfile with the current index.
5627	Initialize the tables.
5628	Put a DataRootExt into the map.
5629	Finds the longest path match for the given request path.
5630	Find a data root by path.
5631	Convert the given data root extension to a data root.
5632	Get the date range for the given calendar.
5633	Reindex the coordinates in the union coordinates.
5634	Creates a new NetcdfFileWriter with the given version and location.
5635	Add a new group to the group list.
5636	Adds an EnumTypedef to the given group.
5637	Delete an attribute from a group.
5638	Rename an attribute in a group.
5639	Add a record to the NetCDF file.
5640	Aborts the current transaction.
5641	Writes the bean properties to the specified PrintWriter.
5642	Extract Thredds metadata from a Thredds Dataset.
5643	Divide this unit into the given unit.
5644	Convert the given amount to the derived unit.
5645	Convert the given amount from the derived unit to this unit.
5646	Convert a nested variable to a DodsV array.
5647	Convert the top variable of the DODS data structure to a DODS array.
5648	Convert a DodsV object to a DAP Array.
5649	Close all the databases.
5650	Open the database.
5651	Convert a value to a Period.
5652	Ensure that the array has at least the given capacity.
5653	Returns the string at the given index.
5654	Create a catalog for a directory.
5655	Create a catalog from a proxy dataset.
5656	Returns the coordinate type of the data set.
5657	Factory method to create Grib2Pds objects.
5658	Calculate the time from the start of the stream.
5659	Apply scale factor to a value.
5660	Parse a local concept from a file.
5661	Adds a local concept to the database.
5662	Clean the line.
5663	Store a concept in the local table.
5664	Writes the grib1 tables to disk.
5665	Writes the table names to a file in the given directory.
5666	Print the local concepts.
5667	This is the main method of ECMWF. It writes the GRIB1
5668	Get the type of a dataset.
5669	Expands the access point dataset.
5670	Expand the dataset source and return the result.
5671	Name the datasets in the given dataset container.
5672	Create a temporary dataset in which to hold named datasets.
5673	Try to name the dataset tree.
5674	Load a picture from an image URL.
5675	Stop loading the picture except the given URL.
5676	Called when the status of the source image changes.
5677	Notify listeners that a source load progress notification has occurred.
5678	Creates a thread that scales the picture in the background.
5679	Returns the size of the image scaled by the user.
5680	Returns the scaled size of the image as a string.
5681	Returns a list of the SNDT parts.
5682	Make a header for a GempakStation
5683	Checks for mandatory groups and returns a list of valid CKUA types.
5684	Checks if the given part is a valid DM group.
5685	Set the root directory.
5686	Creates the root directory.
5687	Get the file for the given file location.
5688	Delete all files that are older than the given date.
5689	Delete all files with less than maxBytes bytes.
5690	Checks if the given FXY is a Buffers table.
5691	Factory method to create a coordinate axis.
5692	Creates a copy of this coordinate axis without caching it.
5693	Returns true if the data type is numeric.
5694	Get information about this dataset in a readable format.
5695	Returns the calendar attribute of this CFData object.
5696	Sets the list of rows to be selected.
5697	Returns the currently selected row.
5698	Increments the selected row by one or - 1 if the selected row is greater than or
5699	Returns the index of the model in the column model.
5700	Sets the current index of the slider.
5701	Sorts the array in a quick way.
5702	Swaps the elements of the array.
5703	Get an existing file.
5704	Rotate the longitude and latitude.
5705	Create a store from a file.
5706	Create a new XMLStore instance from two input streams.
5707	Create a new XMLStore from a resource.
5708	Create a standard filename for the given store name.
5709	Saves the preferences to a temporary file.
5710	Save the preferences to the given output stream.
5711	Write an atomic variable.
5712	Writes the structure of the given data cursor.
5713	Writes a structure of a data cursor.
5714	Writes a sequence of data to the given writer.
5715	Write a record to the given writer.
5716	Checks if the file is a valid UCS2 file.
5717	Get the WMO ID.
5718	Read a row of data from the given DataInputStream.
5719	Get the i th data of the type.
5720	Get the data for the GRIB grid.
5721	Get the data for the GRIB grid record.
5722	Read the variable from the given slices.
5723	Create a grid file from a grid dataset.
5724	Estimate the estimated size of a grid in bytes.
5725	Create a Netcdf file from a grid dataset.
5726	Sets the stations.
5727	Sets the selected station.
5728	Picks the station that is closest to the given point.
5729	Picks the station closest to the given point.
5730	Returns the selected station.
5731	Get the name of the projection.
5732	Get the stations in the given bounding box.
5733	Get a station by name.
5734	Get the data iterator for a given station.
5735	Get a DataIterator for a given Station.
5736	Reads the data from the UF file.
5737	Computes the dot product of this MAVector and another.
5738	Returns the norm of the matrix.
5739	Normalizes the matrix by dividing each element by the norm of the matrix.
5740	Recursively set the services.
5741	Get a parameter by its ID.
5742	Get the local parameter with the given id.
5743	Adds a prefix name and its value.
5744	Adds a symbol and its value to the symbol set.
5745	Get the first prefix that matches the given string.
5746	Checks if the email is valid.
5747	Returns the value of the parameter with the given name.
5748	Calculates the CRC for this grid definition.
5749	Returns true if the packet is a thin packet.
5750	Get the index of the field with the given name.
5751	Returns the time type name for the given time range indicator.
5752	Returns the time coordinating the interval or the forecast time.
5753	Set the next polygon.
5754	Set the previous polygon.
5755	Find a property by name.
5756	Set the current projection
5757	Get the subset axis for a given time.
5758	Register an IO provider class.
5759	Register IOProvider.
5760	Register IOProvider with IOP.
5761	Checks if IOSP provider is registered for given class.
5762	Unregister an IOSP provider.
5763	Checks if a file is available and can be opened.
5764	Open a NetcdfFile in memory.
5765	Opens a NetcdfFile from a byte array.
5766	Opens a NetcdfFile in memory.
5767	Opens a NetcdfFile from a URI in memory.
5768	Find a global attribute by name ignoring case.
5769	Converts the object to a NetCDF file.
5770	Writes the CDL document to the given output stream.
5771	Write the CDL representation of this object to the specified PrintWriter.
5772	Writes the CDL code for this object.
5773	Adds an attribute to the given group.
5774	Adds an attribute to the given group.
5775	Adds a group to the given parent group.
5776	Adds a dimension to the given group.
5777	Remove a dimension from a group.
5778	Adds a variable to the given group.
5779	Add a new variable to the given group.
5780	Add a string variable to the given group.
5781	Removes a variable from the given group.
5782	Send an IOSP message to the target.
5783	This method is called by the constructor to make sure that the record structure is available.
5784	Finishes the current group.
5785	Read a variable section from the file.
5786	Read a variable from the file into a writable channel.
5787	Reads a list of arrays from the input stream.
5788	Read a section of data.
5789	Make a full name for a CDMNode.
5790	Make a full name from a parent group and a name.
5791	Checks if the given file should be included.
5792	Check if the given file should be excluded from the analysis.
5793	Returns true if all the filters pass.
5794	Append a string value to the attribute.
5795	Dispatches the check value.
5796	Forces a value to be of the given type.
5797	Checks if the string s is a Byte value.
5798	Checks if the string is a short value.
5799	Checks if string is an integer.
5800	Checks if a string is a valid unsigned integer.
5801	Checks if a string is a float.
5802	Checks if a string is a double.
5803	Get the data type of an attribute.
5804	Check if the dataset is viewable.
5805	Checks if the string is a valid boolean value.
5806	Checks if the given string is a valid alphanumeric string.
5807	Checks if the given string is a valid alphanumeric string that is constrained by the given string array
5808	Returns true if the given path is a file path and false if it is a directory.
5809	Converts a Unicode code point to a percent - encoded hexadecimal string.
5810	Get the value of a parameter.
5811	Compares two grid definitions.
5812	Reads the input stream and processes the contents of it.
5813	Process a buffer.
5814	Removes all double quotes from a string.
5815	Mark all the variables in the stack as being stacked.
5816	Writes the dataset to a NetCDF file.
5817	Get the value from the Thredds config.
5818	Write the CDL document to a string.
5819	Create a StationHelper object.
5820	Validate the current request.
5821	Returns the azimuth of the message.
5822	Returns the elevation of the message.
5823	Returns the latitude values of the ASA objects in this object.
5824	Returns the longitude values of the ASA objects in this object.
5825	Returns the altitude of the ASA.
5826	Returns the azimuth of the Reynolds.
5827	Returns the elevations of the Rythm Beam.
5828	Select a subset of members from the structure.
5829	Select a variable from the structure.
5830	Adds a member variable to this structure.
5831	Set the list of member variables.
5832	Sets the parent group of this variable and all its members.
5833	Calculates the size of the elements of this variable.
5834	Read a structure from the file.
5835	Read a vector structure from the file.
5836	Get an iterator for the structure.
5837	Get the data category for a given category.
5838	Returns the class name without the package.
5839	Adds a parameter to the list of parameters.
5840	Returns a string with the name class and parameters.
5841	Convert a LatLonRect to a ProjectionRect.
5842	Returns the version of the given converter name or - 1 if it is not found.
5843	Get the positive value of a zaxis.
5844	Deletes the next file in the list.
5845	Set the color scale parameters.
5846	Renders the plan view.
5847	Check if the parent H5Group is a direct child of the other group.
5848	Get the message type for the given name.
5849	Installs cell renderers in all columns of the given table.
5850	Set the API key and secret.
5851	Creates a label with the given value.
5852	Creates a label that will print the given lines.
5853	Creates a label with the given value.
5854	Connect to Cloud SQL instance using the specified socket path.
5855	List the IP types from the Cloud Sql type string.
5856	Connects to the MySQL server.
5857	Purge a logger from the map.
5858	Compiles all the source code.
5859	Compiles the given source code into a class.
5860	Adds a source code to the compiler.
5861	Read graphic control extension.
5862	Get the next frame from the frame array.
5863	Replies the list of person names in the repository.
5864	Initializes the list change listener and list change listeners.
5865	Returns a person by its id.
5866	Adds the messages to the internal map.
5867	Sets the person id.
5868	Creates a new ViewModel and injects it into the given view.
5869	Create a ViewModel instance from a View.
5870	Loads the countries from the ISO 3166.
5871	Loads the list of subdivisions from the ISO3166 - 2. xml file.
5872	Defines a string field that gets and sets the value of the property.
5873	Defines an immutable field that gets and sets the value of the property.
5874	Creates a step that renders a view.
5875	Creates a step that renders a FXML view.
5876	Clear the map and invoke consumer for each observable.
5877	Creates the index events.
5878	Access a member.
5879	Loads a view from the FXML file.
5880	Create the fxml path for the given view type.
5881	Query for a style mapping row.
5882	Get the pixel value of a pixel in the image.
5883	Get the pixel values from the image bytes.
5884	Validate the image type
5885	Creates a new image of the specified size.
5886	Set the tile data from a bitmap.
5887	Executes a raw query with the given arguments.
5888	Wrap a query with a cursor result.
5889	Query the database.
5890	Query the database.
5891	Handle cursor.
5892	Get the feature row for the given geometry index
5893	Register a table with the cursor wrapper
5894	Retrieve a tile row from the database.
5895	Get the coverage data for the tile DAO
5896	Get the coverage data for the tile DAO
5897	Get the coverage data for the tile DAO
5898	Get the coverage data for the requested bounding box and overlapping pixels
5899	Get the coverage data tile results for the requested tile matrix and overlapping pixels.
5900	Get the coverage data results for a tile matrix zoom level.
5901	Get the coverage data results for the tile zooming out of the requested tile matrix.
5902	Get the tile matrix for the coverage data request
5903	Get the value of a tile in the tile data source.
5904	Set the icon for a geometry type.
5905	Get the icon for a geometry type.
5906	Open or get bindings database.
5907	Converts a byte array to a bitmap.
5908	Compress a bitmap to a byte array.
5909	Create the table metadata
5910	Delete all metadata for a table in a geoPackage.
5911	Get the table metadata for the table
5912	Get the id of the GeoPackage
5913	Read the table metadata from the cursor.
5914	Creates a new extension if it doesn t already exist.
5915	Get the feature row.
5916	Executes a raw query against the table.
5917	Query for features within the bounding box
5918	Query for the points in the given envelope.
5919	Count the number of points in the given envelope.
5920	Query for rows within the given bounds.
5921	Build a where clause for the RTreeIndexExtension object.
5922	Query for features within the bounding box
5923	Count the number of features within the bounding box
5924	Query for features within the given envelope.
5925	Query for features within the specified bounds.
5926	Count the number of objects within the specified bounds.
5927	Set the data of the bitmap to be compressed.
5928	Set the data of the bitmap
5929	Set the bitmap compression configuration.
5930	Get the number of tiles in the bounding box.
5931	Adjust the bounds of the bounding box based on the projection and zoom level
5932	Adjust the bounding box of the tile grid to be the world bounding box
5933	Adjust the bounds of the tile package to fit the bounding box
5934	Adjust the bounds of the tile package to fit the bounding box of the request
5935	Get the bounding box for the tile grid at the given zoom level.
5936	Get the tile grid at the given zoom level.
5937	Query for a tile row.
5938	query for tiles in descending order
5939	Get the closest zoom level for the given length.
5940	Get the approximate zoom level for the given length.
5941	Query for a tile grid at a certain zoom level.
5942	Delete a tile from the tile table.
5943	Count the tiles at a certain zoom level.
5944	Check if the tileMatrixSet contains Google tiles
5945	Get the pixel value of the pixel at the given coordinates.
5946	Get the pixel values from the TIFF image.
5947	Validate the image type
5948	Creates a coverage data tiff image.
5949	Sets the value of the first pixel in the given image.
5950	Get the GeoPackage from the cache or create it if it doesn t exist
5951	Get the current row.
5952	Move to the next invalid position
5953	Query for style mapping rows by base feature id.
5954	Delete by base id and geometry type name
5955	Get the rectangle of the given size in the bounding box and section
5956	Get a rounded rectangle with the given width and height bounding box and section
5957	Delete missing databases.
5958	Create and close the GeoPackage
5959	Check if the database is valid
5960	Validates the database and closes the database on error.
5961	Validates the database and closes the database.
5962	Validates the database.
5963	Validate the database header
5964	Check if the header of the SQLite database is valid
5965	Add the internal databases
5966	Add the external databases
5967	Import the GeoPackage into the GeoPackage
5968	Get the GeoPackage metadata
5969	Get the GeoPackage metadata at the external path
5970	Create a new GeometryMetadata object.
5971	Populates the metadata with the geometry id and the geometry envelope.
5972	Delete the Geometry from the GeoPackage table.
5973	Creates or updates the GeometryMetadata if it doesn t already exist.
5974	Update a geometry in the GeometryMetadata table.
5975	Count the number of rows in the table that match the bounding box
5976	Read the geometry metadata from the cursor.
5977	Update the record in the table.
5978	Draw the tile
5979	Get the SimpleAttributesRows for the given IDs.
5980	Checks if the cursor is valid.
5981	Get a mapping DAO for the given table.
5982	Get a SimpleAttributesDao for the given table.
5983	Get the mappings for the given base id.
5984	Get the mappings for a related object.
5985	Checks if a mapping exists for a base and related id.
5986	Count the number of records in the cursor.
5987	Register the cursor wrapper
5988	Read the table from the GeoPackage and return a UserCustomDao
5989	Get the tile for the request bounding box
5990	Draw the tiles in the requested bounding box
5991	Reproject the tile to the requested size
5992	Retrieve the tile results for the tile matrix
5993	Calculate the overlap between the line and the polygon.
5994	Sets the density of the line and polygon.
5995	Sets the line paint.
5996	Sets the Paint used to draw the polygon.
5997	Draw a tile and return the tile data in a byte array.
5998	Draw a tile.
5999	Draw the tile query index
6000	Query for the number of features in the tile that are in the index
6001	Query for the number of features in the bounding box that are indexed within the bounding box
6002	Query for the features in the tile that are in the index that match the specified bounds
6003	Query for features within the bounding box that overlap the tile
6004	Draw a tile query all features
6005	Simplify the points.
6006	Returns the point paint for the given feature style.
6007	Returns the paint for the line.
6008	Get the polygon paint for the feature style.
6009	Get the fill paint for the polygon.
6010	Get the paint for a feature style.
6011	Get the style paint for the style row
6012	Get the paint for a style row.
6013	Get the paint for the specified styleId and draw type.
6014	Puts the icon bitmap for the given icon row.
6015	Creates a bitmap of the icon data.
6016	Wrap the values in quotes.
6017	Creates a bitmap from the layered bitmaps.
6018	Recycle all the bitmaps.
6019	Get the bitmap for a layer. If the bitmap is not yet cached create it.
6020	Get the canvas for a given layer.
6021	Creates a bitmap and a canvas for the specified layer.
6022	Get a style mapping DAO for a feature table.
6023	Get the style DAO
6024	Get the Icon DAO
6025	Get the style for a feature table.
6026	Get the styles for a feature table.
6027	Get the style for a feature table and geometry type.
6028	Get the icons for a feature table.
6029	Get the table icon for a given geometry type
6030	Get the style for a feature row.
6031	Get the style for a feature.
6032	Get the styles for a feature row.
6033	Get the icons for a feature row.
6034	Get the styles for a feature.
6035	Get all icons for a feature
6036	Sets the feature styles for the specified feature table.
6037	Set the styles for a feature table.
6038	Set the table icons.
6039	Sets the feature styles for a feature row.
6040	Set the feature styles.
6041	Set the styles for a feature row.
6042	Set the styles for a feature.
6043	Set the style for a feature row.
6044	Set the default style for a feature row.
6045	Set the default style for a feature.
6046	Set the icons for a feature row.
6047	Set the icons for a feature.
6048	Set the icon for a feature.
6049	Set the default icon for a feature.
6050	Set the default icon for a feature.
6051	Returns the style id or inserts it if it doesn t exist.
6052	Get or insert the icon.
6053	Insert a new style mapping row.
6054	Delete the style mapping for a feature table and geometry type
6055	Delete icon mapping for a feature table
6056	Delete all style mapping tables for a feature table.
6057	Delete the style mapping for a feature table.
6058	Delete the mapping for a feature.
6059	Get all style ids for a feature table.
6060	Get all icon ids for a feature table.
6061	Get all style ids for a feature table.
6062	Get all icon ids for a feature table.
6063	Get the image bytes.
6064	Flushes the output stream.
6065	Get the pixel value of the pixel at the x and y coordinates
6066	Reads the pixels from the image.
6067	Draw the feature in the tile
6068	Draws a line path.
6069	Draws a polygon path.
6070	Add a LineString to the Path
6071	Add a polygon to the path
6072	Get the cache for the given table.
6073	Remove a feature row from the database.
6074	Clear all feature caches and resize the table.
6075	Get the table styles from the cache or create a new one if it doesn t exist.
6076	Get the table icons from the cache or create a new one if it doesn t exist.
6077	Get the table DAO for the feature DAO
6078	Set the width of the cell
6079	Set the height of the chart
6080	Returns the dimensions of the bitmap.
6081	Calculate the tile density.
6082	Read blob value.
6083	Read the table
6084	Get the color of the button or create a new one if none is set.
6085	Validate the color
6086	Creates a color object from the hex color and opacity.
6087	Get the manager
6088	Set the progress
6089	Index the given types.
6090	Index a row of features.
6091	Delete the given index types.
6092	Delete the index for the given row and types.
6093	Delete the index for the given geometry and type.
6094	Delete the feature index
6095	Checks if the feature is indexed.
6096	Returns a list of feature index types that are indexed.
6097	Query for all features.
6098	Count the number of features in the index.
6099	Get the bounding box of the feature table.
6100	Query for feature index results within a bounding box
6101	Get the first indexed type.
6102	Get the internal file path.
6103	Get the absolute path to the given file path.
6104	Get the geometry type.
6105	Sets the geometry type.
6106	Checks if the url has a bounding box.
6107	Replaces the XYZ values in the URL with the values in the x and y coordinates.
6108	Checks if the given url has XYZ.
6109	Replaces the bounding box in the url with the new coordinates
6110	Replaces the lat lon values in the url with the values in the bounding box
6111	Get the Geometry data
6112	Index the row
6113	Update the last indexed time
6114	Delete the index.
6115	Delete the index for the given geometry id.
6116	Returns true if the feature is indexed.
6117	Query the geometry metadata table.
6118	Query the metadata table for features within the bounding box
6119	Count the number of features within the bounding box
6120	Query the metadata for the geometry.
6121	Count the number of features in the geometry
6122	Query the feature map within the bounding box
6123	Count the number of features within the bounding box
6124	Get the bounding box of the feature
6125	Get the geometry metadata for the cursor.
6126	Get the feature row for the cursor.
6127	Get the feature row for the given geometry.
6128	Get the Tile DAO for the given feature table.
6129	Get the list of FeatureDaos for the tile table.
6130	Get the bounding box for the feature tiles
6131	Query by baseId and relatedId
6132	Returns a list of all base ids that are unique for the user mapping.
6133	Returns a list of unique related ids.
6134	Delete all mappings for a base id.
6135	Delete all mappings for a given related id.
6136	Delete records by base and related ids
6137	Build the where clause for the ids.
6138	Create the metadata
6139	Delete the database
6140	Rename the GeoPackage metadata
6141	Rename the column
6142	Get all the metadata
6143	Get the metadata for the database
6144	Get the metadata for the id
6145	Get or create the metadata for the GeoPackage
6146	Is the database an external file
6147	Get the metadata for the external package at the given path
6148	Get the metadata of the table that matches the given name like the given string.
6149	Get the metadata where the column name is not like the given string.
6150	Get the metadata names that are like the like string
6151	Create the GeoPackage metadata
6152	This method is called when a view is created.
6153	Adds a view to the parallaxViews list.
6154	Create a new View instance.
6155	Creates a custom view.
6156	Append the event to the buffer.
6157	Finds the configuration file from system properties.
6158	Get the URL of a resource.
6159	Auto - configure the Joran configuration.
6160	Status on resource search.
6161	Convert a socket address to a string.
6162	Creates a new thread pool.
6163	Start all converters in the converter chain.
6164	When a time driven trigger occurs roll - over.
6165	Add a substitution property.
6166	Get a property from the context or the properties map.
6167	Compiles the given node into a converter.
6168	E - returns the next element in the stream.
6169	T = % %
6170	This method is called when an escape character is encountered.
6171	Converts a fixed date into a regular expression.
6172	Start an event evaluation.
6173	Called when the end of the interpretation is called.
6174	Initializes the logger context.
6175	Creates a context selector from a string.
6176	Setup the legacy properties.
6177	Returns the absolute path to the external storage directory.
6178	Returns the path to the database directory.
6179	Returns an absolute path to the file.
6180	Checks if the event is a log entry with a level greater than or equal to the error
6181	Get the discriminating value from the MDC property map.
6182	Updates the mask if necessary.
6183	Returns true if the event should be handled by this filter chain.
6184	Creates the key managers.
6185	Create the trust managers.
6186	Creates a KeyStoreFactoryBean from system properties.
6187	Get the location of a system property.
6188	Returns the URL for the given resource.
6189	Returns true if the chain handles Throwable.
6190	Stops the logback context.
6191	Prints the status of the given context in the case of errors or warnings.
6192	Prints the status of the given context if errors were detected.
6193	Prints the status of the given context.
6194	Write the ThrowableProxy to the stream.
6195	Get the entry from either the live or lingering map.
6196	Mark the given key as no longer in the live map.
6197	Returns a FormatInfo object for the given string.
6198	Renames the source file to the target file.
6199	Checks if the source file and target file are on different volumes.
6200	Get the value of an environment variable.
6201	Get a system property from Android s SystemPropertiesProxy.
6202	Sets the MDC property map.
6203	Format the given map of properties into a comma - separated string.
6204	Extract the stack trace from the given exception.
6205	Checks if the given class is in the framework space list.
6206	Adds a status to the end of the list.
6207	Adds a StatusListener to the list of listeners.
6208	Looks up the implicit action for the given element and attributes.
6209	Returns a list of applicable actions for the given element path and attributes.
6210	Set the class loader to use.
6211	Get a system property value.
6212	Get a system property as a boolean.
6213	Decapitalizes a name.
6214	Get the MethodDescriptors for the given class.
6215	Get the property descriptors for the given class.
6216	Start the appender.
6217	Add a OnConsoleStatusListener instance to the status manager.
6218	Called when the end of the interpretation process has been called.
6219	Returns the discriminating value for the given logging event.
6220	Checks if the event is discardable.
6221	Initialize a shutdown hook.
6222	Called when the logback interpreter ends.
6223	Determine the list of enabled protocols.
6224	Determine the list of enabled cipher suites.
6225	Returns the strings that should be included or excluded.
6226	Convert a string to a scope.
6227	Sets the properties for the given scope.
6228	Adds a new appender to the list of appenders.
6229	Detaches an appender from the list.
6230	Detaches a appender from the list.
6231	Propagate a level change to all children.
6232	Call appenders in the hierarchy.
6233	Detaches the given appender from this logger.
6234	Create a child logger by name.
6235	Call the turbo filters.
6236	Log a slf4j event.
6237	Creates a socket and waits for it to be created.
6238	Creates the parent directories for the specified file if they don t already exist.
6239	Returns the integer representation of the level.
6240	Converts an integer to a Level.
6241	Get the number of occurrences of the given resource in the given class loader.
6242	Get the URL of a resource.
6243	Returns the class loader of the given object.
6244	Get the class loader as a privileged object.
6245	Returns the class loader of the given class.
6246	Start the appender.
6247	Returns the tag for the given event.
6248	Method called when an attribute is encountered.
6249	Returns the index of the first occurrence of a dot or dollar separator in the given name
6250	Checks if the event is matched by the marker list.
6251	Get the thread name of the client socket.
6252	Checks if two files are on the same file store.
6253	Starts the session.
6254	Append an event to the buffer.
6255	Sends the buffer to the server.
6256	Adds the given MDC value level pair to the list of values.
6257	Creates a converter for the given keyword.
6258	Creates a composite converter for the given composite conversion word.
6259	Determine the compression mode.
6260	Configures the JORAN instance with the configuration specified by the given URL.
6261	Configures the JOR instance with the contents of the given file.
6262	Configures the Joran instance with the input stream.
6263	Builds the interpreter.
6264	Configure the JOR.
6265	Configure the interpreter.
6266	Get the value of a property.
6267	Sets the name of the context.
6268	Returns true if the given context has status listeners.
6269	Returns the time of the last reset.
6270	Starts the scanner.
6271	Returns the effective converter map.
6272	Returns the HTML file header.
6273	Returns the file footer.
6274	Start the parser.
6275	Ends the current state of the parser.
6276	Returns a copy of the clients.
6277	Adds a client to the list of clients.
6278	Removes a client from the list of clients.
6279	Get a copy of the context map.
6280	Returns the value of method for the given type.
6281	Get the decision of the chain of filters.
6282	Checks if the current OS is an Android OS.
6283	Initializes the logger context.
6284	Returns an array of files in a folder that match a given regex.
6285	Print the status list in the same order as the last status.
6286	Convert facility string to integer.
6287	Get the database file.
6288	Clear expired logs.
6289	Checks if the last cleanup time is within the given duration.
6290	Append a logging event to the insert statement.
6291	Append the properties and the ThrowableProxy to the database.
6292	Binds the logging event to the statement.
6293	Returns the string representation of the given object truncating to 254 characters.
6294	Computes the reference mask for the given logging event.
6295	Merge the property maps from the context to the event properties.
6296	Insert an exception into the database.
6297	Returns the number of matches between this path and the given path.
6298	Returns the effective level of the status.
6299	Sets the value of the named property.
6300	Checks if the given class is uncertainly instantiable.
6301	Get the child value.
6302	Process an include.
6303	Opens the given URL.
6304	Remove the head and the tail of the recorder.
6305	Returns true if the server should be started.
6306	Returns true if the response is transient.
6307	Set the default hosts.
6308	Ensure that the local index is created.
6309	Syncs the data selection queries with the remote server.
6310	Syncs the database if the last sync time is greater than the delay between syncs or
6311	Wait for a task to be published.
6312	List all the indexes that are offline.
6313	Convert the given stream to a string.
6314	Read the contents of the given stream into a byte array.
6315	Consume the content of the given connection ignoring any errors.
6316	Returns a list of hosts that are up.
6317	Sets the type of the results.
6318	Starts the browse request.
6319	Puts a new value into the cache.
6320	Get the value associated with the given key.
6321	Wait for all threads to complete.
6322	Compares two versions.
6323	Report an exception to the Agent.
6324	Copies all files and subdirectories from the source directory to the target directory.
6325	Initializes the properties from the given file.
6326	Gets the value of a static field.
6327	Get a method by name.
6328	Format a percentage value.
6329	Formats a double value to a string of specified length.
6330	Formats a long value to a string of specified length.
6331	Reads a JSON syntax character.
6332	Converts a hex character to a byte.
6333	Writes a JSON string to the stream.
6334	Writes a JSON integer.
6335	Writes a JSON double.
6336	Reads a JSON string.
6337	Reads a JSON string of characters that are not JSON numeric.
6338	Reads a JSON integer.
6339	Reads a double from the JSON stream.
6340	Reads a JSON string and decodes it as base64.
6341	Execute a method call.
6342	Invoke a request.
6343	Enqueue a method call to be sent to the service.
6344	Get the file from the given location.
6345	Update the decorators.
6346	Refreshes the repository view.
6347	Get the currently active Repository History view.
6348	Opens an editor with the given contents.
6349	Report a failure to the user.
6350	Prompt for authentication.
6351	Create the default page.
6352	Start the server animation thread.
6353	Sets whether the server is going to keep all alive.
6354	Sets whether or not the request is silently ignored.
6355	Set the owner of the element.
6356	Adds a new condition factor.
6357	Creates a new condition term from the given stream tokenizer.
6358	Checks if this condition matches the given term.
6359	Get the dsl configuration file content.
6360	Load the DSL config from the given input file.
6361	Read the configuration from the given stream.
6362	Get the menu to be used for the wizard.
6363	Add a response element to the response tree.
6364	Add an href to the link.
6365	Insert a new href before the given refHref.
6366	Remove the href attribute.
6367	Add a propstat element to the document.
6368	Get the href attribute of the element.
6369	Get the status of the service.
6370	Get the stack frame for the given value.
6371	Checks if the given class is a subtype of the given class.
6372	Checks if the given proposals contains the given new proposal.
6373	Clone a node.
6374	Reset the stream.
6375	Create the actions for this editor.
6376	Adds a connection to this connection.
6377	Get the value of a property.
6378	Removes a connection from this connection manager.
6379	Sets the location of the particle.
6380	Sets the value of a property.
6381	Sets the size of the slider.
6382	Dumps the constraints in a readable format.
6383	Add a lock entry to the tree.
6384	Adds a child vertex to this vertex.
6385	Remove the given vertex from this node.
6386	Initializes the cache.
6387	Stop the plugin.
6388	Get a resource string from the default resource bundle.
6389	Returns the resource bundle for this plugin.
6390	Get the form colors for the rule builder.
6391	Sets the date time.
6392	Sets the date time from the given string.
6393	Create a new error status.
6394	Log an error message and the given exception.
6395	Adds a field to the list of fields to be displayed.
6396	Adjusts the grid layout.
6397	Apply the font to all fields.
6398	Calculates the number of columns in the table.
6399	Initializes the fields.
6400	Fire a property change event to all registered listeners.
6401	Set the active editor.
6402	Add the zoom combo to the given tool bar manager.
6403	Determine the dialect from the back text.
6404	Creates a new context from the given user context and locator.
6405	Saves the file to the target file.
6406	setup table listeners
6407	Creates a table with the given parent.
6408	Puts the given value into the given URL.
6409	Put the value for the given url key.
6410	Add a token to the end of the tree.
6411	Adds a child node to this node.
6412	Sets the file and offset of the buffer.
6413	Adds a new condition to the list of conditions.
6414	Adds a state token condition to the list of conditions.
6415	Checks if the given condition matches any of the conditions in this list.
6416	Get the property element.
6417	Replies the status of the service.
6418	Create a new property element.
6419	Get the last line of the backText
6420	Get the last non - dash line from the back text.
6421	Binds a binding to an id.
6422	Binds two values.
6423	Bind the message with the given bindings.
6424	Creates a BPMN process.
6425	Creates a ProcessJUnit for the given example type.
6426	Returns the runtime id of the application.
6427	Visits a Rete.
6428	Visits a node.
6429	Returns a dot - formatted identifier for the given object.
6430	Add a remove element.
6431	Add a set element to the XML document.
6432	Creates a new locator for the given resource URL and label.
6433	Create a presentation reconciler for the given source viewer.
6434	Returns true if the status is the same as the given object.
6435	Checks if the condition matches the given term.
6436	Creates a new condition factor from the given stream tokenizer.
6437	Add the pages to the editor.
6438	HTTP DELETE method.
6439	Sends a POST request to the Kie REST API.
6440	Get the status of a job.
6441	Executes the pull operation.
6442	Handles the results of a pull operation.
6443	Sets the element at the given index to the given value.
6444	Add an active lock to the XML document.
6445	Filter proposals that start with prefix.
6446	Read the prefix from the document backwards.
6447	Calculates the row list for the given root vertex.
6448	Paint the border.
6449	Returns the edit part for the given model element.
6450	Get an image descriptor for the given path.
6451	Declares an image in the registry.
6452	Adds a vertex to the graph at a given depth.
6453	Replies the row index of the given vertex.
6454	Replies the maximum width of all the rows in the table.
6455	Dumps the vertices of the matrix.
6456	Optimize the data.
6457	Load the RETE model.
6458	Initialize the graphical viewer.
6459	Draw the graph.
6460	Get the Drools line breakpoint for the given source.
6461	Set the href attribute of the node.
6462	Checks if the DAV can be talked to the server.
6463	Copy the properties from one location to another.
6464	Examines the response from the DAV server and examines the status code.
6465	Extract the status information from the response.
6466	Gets the content of the file.
6467	Returns an enumeration of all active lock objects.
6468	Get the property with the given name.
6469	Gets the head of the context.
6470	Locks the current resource.
6471	Move the specified properties to the specified destination.
6472	Override this method to perform the actual check - in.
6473	Refreshes a lock.
6474	Removes the specified properties from the Webdav.
6475	Remove a property.
6476	Sets the content of the resource.
6477	Sets the properties of the element.
6478	Sets the property of the element.
6479	Unlock the current lock.
6480	Updates the current version of the DAV.
6481	Sends a version control request to the DAV service.
6482	Deletes the resource.
6483	Examines the status code.
6484	Checks to see if the given property has a child with the given name.
6485	Write the request body to the OutputStream.
6486	Convert a byte array to a hex string.
6487	Convert an array of integers to a hex string.
6488	Set the allprop attribute.
6489	Set the propname attribute.
6490	Set the property.
6491	Removes the last word from a prefix.
6492	Update the tree viewer.
6493	Writes the content of the response to the given output stream.
6494	Step over the current stack frame.
6495	Mark parser errors as markers.
6496	Skips over any whitespace characters.
6497	Add a file to the Guvnor server.
6498	Commit changes to the selected file.
6499	Returns the age of the user.
6500	Returns the content length of the response.
6501	Returns the maximum number of forwards that can be made.
6502	Returns true if the file should be overwritten.
6503	Replies if the message is passthrough.
6504	Returns the timeout in seconds.
6505	Adds a property to the context.
6506	Set the timeout value.
6507	Open a DSL file and return a buffered reader.
6508	Parse the file.
6509	Get the object metadata from the given text.
6510	Strip object metadata from the given text.
6511	Add tokens to the tree.
6512	Get the children of the condition.
6513	Get the children of the given object.
6514	Add all child nodes of n to list.
6515	Prints the tree.
6516	Prints a node.
6517	Prints a number of tabs.
6518	Read a JsonValue from a String.
6519	Returns an image descriptor for the given id.
6520	Invoke the given request.
6521	Sets the specified field in the request header.
6522	Creates a sample rule launcher for the project.
6523	Creates the rule for the given project.
6524	Creates the ruleflow.
6525	Creates a sample rule flow launcher.
6526	Returns the selected IU.
6527	Creates an image from the current figure.
6528	Get the field name.
6529	Returns the expression that should be evaluated on this field.
6530	Returns the value of the field associated with this node.
6531	Add Guvnor properties from a resource.
6532	Send baseline control to the server.
6533	Binds a member to a source.
6534	Get a member of the current node.
6535	Optimizes the graph.
6536	Initializes the controls.
6537	Validate the page.
6538	Generate an EntityTag.
6539	Get the opposite of the given vertex.
6540	Validate the OTPs.
6541	Check if the YubiKey belongs to the given user.
6542	Get the username for a given publicId from a given file.
6543	Add a YubiKey to a user.
6544	Verifies the OATH OTP for the given user name.
6545	Clear all the password.
6546	Returns the public ID of the OTP.
6547	Checks if the given string is a valid OTP format.
6548	Create an evaluation for the given SimpleNode and source.
6549	Creates an evaluation.
6550	Clears the cache.
6551	Checks if the JVM is running in a JDK 15.
6552	Returns the package name of the given object.
6553	Get the package name of the given class.
6554	Returns a unique descriptor for the given object.
6555	Get the class of the argument.
6556	Checks if the two given classes are more specific.
6557	Returns the best matching method for the given arguments.
6558	Get the value of a property.
6559	Returns a map of all property descriptors of the specified class.
6560	Get the PropertyDescriptor for the given name in the given class.
6561	Get a read method from a class.
6562	Read a single character from the stream.
6563	The projection is defined by the expression.
6564	Select all the values in the expression.
6565	Convert the given value to a long.
6566	Convert the given value to a double.
6567	Converts the given value to a BigInteger.
6568	Converts the given value to a BigDecimal.
6569	Convert an object to a string.
6570	Returns the numeric type of the given value.
6571	Convert the given value to the given type.
6572	Get the integer value of the given value.
6573	Get the numeric type of two values.
6574	Returns the numeric type of the two given objects.
6575	Creates a Number of the given type with the given value.
6576	Pops the current evaluation.
6577	Generate the OGNL getter method for the given field.
6578	Generate the OGNL setter method.
6579	Flatten the tree.
6580	Initializes the iterator with the given node source and setOperation.
6581	Returns the character that should be escaped.
6582	Sets the root context.
6583	Evaluates the given expression against the given context and returns the result.
6584	Set the value of an expression.
6585	Set the value of the given node in the given tree.
6586	Checks if the given expression is a constant.
6587	Returns the default watch service id.
6588	Waits for the Play! server to be started.
6589	Reads the source file and returns it as a string.
6590	Reload the application class loader.
6591	Get the archiver with the given name.
6592	Checks the given archiver for problems.
6593	Reads the contents of the given file into a String.
6594	Creates the ant project.
6595	Add a system property to the Java object.
6596	Add a system property to the Java object.
6597	Opens a new folder dialog.
6598	Changes the selected directory.
6599	Refreshes the button state.
6600	Creates a FileObserver that will refresh the directory when the user clicks on the file.
6601	Return the currently selected folder.
6602	Creates a new folder.
6603	Checks if the given file is a valid directory and is readable and writable.
6604	Start a background job that will be run in the background.
6605	Start a list.
6606	Ends the current list of paragraphs.
6607	Handles motion events.
6608	Returns the rectangle that will be used to crop the image.
6609	Computes the layout of the crop area.
6610	Register a new RTEditTextListener with the RTEditMediaFactory.
6611	Add a span watcher to the text.
6612	This method is called when the user selects a new item.
6613	This method is called when the item is clicked.
6614	Converts the given text into an RT image and video.
6615	Process the given text within the given paragraphs.
6616	Creates a unique file in the target folder.
6617	Determines the original file path from the given Uri.
6618	Get the namespace for a given name.
6619	Returns the local name of the given name.
6620	Set an attribute.
6621	Sets an attribute of the given name and type to the given value.
6622	Get the font name from the given file.
6623	Get the font name from the font file.
6624	Check if we need to create a new buffer.
6625	Writes a portion of a byte array to the output stream.
6626	Writes a byte to the buffer.
6627	Writes data from the given input stream to the output stream.
6628	Writes the contents of the buffer to the given output stream.
6629	Returns a copy of the contents of this buffer.
6630	Set the font size.
6631	Converts Windows path separators to Unix path separators.
6632	Recompute the focus of the highlighted view.
6633	Pan the view if it is visible.
6634	Center the image based on the highlight view.
6635	Reset the document locator.
6636	Validates the given value against the patterns.
6637	Adds a new element type.
6638	Sets an attribute of the specified element.
6639	Set the parent of the child element.
6640	Returns the ElementType object for the given name.
6641	Get the entity id for the given name.
6642	Removes all paragraphs from the given editor that are not part of the given effects.
6643	Applies the given value to the current selection.
6644	Checks if the domain is valid.
6645	This method is called when an operation is executed in a quick succession.
6646	Redo the current operation.
6647	Replaces all occurrences of the search string with the replacement string.
6648	Get or create a thread status.
6649	Sets the decoding options for the given thread.
6650	Returns true if the given thread can be decoded.
6651	Decodes a file descriptor into a bitmap.
6652	Get all the fonts available on the device.
6653	Get all the font files from the assets.
6654	Get a map of all system fonts.
6655	Sets up the internal structures.
6656	Get a Reader from an InputSource.
6657	Get the input stream for the given systemid.
6658	Adup the current element.
6659	Expands all non - ASCII characters in the given string to their corresponding Unicode character.
6660	Lookup an entity from the buffer.
6661	Restart the stack.
6662	Pop the current element off the stack.
6663	Pop the current element off the stack and if restart elements are enabled anonymize the element
6664	Returns the prefix of the given name.
6665	Checks if the schema is a foreign schema.
6666	Removes any quotes from a string.
6667	Splits a string into an array of strings.
6668	rectify the given element
6669	Make a name from the given buffer.
6670	Save the state of the toolbar.
6671	Called when the widget is being destroyed.
6672	Insert a new image into the editor.
6673	Handles a link event.
6674	Sets the base matrix for the bitmap.
6675	Returns the maximum zoom level that can be used to zoom in.
6676	Checks if the given editor has any spans in it.
6677	Finds spans for a given Spannable and removes them from the paragraph.
6678	Encodes a URL with the given query parameters.
6679	URL - decode query string.
6680	Picks a directory from the list of PICK_DIRECTORY_INTENTS.
6681	Rotate the image
6682	Set the output writer.
6683	Writes a character to the output stream.
6684	Writes a string to the output stream.
6685	Check if the given boolean attribute is present in the list of booleans.
6686	Write an escape sequence of UTF - 16 characters.
6687	Write the namespace declarations.
6688	Write the name.
6689	Creates a stream if it doesn t already exist.
6690	Waits for the given stream to become active.
6691	Complete the snapshot of the store with missing instance snapshots.
6692	Wait the minimal duration to execute the next provisioning request.
6693	Get records from Kinesis.
6694	Perform an action with retries.
6695	Try to execute an action on Amazon.
6696	Checks if the bucket is accessible.
6697	Load all the stores from the snapshotStore.
6698	Trigger the wildcard expander.
6699	Replaces all occurrences of oldPattern with newPattern in the input string.
6700	Delete any of the characters in charsToDelete from inString.
6701	Adds a report to the report.
6702	Update the given properties with the values from the filter configuration.
6703	Get the configuration properties.
6704	Creates a stream to read the WRO file.
6705	Convert a map of resource pre - processors to a map of post - processors.
6706	Compiles the given content into a JavaScript string.
6707	Reloads the cache with a new value.
6708	Reloads the model with a new value.
6709	Get a request that wraps the given request.
6710	Transformer that adds a suffix to the base name and extension of the input string.
6711	Called when an error occurs.
6712	Sends a redirect to the specified location.
6713	Process a resource.
6714	Creates a handler that expands the given resource.
6715	Locate a URI using the configured URI Locator.
6716	Create the WroConfiguration object.
6717	Register the listeners that are triggered when the WRO configuration changes.
6718	Process the request.
6719	Sets the Wro configuration.
6720	Identify duplicate group names.
6721	Merge the given model with this model.
6722	Locate a URI.
6723	Apply the post processors to the given content.
6724	Decorate a resource post processor.
6725	Process the resource.
6726	Splits the given string into an array of options.
6727	Load properties from an input stream.
6728	Parse properties from a string.
6729	Creates a custom WRO Manager factory.
6730	Persists the resource fingerprints for the given groups.
6731	Checks if the given group is a target group.
6732	Extend the plugin classpath.
6733	Get the resource as stream.
6734	Initialize the WRO Manager factory.
6735	Sets the transformers to use.
6736	Compile the given content into a handlebars template.
6737	Process and merge the given resources.
6738	Process and merge resources.
6739	Run pre - processing in parallel.
6740	Apply the pre - processors to the given resource.
6741	Decorate a pre processor with a given processing criteria.
6742	Persist the fallback storage.
6743	Get all fields of an object including super classes.
6744	Rewrite the given css url to include the given image url.
6745	Computes the new image location.
6746	Add a transformer to be applied to the Wro model.
6747	Serve the processed bundle.
6748	Initialize the folder path for the aggregated resources.
6749	Extract variables from the given body.
6750	Parse the CSS string and replace variables with their values.
6751	Replaces all variables in the given CSS string with their values.
6752	Converts a ResourcePostProcessor to a ResourcePreProcessor.
6753	Checks if the resource can be found.
6754	Compress the response.
6755	Include the given patterns in the result.
6756	Exclude the given patterns from the given processor.
6757	Creates a new ResourceChangeHandler.
6758	Remember the resource.
6759	Apply the given function to each CSS import.
6760	Filter the given collection and return a list of all null items.
6761	Checks if the request is being made to minimize the result.
6762	Find imported resources.
6763	Computes the absolute URL for the given relative resource URI and import URL.
6764	Create a string representation of the given items.
6765	Get the list of aliases from the alias csv.
6766	Creates a new context and evaluates the commons. js file.
6767	Evaluate the expression in the specified reader.
6768	Evaluate a JavaScript string.
6769	Process the bundle.
6770	Checks if the request is a handler request.
6771	Create the request path for the given cache key.
6772	Rename the given input stream to the given group.
6773	Computes the destination folder for the given resource type.
6774	Process a group.
6775	Checks if a resource is changed for a given group.
6776	Locates a resource in the context folders.
6777	Creates a new object pool using the given object factory.
6778	Locate a stream from the given folder.
6779	Opens a JAR file.
6780	Extract path from URI.
6781	Checks if the request is minimized.
6782	Add a URI locator.
6783	Decorate a WroModelFactory with a list of transformations.
6784	Adds a require parameter to the list of required parameters.
6785	Process the content.
6786	Log a summary of the results of the linting process.
6787	Called when a resource is processed.
6788	Returns a lock for the given key. If no lock exists a new lock is created and
6789	Creates a process from the given source file.
6790	Parse properties from the given string.
6791	Get the list of tasks.
6792	Get the compilation command.
6793	Parse the header.
6794	Adds the cache headers to the given map.
6795	Get path info from location.
6796	Gets servlet path from location.
6797	Checks if the given request matches the given path.
6798	Load a regexp with a given key from the regexp. properties file.
6799	Copy the contents of the given reader to the given writer. Closes both the reader and
6800	Creates a temporary file with the given extension.
6801	Cleans image url.
6802	Sets the given attribute to the given object.
6803	Generates a data URI from the given input stream and file name.
6804	Generate the data URI.
6805	Sets the context and configuration.
6806	Unregisters the context.
6807	Check if the group has changed.
6808	Called when an exception occurs.
6809	Check if the resource has changed.
6810	Update the hash for a group.
6811	Checks if this resource collection has resources of a given type.
6812	Creates a process from the given source and destination files.
6813	Encodes a Java object into a JSON string.
6814	Process the groups.
6815	Parse a group element.
6816	Create a group from the given XML element.
6817	Parse a resource element.
6818	Get the list of resources for a given group.
6819	Log the current time taken.
6820	Stops a timer with the given name and todo flags.
6821	Get a timer with the given name and todo flags.
6822	Create a timer with the given name and thread ID.
6823	Prints the current statistics of the satellite.
6824	Wake up all workers.
6825	Updates the processed counters based on the values of the current jobs and contexts.
6826	Updates the finished counters.
6827	Updates the given counter if it is smaller than the given value.
6828	Visit a rule.
6829	Inerts the given property into the taxonomy.
6830	Ensures that the axiom loading is complete.
6831	Restores the saturation of the current stage.
6832	Returns true if the current consistency check is consistent.
6833	Restores the taxonomy.
6834	Restores the instance taxonomy.
6835	Returns the evidence of this ontology.
6836	Called before the executor is executed.
6837	Invalidate all the children of this stage.
6838	Get the individual to add to the taxonomy.
6839	Get the individuals to remove from the taxonomy.
6840	Thrown when the reasoner method is not implemented.
6841	Removes the element at the specified position in the array.
6842	Remove the element at the given position in the given array.
6843	Returns the position of the element moved to the position specified by del.
6844	Returns true if the object is contained in the array false otherwise.
6845	Adds an element to the end of the array if it is not already there.
6846	Checks if the list of occurrences has a positive or negative occurrence number.
6847	Adds the given timer to this timer.
6848	Adds the application timer to this application timer.
6849	Put a key - value pair into the given array.
6850	Remove the entry with the given key from the given values.
6851	Enlarges the map by adding new entries.
6852	Shrink the hash table to a new capacity.
6853	Saves the given configuration to the given file.
6854	Prints the declarations of the given class taxonomy.
6855	Returns all direct and indirect instance nodes reachable from the given node.
6856	Removes all elements from the set.
6857	Combines multiple hashes into a single hash.
6858	Combines multiple hash lists into one.
6859	Copy the contents of the input stream to the output stream.
6860	Returns a monitor that reports incomplete reasons.
6861	Process a taxonomy.
6862	Submits an input to the queue.
6863	Append an ElkObject to the given appender.
6864	Marks the query as not computed.
6865	Adds a new direct type node.
6866	Checks that the given start position exists in the given chain.
6867	Returns a set containing only the elements that satisfy the given condition.
6868	Returns a set that contains all elements of the input set that satisfy the given functor.
6869	Adds an element to the specified slot.
6870	Removes an object from the specified slot.
6871	Adds the given counter to this counter.
6872	Log the memory usage of the JVM.
6873	Sets the configuration options.
6874	Shuts down the EKV reasoner.
6875	Prints the header information.
6876	Prints the given values to the log.
6877	Returns a string of the specified length.
6878	Adds a counter to the counter.
6879	Writes a resource.
6880	Gets the action input parameter.
6881	Gets the property descriptor for the given property path.
6882	Returns a map of all required parameters.
6883	Checks if the given class is a single type.
6884	Adds a REL link parameter.
6885	Sets the media type of the link.
6886	Add the hreflang parameter.
6887	Adds the revision of the document.
6888	Adds a link parameter to the request.
6889	Expands the URI template with the given arguments.
6890	Gets the list of relationships.
6891	Get the list of revisions.
6892	Returns true if any of the required parameters are not satisfied.
6893	Returns the value formatted for display.
6894	Checks if the property is hidden.
6895	Checks if the property contains a value that should be included in the input.
6896	Returns true if the input annotation has an explicit property include value.
6897	Returns true if the request is required.
6898	Returns the default value of the request.
6899	Returns the name of the parameter.
6900	Get the property name from the annotation or the parameter name.
6901	Determine the vocabulary to use for the given mixin.
6902	Returns the query string.
6903	Append the form to the output stream.
6904	Output a button with the given type and value.
6905	Append an input or select parameter to the request.
6906	Adds the given affordance to the current affordance.
6907	Returns the URI template components for this partial.
6908	Returns a new URI template with the specified URI template variables removed.
6909	Returns the first UberNode with the given name.
6910	Get the first UberNode with the given relation.
6911	Returns an iterator over the UberNodes in this UberTrie.
6912	Creates a PersistentHashMap using the specified Equator.
6913	Creates a PersistentTreeMap from the given Iterable.
6914	Returns a new empty map with the given comparator.
6915	Returns a sorted set of all the entries in this tree.
6916	Returns the last key in this map.
6917	Construct an Xform from an iterable.
6918	folds the source into a single value using the given reducer.
6919	Drops elements from the stream while the given predicate returns true.
6920	Folds the run into a single value using the given reducer function.
6921	Creates a tuple from a Map. Entry.
6922	Match the item with the two functions.
6923	Register a list of classes.
6924	Returns the i th element in this set.
6925	Append the specified element to the end of the vector.
6926	Concatenates the given items into a PersistentVector.
6927	Creates a mutable set from the given items.
6928	Creates a mutable list from the given items.
6929	Creates a set from the given items.
6930	Creates a vector from the given items.
6931	Returns an iterable that transforms an array into an array.
6932	Indent the given number of spaces.
6933	Convert an array of objects to a string.
6934	Creates a new LazyRef that holds the value returned by the producer function.
6935	This method is called by the thread that invokes the producer.
6936	Inserts an item into an array at a given index.
6937	Copy an array of the given length.
6938	Suspend the transaction if the current thread is the same as this one.
6939	Called before async operation.
6940	Build the list of service components from the given jar file.
6941	Checks that the given directory exists and is a directory and that it is readable.
6942	Creates an inheritance link between the concrete class and the super class.
6943	Copy all methods from source to destination.
6944	Copy the given methods to the destination class.
6945	Create a tree item for the FQDNNode.
6946	Remove the given SbbEntity from the SbbEntity s classloader.
6947	Returns true if notifications are enabled for the given parameter.
6948	Returns a set of all the RA Entity Links that are referenced by the given service component
6949	Installs a service component.
6950	Uninstall a service.
6951	Checks if the given RA link name is referenced by any of the resourceAdaptorEntityLinks in
6952	Get the usage parameter sets for the specified SBB.
6953	Reset all usage parameters.
6954	Returns a collection of all profiles in the specified profile table.
6955	Get the profile table activity.
6956	Returns the first profile that has the specified attribute value.
6957	Display the result.
6958	Unfolds an array of objects.
6959	Execute the event.
6960	Binds an Ach to a name.
6961	Unbinds a name from the cache.
6962	Lookup a node by its name.
6963	Returns a map of the name bindings of the node.
6964	Get the next result from the SbbEntity that has been attached to the SbbEntity
6965	Returns true if this level is higher than the given level.
6966	Extract the contents of a jar file to a directory.
6967	Copy data from the input stream to the output stream.
6968	Put an object into the cache.
6969	Attaches the given SbbEntityID to this SbbEntity.
6970	Detaches the given SbbEntity from this node.
6971	Returns true if there are no SBBs attached to this node.
6972	Replies the set of SbbEntities attached to this node.
6973	Attaches a timer to the timer list.
6974	Detaches a timer from the timer list.
6975	Returns true if there are no timers attached to this node.
6976	Replies the set of timers attached to this timer.
6977	Add a name to the list of names bound to this node.
6978	Remove a name bound to this node.
6979	Returns true if there are no names bound to this node.
6980	Returns a copy of the names bound to this node.
6981	Set the value of a CMP attribute.
6982	Get the value of the specified cmp attribute.
6983	Get a copy of the map of the cmp attributes.
6984	Initialize the notification info.
6985	Send a usage notification to all registered listeners.
6986	Download a remote DU file from the server.
6987	Update the list of components that are currently deployed
6988	Install a deployable unit
6989	Uninstalls a deployable unit.
6990	Process the undeploy request.
6991	Returns a String with the status of the waiting units.
6992	Log a LogRecord.
6993	Get the logger for a given log record.
6994	Returns a set of components that are referring to the given component.
6995	Get the set of SbbEntityIDs that are part of the current SBB.
6996	Get the permissions for the current policy.
6997	Returns the list of code sources that should be used for the current policy.
6998	Checks if a profile exists in the profile table.
6999	Remove all profiles from the profile table.
7000	Update the configuration properties of the Resource Adaptor
7001	Activate the RA object if the entity is active.
7002	SleeStopping is called when the RA is stopping.
7003	Activate the entity.
7004	Deactivate this entity.
7005	Schedule the end of all activities if the node is a single member.
7006	Remove this entity from the system.
7007	Get the resource adaptor interface for the given RA type.
7008	Called when a service is active.
7009	Derives an ActivityHandle from an ActivityHandleReference.
7010	Called when an activity has ended.
7011	Update the configuration properties.
7012	verify the new configuration properties
7013	Notify the resource adapter that the resource is stopping.
7014	This method is called when the resource adapter object is no longer in the ACTIVE state.
7015	Unconfigure the resource adapter.
7016	Unconfigure the ResourceAdaptorContext.
7017	This method unsets the fault tolerant context.
7018	Build the map of profile attributes to their corresponding profile attributes.
7019	Resume the event context
7020	Replies the set of activity context handles.
7021	Remove this MBean from the MBeanServer.
7022	Get the usage MBean for the given paramSetName.
7023	Decorate the Abstract Class.
7024	Fire an event on the specified SbbEntity with the specified event type ID and object.
7025	Fires an event on the SBB object.
7026	Get the profile cmp method for the given profileID
7027	Get the usage parameter set for the specified SBB.
7028	Get the abstract methods from the given class.
7029	Get the methods from an interface.
7030	Create a Sbb object pool for the given profile table.
7031	Remove the ObjectPool for the given ProfileTable
7032	Checks if the given source is the owner of the alarm.
7033	Raise an alarm.
7034	Returns the usage parameter set with the specified name.
7035	Gets the event type specs descriptor.
7036	Check if the given URL accepts the given deployable unit.
7037	Initialize the deployer.
7038	Start the deployable unit
7039	Stop the deployableUnit
7040	Show the status of the deployment
7041	Executes all after commit actions.
7042	Executes after commit priority actions.
7043	Executes the after rollback actions.
7044	Executes the before commit actions.
7045	Executes the before commit priority actions.
7046	Returns the tracer names defined in this context.
7047	Create a tracer with the given name.
7048	Remove all replicated data.
7049	Registers the property editors.
7050	Generate the usage parameter impl class and the usage mbean for the given component.
7051	Get the object pool for the given service and sbb.
7052	Create a Sbb object pool.
7053	Execute an activity.
7054	Start an activity.
7055	End an activity.
7056	Checks the preconditions for firing an event.
7057	Fire an event on an activity.
7058	Generates the SbbLocalObjectConcrete class.
7059	Make the getter.
7060	Convert the given string to the appropriate class.
7061	Sets the profile name and table name.
7062	Extract the message from the given result.
7063	Check if the given object is in the cache.
7064	Returns true if all elements in the given collection are contained in this relation.
7065	Removes all elements from the specified collection.
7066	Returns true if this level is higher than the given level.
7067	Resolve the internal state of the stream.
7068	Removes all classes from the class pool.
7069	Record a profile call.
7070	Get a profile object from the transaction.
7071	Passivate the profile object on transaction end.
7072	Sets the component ID as text.
7073	Generates the concrete class for the ActivityContext interface.
7074	Generate the concrete methods for the interface
7075	Set a data attribute for the activity context.
7076	Adds a name binding to the cache.
7077	Remove the bindings from the ACI names.
7078	Removes an ACI name binding.
7079	Attaches a timer to the cache.
7080	Remove all timers attached to this cache from the timer facility
7081	Attaches an SBB entity to the cache.
7082	Detaches the given SbbEntity from the cache.
7083	Get the SbbEntityID s that are attached to this SbbEntityID.
7084	Ends the current activity.
7085	Adds a component to the DU.
7086	Get the external dependencies of this DU.
7087	Check if the dependencies are satisfied.
7088	Checks if there are any duplicate components in the DU.
7089	Get the actions that should be executed after the components have been installed
7090	Get the uninstall actions
7091	Checks if this component has a reference to another component
7092	Close the specified profile.
7093	Get the profile table name and profile name as an object name.
7094	change the state to write if the profile is not writable
7095	Called before the field is set in the profile.
7096	Suspend the transaction
7097	Before getting the cmp field.
7098	After get the cmp field.
7099	This method is called before the method invocation of the profile table.
7100	Method invoked after the management method invocation.
7101	Recursively deletes a path.
7102	Creates a default constructor for the ConvergenceName.
7103	Create the default usage parameter getter method.
7104	Creates the getter and setter methods for the SbbEntity.
7105	Create the fire event methods.
7106	Creates and returns a method to retrieve the SBB Activity Context object.
7107	Add the given expression to this list.
7108	Bind a name to a target object.
7109	Rebinds the given object to the given name.
7110	This method will decorate the Abstract Sbb.
7111	Invoke the method with the given name and arguments and return a void.
7112	Get the real field name for the given field name. If the field name is not found
7113	Sets the value of the specified field.
7114	Returns the value of the field with the given name.
7115	Set the profile context.
7116	Initialize the profile.
7117	Unsets the profile context.
7118	Get the profile local object.
7119	Fires a add or updated event if the object is ready
7120	Get the AbstractProfileCmpSlee10Wrapper instance.
7121	Creates a class with the given name and interfaces.
7122	Creates a link to the superclass of the given class.
7123	Adds an annotation to the given class or method.
7124	Add the member values to the annotation.
7125	Get the ActivityContext associated with the given activity.
7126	get the class pool
7127	Set the deployable unit.
7128	Called when the application is no longer deployed.
7129	Execute an activity.
7130	Method to check if a class implements a certain interface.
7131	Get all methods of an interface including those implemented by interfaces that are not in the ignore set
7132	Resolve an entity.
7133	Checks if the given tracer name is valid.
7134	This method is used to execute a static query on the profile table.
7135	Check the dependencies of the given component
7136	Creates a temporary dir for the DU.
7137	Get the entity manager.
7138	Start the service.
7139	Switch to a class loader.
7140	This method is used to make a proxy method call in a safe way.
7141	Check if the current transaction is the same as the one in the SLEE container.
7142	Convert the timeout to a TTL.
7143	Returns true if the profile class is visible.
7144	Checks if the given profile entity is valid in the current transaction. If not it will be
7145	Get the names of the loggers that match the given regular expression
7146	Reset the logger levels
7147	Clear all loggers for the given name
7148	Add a logger to the console.
7149	Add a socket handler to the logMgmt MBean
7150	Remove a handler from a logger
7151	Returns the logger name for the given tracer name and notification source.
7152	Synchronize the level of the tracer with the log4j level.
7153	Assigns the log4j level to the trace level.
7154	Reset the cache flags.
7155	Send a trace notification to the trace MBean.
7156	Checks if the tracer name is valid.
7157	Serializes the vendor data.
7158	Deserializes the object from the stream.
7159	Adds a URLClassLoaderDomainImpl to the list of direct dependencies.
7160	Get all dependencies of this class loader domain.
7161	Find a class in the classpath.
7162	Override this method to log the name of the resource and return the URL of the resource.
7163	Override this method to provide a trace level of logging.
7164	Creates and registers a profile mbean.
7165	Resume a transaction.
7166	Returns a set of all SBB IDs in the given repository.
7167	Get the resource adaptor entity links for all the SBBs in the repository.
7168	Initializes the slee container.
7169	Shutdown all slee modules.
7170	Validate state transition.
7171	Generate a named usage parameter getter method.
7172	Set the field with the given name to the given value.
7173	Build the PolyJDBC object.
7174	Adds a field with a value to the insert query.
7175	Executes the given transaction.
7176	Create a new RegionRequest from a string.
7177	Returns the region of the image.
7178	Resolves the image dimensions.
7179	Returns the on type of the current context.
7180	Sets the viewing hints.
7181	Add a viewing hint to the resource.
7182	Sets the other content renderings.
7183	Add rendering.
7184	Merge profiles.
7185	Merges this profile with the given one.
7186	Create a rotation request from a string.
7187	Create a SizeRequest from a string.
7188	Initialize the adb connection.
7189	Get the dump of the current device.
7190	Run the test to see if the device is a PopBox device.
7191	Push the handleGps2Device jar to the device
7192	Clean up temp files.
7193	Pull the dump file to the pc s path.
7194	Gets the crash log.
7195	Removes tabs from the beginning of each line.
7196	Indent the text by the given number of spaces.
7197	Tokenize the HTML.
7198	Convert a string into Markdown.
7199	Escapes special characters within tag attributes.
7200	Adds an exception to the queue.
7201	Closes the connection.
7202	Find the fully qualified class name of the parent of the given TypeElement.
7203	Writes the class to the given filer.
7204	Writes a divider.
7205	Appends the bits in the given bit string to the given bit vector.
7206	Read the data from the given input stream.
7207	Get a list of objects from the API.
7208	Get a list of objects from the server.
7209	This method is called by the extent - report thread.
7210	Add a screenshot from a path.
7211	Set the system info for the given key.
7212	Select the properties of a table.
7213	Select a property with a transform function.
7214	Extract validation annotation data.
7215	Returns all annotations for the given property.
7216	Find the annotations for the given property.
7217	Get the PropertyDescriptor for the given property name.
7218	Lookup the object in the given JSON string.
7219	Convert a map to a specific class.
7220	Creates a new instance of the given class from the given map.
7221	Convert a Map of Value objects to a specific class.
7222	Convert an object to a map ignoring the given strings.
7223	Convert an object to a map.
7224	Gets the values from the annotation.
7225	Creates a validator that can be used to validate the property.
7226	This method will look up the validators in the registry and then initialize them with the properties from
7227	Lookup a validator in the object registry.
7228	Apply validation meta data properties to the validator.
7229	If the property is blank remove it.
7230	Tick the timer.
7231	Returns the total number of entries in the cache.
7232	Hash the given object.
7233	Creates a default set of options.
7234	Open the database.
7235	Puts all of the given values into the database.
7236	Removes all of the given keys from the cache.
7237	Returns a key - value iterable for the given start key.
7238	Load all entries for the given keys.
7239	Closes the database.
7240	Reduces the array by the sum of all elements of the object.
7241	Performs a reduce by using the long int return long type.
7242	Computes the variance of a double array.
7243	Calculate the mean of a range of long values.
7244	Invoke a method on an object with an argument list.
7245	Reduce the array using the given ReduceBy.
7246	Returns a string representation of the given timestamp in the UTC timezone.
7247	Checks if the object matches the criteria.
7248	Creates a not in criterion.
7249	Create a criteria from a list of objects.
7250	Creates a Criteria object from a JSON string.
7251	Adds an array of values to the end of the array.
7252	Returns the maximum element in the array or null if the array is empty.
7253	Returns a list of the first count elements in the list.
7254	Returns the last element of the list.
7255	Returns the last count elements of the given list.
7256	Returns the least count elements from the list.
7257	Returns the minimum item in the list.
7258	Returns the minimum element in the array.
7259	Process an array of maps.
7260	Handles the collection of maps.
7261	Creates an object from the given map.
7262	Get the value associated with the given key.
7263	Create a toolTip with the given name space and field name.
7264	Generates a label value from a field name.
7265	Adds a 2 - byte Nibble to the end of this string.
7266	Process the read queue.
7267	Process the write queue.
7268	Start the data queue process.
7269	Returns the string that is at the specified index and contains the specified character.
7270	Returns a slice of the specified string starting at the specified index.
7271	Checks if the specified character is contained in the specified string.
7272	Adds the specified character to the end of the string.
7273	Add objects to a string.
7274	Compacts a string.
7275	Split a string into an array of strings.
7276	Splits a string by space.
7277	Splits the given string by pipes.
7278	Converts a char array to a string array.
7279	Converts a string to a camelCase.
7280	Checks if a string is inside of another string.
7281	Returns the input string with bar - case replaced by the first letter in the input string.
7282	Returns a string representation of the given number.
7283	Creates a new Sort object with the given sorts.
7284	Sort the list according to the given fields.
7285	Returns a comparator for this field.
7286	Returns the comparators that can be used to sort the results.
7287	Checks if the given value is in the given map.
7288	Checks if the given int value is equal to the given int value. If it is not
7289	Checks if two int arrays are equal. If they are not an exception is thrown.
7290	Sums the values in the specified range.
7291	Round up to a power of 2.
7292	Sorts the list according to the sortBy and fields.
7293	Sorts the list according to the specified sortBy and fields.
7294	Set the field value from the map.
7295	Converts an object to a list.
7296	Create the SQL to load all version data.
7297	Returns a deep copy of the given list.
7298	Checks if the given object has a string field with the given name.
7299	Checks if a class has a string field with the given name.
7300	Checks if a class has a field with the given name.
7301	Returns the first comparable or primitive field from the given class.
7302	Returns the sortable field name from the given value.
7303	Compares this CacheEntry with the specified CacheEntry.
7304	Compares the time stamp of this CacheEntry with the time stamp of the given CacheEntry.
7305	Sorts the given list according to the given sorts.
7306	Sort the list according to the specified sortBy.
7307	Sorts the entries of a Map.
7308	Sorts the values of a Map.
7309	Sorts the keys of a map.
7310	Sorts an array of objects by the given field name.
7311	Returns a comparator that sorts the objects in the given field according to the given values.
7312	Returns a comparator that sorts by value.
7313	Get the value associated with the given key.
7314	Get the value for the given key.
7315	Returns an order for the next call to the method.
7316	Evicts entries from the cache if the size of the cache is greater than the evictSize
7317	Initializes the range based on the type of the given value.
7318	Allocate a buffer of the given size.
7319	Determines if we should exit.
7320	Manages the input channel.
7321	If the queue is empty flush the file.
7322	Start monitoring the application.
7323	Start the monitor.
7324	Get the object associated with the given key.
7325	This method is called by the query builder to perform the actual query.
7326	This method will handle the case where the group is n or group.
7327	Tick the timer.
7328	Flush the output stream to disk.
7329	Closes the output stream.
7330	Writes the next buffer to the output stream.
7331	Writes the given buffer to the output stream.
7332	Initialize the output stream.
7333	Puts all of the given values into the cache.
7334	Converts the given key to a byte array.
7335	Read the validation meta data for the given property.
7336	Extract the validator meta data from a string.
7337	Read the validator meta - data for the given class and property name.
7338	Extract the validator meta - data from the annotation.
7339	Extract the validator meta data from the annotations.
7340	Converts annotation data to validator meta data.
7341	Splits the string into an array of strings using the specified character split.
7342	Splits the given string by white space.
7343	Splits a string by the given delimiters.
7344	Removes characters from a string.
7345	Splits a string into an array of strings by the specified characters. The characters are not included
7346	Parse a double value from the given buffer.
7347	Parse an int from the given buffer.
7348	Parse a long from a string.
7349	Get a property from an object by its path.
7350	Get the fields from an object.
7351	Returns the type of the property.
7352	Injects the given value into the given object property path.
7353	Set the value of the property at the given path in the given class.
7354	Get a collection property.
7355	Get a property from an object.
7356	Gets the value of one or more properties of an object.
7357	Initialize the message keys.
7358	Creates a message from the message key and the given arguments.
7359	Creates a validation error message.
7360	Converts the list of keys to the values.
7361	Returns the subject for the message.
7362	Parses the given text into an object.
7363	Sends the request to the server.
7364	Deletes a database.
7365	Creates a database.
7366	Retrieves a list of UUIDs for the current user.
7367	List all resources in the given path.
7368	Triggers replication.
7369	Queries the database and returns the first value of the result as an instance of the given class
7370	Sets the view descending.
7371	Synchronize all design documents in the design document store with the database.
7372	Retrieves a design document by ID from the database.
7373	Get all design documents from Desk.
7374	Get a design document from the Desk.
7375	Saves the replicator document.
7376	Returns the replicator document with the given id.
7377	Returns all the documents in the database.
7378	Removes the given document from the database.
7379	Find an object of the given type.
7380	Finds all documents that match the given JSON query.
7381	Checks if the document with the given id exists.
7382	Bulk inserts multiple documents into the database.
7383	Performs a PUT request to the given URI.
7384	Execute a PUT request with the given input stream.
7385	Execute a POST request to the given URI with the given JSON body.
7386	Execute a DELETE request.
7387	Validate the response.
7388	Sets the entity to the given http request.
7389	Adds an attachment to the message.
7390	Gets changes.
7391	Reads the next row from the stream.
7392	Converts the given Money to the corresponding currency.
7393	Release all locks.
7394	Writes the given data to the given ServletOutputStream.
7395	Adds tags to a metric.
7396	Verifies that the temporary tables are created.
7397	Returns the project id for the given namespace.
7398	Checks if the request is a query.
7399	Sends the authentication request to the client.
7400	Get the HTTP verb for the given request.
7401	Generates a subject access token.
7402	Called when a request is complete.
7403	Called when a client request fails.
7404	Initializes the system configuration.
7405	Finds all scheduled jobs that are scheduled at a given time slice.
7406	Converts a map of buckets to a list of buckets.
7407	End the exchange with the given status code and reason phrase.
7408	Find all data from the bucket.
7409	Creates a new buckets object from the given start end and step.
7410	Send a message to the broker.
7411	send one message to the broker
7412	Send a message to the Kafka topic with a delay level.
7413	Scan for keys that match the pattern.
7414	Sets the value of a property.
7415	Adds a file to the zip archive.
7416	Replaces the text in the zip file with the path to the file.
7417	Builds the zip file.
7418	Generates metrics for a given component and product.
7419	Fetches the content with the given content id.
7420	Fetches the order content from the API.
7421	Uploads the given export transformation to the server.
7422	Generates a new file from the given components.
7423	Creates a new directory in the given parent directory.
7424	Adds the object to the end of the tree.
7425	Register a model adaptor for a given type.
7426	Register a renderer for a given type.
7427	Prepare a template for the given prototype model object and content info.
7428	Add a domain object to the assembler.
7429	Sets a property.
7430	Adds a child object to the given collection.
7431	Creates a supplier that creates a new file in the given directory with the given prefix and suffix
7432	Copies the contents of the input stream to the output stream using the specified hash assembler.
7433	Parse the given file.
7434	Parse the given reader as an XML document.
7435	Returns a stream of all elements in the given parent element.
7436	Returns a stream of nodes that are direct children of the given parent element.
7437	Get the first child element of the given parent element.
7438	Returns a stream of elements that are named in the given parent element.
7439	Validates the XML against the given XML schema.
7440	Entry point for the command line tool.
7441	Adds the content of the given stream to the content builder.
7442	Creates a builder from a resource.
7443	Process the given entry using the given processor.
7444	Encodes a string to be used for ASCII characters.
7445	Set the signature for the request
7446	Remove all whitespace characters from the given array.
7447	Signs the request
7448	Set the data in the recorder.
7449	Complete a multi - part upload.
7450	This method is invoked when the target notification is to be favorite.
7451	Add a new entry state to the notification.
7452	Returns true if the cache has expired.
7453	Get a notification
7454	Get a list of all addresseees for a notification
7455	Get a specific addressee
7456	Get all events for a notification
7457	Get the event for the given notificationId and eventId
7458	Get the REST URL for a single notification.
7459	Gets the entry with the given id.
7460	Get the authentication token.
7461	Returns the number of notifications in the collection.
7462	Add new categories to the existing categories.
7463	Fetch the SSP notifications for a given person.
7464	Creates a notification with the given error message.
7465	Maps the portlet request to a notification response.
7466	Map a row to a notification entry.
7467	Attaches the actions to the NotificationEntry.
7468	Normalizes the link to a URL.
7469	Returns the notification category for the portlet.
7470	Returns the notification source from the PortletRequest.
7471	Invoke the notification.
7472	Reads the notification from a file.
7473	Returns the student id from the user s PortletRequest. If the user s school id
7474	Extracts the user id from the response.
7475	Hide the notification.
7476	Returns a map of all notification attributes.
7477	Normalizes the given point so that it is 1. 0.
7478	Returns true if the three given boxes are contained within the other box.
7479	Finds the point on the line that is closest to P.
7480	Computes the sign of the point.
7481	Sets the camera s surface surface.
7482	Sets the rotation matrix.
7483	Converts a rectangle into a polygon of order 4.
7484	Converts a 4 - sided polygon into a quadrilateral.
7485	Calculates the bounding box of the quadrilateral.
7486	Computes the bounding box of the polygon
7487	Computes the center of the quadrilateral.
7488	Computes the average of the vertices in the polygon.
7489	Computes the convex hull of the given points.
7490	Removes all vertices that are parallel to the given tolerance.
7491	Computes the average of the error between the points on the line segment and the points on the
7492	Computes the area of the two polygons.
7493	Checks if the given point is inside the quadrilateral.
7494	Checks if the given point is inside the triangle defined by three points.
7495	Computes the intersection point between two lines.
7496	Computes the intersection point between two line segments.
7497	Computes the intersection between two lines.
7498	Computes the intersection between two line segments.
7499	Computes the intersection between two polygons.
7500	Checks if the specified ellipse is inside the image.
7501	Computes the area of the intersection between two rectangles.
7502	Returns the value of the element at the specified index in the matrix.
7503	Converts a rotation matrix into a quaternion.
7504	Rotates the matrix around the x - axis.
7505	Sets the rotation matrix to the x - axis.
7506	Rotates the y - axis around the y - axis and returns the result.
7507	Rotates the 3x3 matrix by the given angle.
7508	Sets the rotation matrix to the z - axis.
7509	Converts a rotation matrix to a rotation matrix.
7510	Rotates the rotation about the given axis.
7511	Sets the angle of the slope.
7512	Computes the twist coordinate given the motion matrix.
7513	Sets the rotation and magnitude of the camera from the initial camera to the end camera.
7514	Interpolates the camera in the direction specified by the parameter.
7515	Computes the SVD of the given points.
7516	Solves a point on the plane.
7517	Returns the length of the side at the given index.
7518	Checks if the given point is inside the image.
7519	Converts the conic general matrix into a real one.
7520	Converts the conic s image into a 3x3 matrix.
7521	Converts the Conic s A and C components into a general one.
7522	Converts Parabola s F64 into ConicGeneral_F64
7523	Divide the coordinates by v and stores the result in p.
7524	Converts a 3D vector into a 3D matrix.
7525	Converts a 3D image into a GeoTuple.
7526	Sets the vector of the parameter.
7527	Returns the distance between two angles.
7528	Checks if the line segments intersect with the plane A and B.
7529	Checks if the plane is contained within the plane defined by T_v0.
7530	Computes whether the line intersects with the given sphere.
7531	Interpolates the rotation between two Se2 images.
7532	Extracts the rotation from the quaternion.
7533	Computes the convex hull given the input points.
7534	Sets the camera to a no motion.
7535	Converts the 3x3 matrix into homogeneous coordinates.
7536	Converts the 3x3 polar plane into homogeneous space.
7537	Computes the rotation matrix for a given axis.
7538	Checks if two 3D images are identical.
7539	Converts a latitude and longitude into a unit vector.
7540	Computes the center of a circle given the two points.
7541	Computes the squared error of a circle.
7542	Finds the point on the line which is closest to the line segment.
7543	Finds the point on the line closest to the given point.
7544	Finds the point on the origin of the plane.
7545	Finds the point on the line closest to the given point.
7546	Finds the point closest to the given triangle.
7547	Transforms the two points in the sphere.
7548	Transforms a set of points into a set of points.
7549	Checks if the quadrilateral is equal to the given quadrilateral
7550	Computes the angle between two lines in the line general model.
7551	Converts a polar line into a parametric line.
7552	Converts a line from one source to another.
7553	Converts a line segment into a parametric 2D image.
7554	Converts the source segment into a line segment in 2D.
7555	Converts two line segments into a line segment.
7556	Converts the two points a and b into a line parametric image.
7557	Converts a parametric line into a polar line.
7558	Converts a parametric line into a line general image.
7559	Converts a line into a parametric 2D image.
7560	Converts a plane normal into a general plane.
7561	Converts a plane normal into a plane normal.
7562	Converts a plane normal from world space to plane normal.
7563	Computes the 2D point along the 3D axis.
7564	Converts a plane into a world.
7565	Checks if two matrices are identical.
7566	Creates a copy of this matrix.
7567	Returns the square root of the matrix.
7568	Computes the t - component of the slope of a line.
7569	Replies if this vector has uncountable values.
7570	Checks if the parameters are equivalent to the parabola
7571	Center of the camera in the image.
7572	Returns the angle between two lines in acute direction.
7573	Checks if the point is infinite.
7574	Generates a list of points with a random value of stdev
7575	Converts a point in Hermitian coordinates into an Euler angle.
7576	Subtracts two points.
7577	Returns true if the two points are identical within a specified tolerance.
7578	Sets the size of this rectangle to the same as the supplied rectangle.
7579	Converts the rotation of an ellipse into a quadratic quadratic.
7580	Computes the point of the ellipse at a given time.
7581	Computes the angle between the given point and the ellipse s reference frame.
7582	Computes the tangent vector of the given ellipse.
7583	Selects the tangent point of the ellipse
7584	Returns the corner of the image.
7585	Computes the distance between two lines.
7586	Computes the distance between the line segment and the point p.
7587	Computes the distance between the line segment and the given point.
7588	Computes the distance between the plane and the given point.
7589	Computes the distance between a cylinder and a point.
7590	Computes the Euclidean distance between two line segments.
7591	Computes the squared Euclidean distance between two line segments.
7592	Computes the Euclidean distance between the quadrilateral and the given point.
7593	Computes the squared Euclidean distance between the line segment and the given point.
7594	Computes the Euclidean distance between the polygon and the given point.
7595	Computes the squared Euclidean distance between the given point and the line segment.
7596	Computes the distance from the origin to the line.
7597	Computes the Euclidean distance between the specified ellipse and the specified point.
7598	Computes the 2 - dimensional distance between the center and the center of the ellipse.
7599	Adds a transform to the path.
7600	Finds the point on the line closest to the given point.
7601	Finds the closest point in the ellipse.
7602	Computes the polynomial curve given the data.
7603	Creates a random vector with the given range
7604	Computes the perpendicular 3D perpendicular vector.
7605	Checks if two vectors are identical in a given tolerance.
7606	Normalizes the vector so that it is 1 - D.
7607	Creates a matrix from the given vector.
7608	Converts a 3x3 matrix into a real 3x3 matrix.
7609	Returns the Euclidean distance between the specified points.
7610	Specifies the ellipse that will be used to calculate the angle and the angle between the two angles
7611	Normalizes this quaternion.
7612	Computes the distance between two points.
7613	Computes the quadrilateral distance of the given quad.
7614	Calculates the simple error of a polygon.
7615	Computes the mean of a set of points.
7616	Sorts the points in the CCW direction.
7617	Computes the normal distribution of the points.
7618	Checks if the given polygon is convex.
7619	Multiply this vector by a scalar.
7620	Returns the maximum absolute value of this quaternion.
7621	Computes the Euclidean distance between the given points.
7622	Returns the squared Euclidean distance between the specified points.
7623	Generates a list of points within the plane.
7624	Generates a list of points with a random value
7625	Returns a list of points with a random value of the given mean and standard deviation.
7626	Computes the mean of the points
7627	Computes the mean of a list of points.
7628	Invalidate all the given credentials.
7629	Invalidate all tokens that match the given predicate.
7630	Combines the given collections into a set.
7631	Returns the features that should be applied to the server. xml file.
7632	Returns the set of features that should be applied to the server.
7633	Get the features from the server. xml file.
7634	Parse the include node.
7635	Parse feature manager node.
7636	Download the features. json file for the given product id and version.
7637	Get the Open Liberty feature set from the given JSON files.
7638	Checks if the list of features is only Open Liberty features.
7639	Checks if the reference contains all of the target strings ignoring case.
7640	Returns the next product version in the given version string.
7641	Extract the symbolic name from the given jar file.
7642	Returns the install kernel jar that is a replacement jar that is not a replacement jar.
7643	Checks if the two jar files are the same.
7644	Extracts the version from the given file name.
7645	Compares two version strings.
7646	Executes the specified action on the specified directory.
7647	Checks if the given jar is a spring - boot - version. release. jar.
7648	Get a property from the arquillian properties.
7649	Checks if the given file is working in this environment.
7650	Moves the cursor back to the center of the image.
7651	Checks if two objects are equal.
7652	Load an integer from a string.
7653	Throw a pizza party.
7654	Verify the turtle.
7655	Swaps the blank cell of this puzzle with the target cell.
7656	Returns the distance between the current and the goal cell.
7657	Print a formatted string using the default locale.
7658	Print a formatted string with the given locale.
7659	This method is used to make sure that the user has a Fish.
7660	Print a variable.
7661	Returns a uniform uniform value between a and b.
7662	Uniformly distributed uniformly between a and b.
7663	Calculates the Poisson distribution.
7664	Returns the index of the element in the array that is discrete.
7665	The main method of the random number generator.
7666	Capitalizes the first character of a word.
7667	UnCapitalizes the first character of a string.
7668	Fixes the path.
7669	Convert a CriteriaJoin to a String
7670	Get the token sentence.
7671	This method is called when a request is made to the server.
7672	Extract the token from the given cookie list.
7673	Registers all classes that are bound to the injector.
7674	Get all permissions of a role.
7675	Adds a projection and an alias to the list.
7676	Convert JobInfo to JobDetail.
7677	Convert a trigger from a job to a trigger.
7678	Set the count interval values.
7679	Set the start and end time of the trigger.
7680	Add a mail to the queue and start the consumer thread if it is not alive.
7681	Write the buffered input stream to the output stream.
7682	Initializes the scheduler.
7683	Returns a sorted list of all fields of the given class.
7684	Get a map of all fields of the given class.
7685	Converts an exception to a response.
7686	Configures the token authentication.
7687	Generate hash for the attributes
7688	Generate a new token string.
7689	Sends a message to one or more receivers.
7690	Generate strong password for a user.
7691	Changes the password of a user.
7692	Get a user by username.
7693	Hash a password.
7694	Verifies that the given account name is a valid email address.
7695	Verifies the strength of the password.
7696	Provide the search model.
7697	Commit the current transaction if it is active.
7698	Rollback the current transaction if it is active.
7699	Starts the transaction.
7700	Configures a field by name.
7701	Check if the user is authorized to access the given method.
7702	Parse the given object using the given field.
7703	Returns a response with status code 500.
7704	Creates a restriction that checks if the given value is equal to the given value.
7705	Creates a restriction that checks if the given value is not equal to the given value.
7706	Creates a less than restriction.
7707	Creates a less than or equals restriction.
7708	Creates a greater than restriction.
7709	Creates a greater than restriction.
7710	Creates a restriction that checks if the value of the property is equal to the given value.
7711	Creates a restriction that checks if the given value is in the list of values.
7712	Add a namespace to the representation.
7713	Creates a new resource representation with the given content.
7714	Add a relation to the resource.
7715	Returns a new resource representation with the given value.
7716	Create a new resource with the given namespace and href.
7717	Checks if the given byte array can be decoded.
7718	Encodes a string into a byte array.
7719	Checks if two input streams are equal.
7720	Moves a file from one location to another.
7721	Creates a new file or updates the last modified time of the files.
7722	Get the base name of a file.
7723	Adds padding to the buffer.
7724	Returns the short name of the given class.
7725	Returns the set of super types of the given class.
7726	Verifies the given password against the given hash.
7727	Read a string from the System. in stream using the given charset.
7728	Appends a byte to the end of the buffer.
7729	Appends the contents of the specified byte array to this buffer.
7730	Creates a copy of the given array.
7731	Returns the sum of this and f.
7732	Subtracts the given fraction from this one.
7733	Returns the result of this division by the given Fraction.
7734	Returns the result of this division by the given fraction.
7735	Returns the maximum of the given values.
7736	Returns the minimum of the given values.
7737	Checks if the condition is true.
7738	Fetch the forecast data for a given location.
7739	Fetch Sunrise data
7740	Fetch Sunrise data
7741	Find forecasts from now that are at least the given number of hours ahead.
7742	Finds the nearest forecast for the given date.
7743	Fetch weather data
7744	Create a simple forecast for the current day
7745	Create a long term forecast that will be used to forecast the day of the week in the
7746	Creates a Location object from a string representation of a location.
7747	Fetch available service content
7748	Create a way symbol name from the forecast data.
7749	Find the Beaufort level for a given PointForecast.
7750	Create a new URI from a string
7751	Checks if the current date is within the SUN period.
7752	Returns the point forecast for the given date time.
7753	Get the best fit period forecast for the requested date range.
7754	Fetch content from the Meteo server.
7755	Fetch content from Meteo
7756	Update the database.
7757	Invoke a string method on the given thiz object.
7758	Acquires an object from the given source.
7759	Get a reference to an object.
7760	Get a reference to an object of the given class.
7761	Get the configuration for the service.
7762	Returns true if the substitutor is enabled.
7763	Creates an iterator over the classes that implement the given service.
7764	Get the Decoder from the configuration.
7765	Get all services of the given interface.
7766	Get a module implementation of the given interface implemented by the given module type.
7767	Acquires a stream from the given source.
7768	Returns the size of the data in bytes.
7769	Get the wrapped data.
7770	Returns the component at the given index.
7771	Returns the prefix of this name.
7772	Returns true if the compiler is colored.
7773	Execute a regex.
7774	Find the loop of the C - Find algorithm.
7775	Set the match for the given subexpression.
7776	Create a new subexpression.
7777	dissects a string in the match.
7778	Clone all the outchains of a state.
7779	Recursively go through the tree and recurse through its children.
7780	Mark the given sub - re as in use.
7781	Create a new NFA for the given subre.
7782	Parse a single branch.
7783	Traverse the state s to the left end state.
7784	Color complements the word chrs.
7785	Clones the word chrs.
7786	Reads a reference number.
7787	Matches a bracket.
7788	Scan PLAIN tokens.
7789	Add a new lacon.
7790	one character.
7791	Do a vector.
7792	Returns the color corresponding to the given Unicode code point.
7793	Creates a pseudo color.
7794	Subrange the color map.
7795	Make sure that all the color descriptors are in use.
7796	Set the color chain for an arc.
7797	Unlinks an arc from its color chain.
7798	Dumps all the colors in the color descriptors.
7799	Lexes the start of a regular expression.
7800	prefixes - literal string prefixes
7801	Starts a lexical nesting.
7802	Get the color of a codepoint.
7803	Initializes a new state set.
7804	Returns the last seen noprogress state.
7805	Returns a set of all possible case - sensitive characters.
7806	Returns a UnicodeSet for the given class name.
7807	Sort the arcs in the arc.
7808	Dump the current state of the compiler.
7809	Creates a new state.
7810	Moves all outgoing arcs from old to newState.
7811	Moves all the arcs in the old state to the new state.
7812	Copy all the instructions from old to newState.
7813	Copy all the outgoing arcs from old to newState.
7814	Drop a state and all of its arcs.
7815	Free a state.
7816	Add a CPARC arc to the current state.
7817	Duplicatetraverse s to stmp.
7818	false colors for BOS BOL EOS EOL
7819	dump nfa.
7820	Dumps a state to the log.
7821	Dumps the arcs of the state s.
7822	Dumps an arc to a string builder.
7823	Dumps an arc to a string builder.
7824	Performs an optimization.
7825	Analyzes the state of the chain.
7826	Combines two arc objects.
7827	Remove all states that are reachable or can - reach - post.
7828	Mark a state as reachable from okay.
7829	Mark the state s to reach okay.
7830	Find and eliminate any empty arcs.
7831	Free an arc.
7832	Returns the rule parameters.
7833	Get the list of report plugins.
7834	Get the report plugins.
7835	Returns a rule selection that matches the given rule set.
7836	Executes the CLI with the given arguments.
7837	Get the error message from the exception.
7838	Gathers standard options.
7839	Gather all the options from the tasks.
7840	Gathers the task names from the given TaskFactory.
7841	Interprets the given command line and processes the tasks.
7842	Get the command line.
7843	Executes a task.
7844	Read properties from the given file or from the classpath.
7845	Prints the usage of the command line.
7846	Returns the home directory.
7847	Creates a plugin class loader.
7848	Returns the set of containing ids of the given coordinates.
7849	Returns all ids that intersect the given range of coordinates.
7850	Returns the URI for the given target and parameters.
7851	Adds a route to the router.
7852	Returns the number of routes in the chain.
7853	Adds a route to the first route in the chain.
7854	Adds a route to the other router.
7855	Adds a route to the last route in the chain.
7856	Returns true if any of the request path tokens matches.
7857	Returns a criterion that can be used to compare two values.
7858	Get the file name for the store.
7859	Compares two folders.
7860	Compares two entries.
7861	Compares two bookmark entries.
7862	Sets the last modified time of the servlet class.
7863	Returns a list of the tag s dependencies.
7864	Find a class by name.
7865	Parse the Authorization header.
7866	Get an instance of the ProtectedFunctionMapper.
7867	Map a function to a class.
7868	Get a mapping for a method on a class.
7869	Resolve a function.
7870	Sets the values of this string.
7871	Resolve a variable.
7872	Parse the tag file specified by inFileName.
7873	Parse the given file and return the nodes.
7874	Parse the tag file directives.
7875	Parse a JSP document.
7876	Creates a JSP compiler.
7877	Returns a resource as InputStream.
7878	Calculates the last modification timestamp of all channels.
7879	This method is used to find all the class loaders that are available in the current context.
7880	Checks if the given classloader is a child of this classloader.
7881	Start loading a class.
7882	Read the stream header.
7883	Paginates the given data set.
7884	Creates a MetaKey from a string.
7885	Fills the requirements.
7886	Get the TagFile for the given tag name.
7887	Parse implicit. tld.
7888	Get checksum for a given file.
7889	Returns the size of the file.
7890	Validates the channel name.
7891	Seeks to the specified block.
7892	Locates a block in the index that contains the given position.
7893	Get the list of Maven artifacts for the given channel id artifact id classifier and version.
7894	Updates the state of the current option and the number of occurrences of the previous option.
7895	Calculate the price for a single byte.
7896	Calculates the long match prices for the given options.
7897	Calculates the normal match prices.
7898	Checks the byte at the given position and throws an exception if it is not.
7899	Throw an exception for invalid byte.
7900	Scan TLDs.
7901	Scans the specified resource path for a tag library descriptor and returns the information about the tag library
7902	Add a wrapper for a jsp servlet.
7903	Returns the parent class loader.
7904	Sets the bytecode for the given name.
7905	Returns the time when the named method was invoked.
7906	Save the bytecode for the given class name to the given file.
7907	Check if all the JSPs have been compiled.
7908	Initializes the classpath.
7909	Start the background thread.
7910	Stops the current thread.
7911	This method is run in a separate thread. It will check for included files which are newer
7912	Find channel by name.
7913	Finds a channel by name.
7914	Update the deploy group cache.
7915	List the groups in which the channel is deployed.
7916	Copy data from the input stream to the output stream.
7917	Parse the jsp file.
7918	Parse the attributes from the specified JspReader.
7919	Parse a quoted string.
7920	Add a list of files to the include list.
7921	Parse the jsp attribute and the jsp body.
7922	Adds an attribute to the element.
7923	Adds a child node to this node.
7924	Returns an iterator over the attributes of this element.
7925	Returns an iterator over the children of this node.
7926	Find all children with the given name.
7927	Returns a copy of this MavenCoordinates with no classifier and extension set.
7928	Finds the alias for a variable.
7929	Set the thread to be run.
7930	Unsets the thread s data.
7931	Returns the wrapped PrintStream or null if none is currently open.
7932	Write an optional field with a null value.
7933	Writes a field to a writer.
7934	Add element.
7935	Add element first.
7936	Writes the contents of this BodyContent to the given Writer.
7937	Sets the writer to use.
7938	Re - allocates the buffer to hold the specified number of bytes.
7939	Map EL functions to the corresponding JS code.
7940	Returns the parent state of the given key.
7941	Registers a new model provider with the given key.
7942	Read the contents of the file for the given key.
7943	Display a single job.
7944	Checks if the user is authenticated.
7945	Finishes writing the current element.
7946	Creates a Gson object.
7947	Encodes the symbol table for use with LZMA2.
7948	Returns a new map with the provided meta data and the extracted meta data.
7949	Get the Throwable from the request.
7950	Checks if the given coordinates have a checksum extension.
7951	Finishes the compressed stream.
7952	Get the exception that occurred during the current request.
7953	Evaluates an EL expression.
7954	Makes a prefix from the OSGi service. http. port system property.
7955	Checks if the file is an XML file.
7956	Parses the tag file directives.
7957	Loads a tag file.
7958	Remove proto type files.
7959	Main method of the JSPC.
7960	Sets the URI root.
7961	Scan the files in the given directory.
7962	Locate the root directory for the current context.
7963	Initialize the system class loader.
7964	Moves the pointer to the next 4 bytes of data.
7965	Checks if the given string matches the current position.
7966	Checks if the given string matches any spaces followed by any whitespace.
7967	Skips the next character in the string until it reaches the given limit.
7968	Skips over the given limit string and returns the mark at which the limit string was reached
7969	Skips the given tag until it reaches a non - space character.
7970	Parses a token from the input stream.
7971	Pop a file from the stream stack.
7972	Returns a new coordinates object with the unclassified coordinates.
7973	Filters the list of aspect information by factory id.
7974	Get the list of factory ids required by this aspect.
7975	Sets the schema resource prefix.
7976	Set the DTD resource prefix.
7977	URL - encode a prefix.
7978	Convert the given node to a TreeNode.
7979	Merge errors from the given binding result into the given result.
7980	Initialize the binder.
7981	Scan for aspect information.
7982	Remove the trailing dot from a path.
7983	Invokes the tag plugin.
7984	Get a byte array of the specified size.
7985	Get an int array of the specified size.
7986	Convert a collection of ArtifactResult into an Aether result.
7987	Get the resource from the context.
7988	Validate this tag against the page data.
7989	Pushes a stream onto the stack.
7990	Get the encoding of the XML file.
7991	Scans for XML declaration.
7992	Reports a fatal error to the error handler.
7993	Returns the real path to the file at the given path.
7994	Get the resource at the given path.
7995	Returns an InputStream for the specified resource.
7996	Get the paths of the files in the given path.
7997	Log a message and exception.
7998	Add a filter to the list of filters.
7999	Returns the buffer size for a given dictionary.
8000	Returns the memory usage of a dictionary.
8001	Set the preset dictionary.
8002	Moves the window to the beginning of the buffer.
8003	Fills the sliding window with the given input.
8004	Process pending bytes.
8005	Returns the number of bytes of the match.
8006	Returns the number of bytes of the first occurrence of the specified distance from the current position to
8007	Verify that the matches are valid.
8008	Moves the position in the buffer to the next available position.
8009	Recycle the buffer.
8010	Flushes the buffer to the underlying stream.
8011	Clears the buffer.
8012	Flush the output buffer.
8013	Close the response.
8014	Writes a string to the underlying stream.
8015	Allocate a char buffer.
8016	This method is called when an error occurs during javac compilation.
8017	Make a key from the given meta data.
8018	Generate the class.
8019	Compiles the JSP page.
8020	Remove all generated files.
8021	Initialize the JavaCompiler.
8022	Checks if the given path is a jar in the system.
8023	Quotes a single character.
8024	Generates the declaration methods for the page directives.
8025	Compiles a list of tag handler pools.
8026	Generate XML prolog.
8027	Generate the common postamble for all the methods and the fragments.
8028	Generate the postamble for the page.
8029	Generate the JSP code for the given page.
8030	Generate the tag handler attributes.
8031	Read the properties from the given stream.
8032	Exports the given channel to the given stream.
8033	Validate the XML view.
8034	Get a tag handler for this thread.
8035	Parse an EL expression.
8036	Select the best match for the two property groups.
8037	Checks if the specified URI is a jsp page.
8038	Prints a comment.
8039	Prints a string in the current indentation level.
8040	Prints a string to the output stream.
8041	Prints a multi line string.
8042	Returns the expression in XML.
8043	Checks that the scope is valid.
8044	Escapes a string for use in an XML document.
8045	Validate the given expressions.
8046	Get the tag handler class name.
8047	Creates a Java package from a path.
8048	Splits a path into individual components.
8049	Makes a Java identifier from a string.
8050	Mangles a single character into a string.
8051	Checks if the given string is a Java keyword.
8052	Adds a property to the given map.
8053	Returns a modifier string with the given prefix.
8054	Returns a set of metadata values for the given namespace and key.
8055	Run the task.
8056	Get the basename of a path.
8057	Put a value into the cache.
8058	Load the value of a key from the database.
8059	Builds a collection of metrics from the given payload.
8060	Resolve a number to a long or double.
8061	Writes a string to the output stream.
8062	Get the TTL for the given locator.
8063	Creates the prepared statements for the metrics_locator.
8064	Log the delayed metrics for a tenant.
8065	Log the delayed metrics for a tenant.
8066	Reads a double or long.
8067	Put a versioned double or long.
8068	Returns a map of all properties.
8069	Creates a new container in the blob store.
8070	Schedule eligible slots for rollup.
8071	Clear the slot from running state.
8072	Register a listener for an event.
8073	Register a listener that will be called only once.
8074	Remove a listener for an event.
8075	Emit an event with the given arguments.
8076	Get the list of listeners for the given event.
8077	Returns the remote name of the file.
8078	Appends a RollupEvent to the output stream.
8079	Parse the timestamp from the file name.
8080	Start the HTTP server.
8081	Get the appropriate RollupComputer for the given rollup type and granularity.
8082	Creates a new IOContainer instance from the configuration.
8083	Put a TTL value into the table.
8084	Computes the maximum number of characters needed to format the output.
8085	Format the given headers.
8086	Format the results using the specified output formatters.
8087	Register metrics for the given object name.
8088	Sets the name of the thread.
8089	Adds a metric index to the list of metrics to be indexed.
8090	Returns the complete metric names.
8091	Get the tokens for the given locator.
8092	Adds a rolling query to the database asynchronously.
8093	Returns a granularity that can be used to compute the requested points in the specified interval.
8094	Returns a granularity that is less than or equal to the requested duration.
8095	Sets the server time.
8096	Returns a set of unique hosts.
8097	Get the maximum number of connections per host.
8098	Returns an iterable of all MetricColumnFamilies.
8099	Insert the given metrics into the metrics table.
8100	Insert metrics into the Astyanax database.
8101	Get the set of Locators that should be tracked.
8102	Get the metric names from Elasticsearch.
8103	Returns the regex to grab the current and the next level.
8104	Start the storage manager.
8105	Stops the file uploader thread.
8106	Returns true if the given locator is currently in the batch layer.
8107	Returns true if the given locator is currently in the discovery layer.
8108	Returns true if the given locator is currently in the token discovery layer.
8109	Check if a delayed locator is currently being used for a particular slot.
8110	Set a delayed locator for a slot current.
8111	Map between start and end inclusive.
8112	Returns an iterable of ranges that overlap the given interval.
8113	Insert full.
8114	Insert the metrics into the given column family.
8115	Checks if the metric is delayed.
8116	Get bound statement for a metric if it is delayed.
8117	Gets the metadata values for the given key.
8118	Get the serializer for the given type.
8119	Checks if the content type is valid.
8120	Checks if the Accept header is valid.
8121	Insert discovery metrics.
8122	Checks if at least one of the metrics gauges counters timers and sets are present.
8123	Check if the download is still running and if so download it.
8124	Creates a new instance of the extractor.
8125	Checks if the given OS names and versions match.
8126	Download and extract the file.
8127	Shuts down the RabbitMQ process.
8128	Creates a default PnSignalingParams instance.
8129	Add ICE servers.
8130	Add ICE servers.
8131	Transmit a message to a user
8132	Transmit all peers
8133	Gets the value of the weitereAdresse property.
8134	Gets the value of the userDefinedSimplefield property.
8135	Gets the value of the userDefinedAnyfield property.
8136	Sets the value of the apiSuchfelder property.
8137	Gets the value of the multimediaAnhang property.
8138	Gets the value of the statusVBM property.
8139	Gets the value of the statusIS24 property.
8140	Gets the value of the statusHP property.
8141	Gets the value of the importmodus property.
8142	Gets the value of the adressdruck property.
8143	Gets the value of the waehrung property.
8144	Gets the value of the bodenbelag property.
8145	Sets the value of the region property.
8146	Sets the value of the area property.
8147	Sets the value of the address property.
8148	Sets the value of the description property.
8149	Sets the value of the rentCollectionPeriod property.
8150	Sets the value of the furnished property.
8151	Sets the value of the phone1 property.
8152	Sets the value of the phone2 property.
8153	Sets the value of the contactName property.
8154	Sets the value of the phoneInfo property.
8155	Sets the value of the mainEmail property.
8156	Sets the value of the ccEmail property.
8157	Sets the value of the externalId property.
8158	Sets the value of the agentId property.
8159	Sets the value of the epart property.
8160	Sets the value of the jahrgang property.
8161	Sets the value of the gebaeudeart property.
8162	Sets the value of the bueroTyp property.
8163	Checks if the given string is numeric.
8164	Sets the value of the gebiete property.
8165	Sets the value of the gruppe property.
8166	Sets the value of the agent property.
8167	Gets the value of the property property property.
8168	Sets the value of the stand property.
8169	Gets the value of the userDefinedExtend property.
8170	Sets the value of the zeiteinheit property.
8171	Gets the value of the zimmer property.
8172	Gets the value of the haus property.
8173	Gets the value of the bueroPraxen property.
8174	Gets the value of the gastgewerbe property.
8175	Gets the value of the landUndForstwirtschaft property.
8176	Gets the value of the sonstige property.
8177	Gets the value of the zinshausRenditeobjekt property.
8178	Gets the value of the terrain property.
8179	Sets the value of the umfang property.
8180	Sets the value of the wohnungtyp property.
8181	Get the ISO 2 code for a country.
8182	Get the country ISO 3166 - 1 code from the given ISO 3166 - 3 code
8183	Get ISO 3166 - 1 country code.
8184	Get the ISO 3166 - 1 country code from ISO 2 code.
8185	Get the country name for the given country and language.
8186	Translate the given country name to the given language.
8187	Gets the value of the anbieter property.
8188	Sets the value of the category property.
8189	Gets the value of the pdf property.
8190	Sets the value of the aktionart property.
8191	Sets the value of the realestateitems property.
8192	Sets the value of the pacht property.
8193	Downgrades the given OpenImmoDocument to the previous version.
8194	Upgrades the given OpenImmoDocument to the new version.
8195	Gets the value of the content property.
8196	Returns the names of the fields in this data type.
8197	Sets the value of the blick property.
8198	Sets the value of the pauschalmiete property.
8199	Sets the value of the monatsmiete property.
8200	Gets the value of the parkplatz property.
8201	Sets the value of the lastenaufzug property.
8202	Sets the value of the zustandArt property.
8203	Gets the value of the feld property.
8204	Log a validation event.
8205	Dump the contents of the record to the given writer.
8206	Get the value at the given position. If the value is null then the default value is
8207	Print the record.
8208	Sets the value at the given position.
8209	Sets the value of the ctype property.
8210	Sets the value of the haustyp property.
8211	Gets the value of the energiepass property.
8212	Sets the value of the keller property.
8213	Sets the value of the grundstTyp property.
8214	Sets the value of the geschlAttr property.
8215	Sets the value of the hallenTyp property.
8216	Gets the value of the wiederholungstermin property.
8217	Gets the value of the teilungsversteigerung property.
8218	Upgrades the given OpenImmoDocument to the new version.
8219	Gets the value of the bevorzugt property.
8220	Gets the value of the wunsch property.
8221	Sets the value of the art property.
8222	Sets the value of the modus property.
8223	Gets the value of the emailSonstige property.
8224	Gets the value of the telSonstige property.
8225	Sets the value of the handelTyp property.
8226	Downgrades the given OpenImmoDocument to the previous version.
8227	Sets the value of the apiSuchfeld1 property.
8228	Sets the value of the apiSuchfeld2 property.
8229	Sets the value of the apiSuchfeld3 property.
8230	Gets the value of the row property.
8231	Sets the value of the distanzZuSport property.
8232	Gets the value of the anhang property.
8233	Gets the value of the objektKategorie2 property.
8234	Gets the value of the objektzustand property.
8235	Gets the value of the hausKategorie property.
8236	Gets the value of the ausstattungsqualitaet property.
8237	Gets the value of the vermarktungsart property.
8238	Gets the value of the interessent property.
8239	Sets the value of the wert property.
8240	Sets the value of the ackerland property.
8241	Sets the value of the bauerwartungsland property.
8242	Sets the value of the bootsstaende property.
8243	Sets the value of the buero property.
8244	Sets the value of the camping property.
8245	Sets the value of the doppelhaus property.
8246	Sets the value of the einfamilienhaus property.
8247	Sets the value of the einzelhandelGross property.
8248	Sets the value of the einzelhandelKlein property.
8249	Sets the value of the garagen property.
8250	Sets the value of the garten property.
8251	Sets the value of the gastronomie property.
8252	Sets the value of the gewerbe property.
8253	Sets the value of the hotel property.
8254	Sets the value of the industrie property.
8255	Sets the value of the keineBebauung property.
8256	Sets the value of the kleingewerbe property.
8257	Sets the value of the lager property.
8258	Sets the value of the mehrfamilienhaus property.
8259	Sets the value of the obstpflanzung property.
8260	Sets the value of the parkhaus property.
8261	Sets the value of the produktion property.
8262	Sets the value of the reihenhaus property.
8263	Sets the value of the stellplaetze property.
8264	Sets the value of the villa property.
8265	Sets the wald property.
8266	Sets the value of the anbieter property.
8267	Gets the value of the wohnung property.
8268	Gets the value of the grundstueck property.
8269	Gets the value of the einzelhandel property.
8270	Gets the value of the hallenLagerProd property.
8271	Gets the value of the parken property.
8272	Gets the value of the freizeitimmobilieGewerblich
8273	Gets the value of the objektartZusatz property.
8274	Gets the value of the stellplatzart property.
8275	Sets the value of the maxDauer property.
8276	Gets the value of the feature property.
8277	Sets the value of the zimmertyp property.
8278	Upgrades the given document from previous version.
8279	Sets the value of the keineAngabe property.
8280	Sets the value of the erdwaerme property.
8281	Sets the value of the solarheizung property.
8282	Sets the value of the pelletheizung property.
8283	Sets the value of the gas property.
8284	Sets the value of the oel property.
8285	Sets the value of the fernwaerme property.
8286	Sets the value of the strom property.
8287	Sets the value of the kohle property.
8288	Generates a random string of the given length.
8289	Generate a random string of the given length.
8290	Returns a random string of the given length.
8291	Gets the value of the wohnungKategorie property.
8292	Sets the value of the benutzer property.
8293	Sets the value of the objekte property.
8294	Gets the value of the feed property.
8295	Sets the value of the moeb property.
8296	Gets the value of the serviceleistungen property.
8297	Sets the value of the subAdministrativeArea property.
8298	Sets the value of the city property.
8299	Sets the value of the locality property.
8300	Downgrades the given OpenImmoDocument to the previous version.
8301	Upgrades the given OpenImmoDocument to the new version.
8302	Sets the value of the landTyp property.
8303	Gets the value of the field property.
8304	Upgrades the given document from previous version.
8305	Gets the value of the ad property.
8306	Sets the value of the gastgewTyp property.
8307	Sets the value of the platzart property.
8308	Gets the value of the datenVerkabelung property.
8309	Gets the value of the klimaanlage property.
8310	Gets the value of the image property.
8311	Sets the value of the priceType property.
8312	Sets the value of the newDevelopmentAvailability property.
8313	Sets the value of the directions property.
8314	Sets the value of the co2Rating property.
8315	Sets the value of the energyRating property.
8316	Sets the value of the viewingDetails property.
8317	Sets the value of the propertyStatus property.
8318	Sets the value of the pictures property.
8319	Sets the value of the bebaubarAttr property.
8320	Upgrades the given OpenImmoDocument to the new version.
8321	Sets the value of the parkenTyp property.
8322	Sets the value of the alterAttr property.
8323	Sets the value of the freizeitTyp property.
8324	Sets the value of the telefonart property.
8325	Sets the value of the emailart property.
8326	Sets the value of the overseasSales property.
8327	Sets the value of the overseasRental property.
8328	Create a user defined simplefield.
8329	Gets the value of the fehler property.
8330	Sets the value of the erbpacht property.
8331	Gets the value of the stpSonstige property.
8332	Gets the value of the valuelist property.
8333	Sets the value of the minDauer property.
8334	Sets the value of the zinsTyp property.
8335	Gets the value of the photo property.
8336	Sets the value of the metadata property.
8337	Sets the value of the projects property.
8338	Sets the value of the properties property.
8339	Downgrades the given KyeroDocument to the previous version.
8340	Upgrade the KyeroDocument from the previous version.
8341	Gets the value of the immobilie property.
8342	Gets the value of the objekt property.
8343	Gets the value of the fehlerliste property.
8344	Gets the value of the status property.
8345	Sets the value of the sonstigeTyp property.
8346	Sets the value of the distanzZu property.
8347	Gets the value of the distanzen property.
8348	Gets the value of the distanzenSport property.
8349	Checks if the given exception is compatible with the given throws clause.
8350	Sets the namespace bindings.
8351	Binds a namespace prefix to a namespace URI.
8352	Remove a binding.
8353	Checks if the given string has a tag that starts with a letter.
8354	Consumes the tokens of a line that are not in a comment.
8355	Consumes the next line of text.
8356	Returns the index of the first occurrence of the given token in the given line.
8357	Initializes logging.
8358	Start a prefix mapping.
8359	Adds an iterator to the composite iterator.
8360	Adds an option to the command line.
8361	Adds a string option.
8362	Adds an integer option.
8363	Adds a long option.
8364	Adds a double option.
8365	Adds a boolean option.
8366	Parse the given command line arguments.
8367	Create a new instance of the given class.
8368	This method is called after the thread access.
8369	Sets the target object.
8370	Prepares the constructor.
8371	Finds a matching method for the target class.
8372	Converts an unsigned integer into a string.
8373	Serializes an object to a byte array.
8374	Deserializes a byte array into an object.
8375	Get the first child element with the given name.
8376	Get the child element s text value.
8377	Get all child elements of the given element.
8378	Checks if the node s name matches the desired name.
8379	Checks if the node s name or local name matches the given list of names.
8380	Set the length of a String to a given length.
8381	Add a release listener to the internal map.
8382	Add an entry to the tracked entries.
8383	Keeps the monitoring thread alive if there are any tracked entries.
8384	Calculates the mobile city from the given mobile number.
8385	Start a prefix mapping.
8386	End a prefix mapping.
8387	Adds a callback to the future.
8388	Parse the jar file and return a tree of unique children.
8389	Get the text color of the item.
8390	Sets the values of the item.
8391	Calculates the color of the selected item.
8392	Sets the text size of the text paint.
8393	Returns the x position in the array of values.
8394	Get the intro text from the classpath
8395	Get the keywords available in the test library.
8396	Get the arguments for the specified keyword.
8397	Returns the documentation for the specified keyword.
8398	Main method for the server.
8399	Stops the remote server.
8400	Starts the remote server.
8401	Converts properties from a file to a JSON string.
8402	Converts properties from a file to JSON.
8403	Converts the input stream to JSON.
8404	Converts the given properties object to a JSON string.
8405	Converts a map of properties to a JSON string.
8406	Converts a map of values to a JSON string.
8407	Converts a Map of properties into a String.
8408	Converts properties to JSON.
8409	Get the radius of a shadow.
8410	Creates a builder for OCSP.
8411	Finds the intermediate certificate.
8412	Execute the plugin.
8413	Read all files in the input directory and create a list of MarkdownDTOs.
8414	Substitute variables in the template with the values from the variables map.
8415	Get the title from the raw text.
8416	Adds the title to the HTML file.
8417	Replaces variables in the given initial content with the given variables.
8418	Update relative paths in html includes.
8419	Copies all files from one directory to another.
8420	Checks the path for statements and more.
8421	Wrap the content of a slider.
8422	Fade up the overlap view.
8423	Fade down the overlap view.
8424	Calculates the percentage of the given width.
8425	Overlaps the views with the given width.
8426	Creates an intent to launch an activity.
8427	Launches the activity.
8428	Get Todo List Returns Todo List of a given type
8429	Get FactSheets Get FactSheets List FactSheets
8430	Download a file from a response.
8431	Build the HTTP client.
8432	Create access control entity
8433	Update a DataModel Update a DataModel
8434	Create full export Create full export
8435	Get exports List exports of a user
8436	Set the host to use for token provider.
8437	Sets the client ID and client secret.
8438	Process GraphQL request and return GraphQL result
8439	Get bookmarks List bookmarks for a group
8440	Adds the given permissions to the given graph.
8441	Write the given permissions to the given graph.
8442	Add one or more rulesets to the list of rulesets to be applied to the dataset
8443	Close the connection.
8444	Executes a select query with pagination.
8445	Create a dataset graph.
8446	Limit the number of threads per process.
8447	Resizes the image to the specified dimensions.
8448	Rotate the image.
8449	Sets the gravity of the operation.
8450	Remove all profiles from the list of agents.
8451	Sets the text font style size and color.
8452	Add a source image to the image.
8453	Adds an image to the command.
8454	Parse the given arguments.
8455	Prints usage information for the given object.
8456	Extract the time unit from a string.
8457	Parse the given target object with the given properties.
8458	Executes the specified URL.
8459	Executes the specified file.
8460	Interprets the given PPTX file.
8461	Sort the list of rectangles by their size.
8462	Renders the given template text with the given parameters.
8463	Get the XML file for a given slide.
8464	Checks if the mouse event is within the screen region.
8465	Selects all elements that overlap the specified element with the specified ratio.
8466	Execute an outbound operation on the queue.
8467	This method is used to execute an outbound operation on the SNS topic.
8468	Finds a file with the given name and options and returns it.
8469	Create a temporary directory.
8470	Creates a new log value with the given key and value.
8471	Log a message with a level of TRACE.
8472	Log a message at the TRACE level.
8473	Log a message with a level of DEBUG.
8474	Log a debug message.
8475	Log a message with a level of INFO.
8476	Log a message with a level of INFO.
8477	Log a formatted information event with two data items.
8478	Log a message with a level of WARN.
8479	Log a warning.
8480	Log a message with a level of ERROR.
8481	Log an error.
8482	Add line file and method to the target log builder.
8483	Start a steno wrapper.
8484	Writes the key - value pairs to the JSON stream.
8485	Serializes a ThrowableProxy to JSON.
8486	Returns the log value.
8487	Replies the caller data.
8488	Encode a value to a StringBuilder.
8489	Create a new database in the temporary folder.
8490	Checks if the given arrayPosition is mapped to a value in the map.
8491	Parses cell save attribute.
8492	Save the data to the object in the context.
8493	Refreshes the given row from the given context.
8494	Parse the value of the save attribute string.
8495	Get the attribute list from a row.
8496	Get the attribute from the attribute list.
8497	Sets the value of the saveObjectsInHiddenColumn attribute of the given row.
8498	Set save attributes for all rows in a sheet.
8499	Set the save attributes for a row.
8500	Prepare the context and attributes for a given cell.
8501	Formats a number.
8502	Put shift attributes.
8503	Sets the workbook to be evaluated.
8504	Get the workbook that will be used to wrap the workbook.
8505	Returns the formula evaluator.
8506	Recalculates the maximum column counts for the worksheet.
8507	Load a workbook from the given input stream.
8508	Load a web sheet.
8509	Load a worksheet by its tab name.
8510	Export the file.
8511	Save the current page.
8512	This method is called when the form is submitted.
8513	Populates the given component with the values of the cell attributes.
8514	Get the current sheet configuration.
8515	Restore the object from a stream.
8516	Get the locale for the given component.
8517	Get the picture from the session.
8518	Replies the cell helper.
8519	Replies the PicturesHelper.
8520	Returns the validation handler.
8521	Gets the chart helper.
8522	Converts a list of ptgs with shared formulas.
8523	Convert a single ptg to a list of ptgs.
8524	converts a watch list of ptgs to a watch list of ptgs
8525	Create a single Ptg.
8526	Get the rows list for the given currentRow.
8527	Assemble a list of rows from a mapping between rows.
8528	Fixup the ref - relative row one - to - one relationship.
8529	Build a dynamic row for a Ref3D PtgBase.
8530	Builds a dynamic row for area 3d xg.
8531	Get the bgcolor for the given CTPlotArea and theme table.
8532	Get the color from the shape properties.
8533	Find the automatic fill color.
8534	Get an XColor from a CTSchemeColor.
8535	Get the XColor from the CTS RGB color.
8536	Creates an automatic fill for the given index.
8537	Converts an XSSF color to a CLR color.
8538	Get the triplet from an XSSF color.
8539	Get the background color from a cell.
8540	Find the component name from its class name.
8541	Populates the input attributes of the given component with the values from the given cell.
8542	Match a method on an object.
8543	Set the value of a property on an object.
8544	Get the value of the specified property of the specified object.
8545	Sets the control attributes for a cell.
8546	Find the validate attributes for a cell.
8547	Setup the faces cell charts and pictures.
8548	Set the faces cell chart style.
8549	Set the faces cell picture.
8550	Initialize the charts map.
8551	Get the title of the pie chart.
8552	Set the style for a series of a chart.
8553	Create a chart with the given chart data.
8554	Sets the bar style for the chart.
8555	Initializes the charts map.
8556	Get the chart id from the parent of the chart.
8557	Initialize anchors map.
8558	Generate a single chart from an XSSF chart.
8559	Transforms a collection expression into a collection object.
8560	Get the hidden full name from a row.
8561	Rebuilds the upper level formula for all cells in the given config.
8562	Build the upper level formula for a cell.
8563	Builds a cell formula for shifted rows.
8564	Gathers the rows mapping for the given full name.
8565	Change the index number in shift map.
8566	Change the upper level final length of a shift.
8567	Change the index number in a hidden column.
8568	Sets the full name in the hidden column.
8569	Get original row number in hidden column.
8570	Sets the row number in the hidden column.
8571	Find parent rows mapping from shift map.
8572	Finds child rows mapping from shift map.
8573	Finds an item in a collection.
8574	Build a range that is the current row of the source config range.
8575	Checks if the row is a static row.
8576	Checks if the given row is a static row reference.
8577	Replaces the expression with the cell value.
8578	Returns a map of cell range addresses for each merged region in the given sheet.
8579	Returns a list of skipped cells in the first region of the sheet.
8580	Add the cell range address to the list of cell indexes that should be skipped.
8581	Build sheet comment from TieCommandAlias list.
8582	Build a comment from the given cell.
8583	Build the configuration for the current workbook.
8584	Get the sheet configuration.
8585	Creates a form command from a sheet configuration.
8586	Verifies that the last cell in the sheet is blank.
8587	Build the sheet.
8588	Checks if the last row is blank and repairs it if it s not.
8589	Build a list of configuration commands from the comments in the sheet.
8590	Sets the parent for a child command.
8591	Checks if the commandList contains the COMMAND_EACH command.
8592	Match a config command to a sheet config form.
8593	Copy the template for the TieCommands.
8594	Builds the command list.
8595	Process a method line.
8596	Process a single line of config command.
8597	Move comment to map.
8598	Creates a new config command.
8599	Builds a map of attribute names to their values.
8600	Get the sheet configuration from the given Sheet and FormCommand.
8601	Set the footer of the sheet configuration.
8602	Sets the body of the sheet configuration.
8603	Sets the header of the sheet configuration.
8604	Delete a row.
8605	Remove ranges from shift map.
8606	Find remove full name list.
8607	Get the EachCommand from the given parts name.
8608	Insert an empty object in the last collection.
8609	Delete the object from the data context.
8610	Prepare collection data context.
8611	Indexes all the commands in the given source config range.
8612	Check if the row is allowed to be added.
8613	Insert each template in the source config range.
8614	Evaluates normal cells.
8615	Evaluates the user formula.
8616	Checks if the string is a user formula.
8617	Create a comment for a cell.
8618	Evaluates a boolean expression.
8619	Remove rows in a sheet.
8620	Remove a single row from a sheet.
8621	Remove cached cells for a row.
8622	Remove rows in the body.
8623	Loads the picture from the current page.
8624	Loads the chart from the current page.
8625	Assemble the new value from the given value.
8626	Get the cell value with the given formulaEvaluator and dataFormatter.
8627	Get the cell value without the cell type.
8628	Get the string value of a cell with a certain type.
8629	Get the string value of a cell with a numeric type.
8630	Set cell value.
8631	Sets the value of a cell as a string.
8632	Sets the value of a cell as boolean.
8633	Sets the value of a cell as a date.
8634	Sets the cell value as numeric.
8635	Copy rows from source sheet to destination sheet.
8636	Copy a single row from one sheet to another.
8637	Copy a cell from source sheet to destination sheet.
8638	Copy the cell value from the source cell to the new cell.
8639	Copy the style of a cell to a new cell
8640	Clone a comment from the source cell to the new cell.
8641	Creates a comment anchor.
8642	Creates or inserts a comment into a cell.
8643	Match comment settings.
8644	Get the vmlDrawing from a cell.
8645	Get the shape of the comment from the source vml.
8646	Get the cell style from the source cell.
8647	Converts a POI cell to FacesCell.
8648	Gets the data - row and data - column from the given UIComponent s attributes.
8649	Get the number of initial rows from the given configuration.
8650	Get the FacesRow from the given row in the given body rows.
8651	Get the FacesCell from the given row and column.
8652	Get the Poi cell from a sheet.
8653	Get the spreadsheet key from a POI cell.
8654	Get or add a TieCell in the HashMap.
8655	Get the current data context name.
8656	Evaluates an expression with the given context.
8657	Evaluates the expression with the given context.
8658	Custom serialization method.
8659	Remove a row from the table.
8660	Merge the rows map.
8661	Recover the rows in the given sheet.
8662	Get the chart type.
8663	Converts a style string to a stroke object.
8664	Initializes chart data from an XSSF chart.
8665	Set up chart data.
8666	Initializes the anchors map for the chart positions.
8667	Initialize the anchor map for a sheet.
8668	Get the chart id associated with the given cell anchor.
8669	Get the chart id from the child nodes of the given attributes.
8670	Build each object in the collection.
8671	Save the value of a POI cell in the context.
8672	Recalculate the formula.
8673	Get the Poi cell with the row and column from a tab.
8674	Gets the FacesCell with the given row and column from the current page.
8675	Restore collection data in context.
8676	Get the last collection.
8677	Check if the rest of the data is needed to restore the data.
8678	Start restore data context.
8679	Shifts the row reference to the right of the first cell in the last row.
8680	Set the first row reference.
8681	Set the last row + reference.
8682	Builds the cells for a static row.
8683	Builds a single cell.
8684	Reads the data context from an input stream.
8685	Build the list of categories.
8686	Builds the series list from the given list of objects.
8687	Builds a series for a chart in the given index.
8688	Get the color list from the DPTs and cells.
8689	Get the DPT from the list with the given index.
8690	Set the command index map.
8691	Get the map of picture names to picture objects.
8692	Get the map of all the pictures in the workbook.
8693	Index the picture in the map.
8694	Generate a style string for a picture.
8695	Generate the chart style.
8696	Get the anchor size of a cell.
8697	Returns the pattern for this pattern.
8698	Get the chart picture from the session.
8699	Recover the cell from the sheet.
8700	Get the row style.
8701	Get the web style for a cell.
8702	Get the cell font color.
8703	Gets the cell font decoration.
8704	Get the cell style for a POI cell.
8705	Gets the column style for a cell.
8706	Get the text alignment from a cell.
8707	Get the vertical alignment from a cell style.
8708	Calculates the total height of the rows in the sheet1.
8709	Sets the cell style for a POI cell.
8710	Get the input type from the cell type.
8711	Gets the set of resource paths for the given path.
8712	Gets the resource from the current context.
8713	Remove the prefix path from the given resource.
8714	Evaluate the input string for the given type.
8715	Finds a bean by name.
8716	Join the short array with the given separator.
8717	Round a double value to a certain number of decimal places.
8718	Returns the tab type.
8719	Returns the style of the tab.
8720	Returns the default date pattern.
8721	Returns the decimal separator used by the default locale.
8722	Returns the thousand separator by default locale.
8723	Sets the list of TieCommandAliases.
8724	Build the watch list for the formula shifts.
8725	Builds the watch list for a cell.
8726	Adds a row to the watch list if it is greater than the last static row.
8727	Checks if the given string is a command string.
8728	Parse the widget attributes.
8729	Get attribute key in map by cell.
8730	Parse validate attributes.
8731	Find pair bracket position.
8732	Parse the attributes of a command.
8733	Parse input attributes.
8734	Parse validation attributes from a string.
8735	Splits the attribute name and value by the EualSign.
8736	Parse special attributes.
8737	Process calendar attributes.
8738	Process select item attributes.
8739	Gathers special attributes from a cell form attributes.
8740	Parse comment to map.
8741	Finds the position of the first non - cell name character.
8742	Remove characters from a string.
8743	Converts a number into an Excel column name.
8744	Convert column name to integer.
8745	Get a cell by its reference.
8746	Convert a height unit into pixel values.
8747	Checks if the string is a valid date.
8748	Parse the date from the given string.
8749	Check if a string is numeric.
8750	Checks if the given character should continue.
8751	Set the value of a property on an object.
8752	Compares two cells.
8753	Checks if the child range is inside the parent range.
8754	Clear all hidden columns in a sheet.
8755	Delete all hidden columns in a row.
8756	Deletes a cell from a row.
8757	Process SystemEvent.
8758	Refresh the status of a cell after it has changed.
8759	Validates the cell at the specified location in the current page.
8760	Validate a cell by using the TieWebSheetValidationBean.
8761	Checks if the error message from the given POI cell is set in the given sheet.
8762	Validates all rules for a single cell.
8763	Performs validation on the given cell.
8764	Validates a cell.
8765	Validates the current page.
8766	Validate the row in the current page.
8767	Validates a row.
8768	Refresh the cached cells in the current page.
8769	Refreshes the cached cells in a row.
8770	Sets the submit mode in the view map.
8771	This method is called before the validation of the current page.
8772	Clear all of the data from this cell.
8773	Load header rows.
8774	Load the header row without the configuration tab.
8775	Fill to max columns.
8776	Get the style of the header column.
8777	Returns the width style for the cell.
8778	Load the header row with the given configuration tab.
8779	Get the style for a column.
8780	Clear the workbook.
8781	Initialize the tabs.
8782	Load the data from the SheetConfiguration.
8783	Refresh the data for all the sheets.
8784	Refreshes the data for the given row.
8785	Refreshes the data for a cell.
8786	Find the tab index with the given name.
8787	Load a worksheet.
8788	Prepare work shee.
8789	Sets the first column of the DataTable.
8790	Save the current tab name and submit mode in the viewMap.
8791	Setup the row info.
8792	Assemble the faces body rows.
8793	Assemble a faces body row.
8794	Refreshes a Cached Cell.
8795	Process a cell refresh event.
8796	Create dynamic columns.
8797	Add a row to the repeat list.
8798	Refresh the body rows in the given range.
8799	set saved status flag.
8800	Returns the unsaved status of the view.
8801	Finds the most specific constructor of the given type that is a parameter of the given type.
8802	Write the source stream to the output stream using the pool.
8803	Write a long value to the writer.
8804	Writes a line to the writer.
8805	Set the tag for the traffic stats.
8806	Add bitmap to result.
8807	Add a file descriptor to the result.
8808	Remove a parameter by name.
8809	Add a header to the request.
8810	Clear the request.
8811	Call the Play API.
8812	Call stop.
8813	Binds the service to the streaming service.
8814	Unbinds the radio.
8815	Drop the listener from the playback.
8816	Stores the image to disk.
8817	Read the contents of the given stream into a String using the given charset.
8818	Convert the given input stream to a string.
8819	Send the content of the message to the given output stream.
8820	Returns the number of bytes available in the stream.
8821	Release the buffer and release the underlying input stream.
8822	Read a byte from the stream.
8823	Resets the mark to its initial state.
8824	Send the start of the multipart message.
8825	Sends the content disposition header to the specified output stream.
8826	Sends the content type header to the given output stream.
8827	Sends the transfer encoding header to the given output stream.
8828	Send the end of the response header.
8829	Send the end of the message.
8830	Send the given parts to the given output stream.
8831	Calculate the total length of the parts.
8832	Check if the URI is a redirect.
8833	Sends a 304 Not Modified response.
8834	Sets the date header.
8835	Set the date and cache headers.
8836	Sets the Content - Type header for the given file.
8837	Close the channel when the flush is complete.
8838	Send the file name and the file extension to the given output stream.
8839	Send the data to the given output stream.
8840	Installs the cache.
8841	Ensures that the working directory exists and is a directory. If it does not it will be
8842	Get the response from the disk cache.
8843	Creates a new input stream for the body entry.
8844	Resets the bitmap to a new size.
8845	Get the instance of the ssl context.
8846	Validates a keystore.
8847	Replaces the scale type of this widget.
8848	Stop listening for location updates.
8849	Get a PendingIntent for the given RequestBuilder.
8850	Disconnects the given connection.
8851	Bind to the service.
8852	Unbinds the service from the application.
8853	Notify about view changes.
8854	Called when a channel is opened.
8855	On accept data.
8856	Called when the view is about to be reset.
8857	Wait for the loader to complete.
8858	Sets the text of a TextView or hides it.
8859	Hide the soft input.
8860	Show the soft input.
8861	Toggle soft input.
8862	Returns the width of a pixel given the density of the display.
8863	When an exception occurs during the connection attempt to remove the connection from the list of connections.
8864	Clear the cache for the given image.
8865	Populate the image with the given URL.
8866	Cancels image loading for the given view.
8867	Create an image consumer.
8868	Sets the image to be displayed.
8869	Sets the loading image.
8870	Start a new image loader task.
8871	Put image in memory cache.
8872	Release a buffer.
8873	Adds the appropriate headers to the URLConnection.
8874	Adds a parameter to the request.
8875	Connect with a workaround to avoid a bug in Android 1. 5. 0
8876	Calculates the MD5 hash of the given text.
8877	Returns the String identifying the given integer.
8878	Returns the String identifying the given status code.
8879	If the given result is different from CUBLAS_STATUS. CUBLAS
8880	Check if the status of the last operation is BLAS.
8881	Add a lexeme to the frequency of the lexeme.
8882	Add a ending to the frequency of the ending.
8883	Returns the estimated frequency of the word in the given wordform.
8884	Prints a long description of this token and its attributes.
8885	Verifies that the attribute is matching the attribute value and if so sets the tag value at the
8886	converts AttributeValues to Kamols markup
8887	verifica odpowanie avs.
8888	Removes kamols markup formatting from a tag.
8889	Get the metrics for an application.
8890	Returns the query string for the request.
8891	Process the JSON data from the MetricData.
8892	Parse the JSON string to get the list of AppInfo objects.
8893	Get the connection configuration.
8894	Perform the request to the appDynamics API.
8895	Returns a reader for GC04 code list.
8896	Returns a reader for the GC04 code list set document.
8897	Create a new GenericodeReader for GC04 column set.
8898	Returns a reader for GC10 code list.
8899	Returns a reader for the GC10 code list set document.
8900	Create a new GenericodeReader for GC10 column set.
8901	Get the ID of the passed column element.
8902	Get the value of the passed column from the passed row.
8903	Get the column with the passed ID.
8904	Get all key IDs from the passed column set.
8905	Get the key with the passed ID from the passed column set.
8906	Check if the passed column ID is a key column.
8907	Create a new column with the passed parameters.
8908	Create a new key with the passed parameters.
8909	The number of lines to skip.
8910	Add a new column to the read options.
8911	Create a writer for GC04 code list.
8912	Create a writer for the GC04 code list set.
8913	Create a new column set document.
8914	Create a writer for GC10 code list.
8915	Create a writer for GC10 code list set.
8916	Create a new gc10 column set document.
8917	Validator for GC04 code list.
8918	Validator for GC04 code list set.
8919	Validator for GC04 column set.
8920	Create a validator for GC10 code list.
8921	Create a validator for GC10 code list set.
8922	Create a validator for GC10 column set.
8923	Send logs to the server.
8924	Set the context to be used by the LogManager.
8925	Get the current log level.
8926	Get the capture status.
8927	Sets the maximum size of the log file in bytes.
8928	Prepends the given message with the given metadata.
8929	Append stack trace metadata to the JSON object.
8930	Create a JSONObject with the given parameters.
8931	Log the current location
8932	Set the user identity.
8933	Reads a file from the files directory and returns the contents as a byte array.
8934	Start the location updates.
8935	Size the given region.
8936	Size the partitioned region.
8937	Size a replicated or local region.
8938	Reads a SnapshotRecord from the stream.
8939	Dumps the time stamps to the specified print writer.
8940	Get the time values since the given index.
8941	Convert a GFS file to a Chart object.
8942	Get a pool for a server.
8943	Get a pool for the given JMX object.
8944	Checks if the given region is already on the server.
8945	Get a member from the given JMX object.
8946	List all the hosts in the JMX server.
8947	Looks up a host in the system properties.
8948	Checks if the data is an exception and sends it to the ResultSender.
8949	Executes the given function and returns the results as a collection.
8950	Flattens the input collection into the output collection.
8951	Executes a query locally.
8952	Creates a bridge that will be called after a put operation.
8953	Creates a bridge that will be invoked after the entry is deleted.
8954	Handle an exception.
8955	Gets the OnRegionFilterKeyFacts.
8956	Exports data from a region to a file.
8957	List all the hosts in the JMX server.
8958	This is the main entry point for the TextPageFunction. It is called on a region
8959	Get the application name from the resource list.
8960	Construct the security properties.
8961	Get a region from the cache.
8962	Get a region from the client cache.
8963	Construct the comparison between two maps.
8964	Returns true if the next value must be inserted at the given timestamp.
8965	Close the stream.
8966	Converts GFS files to CVS files.
8967	Main method for the GFF2.
8968	Reconnect to the server.
8969	Stop all members on a host
8970	Shuts down a member
8971	Shuts down all members of the given JMX bean.
8972	Shuts down all members in the given redundancy zone.
8973	Stores the results in the pageKeysRegion.
8974	Read results by page.
8975	Imports a region into the GEMFIRE.
8976	Check if the remote Locators and the Locators match.
8977	This is the main entry point for the check - sum function.
8978	Builds a hash map from the given region.
8979	Returns the value of the column with the given name.
8980	Checks if the given TypeMirror is an integer type.
8981	Serializes the given object to a byte array.
8982	Deserializes a K object from a byte array.
8983	Creates an instance of the given class.
8984	Check for table id.
8985	Checks for fields in a table.
8986	Checks if the given type is a subtype of the given element.
8987	Returns the schema for this table.
8988	Emits the code for the Brew Java class.
8989	Emits the id method.
8990	Returns an observable sequence that can be used to query the table.
8991	Checks that the column name is a field in the table object.
8992	Returns the string value or the default string if the string is blank.
8993	Capitalizes the first character of the string.
8994	Checks if the given TypeMirror is a subtype of the underlying TypeMirror.
8995	Add DESC clause to the query.
8996	Read the temperature of the device.
8997	Replies the supported cursors for the given type.
8998	Log a message with a note level.
8999	Log an error message.
9000	Get the list of icon fonts.
9001	Get all icons.
9002	Creates the layout for the SLD editor.
9003	Get the background decoration.
9004	Computes the raise of the given number.
9005	Set the values of this matrix.
9006	Compute the power of a BigDecimal by multiplying x by the given exponent.
9007	Calculate the root of a number at a given scale.
9008	Expensive taylor.
9009	Calculate the ln of x.
9010	Scales the passed in value to the specified scale.
9011	Compute the angle between x and x + 1.
9012	A simple taylor implementation that uses the arctan taylor method
9013	Calculate the sqrt of x.
9014	Prints the PI string.
9015	Format the passed time as a timestamp.
9016	Sets the minimum and maximum width of the slider.
9017	Increment the counter for a given value.
9018	Print the bar bar to standard out.
9019	Adds two complex numbers.
9020	Subtract a complex number from this one
9021	Multiply this complex number with another.
9022	Divide this complex number by another.
9023	Set the values of this matrix to the same values as the passed matrix.
9024	Get a row of this matrix.
9025	Get the column with the specified index.
9026	Sets the values of this matrix.
9027	Returns a new matrix with the same values as this matrix but with the same columns and values
9028	Add the matrix m to this matrix.
9029	Subtracts the matrix from this matrix.
9030	Multiply this matrix by a scalar.
9031	Multiply this matrix with another.
9032	Print the table in the specified width.
9033	Sets the image resource.
9034	Validates the coefficients.
9035	Compute the next position in the function.
9036	Clear the state of the SLD.
9037	Converts a StyledLayerDescriptorInfo object to an XML string.
9038	Converts a RawSld object to a StyledLayerDescriptorInfo object.
9039	Validate the StyledLayerDescriptorInfo object.
9040	Validate the SLD.
9041	Calculate the area of the region.
9042	Set the values of this matrix to the values of the passed matrix.
9043	Sets the values of the matrix.
9044	Computes the inverse of this matrix.
9045	Computes the determinant of this matrix.
9046	Returns the norm of this matrix.
9047	Solve the matrix b.
9048	Print the matrix in a decomposed format.
9049	Perform forward elimination.
9050	Perform a forward substitution on the given matrix.
9051	Perform back substitution.
9052	Improve the linear regression problem.
9053	Convert the given square matrix to a square matrix.
9054	Generate a uniformly - distributed random value from the Von Neumann distribution.
9055	Initialize the XNeg and Pos values.
9056	Computes the next position in the tree.
9057	Check if the current position is not the same as the previous position.
9058	Computes the next position.
9059	Check if the interval is valid.
9060	Add the given value to the current sum.
9061	Multiply two integers.
9062	Computes the power of a power - of - two number.
9063	Performs the iteration procedure.
9064	Get the SLD manager.
9065	Converts a long into a char array.
9066	Decomposes the bit string into the internal representation.
9067	Print this number to the passed output stream.
9068	Validates that the given biased exponent is valid.
9069	Validate the unbiased exponent.
9070	Validates that the given double biased exponent is valid.
9071	Validate that the given unbiased exponent is between - 1 and IEEE754
9072	Create a service to load SLD templates.
9073	Returns a random value in the central central space.
9074	Returns a random value in the Polar distribution.
9075	Returns a random ratio of the current distribution.
9076	Creates a sieve of the given size.
9077	Returns an array of distinct prime factors.
9078	Perform the iteration of the algorithm.
9079	Compute the next position in the middle of the function.
9080	Check if the current position is not the same as the previous position.
9081	Sets the JavaFX application.
9082	Sets the configuration for the next iteration.
9083	Sets the default configuration.
9084	Initializes the FXML loader.
9085	Specifies the latitude and longitude of the geocoding request.
9086	Get the host and port pair from the service instance.
9087	Get the applicable attribute definition.
9088	Evaluate the given attribute filter against the given attribute definition.
9089	Sanitize a tag.
9090	The address of the geocoding request.
9091	Filter by componenets.
9092	Query for the names of the services that are tracked by this tracker.
9093	Query for instances of a given service
9094	Get a list of all collaborators that are associated with a logged in user.
9095	Get the meta data for Decimal field.
9096	Changes the password for a logged in user.
9097	Returns a list of all users.
9098	Get a Gravatar for a given email address.
9099	Get the Gravatar for a user.
9100	Populate fields from the JSON object.
9101	Get the field type for ElasticSearch.
9102	Create a new flow step.
9103	Update a flow step.
9104	Get a single flow step by id and step type.
9105	Get a flow step by step.
9106	Get a list of all steps for a given flow.
9107	Delete a flow step.
9108	Force deletion of a flow step.
9109	Populate the table fields.
9110	Close the connection to ABaseES
9111	Handle a message received from Fluid.
9112	Called when the connection is closed.
9113	Get the ECHO messages from the return value.
9114	Returns a list of all the items that are available to the user.
9115	Create a new table record.
9116	Deletes a form container.
9117	Get a list of form flows historic data.
9118	Get the historic data for a form and a field.
9119	Get the most recent form and field historic data.
9120	Lock the form container.
9121	Unlocks the form container.
9122	Unlocks a form container.
9123	Map the form container to the form object.
9124	Converts a string to a list of Role objects.
9125	Creates a new form definition.
9126	Updates a form definition.
9127	Returns a form definition with the given id.
9128	Returns a form definition with the given name.
9129	Get all form definitions for the logged in user.
9130	Deletes a form definition.
9131	Returns the storage key for the given form definition container and form field.
9132	Initializes the memcached client.
9133	Shuts down the MemCache client.
9134	Parses a string into a long.
9135	Converts a document to a PDF file.
9136	Get the field values for a given form from the cache.
9137	Create a new FlowStepRule.
9138	Create a new exit flow step rule.
9139	Create a new Flow step view rule.
9140	Updates a FlowStepRule in the FlowEntry.
9141	Update the flow step exit rule.
9142	Updates a Flow step view rule.
9143	Moves an entry rule up in the flow.
9144	Moves an entry rule down.
9145	Deletes a FlowStepEntryRule.
9146	Deletes a flow step exit rule.
9147	Deletes a flow step view rule.
9148	Initialize the session.
9149	Returns a list of all user queries.
9150	Get a list of all roles.
9151	Get the service ticket in hexadecimal.
9152	Create a new text field with a mask value.
9153	Create a new text barcode field.
9154	Create a new decimal spinner field.
9155	Create a new Decimal slider field.
9156	Create a new table field.
9157	Updates a form field with a text mask value.
9158	Updates a form field s text barcode.
9159	Updates a form field s decimal spinner.
9160	Updates a form field s decimal slider.
9161	Updates a form field s table field.
9162	Retrieves a form field with the specified name.
9163	Returns a list of form fields for the given form name and logged in user.
9164	Returns a list of form fields for the given form type ID and the logged in user.
9165	Deletes a field.
9166	Deletes a field.
9167	Returns the table field meta data.
9168	Updates a user field value.
9169	Creates or gets the index.
9170	Create a new flow.
9171	Update a flow.
9172	Get a single flow by id.
9173	Create a new flow with the given name.
9174	Delete a flow.
9175	Force deletion of a flow.
9176	Update a global field value.
9177	Get all global field values.
9178	Get the form definition id and title.
9179	Decrypt the init packet.
9180	Close the ABaseClientWebSocket connection and clean up the connection.
9181	Initialize a new request.
9182	Get the exception message for the given prefix and unique request id.
9183	Create a new admin user.
9184	This method is used to get an access token.
9185	Get the user profile information for the given access token.
9186	Executes a POST request with a JSON body.
9187	Executes a POST request with the given parameters.
9188	Create a response handler for the given URL.
9189	Check if the connection is valid.
9190	Get the http client.
9191	Returns the path to the system property fluid. trust. store.
9192	Closes the connection.
9193	Returns a list of Fluid items that match the given query.
9194	Sends a form to a flow.
9195	Called when the client closes the connection.
9196	This method is called when a message is received from Fluid.
9197	Send a JSON Object to the Fluid API.
9198	Sends a message to the remote endpoint.
9199	Closes the user session.
9200	Executes a native SQL query that is synchronized with the Fluid server.
9201	Request a license.
9202	Apply a license to the server.
9203	This method is used to create a text field.
9204	Method to create a ParagraphText field.
9205	Method to create a ParagraphText.
9206	This method is used to create a MultipleChoice select many field.
9207	Method to create a field that is a date.
9208	Update a route field with a plain text type.
9209	Update a route field s ParagraphText.
9210	Update a route field date and time.
9211	Update a route field with a Decimal type.
9212	Update a route field value.
9213	Create a Field value.
9214	Get a configuration by key.
9215	Returns a list of all configurations.
9216	Create a new attachment.
9217	Returns an attachment with the specified id.
9218	Deletes an attachment.
9219	Force deletion of an attachment.
9220	Parses the given jar file.
9221	Set the class loader based on the given jar file.
9222	Check for name and parent.
9223	Rule 3.
9224	Rule 3.
9225	Get the schema node from the file.
9226	Rule 7.
9227	Rule 3.
9228	Convert the given value to the appropriate type.
9229	Create a CliInterface instance.
9230	Create a Cli instance using the given options.
9231	Parse the given arguments.
9232	Parse the given arguments using the given options object.
9233	Returns a builder for the given path.
9234	Removes a footer view.
9235	Returns the value of the quaternion at the given pressure.
9236	Computes the gradient of a 3D noise.
9237	Returns the 3 - D value of the noise function.
9238	Returns the noise of a 3 - D value.
9239	Cubic interpolation function.
9240	Calculate the S - curve for the 5 - point quadratic model.
9241	Sets the bounds of the range.
9242	Process the given event.
9243	Process the given event.
9244	Gets the account id of the user or recipient.
9245	Apply filtering to a rule and violation entity.
9246	Get the event serializer.
9247	Creates a new file in the root folder.
9248	Creates a new directory in the temporary folder.
9249	Restore the system properties.
9250	Creates a new implementation of the delegate map.
9251	Adds an object to the soft object queue.
9252	Set a property value.
9253	Get an array of strings from a base string.
9254	Moves to the next state.
9255	Process the garbage collection queue.
9256	Get the type object for the given type.
9257	Get the parameterized object for the given type.
9258	Returns the type variable corresponding to the given type.
9259	Prints the stack trace of this exception to the given stream.
9260	Prints the stack trace of this exception.
9261	Replace the object with stubs if needed.
9262	Run the task
9263	Sets the task.
9264	Marks the task as accepted.
9265	Called when a task is rejected.
9266	Marks the task as started.
9267	Marks the task as completed.
9268	Stop the task.
9269	Get the next job from the queue.
9270	Put a job into the queue.
9271	Returns the BlockingMode corresponding to the given name.
9272	Resolve the object type.
9273	Setup the readers.
9274	Add a catalog reader for a given mime type.
9275	Copy the readers from the map to the new catalog
9276	Creates a new catalog instance.
9277	Load the system catalogs.
9278	Parse a catalog from the given URL.
9279	Parse the pending catalogs.
9280	Parse the catalog file.
9281	This method is called when an unknown token is encountered in the catalog.
9282	Parse all the catalogs.
9283	Resolve a doctype.
9284	Resolve the catalog entry for the DOCUMENT entry.
9285	Resolve a system URI.
9286	Resolve a local URI.
9287	Resolve subordinate catalogs.
9288	Make the given system identifier absolute.
9289	Normalizes a URI.
9290	Encode a byte into a hex string.
9291	Add a delegate entry to the delegate vector.
9292	Creates a SoftValueRef.
9293	Fires all registered listener with the specified type and throwable.
9294	This method will be called by the framework when a throwable is thrown.
9295	Creates the list implementation.
9296	Compares two timers.
9297	Returns the value of the option as an InetAddress.
9298	Get the object at the given index.
9299	Set an object at the given index.
9300	Maintain the soft object queue.
9301	Adds a new entry type to the list of entry types.
9302	Get the entry type.
9303	Get the number of arguments for the given entry type.
9304	Get the entry argument with the given number.
9305	Set the context class loader for the given thread.
9306	Swaps two elements in the queue.
9307	Remove a node from the queue.
9308	Cleanup the timeout object.
9309	Loads a class.
9310	Preloads the protocols.
9311	Create a URLStreamHandler for a given protocol.
9312	Check if the system property java. protocol. handler. pkgs is set. If it is
9313	Returns the class represented by this field.
9314	Creates a new implementation of the delegate set.
9315	Make a synchronized counter.
9316	Make a directional counter.
9317	Checks if the current namespace is an extension namespace.
9318	Check if the notification is required and if so send it to the listener.
9319	Rebinds the given object to the given name.
9320	Get the wrapper object from the map.
9321	Substitutes the given string with the given map.
9322	Splits a string into an array of strings.
9323	Join byte array to string.
9324	Default toString method.
9325	Returns the value of the field as a block mode.
9326	Creates the cache.
9327	Get the value associated with the specified key. If the key is not currently in the cache
9328	Returns the value associated with the specified key.
9329	Remove the entry with the given key.
9330	Flush the cache.
9331	Returns a list of keys that are currently valid.
9332	Sets the resolution.
9333	Returns the entry associated with the given key.
9334	Get all children of the given element whose tag name is equal to the given tag name.
9335	Get a unique child element with the given tag name.
9336	Get the first child with the given tag name or null if no such child exists.
9337	Get the content of an element.
9338	Get the content of the first child with the given tag name.
9339	Get optional child content of an element.
9340	Sets the maximum number of threads that will be executed in the pool.
9341	Sets the blocking mode.
9342	Sets the blocking mode to be used by the server.
9343	Executes a task in the thread pool.
9344	Resolve a system identifier.
9345	Resolve a public resource.
9346	Resolve an external system.
9347	Resolve an external public id.
9348	Query the resolver.
9349	Append a vector to a vector.
9350	Resolve all catalogs that have a system entry in the catalog.
9351	Resolve a system identifier.
9352	Resolve all the system entries in this catalog.
9353	Resolve all entries for a given system identifier.
9354	Resolve all subordinate catalogs.
9355	Read a catalog from a file.
9356	Read the catalog from the given input stream.
9357	Connects to the file system.
9358	Get the output stream for this file.
9359	Atomically sets the next node in the linked list.
9360	Mark a node as having been deleted.
9361	Returns the value of the field if it is a valid header value.
9362	Creates a snapshot of the current value.
9363	Atomically sets the right index value.
9364	Creates a logger for the current class.
9365	Print a list of objects.
9366	Returns the short name of the class.
9367	Returns the string representation of this class.
9368	Returns an iterator over the property names in the system.
9369	Get the property group with the given name.
9370	Get a compatible constructor for a given type and value type.
9371	Copy an object.
9372	Dereference an object and cast to a certain type.
9373	Initialize the context.
9374	Update the JNDI cache.
9375	Returns a set of all keys in the configuration.
9376	Returns a set of the entries in this context.
9377	Removes a property listener.
9378	Fire the PropertyAdded event to all PropertyListeners in the list.
9379	Fire the property removed event to all listeners.
9380	Fire the property changed event to all listeners.
9381	Fires a property changed event to all bound and unbound listeners.
9382	Make a property name with a prefix if specified.
9383	Load properties from a property reader.
9384	Loads the properties from the given class.
9385	Returns a property group with the given index.
9386	Returns true if the entity has been resolved.
9387	Resolve the given system ID into an input source.
9388	Resolve the given system ID as a URL to the schema.
9389	Resolve the given name as a classpath resource.
9390	Set the value of the element to the given text.
9391	Normalizes a public id to be used as a base for a URL.
9392	Encodes a public ID into a URN.
9393	Decode an URN into its public identifier.
9394	Replace all occurrences of oldStr with newStr.
9395	Start the timer.
9396	Stop the timer.
9397	Make a synchronized StopWatch.
9398	Compares this object to another object.
9399	Generates a hash code from the given byte array.
9400	Generates a hash code for the given array.
9401	Creates a new map and list.
9402	Set the value of the field.
9403	Returns the next token from the file.
9404	Initialize the date format.
9405	Adds a vertex to the graph.
9406	Sets the root vertex.
9407	Remove a vertex from the graph.
9408	Performs a depth first search of the graph starting at vertex v.
9409	Walks the spanning tree calling the visitor for each node.
9410	Finds a vertex by its data.
9411	Finds all cycles in the graph.
9412	Normalizes a string to be safe for use in HTML.
9413	Parse the given XML string.
9414	Parse the given XML stream.
9415	Parse the given input source.
9416	Creates an element with the specified local part.
9417	Resolve a qualified name to a namespace URI.
9418	Copy all attributes from the source element to the destination element.
9419	Checks if the given node has any child elements.
9420	Get all child elements of a node.
9421	Get the text content of a node.
9422	Get child elements of a node with a given name.
9423	Returns the parent Element of the given Node.
9424	Add a resource to be waiting for a resource to be added.
9425	Read a catalog from the given input stream.
9426	Read a catalog from a file.
9427	Get the host address.
9428	Resolve an entity.
9429	Sets the value of a system property.
9430	Print out some information about the given class.
9431	Describe a class.
9432	Strip the package name from the given classname.
9433	Returns the package name from the given classname.
9434	Force a class to be loaded.
9435	Returns the wrapper class for the given primitive type.
9436	Get all interfaces of a class.
9437	Get all interfaces that are superclasses of the given class.
9438	Checks if the given class is a primitive wrapper.
9439	Instantiate a class from the classpath.
9440	Get the getter method for the given attribute.
9441	Get the setter method for the given attribute.
9442	Convert a parameter name to a Java class.
9443	Get a system property.
9444	Get the filenames for a property.
9445	Maintains the set of weak objects.
9446	Returns an iterator over the set.
9447	Create a URLLister for the given protocol.
9448	Returns a set of all entries in this map.
9449	Add a bound property listener to the list of listeners.
9450	Remove a bound property listener.
9451	Checks if the given string is null.
9452	Find an editor for a given type.
9453	Registers an editor for a given type.
9454	Convert the given text to the given type.
9455	Returns the context class loader for the given thread.
9456	Returns the cause of the given exception if it is an ApplicationDeadlockException. Otherwise returns
9457	Schedules a timeout for execution.
9458	This method will run the work in the queue.
9459	Creates a new subcontext with the given name.
9460	Lookup an object in the context.
9461	Checks if the object is an instance of the given class.
9462	Append the class information to the given StringBuffer.
9463	Get the transition with the given name.
9464	Read the properties file.
9465	Query the verbosity of the application.
9466	Query whether relative catalogs should be displayed.
9467	Query the catalog files.
9468	Get the catalog files.
9469	Query the preference to use.
9470	Query whether to use the static catalog.
9471	Resolve an entity.
9472	Resolve a URI relative to a base URI.
9473	Make the given URI absolute.
9474	Resolve a class from an ObjectStreamClass.
9475	Invoke the setter method.
9476	Get the local name of the given element.
9477	Get the namespace URI of the given node.
9478	Get the namespace URI of the given element.
9479	Convert an enumeration to a list.
9480	Returns an InputStream for the given file.
9481	Loads properties from a file.
9482	Reads the properties from the specified files.
9483	Adds an edge to the graph.
9484	Adds an outgoing edge to the graph.
9485	Adds an incoming edge to the graph.
9486	Returns true if the given edge is in the graph.
9487	Removes an edge from the graph.
9488	Finds an edge from the given destination vertex.
9489	Finds an edge in the graph.
9490	Returns the cost of the edge between this and dest.
9491	Dump a file or directory to a jar file.
9492	Returns true if at least one iterator is available.
9493	Fires an event.
9494	Installs the JVM type provider.
9495	Recursively deletes a folder and its contents.
9496	Dispatches an action to the application thread.
9497	Get the action stream for the given action type.
9498	Creates the path to the FXML file for the given view type.
9499	Returns a stream of records that are one to many.
9500	Returns a stream of T2 objects that are the same as this one but with the given
9501	Returns a stream of T2 objects that are equivalent to this one but with the given rights
9502	Returns a stream of T2 objects that are equivalent to this one to the given rights.
9503	Returns true if the page is allowed to be routed.
9504	Checks if the instruction generated should be the given command.
9505	Main method for the effect.
9506	The main method of the performance test.
9507	Returns the sum of the degree of the words in this list.
9508	Returns a map of the superclass arguments.
9509	Informs the ResourceLoader that it is ready to load resources.
9510	Check if the database connection is available.
9511	Creates an iterable of the given type.
9512	Generates an array of the given type.
9513	Generates a list of objects of the given type.
9514	Generates a collection of the specified type.
9515	Construct a list of all objects of the given class.
9516	Construct an Either from an object of the given type.
9517	Construct a right side Either from an instance of a given type.
9518	Validation failed.
9519	Validates that the given type is a parameterized type.
9520	Returns a Try that succeeds if the given type is an instance of the given type.
9521	Connect to the specified data base using the specified URL driver class username and password.
9522	Run the given SQL in the given database.
9523	Query in with sql
9524	Returns the boolean array representation of this UBArray.
9525	Add a filter to the query that only returns rows that match the example object.
9526	On upgrade.
9527	Backup the table to CSV.
9528	Restore the table from the CSV file.
9529	Set the empty text.
9530	Dumps the table to a CSV file.
9531	Unescapes a double quote in a string.
9532	Get the values from a CSV row.
9533	Convert a comma separated string to a map.
9534	Convert a map to a comma separated string.
9535	Join a list of strings into a single string.
9536	Join the given list of strings into a single string.
9537	Read the database from the index file.
9538	Writes the database information to the given writer.
9539	Inspects the id field of the entity.
9540	Get the base DAO class for the given entity.
9541	Returns the bind type of the converter.
9542	Imports a database from a CSV file.
9543	Backup all tables to CSV.
9544	Restore all tables from CSV file.
9545	Writes the index file.
9546	Creates a new query using the current query and parameters.
9547	Creates a typed query using the current query and parameters.
9548	Render the query.
9549	Delete the record with the given id.
9550	Save an object in the database.
9551	Update the object in the database.
9552	Add a where not in clause.
9553	Add a subquery to the query.
9554	Returns the next stack.
9555	Get an empty intention stack.
9556	Adds a plan to the cache.
9557	Selects a plan based on the given selection policy.
9558	Selects a plan at a random index.
9559	Set the plan variables.
9560	Returns the belief at the given index.
9561	Returns the array of parent nodes.
9562	Returns the children of this node.
9563	Grows the byte array by the given amount.
9564	Creates a logger with the specified name and level.
9565	Move forward one step.
9566	Set the goals.
9567	Pause user input.
9568	Initializes the intention selection pools.
9569	Initializes the intention selection threads.
9570	Start intention selection threads
9571	Shuts down all intention selection threads.
9572	Registers a Jill extension.
9573	Reset the catalog.
9574	Loads an agent class and adds it to the catalog.
9575	Process the plans for a given goal.
9576	Creates a number of agents from the given class.
9577	Load a class and check that it is of the given type.
9578	Load an extension from a class name.
9579	Compares two objects for equality.
9580	Displays the usage string for the application.
9581	Parse command line arguments.
9582	Parses the given argument with the given option.
9583	Executes the given query against the given agent.
9584	Returns the object at the specified index.
9585	Find an object by name.
9586	Pushes an object onto the stack.
9587	Get the object at the given index.
9588	Pushes an object onto the end of the queue.
9589	Removes and returns the last object in the queue.
9590	Get the type of the given object.
9591	Match the belief against the given query.
9592	This is the main method of the BeliefBase class.
9593	Converts a string to a byte array.
9594	Post a new goal to the agent.
9595	Sends a message to an agent.
9596	Send a message to an agent.
9597	Returns the goals in the order they were added.
9598	Create a new BeliefSet.
9599	Adds a new belief to this node.
9600	Evaluate the belief.
9601	Suspends the agent.
9602	Returns the field with the given name.
9603	Register the Neighbours.
9604	Build a name.
9605	This method is run in a loop. It will check if all agents are idle and if
9606	Checks if the execution stack is valid.
9607	Remove finished agents from the active agents set.
9608	Manages a single goal.
9609	Shutdown the pool.
9610	Set agent idle state.
9611	Moves a disc pin from one pin to another.
9612	Initialize the agent manager.
9613	Wait until all the agents are running.
9614	Finish the agent.
9615	Returns true if all the intention selectors in the pool are idle.
9616	Returns the poolid for the given agent id.
9617	Picks the expression to use.
9618	Sets the expression to be used for the expression.
9619	Creates a JOIN expression for the given attribute.
9620	Recursively joins the properties array.
9621	Finds or creates a new join.
9622	Returns true if the end of the response is reached.
9623	Gets the upload stream from the request.
9624	Handle the incoming request.
9625	Check if request has a parameter with the given name and value.
9626	Get parameter value.
9627	Parse content type parameters.
9628	Configure transaction manager.
9629	Get the target file.
9630	Writes an artifact to the target file.
9631	Post - processes the instance.
9632	Returns the declared constructor for the given class.
9633	Builds a string representation of the configuration.
9634	Get the method from the interfaces of the given method.
9635	Returns the type of the given field.
9636	Get the value of a dependency.
9637	Persist the temporary file.
9638	Set the default link for the given rel.
9639	Sets the default link template for the given rel.
9640	Handles the links in the response.
9641	Handle the header links.
9642	Parse the links field of the JSON body.
9643	Parse a link object.
9644	Get or add a map.
9645	Handle the response of the HTTP capabilities request.
9646	Checks if the given method is allowed by this class.
9647	Register instance processors.
9648	Register a new instance factory for the given instance type.
9649	Register a new instance processor.
9650	Registers a class processor.
9651	Create an instance of the given interface class.
9652	Adds an argument to the command.
9653	Creates the target file list.
9654	Convert the object to XML.
9655	Initializes this producer with the given context and variables.
9656	Checks if the given template has a reference to the given template file.
9657	Create a ParameterizedTemplateModel from a XML document.
9658	Create a ParameterizedTemplateModel from a file.
9659	Sets the request path.
9660	Gets an observable sequence of entities starting from the given start index.
9661	Create a new instance scope with the given string.
9662	Sets the value of the field with the given name to the given instance.
9663	Add a capture appender to a logger.
9664	Remove the appender with the given name from the given logger.
9665	Clear the capture of the given appender.
9666	Reads the request and returns the arguments.
9667	Parse the model files.
9668	Resolve all proxies.
9669	Get the files in the given directory.
9670	Parse the given directory.
9671	Replies if the model has been fully resolved.
9672	Find all EObjects in a resource set.
9673	Sets the model directories.
9674	Sets the file extensions.
9675	Sets the model resources.
9676	Reads the next record.
9677	Sets the designated parameter to the given array of String values.
9678	Sets the designated parameter to the given Boolean object.
9679	Executes the given SQL statement and returns the number of rows affected.
9680	Convert the given string to an instance of the given type.
9681	Merge the velocity template with the given context.
9682	Get the directory where the model files will be stored.
9683	Replies the canonical template directory.
9684	Write the value to the HTTP response.
9685	Start the web UI.
9686	Configures the given window.
9687	Print the web page to the given web view.
9688	Writes the contents of the input stream to the output stream.
9689	Invoke the proxy method.
9690	Attaches the request to the response.
9691	Detaches the context from the request.
9692	Returns the cookies object.
9693	Dumps the current request context.
9694	Get the meter for all managed methods.
9695	Configures the EventStream with the given configuration.
9696	Sets the remote host.
9697	Gets the named parameter of the given type.
9698	Removes the prefix from the given path.
9699	Returns the common directory between two given directories.
9700	Converts absolute path to relative path.
9701	Convert a relative path to an absolute path.
9702	Get the directory depth.
9703	Dumps the given exception to the log.
9704	Send the given object as JSON.
9705	Adds a parameter template to the list of parameters.
9706	Add the list of param templates.
9707	Initializes the template.
9708	Find all the parameters that reference the given template.
9709	Sets whether the save button should be displayed or not.
9710	Delete the resource.
9711	Deletes the endpoint.
9712	Creates a new instance of the given managed class.
9713	Returns an array of the files that have been fitted.
9714	Get the summary of the results.
9715	Get the summary row for a directory.
9716	Get a summary row of the given file.
9717	Creates a new instance of the given managed class.
9718	Get the setup class.
9719	Returns the list of model directories.
9720	Returns the list of model resources.
9721	Sets the candidates.
9722	Load configuration document from XML file.
9723	Display an error notification.
9724	Checks if the given formal parameters are objects.
9725	Reads the JSON from the given HTTP request.
9726	Read JSON from the given input stream and convert it to the given type.
9727	Extracts the parameter from the fit cell.
9728	Gets the value of the hints property.
9729	Checks if the request is an XHR request.
9730	Checks if the request is an Android request.
9731	Handle the event.
9732	Returns a list of all properties of the given type that are annotated with the given annotation.
9733	Returns the annotation of the given type on the given property.
9734	Log a message with the given arguments.
9735	Lookup a domain in Whois.
9736	Checks if the JVM has a parser for the given host.
9737	Get a managed class from the given container.
9738	Get the managed method.
9739	Process not contains exception.
9740	Process not contains.
9741	ResultSet object as a boolean in the Java programming language.
9742	Retrieves a value indicating whether the current row is a wrapper for the specified class.
9743	Serializes the response to the given HTTP response.
9744	Get cookie value by cookie name.
9745	Add a cookie with specified name and value.
9746	Remove cookie with given name.
9747	Returns an iterator over the cookies in the response.
9748	Gets the TargetFileProducer.
9749	Adds a field to the class.
9750	Compiles the class.
9751	Verify the response for the given token.
9752	Returns the file name without extension.
9753	Ensures that the URI has a trailing slash.
9754	Log into the servlet container.
9755	Get the HTTP request.
9756	Invokes the managed method.
9757	Execute a mutable transactional method.
9758	Execute an immutable transactional method.
9759	Returns an array of files in the directory.
9760	Returns the last file in the directory.
9761	Get the concrete configuration.
9762	Checks if the request path starts with the given path component.
9763	Gets the factories that are configured for the given model type.
9764	Get the session for the given instance key.
9765	Serialize the file to the given HttpServletResponse.
9766	Reads the metadata of the resource.
9767	Handle the incoming request.
9768	Close the underlying database connection.
9769	Close all stale EventStreams
9770	Handle allowed methods.
9771	Upload the blob to the specified endpoint.
9772	Delete the data from the server.
9773	Extract the column parameters from the fit row.
9774	Returns the argument names.
9775	Schedule a periodic task.
9776	Timeout a task.
9777	Configures the view manager.
9778	Returns the next file in the list.
9779	Configure the application.
9780	Prints welcome banner to standard out.
9781	Prints the stopped banner.
9782	Creates a Chameleon instance.
9783	Register a shutdown hook to stop the Chameleon.
9784	Trigger the notification.
9785	Trigger the endpoint.
9786	Insert a new fit row into the fit table.
9787	Get the counts of all the files in the result set.
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInBeginSection - gets
9828	setter for offsetInBeginSection - sets
9829	getter for offsetInEndSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triple - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for isObjUri - gets
9846	setter for isObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for args - gets
9874	setter for args - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the index of the next clear bit in the set.
9878	Set the bit at the given index.
9879	Free the given buffer.
9880	Creates a new instance of the cache.
9881	Rehashes the given array of values to a new array of the given size.
9882	Returns the HELM2 representation of this MonomerNotations object.
9883	Check if brackets are in the annotation section.
9884	Method to add the details from the string
9885	Returns the HELM2 representation of this RGM.
9886	Method to add an element to the MonomerNotation.
9887	Main method that parses the command line arguments and runs the HELM converter.
9888	Checks if the given polymer ID is valid.
9889	Checks if the polymerID is valid.
9890	Checks if the connection details are valid.
9891	Checks if the group id is valid.
9892	Checks if the given string is repeating.
9893	Checks if the PolymerId is a peptide orRNA PolymerId.
9894	Convert the notation container to a JSON string.
9895	method to get a simple PolymerNotation given its string id
9896	Gets the current grouping.
9897	Converts the PolymerSet into HELM2 format.
9898	Polymer ID - > HELM2
9899	Returns a HELM2 representation of the connections.
9900	Converts the grouping into HELM2 notation.
9901	Converts the annotation section to HELM2.
9902	method to get the polymer and grouping IDs
9903	method to get a polymer by its ID
9904	Sets the polymerElements attribute.
9905	Convert HELM2 format to HELM2 format.
9906	Sets the annotation.
9907	Sets the count.
9908	method to decide what MonomerNotation to return
9909	method to decide which MonomerNotationGroupElement is in the group
9910	Decide what HELM entity to use based on the HELM string
9911	Returns the value of the interval.
9912	Parses the HELM2 input.
9913	method to set the contents of a nucleotide
9914	Define the ambiguity.
9915	Get statistics about the worker thread.
9916	Creates a new adi graph from the given edges.
9917	Creates a new adi graph from the given nodes and edges.
9918	Initializes the incoming paths and outgoing paths.
9919	Returns a list of nodes sorted by reachability.
9920	Subscribes to the specified pattern.
9921	Count the number of times a message matches the pattern.
9922	Unsubscribe from a pattern.
9923	Send a request to the server.
9924	Send a return sync request to the server.
9925	Poll for a request.
9926	Shutdown the node.
9927	If the exception requires non - local handling throw it. Otherwise return the exception.
9928	Unlocks the run state.
9929	Creates a worker thread.
9930	Try to add a worker to the run state.
9931	Register a worker thread.
9932	Deregisters a worker thread.
9933	Signal a work queue.
9934	Run a worker.
9935	Await a work to be done.
9936	Returns the number of tasks that are queued by the current thread.
9937	Returns the common submitter queue.
9938	This method is called by the external completion code.
9939	Submits a task to the pool.
9940	Creates a common pool.
9941	Get the value of this Completer.
9942	Build a string from the given statements.
9943	Get statistics about the threads in this thread pool.
9944	Creates a list from the given elements.
9945	Returns a list of the elements in this list in reverse order.
9946	Iterates over the given collection and returns true if all elements pass the given predicate.
9947	Folds the elements of the given collection into a value using the given AFunction2.
9948	Folds the elements of the specified collection to the value obtained by applying the specified function to
9949	Pushes a task onto the queue.
9950	Returns an AOption from a nullable value.
9951	Creates an ALongHashMap from the given keys and values.
9952	Returns an empty list map.
9953	Creates a new AListMap from the given elements.
9954	Creates a new AListMap from the given keys and values.
9955	Returns a set of all keys in the map.
9956	Normalizes the resource name.
9957	Marshals the bound type to a string.
9958	Returns a sub - sequence of the specified range.
9959	Returns a binary search implementation for the given list.
9960	Returns a binary search implementation that uses the specified comparator to perform a binary search.
9961	Send an email.
9962	Sends an email.
9963	Binds a route to the application.
9964	Binds a filter to the given method and version.
9965	Check if the user has at least one of the specified roles.
9966	Get int value from Long.
9967	Remove duplicates from string array
9968	Returns a string that looks like the given string.
9969	Run the task.
9970	Login a user with a password
9971	Login with db
9972	Get the login user from the request.
9973	Check if a password matches a salt.
9974	Save the user in the cookie.
9975	Generate a key to be used for the login.
9976	Returns the user associated with the given uuid.
9977	Forward the request to the target path.
9978	Append a file separator to a path.
9979	Returns the parameter value from the request as a long.
9980	Log a debug message.
9981	Get the caller information at the given level.
9982	Convert a char array to a byte array.
9983	Converts a CharSequence to a byte array.
9984	Convert a byte array to a char array.
9985	Converts a CharSequence to a byte array.
9986	Lookup the locale data for the given locale code.
9987	Schedule the job to be called in the given number of seconds.
9988	Crops an image to a new location.
9989	Schedules the given invocation for the given amount of time.
9990	Invoke the given direct invocation in a separate thread.
9991	Get the REST operations.
9992	Renders an error response.
9993	Renders an AJAX forbidden response.
9994	Process the given template string.
9995	Parse the path from the given URL.
9996	Renders the data tables.
9997	Renders empty data tables.
9998	Sets the items of the combobox.
9999	Sends the response to the given context.
10000	Returns a list of providers bound to this injector.
10001	Get the current method name.
10002	Compacts memory.
10003	Propagate a Metrics object to the local MetricsCollection.
10004	Encodes a string to be used as a URL.
10005	Returns the charset of the given file.
10006	Copy the contents of the input stream to the output stream.
10007	Copy the specified number of bytes from the input stream to the output stream.
10008	Copy the contents of the given InputStream to the given Writer using the default encoding.
10009	Copy the contents of the Reader to the Writer.
10010	Copy the specified number of characters from the specified Reader to the specified Writer.
10011	Copy the contents of the Reader to the OutputStream using the default encoding.
10012	Copy the contents of the Reader to the OutputStream using the specified encoding.
10013	Compares two input streams.
10014	Compares two text input.
10015	Apply the pipeline to the given io object.
10016	Returns the SQL for the given group and SQL ID.
10017	Unmarshals the given string into the given class.
10018	Unzips a ZIP file into a directory or a file system.
10019	Creates a new instance of the permission dialog fragment.
10020	Sets up the key listener which allows to handle key events.
10021	Add a core value type.
10022	Checks if the given value matches the given regular expression.
10023	Checks if the value is a mobile device.
10024	Checks if the given value is a phone number.
10025	Checks if the given string is a birthday.
10026	Checks if the given value is a URL.
10027	Checks if the given string is a valid date time.
10028	Process the request.
10029	Encodes a string to Base64.
10030	Decodes a base64 string into a byte array.
10031	Converts a hexadecimal string to a byte array.
10032	Read a UTF - 8 stream of properties.
10033	Read content as string.
10034	Read content of a file as a string.
10035	Writes the given byte array to the given file.
10036	Copy a directory to a target file.
10037	Serializes the given document to a string.
10038	Get a Document object from the given XML file.
10039	Get a Document object from the given XML string.
10040	Get a Document object from the given XML stream.
10041	Validate an XML signature.
10042	Signs a document.
10043	Checks if a class is safe to be loaded from the given ClassLoader.
10044	Checks if the given class is an array and its component type is a primitive type.
10045	Checks if the given class is an array and is a primitive wrapper.
10046	Resolves a primitive type if possible.
10047	Checks if the left - hand side type is assignable to the right - hand side type.
10048	Checks if the given value is assignable to the given type.
10049	Returns all interfaces of the given object.
10050	Returns all interfaces of the given instance as a Set.
10051	Write the configuration to a temporary file.
10052	Returns a map of variables and their values.
10053	Adds a permission to the list of permissions.
10054	Creates a DruidPlugin from the given properties.
10055	Binds the given implementation class to the given extension point.
10056	Returns the built - in object for the given type.
10057	Returns a primitive type.
10058	Convert the given object to the given type.
10059	Convert the user defined value to the specified type.
10060	Get a query parameter of the given type.
10061	Get cookie parameter.
10062	Returns a parameter that retrieves the session data.
10063	Initialize the data source.
10064	Set the FTL shared variable.
10065	Sets a parameter for the query.
10066	Sets the value of a parameter.
10067	Shows a permission dialog.
10068	Checks if all values are granted.
10069	Checks if any value is denied.
10070	Finds records matching the given SqlNode.
10071	Finds a single record by using the given SqlNode.
10072	Check if the given model has a non - zero value.
10073	Checks if the given method declares an exception of the given type.
10074	Process the queue.
10075	Puts a new value into the map.
10076	Checks if the given string matches the given pattern.
10077	Read the command line arguments and return an instance of the given interface.
10078	Returns the ProtobufEntity annotation for the given class or null if the annotation is not found.
10079	Check if the given class is a ProtobufEntity.
10080	Get all fields from a class that are annotated with ProtobufAttribute.
10081	Get the protobuf getter for the given field.
10082	Get the name of the POJO setter method for the given field.
10083	Get the current ObjectMapper instance.
10084	Get the JsonFactory instance.
10085	Convert an object to a JSON string.
10086	Sets the borders of the rectangle.
10087	Get a user record.
10088	Copy out the attributes of the target object.
10089	Copy out the attributes from the list of jmx attributes to the target object.
10090	Get the value of a property.
10091	Set a property.
10092	Add this application to the frame.
10093	Save the access token.
10094	Returns the token for the access token.
10095	Get the default class loader.
10096	Returns the URL of the named resource.
10097	Returns an InputStream for the named resource.
10098	Returns an InputStream for the given class.
10099	Initializes the values of this URI from the given one.
10100	Initializes the scheme.
10101	Initializes the path component of the URI.
10102	Sets the scheme.
10103	Sets the userinfo component of the URI.
10104	Sets the host component of the URI.
10105	Set the port.
10106	Append a path to the current path.
10107	Sets the query string for this URI.
10108	Sets the fragment of the URI.
10109	Returns the URI string for this URI.
10110	Creates a prepared statement from an iterator.
10111	Initialize this application.
10112	Get the contents of a muffin.
10113	Set the muffin.
10114	Get the contents of the system clipboard.
10115	Set the contents of the system clipboard.
10116	Open a file through this service.
10117	Load all the services of the given type.
10118	Set the service parameters.
10119	Get the service parameters.
10120	Find a parmetrized service by its id.
10121	Finds a service by its class.
10122	Parse the query response.
10123	Returns an iterator over the elements in the buffer.
10124	Get the encoding of the XML document.
10125	Returns the parent logger for this driver.
10126	Creates a new connection proxy.
10127	provide authorization code
10128	Visit a PackageDeclaration. This method will be called for every node in the tree that is
10129	Visit a ClassDeclaration. This method will be called for every class declaration in the tree.
10130	Visit an executable declaration. This method will be called for every declaration in the tree that is
10131	Returns the value of the given key from the given properties.
10132	Returns a filter that only returns declarations that are contained in the given collection.
10133	Returns a filter that only returns declarations of the given type.
10134	Creates a filter that returns true if this filter matches the given filter.
10135	Creates a filter that returns true if this filter matches the given filter.
10136	Returns the map of values.
10137	Makes a constructor accessible.
10138	Prepare the query for the given object.
10139	Replaces any forward slashes with a hyphen.
10140	Convert a byte array to a hex string.
10141	Get the indexes for the given parameter name.
10142	Parse a named SQL statement.
10143	Convert a collection of Protobuf objects to a Protobuf entity.
10144	Set the value of a field in a builder.
10145	Sets the value of the given protobuf attribute to the given POJO.
10146	Accept this file.
10147	Creates a new ResultSet proxy instance.
10148	Map labels to their corresponding index.
10149	Extracts the values from the given list of values.
10150	Gets the generic supertype of the given type at the given index.
10151	Poll for new objects.
10152	Poll the objects in the queue.
10153	Returns the Field object for the given field name.
10154	Get the declared methods of the given class.
10155	Returns the named method or null if it doesn t exist.
10156	Get all methods that are annotated with the given annotation.
10157	Returns an array of all constructors annotated with the given annotation.
10158	Dumps a single byte to stdout.
10159	Find the first index of the substring in the specified string ignoring case.
10160	Removes all characters from a string that are not in the specified string.
10161	Clean up the state of the object.
10162	Initializes the audit.
10163	Initializes the message queue.
10164	Initializes the password validator.
10165	Initializes the password authenticator.
10166	Resolve locale code.
10167	Lookup the locale info for the given locale code.
10168	Creates a new Statement proxy.
10169	Clear the list.
10170	Pushes an element onto the end of the queue.
10171	Pop an element off the stack.
10172	Get the input stream for this scan.
10173	Parse the command line arguments into a Properties object.
10174	Match tokens against patterns.
10175	Move the cursor to the specified position.
10176	Returns true if this rectangle encloses the other rectangle.
10177	Returns true if the rectangle contains the specified point.
10178	Returns the intersection of this rectangle and the given rectangle.
10179	Returns the union of this rectangle and the given rectangle.
10180	Returns a new rectangle with the x - component of this rectangle replaced by the x - component
10181	Returns a new rectangle with the same y - values but with the same y - values but
10182	Get the offset of the column.
10183	Get the offset of a row of the matrix.
10184	Returns the bounds of a cell relative to the current viewport.
10185	Calculates the number of columns and the layout.
10186	Calculates the number of rows in the grid.
10187	Unwrap a Throwable.
10188	Main method.
10189	Called when a WAM instruction is updated.
10190	Copy the contents of the code buffer into the internal buffer. If the code buffer is large
10191	Renders the instructions in the given row.
10192	Loads the properties from the specified resource.
10193	Create a copy of this parameter with the specified elements excluded.
10194	Adds a new child to this node.
10195	Clear all the children of this node.
10196	Internal method to get the next solution.
10197	Adds instructions to the WAM.
10198	Adds the given instructions to the parent.
10199	The work panel is in a state that has changed.
10200	Register the work panel with this action.
10201	Update the flags of the present component.
10202	Creates a new BigDecimalType instance.
10203	Evaluates the term.
10204	Optimizes the given instructions.
10205	Compares two collections in ascending order.
10206	This method is called by the servlet to handle the incoming request.
10207	Renders the start of the paging.
10208	Renders a button.
10209	Reset the model.
10210	Initializes the model.
10211	Get the value associated with the given key.
10212	Get the index of the given key.
10213	Set the value at the given index.
10214	Remove the value associated with the given key from the map.
10215	Removes the value at the given index.
10216	Check if the property exists.
10217	Sets the value of a property.
10218	Get the value of a property.
10219	Checks if the given primitive type is assignable to the given wrapper type.
10220	Initialize the getters and setters for the given object.
10221	Given a state return the decision tree that matches the property value.
10222	Initialize the lookup table.
10223	Unifies the query and statement.
10224	Unifies two terms.
10225	Unifies the leftVar and rightTerm by binding the value of the leftTerm and by
10226	Compiles a query.
10227	Finds the maximum number of arguments in a clause.
10228	Allocate local variable slots for all variables in a query.
10229	Gather position and occurrence information from a given clause.
10230	Pretty print the compiled predicate.
10231	Pretty print the compiled query.
10232	Put a padded 32 - bit integer into the buffer.
10233	Read a string from a buffer.
10234	Get the string value of the attribute.
10235	Sets the string value of this attribute.
10236	Read a term and intern it.
10237	Checks if the given class exists and is loadable.
10238	Checks if the given class is a subtype of the given parent class.
10239	Checks if the given class is a subtype of the given class.
10240	Checks if the child class is a subclass of the parent class.
10241	Attempts to load a class.
10242	Creates a new instance of the given class.
10243	Creates a new instance of the given class using the given arguments.
10244	Call a method on the given object with the given parameters overriding any illegal access.
10245	Call a method on an object.
10246	Call a static method with the given parameters.
10247	Get the constructor for the given class and arguments.
10248	Find all the types of the setters that match the given property name.
10249	Creates a transactional queue.
10250	Creates a transactional queue that requeues items from the given queue.
10251	Get the type of the given object.
10252	Reset the state machine.
10253	Searches for a node in the tree.
10254	Creates a new int range type.
10255	Add support of TZ.
10256	Add an alternate dimension for a given timezone.
10257	Adds a dimension to the database.
10258	Searches for free variables.
10259	Searches for free non anonymous variables.
10260	Compares two nodes for equality.
10261	Writes the given object to the given output file.
10262	Reads the contents of the given stream into a String.
10263	Creates a new search node.
10264	Generate the trace indent.
10265	Allocate the argument registers for the given expression.
10266	Returns true if the given term is the last term in the argument list.
10267	Returns the majority classification of the given property.
10268	Checks if all the examples have the same classification.
10269	Choose the best property to decide on.
10270	Creates a functor with the given name and arguments.
10271	Creates a new variable with the given name.
10272	This method is called when the user clicks on the form. It will return a redirect to
10273	Gets the element at the specified index in the list.
10274	Set the texture.
10275	Override paint to enable double buffering.
10276	Creates a buffered image of the specified size.
10277	Create a new graphics context for the given width and height.
10278	Create a binary image.
10279	Creates a SGISurface image.
10280	Set the queue search algorithm.
10281	Perform a depth bounded search.
10282	Performs a search in the given start states.
10283	Main method of the program.
10284	Returns a clause for the query.
10285	Consumes and parses a list of terms.
10286	Parses a functor.
10287	Returns a list of the given type.
10288	Returns an array of the terms in this term.
10289	Consumes a VAR token and returns it.
10290	Parses an integer literal.
10291	Consumes and returns a double literal.
10292	Consumes a string literal and returns it.
10293	Reads a Directive from the source.
10294	Interns an operator.
10295	Initializes the built - in operators table.
10296	Consumes the next token of the given kind.
10297	Consume the next token of the given kind.
10298	Bind the session to the current thread.
10299	Rollback all the resources.
10300	Collect all elements from the iterator into the target collection.
10301	Reserve a call point for the given name and length.
10302	Convert a time of day to a ticks value.
10303	Converts ticks to years.
10304	Returns the given ticks with the given number of hours set to the given value.
10305	Returns the ticks with the specified minutes set to the specified ticks.
10306	Returns the ticks with the given seconds set to the given value.
10307	Returns the ticks in the given year.
10308	Returns the ticks in the given month set to the given ticks in the given year.
10309	Returns the ticks with the given date set to the given value.
10310	Calculate the start of the given year in milliseconds.
10311	Returns the month of the year from the given ticks.
10312	Reads a block of bytes from the underlying stream.
10313	Applies the given key to the given entry.
10314	Returns the entry for the given key.
10315	This method is used to handle the case where the entry is already in the hash table.
10316	Rehashes the hash table.
10317	Action handler for the WorkPanel.
10318	Sets whether the next available state is available.
10319	Sets whether the previous available state of the preference is available.
10320	Sets the finished state.
10321	Returns a WAM resolving machine.
10322	Returns an iterator over the set of variables in this scope.
10323	Calculate the expected value for all the symbols.
10324	Calculates the probability of a distribution of the given counts.
10325	Sets the ticks of the date.
10326	Perform the sorting.
10327	Creates a new URL from a string.
10328	Returns the request information as a String.
10329	Returns the headers of the page.
10330	Returns the cookies in the request.
10331	Returns a String with the request parameters.
10332	Returns the request scope as a table.
10333	Returns the page scope as a table.
10334	Returns the session scope as a table.
10335	Returns the application scope.
10336	Returns the principal of the current request.
10337	Writes out the start of the debug table.
10338	Converts a map of values into a HTML table.
10339	Performs a search in the fringe.
10340	Sets the current screen state.
10341	Walk over the terms in the tree.
10342	Compares two nodes for equality.
10343	Updates the internal registers.
10344	Notifies all active listeners of the given changes.
10345	Called when the clause is leaving.
10346	Checks if the given context is a top level functor.
10347	Converts the set of elements to an array.
10348	Sets the arguments for this operator.
10349	Returns the fixity of this transformation.
10350	Returns true if this feature is infix.
10351	Compares this symbol with another symbol.
10352	This method is called when a property of the work flow changes.
10353	Register the work flow controller.
10354	Returns an EnumAttributeFactory for the given class.
10355	Create a component factory from a class name.
10356	Returns the storage cell for this variable.
10357	Returns true if the variable is bound.
10358	Sets the column attributes.
10359	Sets the attributes for a row.
10360	Returns the column attribute at the specified index or null if the index is out of range.
10361	Returns the row attribute at the specified position or null if the row does not exist.
10362	Internal method to insert attributes into the cell.
10363	Creates a new TimeRangeType instance.
10364	Creates a new string pattern type.
10365	Checks if the given value is a valid string.
10366	Creates the initial context for the term.
10367	Updates the registers of this memory layout.
10368	Returns the value of this variable.
10369	Finds the next node in the forward fringe that is the goal state.
10370	Joins the forward and reverse paths.
10371	Get the list of objects from the block and cache it.
10372	Returns a list of properties for the named resource.
10373	Sets the rate of the sleep throttle.
10374	Reads a block of bytes from the underlying stream.
10375	Skips the specified number of bytes.
10376	Gathers all the disjunctions from the given expressions.
10377	Read an int from a byte array at a specific offset
10378	Writes an int value to a byte array at a specific offset in big - endian order.
10379	Writes a 24 bit integer to a byte array at a specific offset in big - endian order
10380	Get a 24 bit int from a byte array at a specific offset
10381	Read a short from a byte array at a specific offset.
10382	Writes a short value to a byte array at a specific offset in big - endian order.
10383	Returns the child tree that matches the given operator.
10384	Returns an iterator over all operators in the tree.
10385	Returns the id of the attribute.
10386	Get the value of the attribute.
10387	Sets the value of this IdAttribute.
10388	Converts a string to an array of strings.
10389	Converts an array of strings to a list of strings with the given delimiter.
10390	Converts a string like my_bar_baz to my_bar_baz
10391	Converts a string to a case - insensitive string.
10392	Returns a string describing the current configuration.
10393	List the handlers.
10394	Resolve a call point for a given symbol.
10395	Set the code address for a function call.
10396	Checks if the given attribute is a sub - category of this one.
10397	Returns the id of the attribute.
10398	Returns the value at the specified level.
10399	Get the last value in the path.
10400	Serializes this hierarchy attribute.
10401	Deserializes this object from a stream.
10402	Computes the manhattan distance of the board.
10403	Returns the remainder of the given long.
10404	Adds a user - readable error message to the error list.
10405	Handle errors.
10406	Writes a string to the output stream.
10407	Classify the given state.
10408	Compares two objects according to the partial ordering.
10409	Returns an iterator over the elements in the list.
10410	Returns the base - 2 logarithm of the given integer.
10411	Convert an integer to the base - 2 logarithm of the value.
10412	Returns the base 10 logarithm of the given integer.
10413	Returns the most significant bit of the number that is less than or equal to the given value
10414	Returns the integer log10 of the given value.
10415	Returns the number of digits in the base 10 logarithm of the given value.
10416	Get the number of characters that would be needed to represent the given 32 - bit integer.
10417	Get the number of characters that would be needed to represent the given 64 - bit value.
10418	Get the number of digits needed to represent the given integer value.
10419	Sets the head of the list of instructions.
10420	Emits the compiled code into the byte code machine.
10421	Sets the current screen.
10422	Evaluate the chain of predicates.
10423	Get the value of a property.
10424	Get the properties for the given key.
10425	Get an iterator for the given key.
10426	Create the array properties.
10427	Sets the rate of the throttle.
10428	Evaluates the given number.
10429	Tries to load the properties from the system properties classpath and the current working directory.
10430	Get the properties from the system property.
10431	Get the properties from the classpath.
10432	Get the properties from the properties resource.
10433	Leave a functor.
10434	Returns the value of this variable.
10435	Sets the substitution of this term.
10436	Creates a queue of nodes.
10437	Clean up the object manager.
10438	Append a logging event to the socket.
10439	Fire a connector thread.
10440	Initialize the printers.
10441	Commits the current transaction.
10442	Rolls back all changes made to this resource.
10443	Request a write operation.
10444	Adds a cached write operation to the cache.
10445	Acquires the global write lock for the given transaction.
10446	Release the global write lock.
10447	Enlist this resource with the session.
10448	Enter the rule set.
10449	Inserts the specified element into this queue waiting if necessary up to the specified wait time for another
10450	Retrieves and returns an element from the queue. If no elements are available after the specified timeout
10451	Puts an element into the queue.
10452	Inserts a new data item into the queue.
10453	Returns the next object in the source.
10454	Get the value of the specified property as a boolean.
10455	Get the property as an Integer.
10456	Returns the property as a Long.
10457	Call a mixin.
10458	Sets the addition visitor.
10459	Backtrack the state of a search node.
10460	Retrieves the code for a given WAM call point.
10461	Executes the given WAM compiled query and extracts the bindings.
10462	Decode a heap value.
10463	Capture the values of the fields in the current object.
10464	Restore the values of the fields in the given object.
10465	Get the value of the specified attribute for the specified class.
10466	Put an attribute value into the cache.
10467	Get the list of all the field names for a given class.
10468	Writes the test runner command lines into a script.
10469	Inserts the specified element at the tail of the queue.
10470	Removes and returns the next element in the queue.
10471	Creates a new search node.
10472	Creates a queue of nodes.
10473	Creates a simple walker that walks the entire tree.
10474	Creates a walker that walks the terms in the tree that match the given unary predicate.
10475	Creates a new Walker that traverses the terms in the tree.
10476	Creates a new TermWalker that walks the terms in the tree that match the given unary
10477	Returns a new TermWalker that walks the terms after the first non - term.
10478	Get properties from input stream
10479	Get the properties from the given file.
10480	Get the properties from the given URL.
10481	Get the properties for the given path
10482	Computes the grid size.
10483	Initializes the font metrics.
10484	Add a PropertyChangeListener to the list of listeners.
10485	Add a PropertyChangeListener to the list of listeners
10486	Remove a PropertyChangeListener.
10487	Fires a property change event to all listeners.
10488	Creates a new DoubleRangeType.
10489	Fade the target color by the given group name.
10490	Show the status bar in the left - vertical direction.
10491	Shows the left bar.
10492	Shows the right vertical bar.
10493	Sanitize radio controls.
10494	Waits for all conditions to pass or until the thread is interrupted.
10495	Waits for the condition to pass.
10496	Writes the command lines into a script.
10497	Appends the classpath elements to the given command line.
10498	Creates a new date range type.
10499	Prints the intro of the program.
10500	Initializes the command line reader.
10501	Evaluates the given sentence.
10502	Evaluates the query.
10503	Get the set of types that can be converted to.
10504	Returns the set of types that can be converted to the given byte.
10505	Get the set of types that can be converted to.
10506	Get the set of types that can be converted to a short.
10507	Get the type data for the given integer.
10508	Get the set of types that can be converted to a long.
10509	Get the set of data types that can be converted to float.
10510	Get the type data for a double.
10511	Get the type data for a string.
10512	Get the set of types that can be converted to.
10513	Convert the data to the specified class.
10514	Sets the value of a tag attribute.
10515	Clear all data up to the given key.
10516	Expands the array to a new size.
10517	Internal method to insert a character into the table.
10518	Compares two nodes by their cost.
10519	Parse the given terms.
10520	Get the operators matching the given name.
10521	Checks if the given candidate operator is one of the given fixities.
10522	Creates a new node from this node and the successor.
10523	Right pads a string to a certain size.
10524	Returns the parsing errors.
10525	Get the options in force.
10526	Returns the usage string for this command line tool.
10527	Adds trailing pairs to the given properties.
10528	Adds the options to the given properties.
10529	Adds an option to the command line options map.
10530	Takes the free arguments from the given properties array and returns them as a system property.
10531	Check if the given argument meets its required format.
10532	Compares the iterators in the provided iterators with the values in the provided iterators.
10533	Returns an enumeration of options for the list of tags.
10534	Returns the command line options for this command.
10535	Sets the stemmer of the slider.
10536	Get the actual stemmer.
10537	Stem a word.
10538	Main method that starts the stemming process.
10539	Creates a new float range type.
10540	Reset the state of the PDL.
10541	Trace the current environment frame.
10542	Trace the current choice frame.
10543	Internal function to call the internal function.
10544	Returns the index of the next stack frame.
10545	backtrack is called when the stack is full
10546	Trailing [ TR ] <- a
10547	Unwind the trail.
10548	Remove all the trail points that are below the current choice point.
10549	Unify a pair of instructions.
10550	Unify a constant.
10551	Print the slot.
10552	Generate a random start state.
10553	Checks if the given puzzle is solvable.
10554	Returns a new state that is a child of this puzzle state with the given operator applied
10555	Returns an iterator of valid operators.
10556	Returns a string representation of the board.
10557	Count the number of swaps that can t be swapped.
10558	Swap the two tiles in the board.
10559	Converts a string of characters into a list of characters.
10560	Converts a character list into a puzzle state.
10561	Format the message to log4j
10562	Convert a log level to a log4j level.
10563	Adds the element to the requeue queue.
10564	Requeues an element to be processed.
10565	Increment the size and count for the given record.
10566	Decrement the size and count for the given record.
10567	Signal on size crossing.
10568	Returns an enumeration of names in the context.
10569	List all bindings in the context with the given name.
10570	Add a property to the environment.
10571	Removes the specified property from the environment.
10572	This method runs a garbage collection method 3 times and 4 times.
10573	Literal is a string with a single node.
10574	Resolve a mixin reference.
10575	Pushes a variable reference onto the value stack.
10576	Sets the maximum height of a row.
10577	Update the max column width.
10578	This method is called when the user clicks on a page in the form.
10579	Makes a new node with the given successor.
10580	Executes the action.
10581	Substitute built - in expressions in a clause.
10582	Initialise the symbol table for the given term.
10583	Checks that the given clause is a top level clause.
10584	Converts a list of expressions to a string.
10585	Evaluates the comparator.
10586	Marks the service as running.
10587	Marks the service as terminating.
10588	Mark the service as terminated.
10589	Inserts the given element into the heap.
10590	Returns the least significant bit in the integer n.
10591	Updates the minimum node.
10592	Compares two nodes.
10593	Inserts a new node into the list.
10594	Restart the cache sweep thread.
10595	Returns a set of objects that match the specified search method.
10596	Returns a collection of objects that match the specified search method.
10597	Finds all solutions using the given search method.
10598	Returns the next element in the sequence.
10599	Restore the values of the given object.
10600	Get the value of a property cached in this memento.
10601	Stores the specified multi typed data.
10602	Stores the specified property value.
10603	Capture the properties of the object.
10604	Removes and returns the first element of the queue.
10605	Convert a modifiers value to a string.
10606	Convert a string to an integer.
10607	Convert a string to a Date object.
10608	Checks if the string is a valid date.
10609	Checks if the string is a time.
10610	Checks if the string is a date time.
10611	Create a TokenSource from a string.
10612	Create a token source for the given file.
10613	Creates a token source for the given input stream.
10614	Checks if the given instruction is a constant.
10615	Checks if the instruction is a void variable.
10616	Checks if the instruction is a non - argument function.
10617	Returns an iterator over the children of this term.
10618	Returns the argument at the given index.
10619	Returns an iterator over the children of this operator.
10620	Returns a string representation of the arguments.
10621	Retrieve summary.
10622	Retrieve records from the database.
10623	Executes the given query builder.
10624	Emits the given code buffer to the given machine.
10625	Set the basic type.
10626	Consult the type checking rules and add them to the knowledge base.
10627	Prints a variable binding.
10628	Expands the result set to a map.
10629	Read the stream and handle any exceptions that occur.
10630	Read the stream.
10631	Returns a new time in milliseconds.
10632	Returns the current time in milliseconds.
10633	Update the track info.
10634	Update the play info.
10635	Called when the player is done playing.
10636	Handles the request for the music usage resource.
10637	Handles a request to start playing a music.
10638	Fire the start music request.
10639	Initializes the parser.
10640	Start the reader thread.
10641	Shutdown the connection.
10642	Reset the parser.
10643	Parse packets.
10644	Process a packet.
10645	Sets the cli option.
10646	Create a chat.
10647	Internalizes this content manager.
10648	Resets the content to the given map.
10649	Sets a property to the given value.
10650	Adds a new filter to the end of the list.
10651	Process the request.
10652	Reset all properties.
10653	Initialize the PacketWriter.
10654	Sends a packet to the server.
10655	Get the next packet from the queue.
10656	Open the stream.
10657	Returns a list of all the information about the type.
10658	Checks if the given descriptor is contained in this class.
10659	Add event life cycle listener.
10660	Shuts down the timer.
10661	Checks if the contents of two regular files are the same.
10662	Clean a direct byte buffer.
10663	Checks if the given entry is valid.
10664	Mask null keys.
10665	Returns true if x == y.
10666	Returns the entry for the given key.
10667	Resizes the table to the specified capacity.
10668	Inserts all of the mappings from the specified map into this map.
10669	Removes the value associated with the specified key.
10670	Removes the entry for the given key.
10671	Removes the given object from the hash table.
10672	Adds an entry to the hash table.
10673	Create a delegate map.
10674	Encode a string as an XML attribute value.
10675	Encodes a byte array into a hex string.
10676	Encodes the given string into Base64.
10677	Encodes a byte array into Base64.
10678	Iterate over the given collection.
10679	Set the controller to be called when a track is selected.
10680	Sets the controller to be called when the jump is about to be made.
10681	Set the controller to be called when the playback of the device changes.
10682	Set the controller to be called when the volume changes.
10683	Broadcast the available playlists.
10684	Handles command resources.
10685	Handles a volume change.
10686	Handles a jump.
10687	Handles the select track command.
10688	Get the thread cache.
10689	Get the request cache.
10690	Get the alt field name.
10691	Returns a new map with only the keys that match the include and not the exclude set.
10692	Returns the path to the shard with the given id.
10693	Adapt the given object to a JCR session.
10694	Invoke a method with the given arguments.
10695	Delete a tree of content.
10696	Updates one or more properties of an entity.
10697	Sets the interval for pinging the server.
10698	Schedule a periodic ping server task.
10699	Adds all options to the parser.
10700	Checks if the given option is used by this command.
10701	Parse the command line.
10702	Prints the usage for the given application.
10703	Parse the command line.
10704	Initialize the connection.
10705	Start TLS negotiation.
10706	Returns the first supported compression handler.
10707	Send the request stream compression.
10708	Start the stream compression process.
10709	Notifies all connection listeners that an error occurs.
10710	Notify all connection listeners that the connection has been successfully re - established.
10711	Registers a SASLMechanism with the given name.
10712	Get the registered SASL mechanisms.
10713	Returns the output plugin behaviour for the given identifications.
10714	Log an INFO message and throwable.
10715	Log an error message and throwable.
10716	Log a message with a prefix and a throwable.
10717	Creates a StartEvent from the given Identification.
10718	Creates a StartEvent from the given Identification.
10719	Notifies all listeners that a string has been written.
10720	Checks if the given resource provides a resource.
10721	Checks if the given source is contained in the list of resources.
10722	Checks if the resource is contained in the given list of resources.
10723	Provide a list of resources.
10724	Get a map from the cache or do a get.
10725	Returns a cache key for the given key space column family and key.
10726	Removes a key from the cache.
10727	Put a new item in the cache.
10728	Returns a map of URI to file paths.
10729	Include a file or directory.
10730	Includes a jar file.
10731	Add a SASL Mech to the list of default SASL Mechs.
10732	Add a collection of SASL Mechs to the SASL.
10733	Create the debug streams.
10734	Activate the proxy.
10735	Registers the standard events.
10736	Registers an event listener.
10737	Registers an event ID with the given description and key.
10738	Attempt to acquire a lock on the given channel.
10739	Unregisters an event key from the event properties file.
10740	Checks if the event can be run.
10741	Creates a new DSE session.
10742	Creates a PlayerError with a given error message.
10743	Start playing the track.
10744	Stop playing this music item.
10745	Send a command to the player.
10746	Creates a playlist request.
10747	Creates a BroadcasterPlaylist from a playlist.
10748	Appends the given parts to the URL.
10749	Adds a query parameter to the URL.
10750	Adds a query parameter to the URL.
10751	Adds a query parameter to the URL.
10752	Add a query parameter to the URL.
10753	Get the playlist from the event model.
10754	Launch button pressed.
10755	Check if the Nakamura server is running.
10756	Check if a resource exists
10757	The browser button has been pressed.
10758	Creates an ImageIcon from a file.
10759	Launch the nakamura.
10760	Sets the values of this array.
10761	Export the data of this level.
10762	Get the value at the given index.
10763	Get the value associated with the specified key.
10764	Returns the value as an integer or the default value if the value is null.
10765	Returns the value of this field as a Double. If the field does not exist it returns
10766	Get the value as a string.
10767	Creates a CommandResource.
10768	Verify that the given command is a valid command.
10769	Verifies that the capabilities are compatible with the given command.
10770	Verifies that the given command is valid against the given capabilities.
10771	Executes a batch of SQL statements asynchronously.
10772	Returns a set of all subclasses of the given class.
10773	Returns a set of all subclasses of the given class.
10774	Search for classes in the given location.
10775	Search for classes in the given directory.
10776	Search for classes in a jar file.
10777	Returns a list of all resources in this resource.
10778	Returns the number of elements in the map.
10779	Process a packet.
10780	Get the volume for the given event.
10781	Error for RSM pages.
10782	Creates an error request with the given message and condition.
10783	Checks if the Identifiable object is the target of the EventModel.
10784	Set whether or not the login period should be enabled.
10785	Decorate a Set with a synchronized Set.
10786	Sets the name of the user.
10787	Update the state of the subscription.
10788	Returns a collection of roster groups that contain this entry.
10789	Append the RSM element to the query element.
10790	Parse the RSM query element.
10791	Filters the list of objects based on the RSM response.
10792	Creates a LeavingEvent with the given source and descriptors.
10793	Reload roster.
10794	Create a roster entry.
10795	Returns a collection of roster entries.
10796	Get the presence of a resource.
10797	Set the offline presences.
10798	Fire roster changed events.
10799	Sets the digest of the connection.
10800	Generate a music resource.
10801	Creates a PlayerRequest object.
10802	Get the time passed.
10803	Register a listener to be notified when the properties are updated.
10804	Initializes the properties file.
10805	Reload the properties file.
10806	Parse a stream error element.
10807	Parse mechanism elements.
10808	Parse compression methods.
10809	Parses a packet extension.
10810	Decode a string value to a Java object.
10811	Verify that the event is a play request and that the player is the target of the playlist
10812	Get the playback state from the resource.
10813	Get the secret key for the given subdomain.
10814	Check if multiple domains are allowed.
10815	Puts a new value into the cache.
10816	Returns a set of keys in this map.
10817	Returns a copy of the values in this map.
10818	Purges the given reference from the hash table.
10819	Returns the entry for the given key.
10820	Returns the hash code of the given entry.
10821	Creates a new reference entry.
10822	Control events.
10823	Sets the presence state of the vague.
10824	Updates the vague.
10825	Delivers a message to all the listeners.
10826	Generate the script.
10827	Initialize the output directory.
10828	Load a property file.
10829	Write the given ST to the given file.
10830	Get the progress of the event.
10831	Decorate a collection with a synchronized collection.
10832	Discover the hosts in the network.
10833	Get the configuration of the Fire REST endpoint.
10834	Gets the value of the threadPool property.
10835	Creates a StopMusic request from the source and target Identifications.
10836	Verifies that the event is a stop music event and that the player is the target of the
10837	Get a DSE cluster.
10838	Add a connection listener to the list of listeners.
10839	Add a packet listener to receive packets.
10840	Add a packet listener to be notified when a packet is sent.
10841	Notify the listeners of the packet sending.
10842	Adds a packet interceptor to the interceptor chain.
10843	Fire interceptor listeners for a packet.
10844	Converts a property value to a Java object.
10845	Called when the connection to the server has been lost.
10846	Get the current thread id.
10847	Checks if the given node is valid.
10848	Returns the key associated with the given value.
10849	Get the value at the given index.
10850	Lookup a valid node.
10851	Lookup the node with the given data at the given index.
10852	Compares two objects.
10853	Returns the least node in the tree starting at the given index.
10854	Returns the most node in the tree starting at the given index.
10855	Returns the next greater than or equal to the given index in the tree.
10856	Returns the most valid node starting from the given node starting at the given index.
10857	Returns the least valid node in the tree starting from the given node.
10858	Copy a color from one node to another.
10859	Checks if the node is red.
10860	Checks if the node is black or not.
10861	Returns the parent node at the given index.
10862	Returns the parent node at the given index.
10863	Returns the right child of the given node.
10864	Returns the left child of the given node.
10865	Rotate the left child of the given node.
10866	Rotate the right child of the node at the given index.
10867	Insert a node into the tree in red - black order.
10868	Deletes a node from the tree.
10869	Checks that the given object is not null and is not a Comparable.
10870	Inserts a new value into the Map.
10871	Checks if the given key is present in the cache.
10872	Checks if the given value is contained in the cache.
10873	Get the value associated with the specified key.
10874	Remove the value associated with the specified key.
10875	Clear the map.
10876	Returns a set of keys in the map.
10877	Returns a collection of the values in this map.
10878	Returns a set of all entries in the map.
10879	Copy all entries from this bidirectional tree into the new map.
10880	Delete all expired entries.
10881	Cull the cache.
10882	Activate the trusted server.
10883	Get the player request for the given playlist.
10884	Initializes a roster store.
10885	Opens a roster store.
10886	Scan for a range of IP addresses.
10887	Returns the first subnet of the given address.
10888	Export the data for the album.
10889	Import the track info from a hashmap.
10890	Adds all applications from the given set.
10891	Executes an application.
10892	Prints the list of all the classes.
10893	Prints the usage information.
10894	Main method of the program.
10895	Creates a MuteEvent from the source and target Identifications.
10896	Creates a MuteEvent from an Identification.
10897	Get the schema with the given name.
10898	Write the given lines to the given file.
10899	Checks if the application is in an executable JAR.
10900	Adds an option to the command line.
10901	Get the schema of the object.
10902	Get the field with the given name.
10903	Returns the package name from a jar entry.
10904	Map the content to the values.
10905	Creates a new event listener.
10906	Set the state of the iteration.
10907	Iterate over the given collection.
10908	Perform an iteration.
10909	Get track info from the event model.
10910	Export the data for this record.
10911	Import a resource into the progress.
10912	Creates a buffered image with the given lines.
10913	Get image from url.
10914	Get the content of the given URL as a JSON string.
10915	Reverses the keys of the source map.
10916	Returns the result of the multiplication of the two sets.
10917	Start the thread.
10918	Return this object to the pool.
10919	Creates an EndedEvent from an Identification.
10920	Get the current track.
10921	Update the track info in the playlist.
10922	Shuffle the playlist.
10923	Verify that the capabilities are compatible with the playback modes.
10924	Export the data for the playback.
10925	Escapes a string for use in an XML document.
10926	Process a challenge received from the server.
10927	Serializes the object to a JSON stream.
10928	The main loop of the output processor.
10929	Handle an event.
10930	Join all queues.
10931	Set a property to a given value.
10932	Remove a property.
10933	Adds a principal to the list of principals.
10934	Remove a principal from the list of principals.
10935	Called when the root window is closed.
10936	This method is called when the user hit the response. It will return a list of descriptors
10937	Called when an event is received.
10938	Returns true if the resource is permanent.
10939	Sets the name of the group.
10940	Returns true if the map contains the specified key.
10941	Returns true if the hash table contains the specified value.
10942	Associates the specified value with the specified key. If the key already exists the old value is
10943	Removes all entries from the hash table.
10944	Hash the given key.
10945	Checks if two keys are equal.
10946	Checks if two values are equal.
10947	Ensures that the specified capacity is available.
10948	Calculates the new capacity for the given proposed capacity.
10949	Creates an iterator for the entries in the set.
10950	Load a row from a binary stream.
10951	Registers the module.
10952	Initialize the add - on.
10953	Notifies all connection listeners that a reconnection has failed.
10954	Notifies all connection listeners that the connection attempt should be retried in the given number of seconds
